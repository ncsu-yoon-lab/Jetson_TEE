
t186ref/build-t186/user_tasks/app/sample/ashish_test_ta2/ashish_test_ta2.syms.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <exit>:
/* HACK: needed temporarily until the syscalls file gets the
 * __NO_RETURN annotation */
__NO_RETURN long exit_group (void);

__NO_RETURN void exit(int status)
{
    8000:	e92d4010 	push	{r4, lr}
	__cxa_finalize();
    8004:	eb0000c0 	bl	830c <__cxa_finalize>
	exit_group();
    8008:	eb0009c7 	bl	a72c <exit_group>

0000800c <main>:
    	uevent_t uevt;
    	handle_t handle_port;

	//static const uuid_t ashish_ta_uuid2 = IPC_ASHISH_TA_2_UUID;

	TLOGE("Ashish: Starting test Trusted Application - 2\n");
    800c:	e30b2fbc 	movw	r2, #49084	; 0xbfbc
    8010:	e30b1fcc 	movw	r1, #49100	; 0xbfcc
{
    8014:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	TLOGE("Ashish: Starting test Trusted Application - 2\n");
    8018:	e3402000 	movt	r2, #0
{
    801c:	e24dd02c 	sub	sp, sp, #44	; 0x2c
	TLOGE("Ashish: Starting test Trusted Application - 2\n");
    8020:	e3401000 	movt	r1, #0
    8024:	e3a03044 	mov	r3, #68	; 0x44
    8028:	e59f017c 	ldr	r0, [pc, #380]	; 81ac <main+0x1a0>
    802c:	eb000e54 	bl	b984 <fprintf>

	/* rc1 allows connections from secure world */
	rc = port_create(TEST_PORT, 1, 1024, IPC_PORT_ALLOW_TA_CONNECT | IPC_PORT_ALLOW_NS_CONNECT);
    8030:	e30c0004 	movw	r0, #49156	; 0xc004
    8034:	e3a02b01 	mov	r2, #1024	; 0x400
    8038:	e3a03003 	mov	r3, #3
    803c:	e3400000 	movt	r0, #0
    8040:	e3a01001 	mov	r1, #1
    8044:	eb0009bb 	bl	a738 <port_create>


	if (rc < 0) {
    8048:	e2504000 	subs	r4, r0, #0
        	TLOGE("failed (%d) to create port for test TA2 for secure world\n", rc);
    804c:	e30b2fbc 	movw	r2, #49084	; 0xbfbc
	if (rc < 0) {
    8050:	aa000009 	bge	807c <main+0x70>
        	TLOGE("failed (%d) to create port for test TA2 for secure world\n", rc);
    8054:	e30c1028 	movw	r1, #49192	; 0xc028
    8058:	e58d4000 	str	r4, [sp]
    805c:	e3402000 	movt	r2, #0
    8060:	e3401000 	movt	r1, #0
    8064:	e3a0304b 	mov	r3, #75	; 0x4b
    8068:	e59f013c 	ldr	r0, [pc, #316]	; 81ac <main+0x1a0>
    806c:	eb000e44 	bl	b984 <fprintf>

    	/* wait infinitely long absent any messages */
    	//rc = wait(handle, &uevt, INFINITE_TIME);
    	
	return 0; /* shouldn't get here */
}
    8070:	e1a00004 	mov	r0, r4
    8074:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8078:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    TLOGE("ashish_test_ta2 successfully connected with ashish_test_ta on port - %d\n", evnt->handle);
    807c:	e59f7128 	ldr	r7, [pc, #296]	; 81ac <main+0x1a0>
	TLOGE("Created port:%d for ashish_test_ta2 application\n", rc);
    8080:	e30c106c 	movw	r1, #49260	; 0xc06c
    8084:	e3402000 	movt	r2, #0
    8088:	e3401000 	movt	r1, #0
    808c:	e3a03050 	mov	r3, #80	; 0x50
    8090:	e58d4000 	str	r4, [sp]
    8094:	e1a00007 	mov	r0, r7
    TLOGE("ashish_test_ta2 successfully connected with ashish_test_ta on port - %d\n", evnt->handle);
    8098:	e30c614c 	movw	r6, #49484	; 0xc14c
	TLOGE("Created port:%d for ashish_test_ta2 application\n", rc);
    809c:	eb000e38 	bl	b984 <fprintf>
    TLOGE("ashish_test_ta2 successfully connected with ashish_test_ta on port - %d\n", evnt->handle);
    80a0:	e3406000 	movt	r6, #0
	TLOGE("Waiting for any connection\n");
    80a4:	e30b2fbc 	movw	r2, #49084	; 0xbfbc
    80a8:	e30c10a8 	movw	r1, #49320	; 0xc0a8
    80ac:	e3402000 	movt	r2, #0
    80b0:	e3401000 	movt	r1, #0
    80b4:	e3a03054 	mov	r3, #84	; 0x54
    80b8:	e1a00007 	mov	r0, r7
    TLOGE("ashish_test_ta2 successfully connected with ashish_test_ta on port - %d\n", evnt->handle);
    80bc:	e1a05002 	mov	r5, r2
	TLOGE("Waiting for any connection\n");
    80c0:	eb000e2f 	bl	b984 <fprintf>
		uevt.handle = INVALID_IPC_HANDLE;
    80c4:	e3e00000 	mvn	r0, #0
    		uevt.event = 0;
    80c8:	e3a03000 	mov	r3, #0
    		rc = wait(handle_port, &uevt, INFINITE_TIME);
    80cc:	e1a02000 	mov	r2, r0
		uevt.handle = INVALID_IPC_HANDLE;
    80d0:	e58d000c 	str	r0, [sp, #12]
    		rc = wait(handle_port, &uevt, INFINITE_TIME);
    80d4:	e28d100c 	add	r1, sp, #12
    80d8:	e1a00004 	mov	r0, r4
    		uevt.event = 0;
    80dc:	e58d3010 	str	r3, [sp, #16]
    		uevt.cookie = NULL;
    80e0:	e58d3014 	str	r3, [sp, #20]
    		rc = wait(handle_port, &uevt, INFINITE_TIME);
    80e4:	eb000999 	bl	a750 <wait>
    		if (rc == 0) {
    80e8:	e3500000 	cmp	r0, #0
    80ec:	1a000011 	bne	8138 <main+0x12c>
    (evnt->event & IPC_HANDLE_POLL_MSG) ||
    80f0:	e59d3010 	ldr	r3, [sp, #16]
  if ((evnt->event & IPC_HANDLE_POLL_ERROR) ||
    80f4:	e313001e 	tst	r3, #30
    80f8:	1a000020 	bne	8180 <main+0x174>
  if (evnt->event & IPC_HANDLE_POLL_READY) {
    80fc:	e3130001 	tst	r3, #1
    8100:	0affffef 	beq	80c4 <main+0xb8>
    int rc = accept(evnt->handle, &peer_uuid);
    8104:	e28d1018 	add	r1, sp, #24
    8108:	e59d000c 	ldr	r0, [sp, #12]
    810c:	eb00098c 	bl	a744 <accept>
    if (rc < 0) {
    8110:	e3500000 	cmp	r0, #0
      	TLOGE("failed (%d) to accept on port - ashish_test_ta2 - %d\n",
    8114:	e59dc00c 	ldr	ip, [sp, #12]
    if (rc < 0) {
    8118:	ba00000f 	blt	815c <main+0x150>
    TLOGE("ashish_test_ta2 successfully connected with ashish_test_ta on port - %d\n", evnt->handle);
    811c:	e3a03037 	mov	r3, #55	; 0x37
    8120:	e1a02005 	mov	r2, r5
    8124:	e1a01006 	mov	r1, r6
    8128:	e1a00007 	mov	r0, r7
    812c:	e58dc000 	str	ip, [sp]
    8130:	eb000e13 	bl	b984 <fprintf>
    8134:	eaffffe2 	b	80c4 <main+0xb8>
      			TLOGE("wait returned (%d)\n", rc);
    8138:	e30b2fbc 	movw	r2, #49084	; 0xbfbc
    813c:	e30c11a0 	movw	r1, #49568	; 0xc1a0
    8140:	e58d0000 	str	r0, [sp]
    8144:	e3402000 	movt	r2, #0
    8148:	e3401000 	movt	r1, #0
    814c:	e3a03063 	mov	r3, #99	; 0x63
    8150:	e59f0054 	ldr	r0, [pc, #84]	; 81ac <main+0x1a0>
    8154:	eb000e0a 	bl	b984 <fprintf>
      			abort();
    8158:	eb000037 	bl	823c <abort>
      	TLOGE("failed (%d) to accept on port - ashish_test_ta2 - %d\n",
    815c:	e30c110c 	movw	r1, #49420	; 0xc10c
    8160:	e58d0000 	str	r0, [sp]
    8164:	e3401000 	movt	r1, #0
    8168:	e3a03033 	mov	r3, #51	; 0x33
    816c:	e1a02005 	mov	r2, r5
    8170:	e58dc004 	str	ip, [sp, #4]
    8174:	e1a00007 	mov	r0, r7
    8178:	eb000e01 	bl	b984 <fprintf>
    817c:	eaffffd0 	b	80c4 <main+0xb8>
    TLOGE("error event (0x%x) for port - ashish_test_ta2 - (%d)\n",
    8180:	e59d000c 	ldr	r0, [sp, #12]
    8184:	e30b2fbc 	movw	r2, #49084	; 0xbfbc
    8188:	e30c10cc 	movw	r1, #49356	; 0xc0cc
    818c:	e58d3000 	str	r3, [sp]
    8190:	e3402000 	movt	r2, #0
    8194:	e3401000 	movt	r1, #0
    8198:	e58d0004 	str	r0, [sp, #4]
    819c:	e3a0302b 	mov	r3, #43	; 0x2b
    81a0:	e59f0004 	ldr	r0, [pc, #4]	; 81ac <main+0x1a0>
    81a4:	eb000df6 	bl	b984 <fprintf>
    	abort();
    81a8:	eb000023 	bl	823c <abort>
    81ac:	0000d048 	.word	0x0000d048

000081b0 <__guard_setup>:

#include <rand.h>

unsigned int __stack_chk_guard = 0xaff;

static void __attribute__((constructor)) __guard_setup (void){
    81b0:	e92d4010 	push	{r4, lr}
        /* 
         * included for future use. rand.h must be seeded and -fstack_protector must be disabled in
         * stack contexts preceeding this call.
         */
  	if ( __stack_chk_guard == 0U )
    81b4:	e30d4078 	movw	r4, #53368	; 0xd078
    81b8:	e3404000 	movt	r4, #0
    81bc:	e5943000 	ldr	r3, [r4]
    81c0:	e3530000 	cmp	r3, #0
    81c4:	18bd8010 	popne	{r4, pc}
  		__stack_chk_guard = rand();
    81c8:	eb000de0 	bl	b950 <rand>
    81cc:	e5840000 	str	r0, [r4]
}
    81d0:	e8bd8010 	pop	{r4, pc}

000081d4 <_start>:

__attribute__ ((section (".bss")))
void *__dso_handle = (void *) 0;

/* Arguments are supplied in memory pointed by r0 */
void _start(void *args) {
    81d4:	e92d4800 	push	{fp, lr}
    81d8:	e28db004 	add	fp, sp, #4
    81dc:	e24dd018 	sub	sp, sp, #24
    81e0:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
  structors_array_t array;
  array.preinit_array = &__PREINIT_ARRAY__;
    81e4:	e30d3000 	movw	r3, #53248	; 0xd000
    81e8:	e3403000 	movt	r3, #0
    81ec:	e50b3010 	str	r3, [fp, #-16]
  array.init_array = &__INIT_ARRAY__;
    81f0:	e30d3008 	movw	r3, #53256	; 0xd008
    81f4:	e3403000 	movt	r3, #0
    81f8:	e50b300c 	str	r3, [fp, #-12]
  array.fini_array = (&__FINI_ARRAY__)[0] ? &__FINI_ARRAY__ : 0;
    81fc:	e30d3014 	movw	r3, #53268	; 0xd014
    8200:	e3403000 	movt	r3, #0
    8204:	e5933000 	ldr	r3, [r3]
    8208:	e3530000 	cmp	r3, #0
    820c:	0a000002 	beq	821c <_start+0x48>
    8210:	e30d3014 	movw	r3, #53268	; 0xd014
    8214:	e3403000 	movt	r3, #0
    8218:	ea000000 	b	8220 <_start+0x4c>
    821c:	e3a03000 	mov	r3, #0
    8220:	e50b3008 	str	r3, [fp, #-8]

  __libc_init(args, &main, &array);
    8224:	e24b3010 	sub	r3, fp, #16
    8228:	e1a02003 	mov	r2, r3
    822c:	e308100c 	movw	r1, #32780	; 0x800c
    8230:	e3401000 	movt	r1, #0
    8234:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    8238:	eb000905 	bl	a654 <__libc_init>

0000823c <abort>:

#include <stdlib.h>
#include <trusty_std.h>

void abort(void)
{
    823c:	e92d4010 	push	{r4, lr}
	exit(1);
    8240:	e3a00001 	mov	r0, #1
    8244:	ebffff6d 	bl	8000 <exit>

00008248 <__cxa_atexit>:
 *
 *	http://www.codesourcery.com/cxx-abi/abi.html#dso-dtor
 */
int
__cxa_atexit(void (*func)(void *), void *arg)
{
    8248:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	struct atexit *p = __atexit;
    824c:	e30d53bc 	movw	r5, #54204	; 0xd3bc
    8250:	e3405000 	movt	r5, #0
{
    8254:	e1a07000 	mov	r7, r0
    8258:	e1a06001 	mov	r6, r1
	struct atexit *p = __atexit;
    825c:	e5954000 	ldr	r4, [r5]
	struct atexit_fn *fnp;
	int size = 64;
	int ret = -1;

	if (p != NULL) {
    8260:	e3540000 	cmp	r4, #0
    8264:	0a000004 	beq	827c <__cxa_atexit+0x34>
		if (p->ind + 1 >= p->max)
    8268:	e5943004 	ldr	r3, [r4, #4]
    826c:	e5941008 	ldr	r1, [r4, #8]
    8270:	e2832001 	add	r2, r3, #1
    8274:	e1520001 	cmp	r2, r1
    8278:	ba000014 	blt	82d0 <__cxa_atexit+0x88>
			p = NULL;
	}
	if (p == NULL) {
		p = malloc(size);
    827c:	e3a00040 	mov	r0, #64	; 0x40
    8280:	eb0000e1 	bl	860c <malloc>
		if (!p)
    8284:	e2504000 	subs	r4, r0, #0
    8288:	0a00001d 	beq	8304 <__cxa_atexit+0xbc>
			goto done;
		if (__atexit == NULL) {
    828c:	e5951000 	ldr	r1, [r5]
    8290:	e3510000 	cmp	r1, #0
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
			p->ind = 1;
		} else
			p->ind = 0;
    8294:	13a03000 	movne	r3, #0
    8298:	15843004 	strne	r3, [r4, #4]
		if (__atexit == NULL) {
    829c:	0a000011 	beq	82e8 <__cxa_atexit+0xa0>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
		    sizeof(p->fns[0]);
		p->next = __atexit;
		__atexit = p;
		if (__atexit_invalid)
    82a0:	e30d201c 	movw	r2, #53276	; 0xd01c
		p->next = __atexit;
    82a4:	e5841000 	str	r1, [r4]
		if (__atexit_invalid)
    82a8:	e3402000 	movt	r2, #0
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    82ac:	e3a01006 	mov	r1, #6
		if (__atexit_invalid)
    82b0:	e5923000 	ldr	r3, [r2]
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    82b4:	e5841008 	str	r1, [r4, #8]
		__atexit = p;
    82b8:	e5854000 	str	r4, [r5]
		if (__atexit_invalid)
    82bc:	e3530000 	cmp	r3, #0
    82c0:	e5943004 	ldr	r3, [r4, #4]
			__atexit_invalid = 0;
    82c4:	13a01000 	movne	r1, #0
    82c8:	15821000 	strne	r1, [r2]
    82cc:	e2832001 	add	r2, r3, #1
    82d0:	e0843183 	add	r3, r4, r3, lsl #3
	}
	fnp = &p->fns[p->ind++];
    82d4:	e5842004 	str	r2, [r4, #4]
	fnp->fn_ptr.cxa_func = func;
	fnp->fn_arg = arg;
	ret = 0;
    82d8:	e3a00000 	mov	r0, #0
	fnp->fn_ptr.cxa_func = func;
    82dc:	e583700c 	str	r7, [r3, #12]
	fnp->fn_arg = arg;
    82e0:	e5836010 	str	r6, [r3, #16]
    82e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
    82e8:	e3a02008 	mov	r2, #8
    82ec:	e284000c 	add	r0, r4, #12
    82f0:	eb000db2 	bl	b9c0 <memset>
			p->ind = 1;
    82f4:	e3a03001 	mov	r3, #1
    82f8:	e5951000 	ldr	r1, [r5]
    82fc:	e5843004 	str	r3, [r4, #4]
    8300:	eaffffe6 	b	82a0 <__cxa_atexit+0x58>
	int ret = -1;
    8304:	e3e00000 	mvn	r0, #0
done:
	return (ret);
}
    8308:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000830c <__cxa_finalize>:
	struct atexit *p, *q;
	struct atexit_fn fn;
	int n;
	static int call_depth;

	if (__atexit_invalid)
    830c:	e30d301c 	movw	r3, #53276	; 0xd01c
{
    8310:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	if (__atexit_invalid)
    8314:	e3403000 	movt	r3, #0
    8318:	e5936000 	ldr	r6, [r3]
    831c:	e3560000 	cmp	r6, #0
    8320:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		return;

	call_depth++;

	for (p = __atexit; p != NULL; p = p->next) {
    8324:	e30d93bc 	movw	r9, #54204	; 0xd3bc
	call_depth++;
    8328:	e30d80bc 	movw	r8, #53436	; 0xd0bc
	for (p = __atexit; p != NULL; p = p->next) {
    832c:	e3409000 	movt	r9, #0
	call_depth++;
    8330:	e3408000 	movt	r8, #0
	for (p = __atexit; p != NULL; p = p->next) {
    8334:	e5997000 	ldr	r7, [r9]
	call_depth++;
    8338:	e5983000 	ldr	r3, [r8]
	for (p = __atexit; p != NULL; p = p->next) {
    833c:	e3570000 	cmp	r7, #0
	call_depth++;
    8340:	e2833001 	add	r3, r3, #1
    8344:	e5883000 	str	r3, [r8]
	for (p = __atexit; p != NULL; p = p->next) {
    8348:	0a00000f 	beq	838c <__cxa_finalize+0x80>
		for (n = p->ind; --n >= 0;) {
    834c:	e5975004 	ldr	r5, [r7, #4]
    8350:	e0874185 	add	r4, r7, r5, lsl #3
    8354:	ea000006 	b	8374 <__cxa_finalize+0x68>
			if (p->fns[n].fn_ptr.cxa_func == NULL)
    8358:	e5943004 	ldr	r3, [r4, #4]
    835c:	e3530000 	cmp	r3, #0
    8360:	0a000002 	beq	8370 <__cxa_finalize+0x64>

			/*
			 * Mark handler as having been already called to avoid
			 * dupes and loops, then call the appropriate function.
			 */
			fn = p->fns[n];
    8364:	e5940008 	ldr	r0, [r4, #8]
			p->fns[n].fn_ptr.cxa_func = NULL;
    8368:	e5846004 	str	r6, [r4, #4]
                        (*fn.fn_ptr.cxa_func)(fn.fn_arg);
    836c:	e12fff33 	blx	r3
    8370:	e2444008 	sub	r4, r4, #8
		for (n = p->ind; --n >= 0;) {
    8374:	e2555001 	subs	r5, r5, #1
    8378:	5afffff6 	bpl	8358 <__cxa_finalize+0x4c>
	for (p = __atexit; p != NULL; p = p->next) {
    837c:	e5977000 	ldr	r7, [r7]
    8380:	e3570000 	cmp	r7, #0
    8384:	1afffff0 	bne	834c <__cxa_finalize+0x40>
    8388:	e5983000 	ldr	r3, [r8]
	/*
	 * If called via exit(), unmap the pages since we have now run
	 * all the handlers.  We defer this until calldepth == 0 so that
	 * we don't unmap things prematurely if called recursively.
	 */
	if (--call_depth == 0) {
    838c:	e2433001 	sub	r3, r3, #1
    8390:	e3530000 	cmp	r3, #0
    8394:	e5883000 	str	r3, [r8]
    8398:	18bd87f0 	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
		for (p = __atexit; p != NULL; ) {
    839c:	e5990000 	ldr	r0, [r9]
    83a0:	e3500000 	cmp	r0, #0
    83a4:	0a000003 	beq	83b8 <__cxa_finalize+0xac>
			q = p;
			p = p->next;
    83a8:	e5904000 	ldr	r4, [r0]
			free(q);
    83ac:	eb00066c 	bl	9d64 <free>
		for (p = __atexit; p != NULL; ) {
    83b0:	e2540000 	subs	r0, r4, #0
    83b4:	1afffffb 	bne	83a8 <__cxa_finalize+0x9c>
		}
		__atexit = NULL;
    83b8:	e3a03000 	mov	r3, #0
    83bc:	e5893000 	str	r3, [r9]
	}
}
    83c0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000083c4 <sbrk>:

static char *__libc_brk;

#define SBRK_ALIGN	32
static void *sbrk(ptrdiff_t increment)
{
    83c4:	e92d4070 	push	{r4, r5, r6, lr}
	char *new_brk;
	char *start;
	char *end;

	if (!__libc_brk)
    83c8:	e30d60c0 	movw	r6, #53440	; 0xd0c0
    83cc:	e3406000 	movt	r6, #0
{
    83d0:	e1a04000 	mov	r4, r0
	if (!__libc_brk)
    83d4:	e5960000 	ldr	r0, [r6]
    83d8:	e3500000 	cmp	r0, #0
    83dc:	0a00000b 	beq	8410 <sbrk+0x4c>
		__libc_brk = (char *)brk(0);

	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    83e0:	e280001f 	add	r0, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    83e4:	e284401f 	add	r4, r4, #31
	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    83e8:	e3c0501f 	bic	r5, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    83ec:	e3c4401f 	bic	r4, r4, #31
    83f0:	e0854004 	add	r4, r5, r4

	new_brk = (char *)brk((uint32_t)end);
    83f4:	e1a00004 	mov	r0, r4
    83f8:	eb0008c8 	bl	a720 <brk>
	if (new_brk < end)
    83fc:	e1540000 	cmp	r4, r0
		return (void *)-1;
    8400:	83e05000 	mvnhi	r5, #0

	__libc_brk = new_brk;
    8404:	95860000 	strls	r0, [r6]
	return start;
}
    8408:	e1a00005 	mov	r0, r5
    840c:	e8bd8070 	pop	{r4, r5, r6, pc}
		__libc_brk = (char *)brk(0);
    8410:	eb0008c2 	bl	a720 <brk>
    8414:	e5860000 	str	r0, [r6]
    8418:	eafffff0 	b	83e0 <sbrk+0x1c>

0000841c <init_mparams.part.2>:
static void post_fork_parent(void) { RELEASE_LOCK(&(gm)->mutex); }
static void post_fork_child(void)  { INITIAL_LOCK(&(gm)->mutex); }
#endif /* LOCK_AT_FORK */

/* Initialize mparams */
static int init_mparams(void) {
    841c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
      magic = (size_t)&magic ^ (size_t)0x55555555U;
#else
      magic = (size_t)(time(0) ^ (size_t)0x55555555U);
#endif
      magic |= (size_t)8U;    /* ensure nonzero */
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8420:	e3052550 	movw	r2, #21840	; 0x5550
static int init_mparams(void) {
    8424:	e24dd00c 	sub	sp, sp, #12
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8428:	e3452555 	movt	r2, #21845	; 0x5555
      magic = (size_t)&magic ^ (size_t)0x55555555U;
    842c:	e1a0100d 	mov	r1, sp
    mparams.granularity = gsize;
    8430:	e30d329c 	movw	r3, #53916	; 0xd29c
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    8434:	e0222001 	eor	r2, r2, r1
    mparams.granularity = gsize;
    8438:	e3403000 	movt	r3, #0
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    843c:	e3822008 	orr	r2, r2, #8
    gm->mflags = mparams.default_mflags;
    8440:	e30d10c4 	movw	r1, #53444	; 0xd0c4
    mparams.granularity = gsize;
    8444:	e3a00a01 	mov	r0, #4096	; 0x1000
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    8448:	e3e0e000 	mvn	lr, #0
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    844c:	e3a0c602 	mov	ip, #2097152	; 0x200000
    gm->mflags = mparams.default_mflags;
    8450:	e3401000 	movt	r1, #0
      /* Until memory modes commonly available, use volatile-write */
      (*(volatile size_t *)(&(mparams.magic))) = magic;
    8454:	e5832000 	str	r2, [r3]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    8458:	e3a02000 	mov	r2, #0
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    845c:	e583e00c 	str	lr, [r3, #12]
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    8460:	e583c010 	str	ip, [r3, #16]
    mparams.granularity = gsize;
    8464:	e5830008 	str	r0, [r3, #8]
    mparams.page_size = psize;
    8468:	e5830004 	str	r0, [r3, #4]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    846c:	e5832014 	str	r2, [r3, #20]
    gm->mflags = mparams.default_mflags;
    8470:	e58121bc 	str	r2, [r1, #444]	; 0x1bc
    }
  }

  RELEASE_MALLOC_GLOBAL_LOCK();
  return 1;
}
    8474:	e28dd00c 	add	sp, sp, #12
    8478:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000847c <sys_trim.constprop.7>:
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
                       (size_t) nsegs : (size_t) MAX_RELEASE_CHECK_RATE);
  return released;
}

static int sys_trim(mstate m, size_t pad) {
    847c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
  size_t released = 0;
  ensure_initialization();
    8480:	e30d529c 	movw	r5, #53916	; 0xd29c
    8484:	e3405000 	movt	r5, #0
static int sys_trim(mstate m, size_t pad) {
    8488:	e1a04000 	mov	r4, r0
  ensure_initialization();
    848c:	e5953000 	ldr	r3, [r5]
    8490:	e3530000 	cmp	r3, #0
    8494:	0a000030 	beq	855c <sys_trim.constprop.7+0xe0>
  if (pad < MAX_REQUEST && is_initialized(m)) {
    8498:	e3740041 	cmn	r4, #65	; 0x41
    849c:	8a00002c 	bhi	8554 <sys_trim.constprop.7+0xd8>
    84a0:	e30d60c4 	movw	r6, #53444	; 0xd0c4
    84a4:	e3406000 	movt	r6, #0
    84a8:	e5962018 	ldr	r2, [r6, #24]
    84ac:	e3520000 	cmp	r2, #0
    84b0:	0a000027 	beq	8554 <sys_trim.constprop.7+0xd8>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */

    if (m->topsize > pad) {
    84b4:	e596100c 	ldr	r1, [r6, #12]
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
    84b8:	e2840028 	add	r0, r4, #40	; 0x28
    if (m->topsize > pad) {
    84bc:	e1500001 	cmp	r0, r1
    84c0:	2a000020 	bcs	8548 <sys_trim.constprop.7+0xcc>
  msegmentptr sp = &m->seg;
    84c4:	e2864d07 	add	r4, r6, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
    84c8:	e5943000 	ldr	r3, [r4]
    84cc:	e1520003 	cmp	r2, r3
    84d0:	3a000003 	bcc	84e4 <sys_trim.constprop.7+0x68>
    84d4:	e594c004 	ldr	ip, [r4, #4]
    84d8:	e083300c 	add	r3, r3, ip
    84dc:	e1520003 	cmp	r2, r3
    84e0:	3a000004 	bcc	84f8 <sys_trim.constprop.7+0x7c>
    if ((sp = sp->next) == 0)
    84e4:	e5944008 	ldr	r4, [r4, #8]
    84e8:	e3540000 	cmp	r4, #0
    84ec:	1afffff5 	bne	84c8 <sys_trim.constprop.7+0x4c>
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
    84f0:	e594300c 	ldr	r3, [r4, #12]
    84f4:	e7f000f0 	udf	#0
    84f8:	e594300c 	ldr	r3, [r4, #12]
    84fc:	e3130008 	tst	r3, #8
    8500:	1a000010 	bne	8548 <sys_trim.constprop.7+0xcc>
      size_t unit = mparams.granularity;
    8504:	e5953008 	ldr	r3, [r5, #8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    8508:	e0817003 	add	r7, r1, r3
    850c:	e2477001 	sub	r7, r7, #1
    8510:	e0477000 	sub	r7, r7, r0
    8514:	e737f317 	udiv	r7, r7, r3
    8518:	e2477001 	sub	r7, r7, #1
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
          ACQUIRE_MALLOC_GLOBAL_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
    851c:	e3a00000 	mov	r0, #0
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    8520:	e0070793 	mul	r7, r3, r7
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
    8524:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
    8528:	82637102 	rsbhi	r7, r3, #-2147483648	; 0x80000000
            char* old_br = (char*)(CALL_MORECORE(0));
    852c:	ebffffa4 	bl	83c4 <sbrk>
            if (old_br == sp->base + sp->size) {
    8530:	e1c420d0 	ldrd	r2, [r4]
            char* old_br = (char*)(CALL_MORECORE(0));
    8534:	e1a08000 	mov	r8, r0
            if (old_br == sp->base + sp->size) {
    8538:	e0833002 	add	r3, r3, r2
    853c:	e1500003 	cmp	r0, r3
    8540:	0a00000b 	beq	8574 <sys_trim.constprop.7+0xf8>
    8544:	e596100c 	ldr	r1, [r6, #12]
    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0 && m->topsize > m->trim_check)
    8548:	e596301c 	ldr	r3, [r6, #28]
    854c:	e1530001 	cmp	r3, r1
    8550:	3a000003 	bcc	8564 <sys_trim.constprop.7+0xe8>
  size_t offset = align_offset(chunk2mem(p));
    8554:	e3a00000 	mov	r0, #0
    8558:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    855c:	ebffffae 	bl	841c <init_mparams.part.2>
    8560:	eaffffcc 	b	8498 <sys_trim.constprop.7+0x1c>
      m->trim_check = MAX_SIZE_T;
    8564:	e3e03000 	mvn	r3, #0
    8568:	e3a00000 	mov	r0, #0
    856c:	e586301c 	str	r3, [r6, #28]
  }

  return (released != 0)? 1 : 0;
}
    8570:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              char* rel_br = (char*)(CALL_MORECORE(-extra));
    8574:	e2670000 	rsb	r0, r7, #0
    8578:	ebffff91 	bl	83c4 <sbrk>
    857c:	e1a07000 	mov	r7, r0
              char* new_br = (char*)(CALL_MORECORE(0));
    8580:	e3a00000 	mov	r0, #0
    8584:	ebffff8e 	bl	83c4 <sbrk>
              if (rel_br != CMFAIL && new_br < old_br)
    8588:	e3770001 	cmn	r7, #1
    858c:	11580000 	cmpne	r8, r0
    8590:	9affffeb 	bls	8544 <sys_trim.constprop.7+0xc8>
      if (released != 0) {
    8594:	e0588000 	subs	r8, r8, r0
    8598:	0affffe9 	beq	8544 <sys_trim.constprop.7+0xc8>
        init_top(m, m->top, m->topsize - released);
    859c:	e5962018 	ldr	r2, [r6, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    85a0:	e3a0e028 	mov	lr, #40	; 0x28
        sp->size -= released;
    85a4:	e594c004 	ldr	ip, [r4, #4]
        init_top(m, m->top, m->topsize - released);
    85a8:	e596100c 	ldr	r1, [r6, #12]
  size_t offset = align_offset(chunk2mem(p));
    85ac:	e2823008 	add	r3, r2, #8
        m->footprint -= released;
    85b0:	e59601b0 	ldr	r0, [r6, #432]	; 0x1b0
  size_t offset = align_offset(chunk2mem(p));
    85b4:	e3130007 	tst	r3, #7
        sp->size -= released;
    85b8:	e04cc008 	sub	ip, ip, r8
  size_t offset = align_offset(chunk2mem(p));
    85bc:	12633000 	rsbne	r3, r3, #0
        sp->size -= released;
    85c0:	e584c004 	str	ip, [r4, #4]
  size_t offset = align_offset(chunk2mem(p));
    85c4:	12033007 	andne	r3, r3, #7
        m->footprint -= released;
    85c8:	e0400008 	sub	r0, r0, r8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    85cc:	e595c010 	ldr	ip, [r5, #16]
        init_top(m, m->top, m->topsize - released);
    85d0:	e0418008 	sub	r8, r1, r8
  size_t offset = align_offset(chunk2mem(p));
    85d4:	01a03008 	moveq	r3, r8
    85d8:	10821003 	addne	r1, r2, r3
    85dc:	10483003 	subne	r3, r8, r3
    85e0:	01a01002 	moveq	r1, r2
  p->head = psize | PINUSE_BIT;
    85e4:	e3834001 	orr	r4, r3, #1
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    85e8:	e0822008 	add	r2, r2, r8
        m->footprint -= released;
    85ec:	e58601b0 	str	r0, [r6, #432]	; 0x1b0
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    85f0:	e3a00001 	mov	r0, #1
  m->top = p;
    85f4:	e5861018 	str	r1, [r6, #24]
  m->topsize = psize;
    85f8:	e586300c 	str	r3, [r6, #12]
  p->head = psize | PINUSE_BIT;
    85fc:	e5814004 	str	r4, [r1, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    8600:	e582e004 	str	lr, [r2, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    8604:	e586c01c 	str	ip, [r6, #28]
    8608:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

0000860c <malloc>:
#endif

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
    860c:	e35000f4 	cmp	r0, #244	; 0xf4
void* dlmalloc(size_t bytes) {
    8610:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8614:	e24dd00c 	sub	sp, sp, #12
    if (bytes <= MAX_SMALL_REQUEST) {
    8618:	8a00002d 	bhi	86d4 <malloc+0xc8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
      idx = small_index(nb);
      smallbits = gm->smallmap >> idx;
    861c:	e30d60c4 	movw	r6, #53444	; 0xd0c4
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    8620:	e350000a 	cmp	r0, #10
      smallbits = gm->smallmap >> idx;
    8624:	e3406000 	movt	r6, #0
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    8628:	8280400b 	addhi	r4, r0, #11
      smallbits = gm->smallmap >> idx;
    862c:	e596c000 	ldr	ip, [r6]
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    8630:	83c44007 	bichi	r4, r4, #7
    8634:	81a021a4 	lsrhi	r2, r4, #3
    8638:	93a02002 	movls	r2, #2
    863c:	93a04010 	movls	r4, #16
      smallbits = gm->smallmap >> idx;
    8640:	e1a0323c 	lsr	r3, ip, r2

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
    8644:	e3130003 	tst	r3, #3
    8648:	0a00004a 	beq	8778 <malloc+0x16c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
    864c:	e1e03003 	mvn	r3, r3
    8650:	e2033001 	and	r3, r3, #1
    8654:	e0833002 	add	r3, r3, r2
        b = smallbin_at(gm, idx);
    8658:	e0861183 	add	r1, r6, r3, lsl #3
    865c:	e2811028 	add	r1, r1, #40	; 0x28
        p = b->fd;
    8660:	e5910008 	ldr	r0, [r1, #8]
        assert(chunksize(p) == small_index2size(idx));
    8664:	e5902004 	ldr	r2, [r0, #4]
    8668:	e3c22007 	bic	r2, r2, #7
    866c:	e1520183 	cmp	r2, r3, lsl #3
    8670:	1a0001c0 	bne	8d78 <malloc+0x76c>
        unlink_first_small_chunk(gm, b, p, idx);
    8674:	e1510000 	cmp	r1, r0
    8678:	e590e008 	ldr	lr, [r0, #8]
    867c:	0a0001bd 	beq	8d78 <malloc+0x76c>
    8680:	e150000e 	cmp	r0, lr
    8684:	0a0001bb 	beq	8d78 <malloc+0x76c>
    8688:	e151000e 	cmp	r1, lr
    868c:	0a00017d 	beq	8c88 <malloc+0x67c>
    8690:	e5963010 	ldr	r3, [r6, #16]
    8694:	e153000e 	cmp	r3, lr
    8698:	8a0001b6 	bhi	8d78 <malloc+0x76c>
    869c:	e59e300c 	ldr	r3, [lr, #12]
    86a0:	e1530000 	cmp	r3, r0
    86a4:	1a0001b3 	bne	8d78 <malloc+0x76c>
    86a8:	e58e100c 	str	r1, [lr, #12]
    86ac:	e581e008 	str	lr, [r1, #8]
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    86b0:	e3823003 	orr	r3, r2, #3
    86b4:	e0802002 	add	r2, r0, r2
    86b8:	e5803004 	str	r3, [r0, #4]
        mem = chunk2mem(p);
    86bc:	e2800008 	add	r0, r0, #8
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    86c0:	e5923004 	ldr	r3, [r2, #4]
    86c4:	e3833001 	orr	r3, r3, #1
    86c8:	e5823004 	str	r3, [r2, #4]
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
    86cc:	e28dd00c 	add	sp, sp, #12
    86d0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86d4:	e30d60c4 	movw	r6, #53444	; 0xd0c4
    else if (bytes >= MAX_REQUEST)
    86d8:	e3700041 	cmn	r0, #65	; 0x41
    86dc:	e3406000 	movt	r6, #0
    86e0:	e5961008 	ldr	r1, [r6, #8]
    86e4:	9a00000d 	bls	8720 <malloc+0x114>
    if (nb <= gm->dvsize) {
    86e8:	e3710001 	cmn	r1, #1
    86ec:	1a000086 	bne	890c <malloc+0x300>
      mchunkptr p = gm->dv;
    86f0:	e5960014 	ldr	r0, [r6, #20]
    86f4:	e2402001 	sub	r2, r0, #1
        gm->dvsize = 0;
    86f8:	e3a03000 	mov	r3, #0
    86fc:	e5863008 	str	r3, [r6, #8]
        gm->dv = 0;
    8700:	e5863014 	str	r3, [r6, #20]
        set_inuse_and_pinuse(gm, p, dvs);
    8704:	e5801004 	str	r1, [r0, #4]
    8708:	e5923004 	ldr	r3, [r2, #4]
    870c:	e3833001 	orr	r3, r3, #1
    8710:	e5823004 	str	r3, [r2, #4]
      mem = chunk2mem(p);
    8714:	e2800008 	add	r0, r0, #8
}
    8718:	e28dd00c 	add	sp, sp, #12
    871c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    8720:	e596c004 	ldr	ip, [r6, #4]
      nb = pad_request(bytes);
    8724:	e280400b 	add	r4, r0, #11
    8728:	e3c44007 	bic	r4, r4, #7
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    872c:	e35c0000 	cmp	ip, #0
    8730:	1a0000d3 	bne	8a84 <malloc+0x478>
    if (nb <= gm->dvsize) {
    8734:	e1540001 	cmp	r4, r1
    8738:	9a000065 	bls	88d4 <malloc+0x2c8>
    else if (nb < gm->topsize) { /* Split top */
    873c:	e596300c 	ldr	r3, [r6, #12]
    8740:	e1530004 	cmp	r3, r4
    8744:	9a000580 	bls	9d4c <malloc+0x1740>
      mchunkptr p = m->top;
    8748:	e5962018 	ldr	r2, [r6, #24]
      size_t rsize = m->topsize -= nb;
    874c:	e0433004 	sub	r3, r3, r4
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    8750:	e3841003 	orr	r1, r4, #3
      r->head = rsize | PINUSE_BIT;
    8754:	e383c001 	orr	ip, r3, #1
      size_t rsize = m->topsize -= nb;
    8758:	e586300c 	str	r3, [r6, #12]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    875c:	e0824004 	add	r4, r2, r4
      return chunk2mem(p);
    8760:	e2820008 	add	r0, r2, #8
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    8764:	e5864018 	str	r4, [r6, #24]
      r->head = rsize | PINUSE_BIT;
    8768:	e584c004 	str	ip, [r4, #4]
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    876c:	e5821004 	str	r1, [r2, #4]
}
    8770:	e28dd00c 	add	sp, sp, #12
    8774:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (nb > gm->dvsize) {
    8778:	e5961008 	ldr	r1, [r6, #8]
    877c:	e1510004 	cmp	r1, r4
    8780:	2a000053 	bcs	88d4 <malloc+0x2c8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
    8784:	e3530000 	cmp	r3, #0
    8788:	0a00017c 	beq	8d80 <malloc+0x774>
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
    878c:	e3a0e001 	mov	lr, #1
    8790:	e1a0021e 	lsl	r0, lr, r2
    8794:	e1a05e10 	lsl	r5, r0, lr
    8798:	e2650000 	rsb	r0, r5, #0
    879c:	e1800005 	orr	r0, r0, r5
    87a0:	e0002213 	and	r2, r0, r3, lsl r2
          binmap_t leastbit = least_bit(leftbits);
    87a4:	e2623000 	rsb	r3, r2, #0
    87a8:	e0033002 	and	r3, r3, r2
          compute_bit2idx(leastbit, i);
    87ac:	e2433001 	sub	r3, r3, #1
    87b0:	e1a02623 	lsr	r2, r3, #12
    87b4:	e2022010 	and	r2, r2, #16
    87b8:	e1a03233 	lsr	r3, r3, r2
    87bc:	e1a002a3 	lsr	r0, r3, #5
    87c0:	e2000008 	and	r0, r0, #8
    87c4:	e1a03033 	lsr	r3, r3, r0
    87c8:	e1822000 	orr	r2, r2, r0
    87cc:	e1a00123 	lsr	r0, r3, #2
    87d0:	e2000004 	and	r0, r0, #4
    87d4:	e1a03033 	lsr	r3, r3, r0
    87d8:	e0822000 	add	r2, r2, r0
    87dc:	e1a00e33 	lsr	r0, r3, lr
    87e0:	e2000002 	and	r0, r0, #2
    87e4:	e1a03033 	lsr	r3, r3, r0
    87e8:	e0822000 	add	r2, r2, r0
    87ec:	e7e000d3 	ubfx	r0, r3, #1, #1
    87f0:	e0822000 	add	r2, r2, r0
    87f4:	e0823033 	add	r3, r2, r3, lsr r0
          b = smallbin_at(gm, i);
    87f8:	e0862183 	add	r2, r6, r3, lsl #3
    87fc:	e2822028 	add	r2, r2, #40	; 0x28
          p = b->fd;
    8800:	e5920008 	ldr	r0, [r2, #8]
          assert(chunksize(p) == small_index2size(i));
    8804:	e5907004 	ldr	r7, [r0, #4]
    8808:	e3c77007 	bic	r7, r7, #7
    880c:	e1570183 	cmp	r7, r3, lsl #3
    8810:	1a000158 	bne	8d78 <malloc+0x76c>
          unlink_first_small_chunk(gm, b, p, i);
    8814:	e1520000 	cmp	r2, r0
    8818:	e5905008 	ldr	r5, [r0, #8]
    881c:	0a000155 	beq	8d78 <malloc+0x76c>
    8820:	e1500005 	cmp	r0, r5
    8824:	0a000153 	beq	8d78 <malloc+0x76c>
    8828:	e1520005 	cmp	r2, r5
    882c:	01cc331e 	biceq	r3, ip, lr, lsl r3
    8830:	05863000 	streq	r3, [r6]
    8834:	0a000007 	beq	8858 <malloc+0x24c>
    8838:	e5963010 	ldr	r3, [r6, #16]
    883c:	e1530005 	cmp	r3, r5
    8840:	8a00014c 	bhi	8d78 <malloc+0x76c>
    8844:	e595300c 	ldr	r3, [r5, #12]
    8848:	e1530000 	cmp	r3, r0
    884c:	1a000149 	bne	8d78 <malloc+0x76c>
    8850:	e585200c 	str	r2, [r5, #12]
    8854:	e5825008 	str	r5, [r2, #8]
          rsize = small_index2size(i) - nb;
    8858:	e047c004 	sub	ip, r7, r4
            replace_dv(gm, r, rsize);
    885c:	e3510000 	cmp	r1, #0
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    8860:	e3842003 	orr	r2, r4, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    8864:	e38c3001 	orr	r3, ip, #1
            r = chunk_plus_offset(p, nb);
    8868:	e0804004 	add	r4, r0, r4
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    886c:	e5802004 	str	r2, [r0, #4]
            replace_dv(gm, r, rsize);
    8870:	e1a0e1a1 	lsr	lr, r1, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    8874:	e5843004 	str	r3, [r4, #4]
    8878:	e780c007 	str	ip, [r0, r7]
            replace_dv(gm, r, rsize);
    887c:	0a000010 	beq	88c4 <malloc+0x2b8>
    8880:	e086318e 	add	r3, r6, lr, lsl #3
    8884:	e351000f 	cmp	r1, #15
    8888:	e5962014 	ldr	r2, [r6, #20]
    888c:	e2833028 	add	r3, r3, #40	; 0x28
    8890:	9a000138 	bls	8d78 <malloc+0x76c>
    8894:	e3a01001 	mov	r1, #1
    8898:	e5965000 	ldr	r5, [r6]
    889c:	e1a01e11 	lsl	r1, r1, lr
    88a0:	e1150001 	tst	r5, r1
    88a4:	1a000367 	bne	9648 <malloc+0x103c>
    88a8:	e1a0e003 	mov	lr, r3
    88ac:	e1851001 	orr	r1, r5, r1
    88b0:	e5861000 	str	r1, [r6]
    88b4:	e5832008 	str	r2, [r3, #8]
    88b8:	e58e200c 	str	r2, [lr, #12]
    88bc:	e582e008 	str	lr, [r2, #8]
    88c0:	e582300c 	str	r3, [r2, #12]
    88c4:	e586c008 	str	ip, [r6, #8]
          mem = chunk2mem(p);
    88c8:	e2800008 	add	r0, r0, #8
            replace_dv(gm, r, rsize);
    88cc:	e5864014 	str	r4, [r6, #20]
          goto postaction;
    88d0:	eaffff7d 	b	86cc <malloc+0xc0>
      size_t rsize = gm->dvsize - nb;
    88d4:	e0413004 	sub	r3, r1, r4
      mchunkptr p = gm->dv;
    88d8:	e5960014 	ldr	r0, [r6, #20]
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
    88dc:	e353000f 	cmp	r3, #15
    88e0:	e0802001 	add	r2, r0, r1
    88e4:	9a00035c 	bls	965c <malloc+0x1050>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    88e8:	e0802004 	add	r2, r0, r4
        set_size_and_pinuse_of_free_chunk(r, rsize);
    88ec:	e383c001 	orr	ip, r3, #1
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    88f0:	e3844003 	orr	r4, r4, #3
        gm->dvsize = rsize;
    88f4:	e5863008 	str	r3, [r6, #8]
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    88f8:	e5862014 	str	r2, [r6, #20]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    88fc:	e582c004 	str	ip, [r2, #4]
    8900:	e7803001 	str	r3, [r0, r1]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    8904:	e5804004 	str	r4, [r0, #4]
    8908:	eaffff81 	b	8714 <malloc+0x108>
  ensure_initialization();
    890c:	e30d829c 	movw	r8, #53916	; 0xd29c
    8910:	e3408000 	movt	r8, #0
    8914:	e5983000 	ldr	r3, [r8]
    8918:	e3530000 	cmp	r3, #0
    891c:	1a00010d 	bne	8d58 <malloc+0x74c>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    8920:	e3e04000 	mvn	r4, #0
    8924:	ebfffebc 	bl	841c <init_mparams.part.2>
  asize = granularity_align(nb + SYS_ALLOC_PADDING);
    8928:	e5987008 	ldr	r7, [r8, #8]
    892c:	e287c02f 	add	ip, r7, #47	; 0x2f
    8930:	e2670000 	rsb	r0, r7, #0
    8934:	e084a00c 	add	sl, r4, ip
    8938:	e00aa000 	and	sl, sl, r0
  if (asize <= nb)
    893c:	e15a0004 	cmp	sl, r4
    8940:	9a000104 	bls	8d58 <malloc+0x74c>
  if (m->footprint_limit != 0) {
    8944:	e59621b8 	ldr	r2, [r6, #440]	; 0x1b8
    8948:	e3520000 	cmp	r2, #0
    894c:	0a000008 	beq	8974 <malloc+0x368>
    size_t fp = m->footprint + asize;
    8950:	e59631b0 	ldr	r3, [r6, #432]	; 0x1b0
    8954:	e08a1003 	add	r1, sl, r3
    if (fp <= m->footprint || fp > m->footprint_limit)
    8958:	e1530001 	cmp	r3, r1
    895c:	33a03000 	movcc	r3, #0
    8960:	23a03001 	movcs	r3, #1
    8964:	e1520001 	cmp	r2, r1
    8968:	33833001 	orrcc	r3, r3, #1
    896c:	e3530000 	cmp	r3, #0
    8970:	1a0000f8 	bne	8d58 <malloc+0x74c>
  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
    8974:	e596e1bc 	ldr	lr, [r6, #444]	; 0x1bc
    8978:	e31e0004 	tst	lr, #4
    897c:	0a0000c5 	beq	8c98 <malloc+0x68c>
    if (asize < HALF_MAX_SIZE_T) {
    8980:	e37a010a 	cmn	sl, #-2147483646	; 0x80000002
    8984:	8a0000f3 	bhi	8d58 <malloc+0x74c>
      br = (char*)(CALL_MORECORE(asize));
    8988:	e1a0000a 	mov	r0, sl
    898c:	ebfffe8c 	bl	83c4 <sbrk>
    8990:	e1a05000 	mov	r5, r0
      end = (char*)(CALL_MORECORE(0));
    8994:	e3a00000 	mov	r0, #0
    8998:	ebfffe89 	bl	83c4 <sbrk>
      if (br != CMFAIL && end != CMFAIL && br < end) {
    899c:	e3700001 	cmn	r0, #1
    89a0:	13750001 	cmnne	r5, #1
    89a4:	13a03001 	movne	r3, #1
    89a8:	03a03000 	moveq	r3, #0
    89ac:	e1550000 	cmp	r5, r0
    89b0:	23a03000 	movcs	r3, #0
    89b4:	32033001 	andcc	r3, r3, #1
    89b8:	e3530000 	cmp	r3, #0
    89bc:	0a0000e5 	beq	8d58 <malloc+0x74c>
        size_t ssize = end - br;
    89c0:	e0407005 	sub	r7, r0, r5
        if (ssize > nb + TOP_FOOT_SIZE) {
    89c4:	e2843028 	add	r3, r4, #40	; 0x28
    89c8:	e1570003 	cmp	r7, r3
    89cc:	9a0000e1 	bls	8d58 <malloc+0x74c>
  if (tbase != CMFAIL) {
    89d0:	e3750001 	cmn	r5, #1
    89d4:	0a0000df 	beq	8d58 <malloc+0x74c>
    if ((m->footprint += tsize) > m->max_footprint)
    89d8:	e59631b0 	ldr	r3, [r6, #432]	; 0x1b0
    89dc:	e59621b4 	ldr	r2, [r6, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    89e0:	e596e018 	ldr	lr, [r6, #24]
    if ((m->footprint += tsize) > m->max_footprint)
    89e4:	e0873003 	add	r3, r7, r3
    89e8:	e1530002 	cmp	r3, r2
    89ec:	e58631b0 	str	r3, [r6, #432]	; 0x1b0
      m->max_footprint = m->footprint;
    89f0:	858631b4 	strhi	r3, [r6, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    89f4:	e35e0000 	cmp	lr, #0
      msegmentptr sp = &m->seg;
    89f8:	159f2fe0 	ldrne	r2, [pc, #4064]	; 99e0 <malloc+0x13d4>
    89fc:	11a03002 	movne	r3, r2
    if (!is_initialized(m)) { /* first-time initialization */
    8a00:	0a000264 	beq	9398 <malloc+0xd8c>
      while (sp != 0 && tbase != sp->base + sp->size)
    8a04:	e5931000 	ldr	r1, [r3]
    8a08:	e5930004 	ldr	r0, [r3, #4]
    8a0c:	e081c000 	add	ip, r1, r0
    8a10:	e15c0005 	cmp	ip, r5
    8a14:	0a0001a1 	beq	90a0 <malloc+0xa94>
        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    8a18:	e5933008 	ldr	r3, [r3, #8]
      while (sp != 0 && tbase != sp->base + sp->size)
    8a1c:	e3530000 	cmp	r3, #0
    8a20:	1afffff7 	bne	8a04 <malloc+0x3f8>
        if (tbase < m->least_addr)
    8a24:	e5963010 	ldr	r3, [r6, #16]
    8a28:	e0850007 	add	r0, r5, r7
    8a2c:	e1530005 	cmp	r3, r5
  size_t offset = align_offset(chunk2mem(p));
    8a30:	e59f3fa8 	ldr	r3, [pc, #4008]	; 99e0 <malloc+0x13d4>
          m->least_addr = tbase;
    8a34:	85865010 	strhi	r5, [r6, #16]
        while (sp != 0 && sp->base != tbase + tsize)
    8a38:	e5931000 	ldr	r1, [r3]
    8a3c:	e1510000 	cmp	r1, r0
    8a40:	0a000159 	beq	8fac <malloc+0x9a0>
          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    8a44:	e5933008 	ldr	r3, [r3, #8]
        while (sp != 0 && sp->base != tbase + tsize)
    8a48:	e3530000 	cmp	r3, #0
    8a4c:	1afffff9 	bne	8a38 <malloc+0x42c>
            !is_extern_segment(sp) &&
    8a50:	e59f3f88 	ldr	r3, [pc, #3976]	; 99e0 <malloc+0x13d4>
    if (addr >= sp->base && addr < sp->base + sp->size)
    8a54:	e5931000 	ldr	r1, [r3]
    8a58:	e15e0001 	cmp	lr, r1
    8a5c:	3a000003 	bcc	8a70 <malloc+0x464>
    8a60:	e5930004 	ldr	r0, [r3, #4]
    8a64:	e0811000 	add	r1, r1, r0
    8a68:	e15e0001 	cmp	lr, r1
    8a6c:	3a0001aa 	bcc	911c <malloc+0xb10>
    if ((sp = sp->next) == 0)
    8a70:	e5933008 	ldr	r3, [r3, #8]
    8a74:	e3530000 	cmp	r3, #0
    8a78:	1afffff5 	bne	8a54 <malloc+0x448>
  char* old_end = oldsp->base + oldsp->size;
    8a7c:	e5933000 	ldr	r3, [r3]
    8a80:	e7f000f0 	udf	#0
  compute_tree_index(nb, idx);
    8a84:	e1b08424 	lsrs	r8, r4, #8
  size_t rsize = -nb; /* Unsigned negation */
    8a88:	e2647000 	rsb	r7, r4, #0
  compute_tree_index(nb, idx);
    8a8c:	1a00013e 	bne	8f8c <malloc+0x980>
  if ((t = *treebin_at(m, idx)) != 0) {
    8a90:	e5963130 	ldr	r3, [r6, #304]	; 0x130
    8a94:	e3530000 	cmp	r3, #0
    8a98:	01a09007 	moveq	r9, r7
    8a9c:	03e08001 	mvneq	r8, #1
    8aa0:	0a0001f6 	beq	9280 <malloc+0xc74>
    8aa4:	e3a0e019 	mov	lr, #25
    8aa8:	e1a0ee14 	lsl	lr, r4, lr
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    8aac:	e3a05000 	mov	r5, #0
  tchunkptr v = 0;
    8ab0:	e1a00005 	mov	r0, r5
    8ab4:	ea000000 	b	8abc <malloc+0x4b0>
      sizebits <<= 1;
    8ab8:	e1a0e08e 	lsl	lr, lr, #1
      size_t trem = chunksize(t) - nb;
    8abc:	e5939004 	ldr	r9, [r3, #4]
    8ac0:	e3c99007 	bic	r9, r9, #7
    8ac4:	e0499004 	sub	r9, r9, r4
      if (trem < rsize) {
    8ac8:	e1590007 	cmp	r9, r7
    8acc:	2a000003 	bcs	8ae0 <malloc+0x4d4>
        if ((rsize = trem) == 0)
    8ad0:	e3590000 	cmp	r9, #0
    8ad4:	0a000270 	beq	949c <malloc+0xe90>
    8ad8:	e1a07009 	mov	r7, r9
    8adc:	e1a00003 	mov	r0, r3
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    8ae0:	e1a02fae 	lsr	r2, lr, #31
      rt = t->child[1];
    8ae4:	e5939014 	ldr	r9, [r3, #20]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    8ae8:	e2822004 	add	r2, r2, #4
    8aec:	e7933102 	ldr	r3, [r3, r2, lsl #2]
      if (rt != 0 && rt != t)
    8af0:	e3590000 	cmp	r9, #0
    8af4:	11590003 	cmpne	r9, r3
    8af8:	11a05009 	movne	r5, r9
      if (t == 0) {
    8afc:	e3530000 	cmp	r3, #0
    8b00:	1affffec 	bne	8ab8 <malloc+0x4ac>
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    8b04:	e3550000 	cmp	r5, #0
    8b08:	03500000 	cmpeq	r0, #0
    8b0c:	0a0001d8 	beq	9274 <malloc+0xc68>
  while (t != 0) { /* find smallest of tree or subtree */
    8b10:	e3550000 	cmp	r5, #0
    8b14:	e1a09007 	mov	r9, r7
    8b18:	11a03005 	movne	r3, r5
    8b1c:	1a000001 	bne	8b28 <malloc+0x51c>
    8b20:	ea00000c 	b	8b58 <malloc+0x54c>
    8b24:	e1a0300e 	mov	r3, lr
    size_t trem = chunksize(t) - nb;
    8b28:	e5932004 	ldr	r2, [r3, #4]
    t = leftmost_child(t);
    8b2c:	e593e010 	ldr	lr, [r3, #16]
    size_t trem = chunksize(t) - nb;
    8b30:	e3c22007 	bic	r2, r2, #7
    8b34:	e0422004 	sub	r2, r2, r4
    if (trem < rsize) {
    8b38:	e1520009 	cmp	r2, r9
    8b3c:	31a09002 	movcc	r9, r2
    8b40:	31a00003 	movcc	r0, r3
    t = leftmost_child(t);
    8b44:	e35e0000 	cmp	lr, #0
    8b48:	1afffff5 	bne	8b24 <malloc+0x518>
    8b4c:	e593e014 	ldr	lr, [r3, #20]
  while (t != 0) { /* find smallest of tree or subtree */
    8b50:	e35e0000 	cmp	lr, #0
    8b54:	1afffff2 	bne	8b24 <malloc+0x518>
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
    8b58:	e3500000 	cmp	r0, #0
    8b5c:	0afffef4 	beq	8734 <malloc+0x128>
    8b60:	e0413004 	sub	r3, r1, r4
    8b64:	e1530009 	cmp	r3, r9
    8b68:	9afffef1 	bls	8734 <malloc+0x128>
    if (RTCHECK(ok_address(m, v))) { /* split */
    8b6c:	e5965010 	ldr	r5, [r6, #16]
    8b70:	e1550000 	cmp	r5, r0
    8b74:	8a00007f 	bhi	8d78 <malloc+0x76c>
      assert(chunksize(v) == rsize + nb);
    8b78:	e590e004 	ldr	lr, [r0, #4]
    8b7c:	e0843009 	add	r3, r4, r9
      mchunkptr r = chunk_plus_offset(v, nb);
    8b80:	e0807004 	add	r7, r0, r4
      assert(chunksize(v) == rsize + nb);
    8b84:	e3cee007 	bic	lr, lr, #7
    8b88:	e15e0003 	cmp	lr, r3
    8b8c:	1a000079 	bne	8d78 <malloc+0x76c>
      if (RTCHECK(ok_next(v, r))) {
    8b90:	e1570000 	cmp	r7, r0
    8b94:	9a000077 	bls	8d78 <malloc+0x76c>
        unlink_large_chunk(m, v);
    8b98:	e590200c 	ldr	r2, [r0, #12]
    8b9c:	e5908018 	ldr	r8, [r0, #24]
    8ba0:	e1520000 	cmp	r2, r0
    8ba4:	0a000254 	beq	94fc <malloc+0xef0>
    8ba8:	e5903008 	ldr	r3, [r0, #8]
    8bac:	e1550003 	cmp	r5, r3
    8bb0:	8a000070 	bhi	8d78 <malloc+0x76c>
    8bb4:	e593100c 	ldr	r1, [r3, #12]
    8bb8:	e1510000 	cmp	r1, r0
    8bbc:	1a00006d 	bne	8d78 <malloc+0x76c>
    8bc0:	e5921008 	ldr	r1, [r2, #8]
    8bc4:	e1510000 	cmp	r1, r0
    8bc8:	1a00006a 	bne	8d78 <malloc+0x76c>
    8bcc:	e583200c 	str	r2, [r3, #12]
    8bd0:	e5823008 	str	r3, [r2, #8]
    8bd4:	e3580000 	cmp	r8, #0
    8bd8:	0a00001e 	beq	8c58 <malloc+0x64c>
    8bdc:	e590301c 	ldr	r3, [r0, #28]
    8be0:	e283304c 	add	r3, r3, #76	; 0x4c
    8be4:	e7961103 	ldr	r1, [r6, r3, lsl #2]
    8be8:	e1510000 	cmp	r1, r0
    8bec:	07862103 	streq	r2, [r6, r3, lsl #2]
    8bf0:	0a000007 	beq	8c14 <malloc+0x608>
    8bf4:	e1550008 	cmp	r5, r8
    8bf8:	8a00005e 	bhi	8d78 <malloc+0x76c>
    8bfc:	e5983010 	ldr	r3, [r8, #16]
    8c00:	e1530000 	cmp	r3, r0
    8c04:	05882010 	streq	r2, [r8, #16]
    8c08:	15882014 	strne	r2, [r8, #20]
    8c0c:	e3520000 	cmp	r2, #0
    8c10:	0a000010 	beq	8c58 <malloc+0x64c>
    8c14:	e1550002 	cmp	r5, r2
    8c18:	8a000056 	bhi	8d78 <malloc+0x76c>
    8c1c:	e5903010 	ldr	r3, [r0, #16]
    8c20:	e5828018 	str	r8, [r2, #24]
    8c24:	e3530000 	cmp	r3, #0
    8c28:	0a000003 	beq	8c3c <malloc+0x630>
    8c2c:	e1550003 	cmp	r5, r3
    8c30:	8a000050 	bhi	8d78 <malloc+0x76c>
    8c34:	e5823010 	str	r3, [r2, #16]
    8c38:	e5832018 	str	r2, [r3, #24]
    8c3c:	e5903014 	ldr	r3, [r0, #20]
    8c40:	e3530000 	cmp	r3, #0
    8c44:	0a000003 	beq	8c58 <malloc+0x64c>
    8c48:	e1550003 	cmp	r5, r3
    8c4c:	8a000049 	bhi	8d78 <malloc+0x76c>
    8c50:	e5823014 	str	r3, [r2, #20]
    8c54:	e5832018 	str	r2, [r3, #24]
        if (rsize < MIN_CHUNK_SIZE)
    8c58:	e359000f 	cmp	r9, #15
    8c5c:	8a000210 	bhi	94a4 <malloc+0xe98>
          set_inuse_and_pinuse(m, v, (rsize + nb));
    8c60:	e080200e 	add	r2, r0, lr
    8c64:	e38ee003 	orr	lr, lr, #3
    8c68:	e5923004 	ldr	r3, [r2, #4]
    8c6c:	e580e004 	str	lr, [r0, #4]
    8c70:	e3833001 	orr	r3, r3, #1
    8c74:	e5823004 	str	r3, [r2, #4]
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    8c78:	e2900008 	adds	r0, r0, #8
    8c7c:	1afffe92 	bne	86cc <malloc+0xc0>
    8c80:	e5961008 	ldr	r1, [r6, #8]
    8c84:	eafffeaa 	b	8734 <malloc+0x128>
        unlink_first_small_chunk(gm, b, p, idx);
    8c88:	e3a01001 	mov	r1, #1
    8c8c:	e1cc3311 	bic	r3, ip, r1, lsl r3
    8c90:	e5863000 	str	r3, [r6]
    8c94:	eafffe85 	b	86b0 <malloc+0xa4>
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
    8c98:	e5961018 	ldr	r1, [r6, #24]
    8c9c:	e3510000 	cmp	r1, #0
    8ca0:	0a00000a 	beq	8cd0 <malloc+0x6c4>
  msegmentptr sp = &m->seg;
    8ca4:	e59f9d34 	ldr	r9, [pc, #3380]	; 99e0 <malloc+0x13d4>
    if (addr >= sp->base && addr < sp->base + sp->size)
    8ca8:	e5993000 	ldr	r3, [r9]
    8cac:	e1510003 	cmp	r1, r3
    8cb0:	3a000003 	bcc	8cc4 <malloc+0x6b8>
    8cb4:	e5992004 	ldr	r2, [r9, #4]
    8cb8:	e0833002 	add	r3, r3, r2
    8cbc:	e1510003 	cmp	r1, r3
    8cc0:	3a00018b 	bcc	92f4 <malloc+0xce8>
    if ((sp = sp->next) == 0)
    8cc4:	e5999008 	ldr	r9, [r9, #8]
    8cc8:	e3590000 	cmp	r9, #0
    8ccc:	1afffff5 	bne	8ca8 <malloc+0x69c>
      char* base = (char*)CALL_MORECORE(0);
    8cd0:	e3a00000 	mov	r0, #0
    8cd4:	ebfffdba 	bl	83c4 <sbrk>
      if (base != CMFAIL) {
    8cd8:	e3700001 	cmn	r0, #1
      char* base = (char*)CALL_MORECORE(0);
    8cdc:	e1a09000 	mov	r9, r0
      if (base != CMFAIL) {
    8ce0:	0a000017 	beq	8d44 <malloc+0x738>
        if (!is_page_aligned(base))
    8ce4:	e5982004 	ldr	r2, [r8, #4]
    8ce8:	e2423001 	sub	r3, r2, #1
    8cec:	e1100003 	tst	r0, r3
          ssize += (page_align((size_t)base) - (size_t)base);
    8cf0:	10837000 	addne	r7, r3, r0
    8cf4:	12622000 	rsbne	r2, r2, #0
    8cf8:	104a3000 	subne	r3, sl, r0
    8cfc:	10077002 	andne	r7, r7, r2
    8d00:	10877003 	addne	r7, r7, r3
        if (!is_page_aligned(base))
    8d04:	01a0700a 	moveq	r7, sl
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    8d08:	e1570004 	cmp	r7, r4
    8d0c:	83a03001 	movhi	r3, #1
    8d10:	93a03000 	movls	r3, #0
    8d14:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    8d18:	83a03000 	movhi	r3, #0
    8d1c:	e3530000 	cmp	r3, #0
    8d20:	0a000007 	beq	8d44 <malloc+0x738>
            (m->footprint_limit == 0 ||
    8d24:	e59631b8 	ldr	r3, [r6, #440]	; 0x1b8
        fp = m->footprint + ssize; /* recheck limits */
    8d28:	e59621b0 	ldr	r2, [r6, #432]	; 0x1b0
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    8d2c:	e3530000 	cmp	r3, #0
    8d30:	0a000324 	beq	99c8 <malloc+0x13bc>
        fp = m->footprint + ssize; /* recheck limits */
    8d34:	e0821007 	add	r1, r2, r7
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    8d38:	e1510003 	cmp	r1, r3
    8d3c:	91520001 	cmpls	r2, r1
    8d40:	3a000320 	bcc	99c8 <malloc+0x13bc>
    8d44:	e596e1bc 	ldr	lr, [r6, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    8d48:	e37a010a 	cmn	sl, #-2147483646	; 0x80000002
        disable_contiguous(m); /* Don't try contiguous path in the future */
    8d4c:	e38ee004 	orr	lr, lr, #4
    8d50:	e586e1bc 	str	lr, [r6, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    8d54:	9affff0b 	bls	8988 <malloc+0x37c>
    return 0; /* wraparound */
    8d58:	e3a00000 	mov	r0, #0
    8d5c:	eafffe5a 	b	86cc <malloc+0xc0>
      unlink_chunk(m, oldfirst, nsize);
    8d60:	e5968010 	ldr	r8, [r6, #16]
    8d64:	e15c0008 	cmp	ip, r8
    8d68:	3a000002 	bcc	8d78 <malloc+0x76c>
    8d6c:	e59c800c 	ldr	r8, [ip, #12]
    8d70:	e1580001 	cmp	r8, r1
    8d74:	0a000331 	beq	9a40 <malloc+0x1434>
        assert(chunksize(p) == small_index2size(idx));
    8d78:	e3e00000 	mvn	r0, #0
    8d7c:	ebfffc9f 	bl	8000 <exit>
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
    8d80:	e5965004 	ldr	r5, [r6, #4]
    8d84:	e3550000 	cmp	r5, #0
    8d88:	0afffe6b 	beq	873c <malloc+0x130>
  binmap_t leastbit = least_bit(m->treemap);
    8d8c:	e2653000 	rsb	r3, r5, #0
    8d90:	e0033005 	and	r3, r3, r5
  compute_bit2idx(leastbit, i);
    8d94:	e2433001 	sub	r3, r3, #1
    8d98:	e1a02623 	lsr	r2, r3, #12
    8d9c:	e2022010 	and	r2, r2, #16
    8da0:	e1a03233 	lsr	r3, r3, r2
    8da4:	e1a002a3 	lsr	r0, r3, #5
    8da8:	e2000008 	and	r0, r0, #8
    8dac:	e1a03033 	lsr	r3, r3, r0
    8db0:	e1822000 	orr	r2, r2, r0
    8db4:	e1a00123 	lsr	r0, r3, #2
    8db8:	e2000004 	and	r0, r0, #4
    8dbc:	e1a03033 	lsr	r3, r3, r0
    8dc0:	e0822000 	add	r2, r2, r0
    8dc4:	e1a000a3 	lsr	r0, r3, #1
    8dc8:	e2000002 	and	r0, r0, #2
    8dcc:	e1a03033 	lsr	r3, r3, r0
    8dd0:	e0822000 	add	r2, r2, r0
    8dd4:	e7e000d3 	ubfx	r0, r3, #1, #1
  v = t = *treebin_at(m, i);
    8dd8:	e0822000 	add	r2, r2, r0
    8ddc:	e0823033 	add	r3, r2, r3, lsr r0
    8de0:	e283304c 	add	r3, r3, #76	; 0x4c
    8de4:	e7967103 	ldr	r7, [r6, r3, lsl #2]
  rsize = chunksize(t) - nb;
    8de8:	e597e004 	ldr	lr, [r7, #4]
    8dec:	e1a00007 	mov	r0, r7
    8df0:	e3cee007 	bic	lr, lr, #7
    8df4:	e04ee004 	sub	lr, lr, r4
    8df8:	ea000006 	b	8e18 <malloc+0x80c>
    size_t trem = chunksize(t) - nb;
    8dfc:	e5923004 	ldr	r3, [r2, #4]
    if (trem < rsize) {
    8e00:	e1a07002 	mov	r7, r2
    size_t trem = chunksize(t) - nb;
    8e04:	e3c33007 	bic	r3, r3, #7
    8e08:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
    8e0c:	e153000e 	cmp	r3, lr
    8e10:	31a0e003 	movcc	lr, r3
    8e14:	31a00002 	movcc	r0, r2
  while ((t = leftmost_child(t)) != 0) {
    8e18:	e5972010 	ldr	r2, [r7, #16]
    8e1c:	e3520000 	cmp	r2, #0
    8e20:	1afffff5 	bne	8dfc <malloc+0x7f0>
    8e24:	e5972014 	ldr	r2, [r7, #20]
    8e28:	e3520000 	cmp	r2, #0
    8e2c:	1afffff2 	bne	8dfc <malloc+0x7f0>
  if (RTCHECK(ok_address(m, v))) {
    8e30:	e596a010 	ldr	sl, [r6, #16]
    8e34:	e15a0000 	cmp	sl, r0
    8e38:	8affffce 	bhi	8d78 <malloc+0x76c>
    assert(chunksize(v) == rsize + nb);
    8e3c:	e5908004 	ldr	r8, [r0, #4]
    8e40:	e084300e 	add	r3, r4, lr
    mchunkptr r = chunk_plus_offset(v, nb);
    8e44:	e0809004 	add	r9, r0, r4
    assert(chunksize(v) == rsize + nb);
    8e48:	e3c88007 	bic	r8, r8, #7
    8e4c:	e1580003 	cmp	r8, r3
    8e50:	1affffc8 	bne	8d78 <malloc+0x76c>
    if (RTCHECK(ok_next(v, r))) {
    8e54:	e1590000 	cmp	r9, r0
    8e58:	9affffc6 	bls	8d78 <malloc+0x76c>
      unlink_large_chunk(m, v);
    8e5c:	e590700c 	ldr	r7, [r0, #12]
    8e60:	e590b018 	ldr	fp, [r0, #24]
    8e64:	e1570000 	cmp	r7, r0
    8e68:	0a000248 	beq	9790 <malloc+0x1184>
    8e6c:	e5903008 	ldr	r3, [r0, #8]
    8e70:	e15a0003 	cmp	sl, r3
    8e74:	8affffbf 	bhi	8d78 <malloc+0x76c>
    8e78:	e593200c 	ldr	r2, [r3, #12]
    8e7c:	e1520000 	cmp	r2, r0
    8e80:	1affffbc 	bne	8d78 <malloc+0x76c>
    8e84:	e5972008 	ldr	r2, [r7, #8]
    8e88:	e1520000 	cmp	r2, r0
    8e8c:	1affffb9 	bne	8d78 <malloc+0x76c>
    8e90:	e583700c 	str	r7, [r3, #12]
    8e94:	e5873008 	str	r3, [r7, #8]
    8e98:	e35b0000 	cmp	fp, #0
    8e9c:	0a00001e 	beq	8f1c <malloc+0x910>
    8ea0:	e590301c 	ldr	r3, [r0, #28]
    8ea4:	e283304c 	add	r3, r3, #76	; 0x4c
    8ea8:	e7962103 	ldr	r2, [r6, r3, lsl #2]
    8eac:	e1520000 	cmp	r2, r0
    8eb0:	07867103 	streq	r7, [r6, r3, lsl #2]
    8eb4:	0a000007 	beq	8ed8 <malloc+0x8cc>
    8eb8:	e15a000b 	cmp	sl, fp
    8ebc:	8affffad 	bhi	8d78 <malloc+0x76c>
    8ec0:	e59b3010 	ldr	r3, [fp, #16]
    8ec4:	e1530000 	cmp	r3, r0
    8ec8:	058b7010 	streq	r7, [fp, #16]
    8ecc:	158b7014 	strne	r7, [fp, #20]
    8ed0:	e3570000 	cmp	r7, #0
    8ed4:	0a000010 	beq	8f1c <malloc+0x910>
    8ed8:	e15a0007 	cmp	sl, r7
    8edc:	8affffa5 	bhi	8d78 <malloc+0x76c>
    8ee0:	e5903010 	ldr	r3, [r0, #16]
    8ee4:	e587b018 	str	fp, [r7, #24]
    8ee8:	e3530000 	cmp	r3, #0
    8eec:	0a000003 	beq	8f00 <malloc+0x8f4>
    8ef0:	e15a0003 	cmp	sl, r3
    8ef4:	8affff9f 	bhi	8d78 <malloc+0x76c>
    8ef8:	e5873010 	str	r3, [r7, #16]
    8efc:	e5837018 	str	r7, [r3, #24]
    8f00:	e5903014 	ldr	r3, [r0, #20]
    8f04:	e3530000 	cmp	r3, #0
    8f08:	0a000003 	beq	8f1c <malloc+0x910>
    8f0c:	e15a0003 	cmp	sl, r3
    8f10:	8affff98 	bhi	8d78 <malloc+0x76c>
    8f14:	e5873014 	str	r3, [r7, #20]
    8f18:	e5837018 	str	r7, [r3, #24]
      if (rsize < MIN_CHUNK_SIZE)
    8f1c:	e35e000f 	cmp	lr, #15
    8f20:	9a000213 	bls	9774 <malloc+0x1168>
        replace_dv(m, r, rsize);
    8f24:	e3510000 	cmp	r1, #0
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    8f28:	e3842003 	orr	r2, r4, #3
        set_size_and_pinuse_of_free_chunk(r, rsize);
    8f2c:	e38e3001 	orr	r3, lr, #1
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    8f30:	e5802004 	str	r2, [r0, #4]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    8f34:	e5893004 	str	r3, [r9, #4]
    8f38:	e789e00e 	str	lr, [r9, lr]
        replace_dv(m, r, rsize);
    8f3c:	0a00000f 	beq	8f80 <malloc+0x974>
    8f40:	e1a051a1 	lsr	r5, r1, #3
    8f44:	e351000f 	cmp	r1, #15
    8f48:	e5961014 	ldr	r1, [r6, #20]
    8f4c:	e0863185 	add	r3, r6, r5, lsl #3
    8f50:	e2833028 	add	r3, r3, #40	; 0x28
    8f54:	9affff87 	bls	8d78 <malloc+0x76c>
    8f58:	e3a02001 	mov	r2, #1
    8f5c:	e1a02512 	lsl	r2, r2, r5
    8f60:	e11c0002 	tst	ip, r2
    8f64:	1a0002f3 	bne	9b38 <malloc+0x152c>
    8f68:	e18cc002 	orr	ip, ip, r2
    8f6c:	e1a02003 	mov	r2, r3
    8f70:	e586c000 	str	ip, [r6]
    8f74:	e5831008 	str	r1, [r3, #8]
    8f78:	e582100c 	str	r1, [r2, #12]
    8f7c:	e1c120f8 	strd	r2, [r1, #8]
    8f80:	e586e008 	str	lr, [r6, #8]
    8f84:	e5869014 	str	r9, [r6, #20]
    8f88:	eaffff3a 	b	8c78 <malloc+0x66c>
  compute_tree_index(nb, idx);
    8f8c:	e3580801 	cmp	r8, #65536	; 0x10000
    8f90:	3a000123 	bcc	9424 <malloc+0xe18>
  if ((t = *treebin_at(m, idx)) != 0) {
    8f94:	e59631ac 	ldr	r3, [r6, #428]	; 0x1ac
    8f98:	e3530000 	cmp	r3, #0
    8f9c:	11a0e004 	movne	lr, r4
  compute_tree_index(nb, idx);
    8fa0:	13a0801f 	movne	r8, #31
  if ((t = *treebin_at(m, idx)) != 0) {
    8fa4:	1afffec0 	bne	8aac <malloc+0x4a0>
    8fa8:	eafffde1 	b	8734 <malloc+0x128>
            !is_extern_segment(sp) &&
    8fac:	e593000c 	ldr	r0, [r3, #12]
    8fb0:	e3100008 	tst	r0, #8
    8fb4:	1afffea5 	bne	8a50 <malloc+0x444>
          sp->size += tsize;
    8fb8:	e5930004 	ldr	r0, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    8fbc:	e2852008 	add	r2, r5, #8
    8fc0:	e3120007 	tst	r2, #7
          sp->base = tbase;
    8fc4:	e5835000 	str	r5, [r3]
          sp->size += tsize;
    8fc8:	e0807007 	add	r7, r0, r7
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    8fcc:	e3840003 	orr	r0, r4, #3
          sp->size += tsize;
    8fd0:	e5837004 	str	r7, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    8fd4:	12623000 	rsbne	r3, r2, #0
    8fd8:	12033007 	andne	r3, r3, #7
    8fdc:	10855003 	addne	r5, r5, r3
  mchunkptr oldfirst = align_as_chunk(oldbase);
    8fe0:	e2813008 	add	r3, r1, #8
    8fe4:	e3130007 	tst	r3, #7
  mchunkptr q = chunk_plus_offset(p, nb);
    8fe8:	e0852004 	add	r2, r5, r4
  mchunkptr oldfirst = align_as_chunk(oldbase);
    8fec:	12633000 	rsbne	r3, r3, #0
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    8ff0:	e5850004 	str	r0, [r5, #4]
  mchunkptr oldfirst = align_as_chunk(oldbase);
    8ff4:	12033007 	andne	r3, r3, #7
    8ff8:	10811003 	addne	r1, r1, r3
  assert((char*)oldfirst > (char*)q);
    8ffc:	e1520001 	cmp	r2, r1
  size_t psize = (char*)oldfirst - (char*)p;
    9000:	e0413005 	sub	r3, r1, r5
  size_t qsize = psize - nb;
    9004:	e0434004 	sub	r4, r3, r4
  assert((char*)oldfirst > (char*)q);
    9008:	2affff5a 	bcs	8d78 <malloc+0x76c>
  assert(pinuse(oldfirst));
    900c:	e5913004 	ldr	r3, [r1, #4]
    9010:	e3130001 	tst	r3, #1
    9014:	0affff57 	beq	8d78 <malloc+0x76c>
  assert(qsize >= MIN_CHUNK_SIZE);
    9018:	e354000f 	cmp	r4, #15
    901c:	9affff55 	bls	8d78 <malloc+0x76c>
  if (oldfirst == m->top) {
    9020:	e15e0001 	cmp	lr, r1
    9024:	0a000221 	beq	98b0 <malloc+0x12a4>
  else if (oldfirst == m->dv) {
    9028:	e5960014 	ldr	r0, [r6, #20]
    902c:	e1500001 	cmp	r0, r1
    9030:	0a00026c 	beq	99e8 <malloc+0x13dc>
    if (!is_inuse(oldfirst)) {
    9034:	e2030003 	and	r0, r3, #3
    9038:	e3500001 	cmp	r0, #1
    903c:	0a000271 	beq	9a08 <malloc+0x13fc>
    insert_chunk(m, q, qsize);
    9040:	e1a001a4 	lsr	r0, r4, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    9044:	e3c33001 	bic	r3, r3, #1
    9048:	e5813004 	str	r3, [r1, #4]
    904c:	e3843001 	orr	r3, r4, #1
    insert_chunk(m, q, qsize);
    9050:	e350001f 	cmp	r0, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    9054:	e5823004 	str	r3, [r2, #4]
    9058:	e5814000 	str	r4, [r1]
    insert_chunk(m, q, qsize);
    905c:	8a00021a 	bhi	98cc <malloc+0x12c0>
    9060:	e0863180 	add	r3, r6, r0, lsl #3
    9064:	e2833028 	add	r3, r3, #40	; 0x28
    9068:	e3a01001 	mov	r1, #1
    906c:	e596c000 	ldr	ip, [r6]
    9070:	e1a00011 	lsl	r0, r1, r0
    9074:	e11c0000 	tst	ip, r0
    9078:	1a000293 	bne	9acc <malloc+0x14c0>
    907c:	e1a01003 	mov	r1, r3
    9080:	e18c0000 	orr	r0, ip, r0
    9084:	e5860000 	str	r0, [r6]
    9088:	e5832008 	str	r2, [r3, #8]
    908c:	e581200c 	str	r2, [r1, #12]
    9090:	e5821008 	str	r1, [r2, #8]
    9094:	e582300c 	str	r3, [r2, #12]
  return chunk2mem(p);
    9098:	e2850008 	add	r0, r5, #8
    909c:	eafffd8a 	b	86cc <malloc+0xc0>
          !is_extern_segment(sp) &&
    90a0:	e593c00c 	ldr	ip, [r3, #12]
    90a4:	e31c0008 	tst	ip, #8
    90a8:	1afffe5d 	bne	8a24 <malloc+0x418>
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
    90ac:	e15e0001 	cmp	lr, r1
    90b0:	3afffe5b 	bcc	8a24 <malloc+0x418>
          segment_holds(sp, m->top)) { /* append */
    90b4:	e15e0005 	cmp	lr, r5
    90b8:	2afffe59 	bcs	8a24 <malloc+0x418>
  size_t offset = align_offset(chunk2mem(p));
    90bc:	e28e1008 	add	r1, lr, #8
        init_top(m, m->top, m->topsize + tsize);
    90c0:	e596200c 	ldr	r2, [r6, #12]
  size_t offset = align_offset(chunk2mem(p));
    90c4:	e3110007 	tst	r1, #7
        sp->size += tsize;
    90c8:	e0800007 	add	r0, r0, r7
    90cc:	e5830004 	str	r0, [r3, #4]
  size_t offset = align_offset(chunk2mem(p));
    90d0:	12613000 	rsbne	r3, r1, #0
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    90d4:	e5980010 	ldr	r0, [r8, #16]
        init_top(m, m->top, m->topsize + tsize);
    90d8:	e0877002 	add	r7, r7, r2
  size_t offset = align_offset(chunk2mem(p));
    90dc:	12033007 	andne	r3, r3, #7
    90e0:	01a03007 	moveq	r3, r7
    90e4:	108e1003 	addne	r1, lr, r3
    90e8:	01a0100e 	moveq	r1, lr
    90ec:	10473003 	subne	r3, r7, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    90f0:	e08e7007 	add	r7, lr, r7
  p->head = psize | PINUSE_BIT;
    90f4:	e3832001 	orr	r2, r3, #1
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    90f8:	e3a0c028 	mov	ip, #40	; 0x28
  m->top = p;
    90fc:	e5861018 	str	r1, [r6, #24]
  m->topsize = psize;
    9100:	e586300c 	str	r3, [r6, #12]
  p->head = psize | PINUSE_BIT;
    9104:	e5812004 	str	r2, [r1, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9108:	e587c004 	str	ip, [r7, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    910c:	e586001c 	str	r0, [r6, #28]
    if (nb < m->topsize) { /* Allocate from new or extended top space */
    9110:	e1540003 	cmp	r4, r3
    9114:	3afffd8b 	bcc	8748 <malloc+0x13c>
    9118:	eaffff0e 	b	8d58 <malloc+0x74c>
  size_t offset = align_offset(chunk2mem(rawsp));
    911c:	e2413027 	sub	r3, r1, #39	; 0x27
    9120:	e1a0c001 	mov	ip, r1
    9124:	e3130007 	tst	r3, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9128:	e5988010 	ldr	r8, [r8, #16]
  size_t offset = align_offset(chunk2mem(rawsp));
    912c:	12639000 	rsbne	r9, r3, #0
    9130:	03e0902e 	mvneq	r9, #46	; 0x2e
    9134:	12099007 	andne	r9, r9, #7
  size_t offset = align_offset(chunk2mem(p));
    9138:	e2853008 	add	r3, r5, #8
    913c:	1249902f 	subne	r9, r9, #47	; 0x2f
  char* asp = rawsp + offset;
    9140:	e0819009 	add	r9, r1, r9
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    9144:	e28e1010 	add	r1, lr, #16
    9148:	e1590001 	cmp	r9, r1
    914c:	31a0900e 	movcc	r9, lr
  size_t offset = align_offset(chunk2mem(p));
    9150:	e3130007 	tst	r3, #7
    9154:	12633000 	rsbne	r3, r3, #0
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    9158:	e2891008 	add	r1, r9, #8
  size_t offset = align_offset(chunk2mem(p));
    915c:	12033007 	andne	r3, r3, #7
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    9160:	e58d1000 	str	r1, [sp]
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    9164:	e2471028 	sub	r1, r7, #40	; 0x28
    9168:	10850003 	addne	r0, r5, r3
  size_t offset = align_offset(chunk2mem(p));
    916c:	01a03001 	moveq	r3, r1
    9170:	10413003 	subne	r3, r1, r3
  assert(is_aligned(ss));
    9174:	e289a008 	add	sl, r9, #8
  size_t offset = align_offset(chunk2mem(p));
    9178:	01a00005 	moveq	r0, r5
  m->topsize = psize;
    917c:	e586300c 	str	r3, [r6, #12]
  assert(is_aligned(ss));
    9180:	e21ab007 	ands	fp, sl, #7
  p->head = psize | PINUSE_BIT;
    9184:	e3833001 	orr	r3, r3, #1
  m->top = p;
    9188:	e5860018 	str	r0, [r6, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    918c:	e0851001 	add	r1, r5, r1
  p->head = psize | PINUSE_BIT;
    9190:	e5803004 	str	r3, [r0, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9194:	e3a03028 	mov	r3, #40	; 0x28
  assert(is_aligned(ss));
    9198:	e1a0a00b 	mov	sl, fp
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    919c:	e5813004 	str	r3, [r1, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    91a0:	e586801c 	str	r8, [r6, #28]
  assert(is_aligned(ss));
    91a4:	1afffef3 	bne	8d78 <malloc+0x76c>
  *ss = m->seg; /* Push current record */
    91a8:	e892000f 	ldm	r2, {r0, r1, r2, r3}
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    91ac:	e3a0b01b 	mov	fp, #27
    91b0:	e289801c 	add	r8, r9, #28
  int nfences = 0;
    91b4:	e58da004 	str	sl, [sp, #4]
    91b8:	e58da000 	str	sl, [sp]
  *ss = m->seg; /* Push current record */
    91bc:	e289a008 	add	sl, r9, #8
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    91c0:	e589b004 	str	fp, [r9, #4]
    p->head = FENCEPOST_HEAD;
    91c4:	e3a0b007 	mov	fp, #7
  *ss = m->seg; /* Push current record */
    91c8:	e88a000f 	stm	sl, {r0, r1, r2, r3}
  m->seg.sflags = mmapped;
    91cc:	e59d3004 	ldr	r3, [sp, #4]
  m->seg.next = ss;
    91d0:	e586a1c8 	str	sl, [r6, #456]	; 0x1c8
    91d4:	e1a0a003 	mov	sl, r3
  m->seg.base = tbase;
    91d8:	e58651c0 	str	r5, [r6, #448]	; 0x1c0
  m->seg.size = tsize;
    91dc:	e58671c4 	str	r7, [r6, #452]	; 0x1c4
  m->seg.sflags = mmapped;
    91e0:	e58631cc 	str	r3, [r6, #460]	; 0x1cc
    p->head = FENCEPOST_HEAD;
    91e4:	e488b004 	str	fp, [r8], #4
    if ((char*)(&(nextp->head)) < old_end)
    91e8:	e15c0008 	cmp	ip, r8
    ++nfences;
    91ec:	e28aa001 	add	sl, sl, #1
    if ((char*)(&(nextp->head)) < old_end)
    91f0:	8afffffb 	bhi	91e4 <malloc+0xbd8>
  assert(nfences >= 2);
    91f4:	e35a0001 	cmp	sl, #1
    91f8:	0afffede 	beq	8d78 <malloc+0x76c>
  if (csp != old_top) {
    91fc:	e15e0009 	cmp	lr, r9
    9200:	0a000117 	beq	9664 <malloc+0x1058>
    size_t psize = csp - old_top;
    9204:	e049100e 	sub	r1, r9, lr
    set_free_with_pinuse(q, psize, tn);
    9208:	e5993004 	ldr	r3, [r9, #4]
    insert_chunk(m, q, psize);
    920c:	e1a021a1 	lsr	r2, r1, #3
    set_free_with_pinuse(q, psize, tn);
    9210:	e3810001 	orr	r0, r1, #1
    insert_chunk(m, q, psize);
    9214:	e352001f 	cmp	r2, #31
    set_free_with_pinuse(q, psize, tn);
    9218:	e3c33001 	bic	r3, r3, #1
    921c:	e5893004 	str	r3, [r9, #4]
    9220:	e58e0004 	str	r0, [lr, #4]
    9224:	e5891000 	str	r1, [r9]
    insert_chunk(m, q, psize);
    9228:	8a0000c5 	bhi	9544 <malloc+0xf38>
    922c:	e0863182 	add	r3, r6, r2, lsl #3
    9230:	e351000f 	cmp	r1, #15
    9234:	e2833028 	add	r3, r3, #40	; 0x28
    9238:	9afffece 	bls	8d78 <malloc+0x76c>
    923c:	e3a01001 	mov	r1, #1
    9240:	e5960000 	ldr	r0, [r6]
    9244:	e1a02211 	lsl	r2, r1, r2
    9248:	e1100002 	tst	r0, r2
    924c:	1a000135 	bne	9728 <malloc+0x111c>
    9250:	e1a01003 	mov	r1, r3
    9254:	e1802002 	orr	r2, r0, r2
    9258:	e5862000 	str	r2, [r6]
    925c:	e583e008 	str	lr, [r3, #8]
    9260:	e581e00c 	str	lr, [r1, #12]
    9264:	e58e300c 	str	r3, [lr, #12]
    9268:	e58e1008 	str	r1, [lr, #8]
    926c:	e596300c 	ldr	r3, [r6, #12]
    9270:	eaffffa6 	b	9110 <malloc+0xb04>
    9274:	e3e03001 	mvn	r3, #1
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    9278:	e1a09007 	mov	r9, r7
    927c:	e1a08813 	lsl	r8, r3, r8
    if (leftbits != 0) {
    9280:	e01c8008 	ands	r8, ip, r8
    9284:	0afffd2a 	beq	8734 <malloc+0x128>
      binmap_t leastbit = least_bit(leftbits);
    9288:	e2683000 	rsb	r3, r8, #0
    928c:	e0033008 	and	r3, r3, r8
      compute_bit2idx(leastbit, i);
    9290:	e2433001 	sub	r3, r3, #1
    9294:	e1a02623 	lsr	r2, r3, #12
    9298:	e2022010 	and	r2, r2, #16
    929c:	e1a03233 	lsr	r3, r3, r2
    92a0:	e1a002a3 	lsr	r0, r3, #5
    92a4:	e2000008 	and	r0, r0, #8
    92a8:	e1a03033 	lsr	r3, r3, r0
    92ac:	e1822000 	orr	r2, r2, r0
    92b0:	e1a00123 	lsr	r0, r3, #2
    92b4:	e2000004 	and	r0, r0, #4
    92b8:	e1a03033 	lsr	r3, r3, r0
    92bc:	e0822000 	add	r2, r2, r0
    92c0:	e1a000a3 	lsr	r0, r3, #1
    92c4:	e2000002 	and	r0, r0, #2
    92c8:	e1a03033 	lsr	r3, r3, r0
    92cc:	e0822000 	add	r2, r2, r0
    92d0:	e7e000d3 	ubfx	r0, r3, #1, #1
      t = *treebin_at(m, i);
    92d4:	e0822000 	add	r2, r2, r0
    92d8:	e0823033 	add	r3, r2, r3, lsr r0
    92dc:	e283304c 	add	r3, r3, #76	; 0x4c
    92e0:	e7963103 	ldr	r3, [r6, r3, lsl #2]
  while (t != 0) { /* find smallest of tree or subtree */
    92e4:	e3530000 	cmp	r3, #0
    92e8:	13a00000 	movne	r0, #0
    92ec:	1afffe0d 	bne	8b28 <malloc+0x51c>
    92f0:	eafffd0f 	b	8734 <malloc+0x128>
      ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
    92f4:	e596700c 	ldr	r7, [r6, #12]
    92f8:	e04c7007 	sub	r7, ip, r7
    92fc:	e0877004 	add	r7, r7, r4
    9300:	e0077000 	and	r7, r7, r0
      if (ssize < HALF_MAX_SIZE_T &&
    9304:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    9308:	8afffe8e 	bhi	8d48 <malloc+0x73c>
    930c:	e1a00007 	mov	r0, r7
    9310:	ebfffc2b 	bl	83c4 <sbrk>
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    9314:	e5992000 	ldr	r2, [r9]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9318:	e3700001 	cmn	r0, #1
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    931c:	e5991004 	ldr	r1, [r9, #4]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9320:	13a03000 	movne	r3, #0
    9324:	03a03001 	moveq	r3, #1
      if (ssize < HALF_MAX_SIZE_T &&
    9328:	e1a05000 	mov	r5, r0
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    932c:	e0822001 	add	r2, r2, r1
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    9330:	e1500002 	cmp	r0, r2
    9334:	13833001 	orrne	r3, r3, #1
    9338:	e3530000 	cmp	r3, #0
    933c:	0afffda5 	beq	89d8 <malloc+0x3cc>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
    9340:	e3750001 	cmn	r5, #1
    9344:	0afffe7e 	beq	8d44 <malloc+0x738>
            ssize < nb + SYS_ALLOC_PADDING) {
    9348:	e2843030 	add	r3, r4, #48	; 0x30
        if (ssize < HALF_MAX_SIZE_T &&
    934c:	e1530007 	cmp	r3, r7
    9350:	9afffda0 	bls	89d8 <malloc+0x3cc>
          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
    9354:	e5983008 	ldr	r3, [r8, #8]
    9358:	e267b000 	rsb	fp, r7, #0
    935c:	e283902f 	add	r9, r3, #47	; 0x2f
    9360:	e2633000 	rsb	r3, r3, #0
    9364:	e0899004 	add	r9, r9, r4
    9368:	e0499007 	sub	r9, r9, r7
    936c:	e0099003 	and	r9, r9, r3
          if (esize < HALF_MAX_SIZE_T) {
    9370:	e379010a 	cmn	r9, #-2147483646	; 0x80000002
    9374:	8afffd97 	bhi	89d8 <malloc+0x3cc>
            char* end = (char*)CALL_MORECORE(esize);
    9378:	e1a00009 	mov	r0, r9
    937c:	ebfffc10 	bl	83c4 <sbrk>
            if (end != CMFAIL)
    9380:	e3700001 	cmn	r0, #1
              ssize += esize;
    9384:	10877009 	addne	r7, r7, r9
            if (end != CMFAIL)
    9388:	1afffd92 	bne	89d8 <malloc+0x3cc>
              (void) CALL_MORECORE(-ssize);
    938c:	e1a0000b 	mov	r0, fp
    9390:	ebfffc0b 	bl	83c4 <sbrk>
    9394:	eafffe6a 	b	8d44 <malloc+0x738>
      if (m->least_addr == 0 || tbase < m->least_addr)
    9398:	e5962010 	ldr	r2, [r6, #16]
      m->seg.sflags = mmap_flag;
    939c:	e3a00000 	mov	r0, #0
      m->magic = mparams.magic;
    93a0:	e598c000 	ldr	ip, [r8]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    93a4:	e3e01000 	mvn	r1, #0
      m->seg.base = tbase;
    93a8:	e58651c0 	str	r5, [r6, #448]	; 0x1c0
      if (m->least_addr == 0 || tbase < m->least_addr)
    93ac:	e1520005 	cmp	r2, r5
      m->seg.size = tsize;
    93b0:	e58671c4 	str	r7, [r6, #452]	; 0x1c4
      if (m->least_addr == 0 || tbase < m->least_addr)
    93b4:	93a03000 	movls	r3, #0
    93b8:	83a03001 	movhi	r3, #1
    93bc:	e3520000 	cmp	r2, #0
      m->magic = mparams.magic;
    93c0:	e586c024 	str	ip, [r6, #36]	; 0x24
      if (m->least_addr == 0 || tbase < m->least_addr)
    93c4:	03a03001 	moveq	r3, #1
      m->seg.sflags = mmap_flag;
    93c8:	e58601cc 	str	r0, [r6, #460]	; 0x1cc
      if (m->least_addr == 0 || tbase < m->least_addr)
    93cc:	e3530000 	cmp	r3, #0
    93d0:	e59f360c 	ldr	r3, [pc, #1548]	; 99e4 <malloc+0x13d8>
        m->least_addr = tbase;
    93d4:	15865010 	strne	r5, [r6, #16]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    93d8:	e5861020 	str	r1, [r6, #32]
    93dc:	e2832c01 	add	r2, r3, #256	; 0x100
    bin->fd = bin->bk = bin;
    93e0:	e583300c 	str	r3, [r3, #12]
    93e4:	e5833008 	str	r3, [r3, #8]
    93e8:	e2833008 	add	r3, r3, #8
  for (i = 0; i < NSMALLBINS; ++i) {
    93ec:	e1520003 	cmp	r2, r3
    93f0:	1afffffa 	bne	93e0 <malloc+0xdd4>
  size_t offset = align_offset(chunk2mem(p));
    93f4:	e2853008 	add	r3, r5, #8
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    93f8:	e2477028 	sub	r7, r7, #40	; 0x28
  size_t offset = align_offset(chunk2mem(p));
    93fc:	e3130007 	tst	r3, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9400:	e5980010 	ldr	r0, [r8, #16]
  size_t offset = align_offset(chunk2mem(p));
    9404:	12633000 	rsbne	r3, r3, #0
    9408:	01a03007 	moveq	r3, r7
    940c:	12033007 	andne	r3, r3, #7
    9410:	01a01005 	moveq	r1, r5
    9414:	10851003 	addne	r1, r5, r3
    9418:	10473003 	subne	r3, r7, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    941c:	e0857007 	add	r7, r5, r7
    9420:	eaffff33 	b	90f4 <malloc+0xae8>
  compute_tree_index(nb, idx);
    9424:	e2483c01 	sub	r3, r8, #256	; 0x100
    9428:	e1a03823 	lsr	r3, r3, #16
    942c:	e2033008 	and	r3, r3, #8
    9430:	e1a08318 	lsl	r8, r8, r3
    9434:	e2482a01 	sub	r2, r8, #4096	; 0x1000
    9438:	e1a02822 	lsr	r2, r2, #16
    943c:	e2022004 	and	r2, r2, #4
    9440:	e1a08218 	lsl	r8, r8, r2
    9444:	e1833002 	orr	r3, r3, r2
    9448:	e2482901 	sub	r2, r8, #16384	; 0x4000
    944c:	e1a02822 	lsr	r2, r2, #16
    9450:	e2022002 	and	r2, r2, #2
    9454:	e1a08218 	lsl	r8, r8, r2
    9458:	e0833002 	add	r3, r3, r2
    945c:	e06387a8 	rsb	r8, r3, r8, lsr #15
    9460:	e2883015 	add	r3, r8, #21
    9464:	e288800e 	add	r8, r8, #14
    9468:	e1a03334 	lsr	r3, r4, r3
    946c:	e2033001 	and	r3, r3, #1
    9470:	e0838088 	add	r8, r3, r8, lsl #1
  if ((t = *treebin_at(m, idx)) != 0) {
    9474:	e288304c 	add	r3, r8, #76	; 0x4c
    9478:	e7963103 	ldr	r3, [r6, r3, lsl #2]
    947c:	e3530000 	cmp	r3, #0
    9480:	0affff7b 	beq	9274 <malloc+0xc68>
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    9484:	e358001f 	cmp	r8, #31
    9488:	01a0e004 	moveq	lr, r4
    948c:	0afffd86 	beq	8aac <malloc+0x4a0>
    9490:	e1a0e0a8 	lsr	lr, r8, #1
    9494:	e26ee019 	rsb	lr, lr, #25
    9498:	eafffd82 	b	8aa8 <malloc+0x49c>
        if ((rsize = trem) == 0)
    949c:	e1a00003 	mov	r0, r3
    94a0:	eafffda0 	b	8b28 <malloc+0x51c>
          insert_chunk(m, r, rsize);
    94a4:	e1a031a9 	lsr	r3, r9, #3
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    94a8:	e3842003 	orr	r2, r4, #3
    94ac:	e5802004 	str	r2, [r0, #4]
          set_size_and_pinuse_of_free_chunk(r, rsize);
    94b0:	e3892001 	orr	r2, r9, #1
          insert_chunk(m, r, rsize);
    94b4:	e353001f 	cmp	r3, #31
          set_size_and_pinuse_of_free_chunk(r, rsize);
    94b8:	e5872004 	str	r2, [r7, #4]
    94bc:	e7879009 	str	r9, [r7, r9]
          insert_chunk(m, r, rsize);
    94c0:	8a000069 	bhi	966c <malloc+0x1060>
    94c4:	e3a02001 	mov	r2, #1
    94c8:	e5961000 	ldr	r1, [r6]
    94cc:	e1a02312 	lsl	r2, r2, r3
    94d0:	e0863183 	add	r3, r6, r3, lsl #3
    94d4:	e1110002 	tst	r1, r2
    94d8:	e2833028 	add	r3, r3, #40	; 0x28
    94dc:	1a0000e5 	bne	9878 <malloc+0x126c>
    94e0:	e1811002 	orr	r1, r1, r2
    94e4:	e1a02003 	mov	r2, r3
    94e8:	e5861000 	str	r1, [r6]
    94ec:	e5837008 	str	r7, [r3, #8]
    94f0:	e582700c 	str	r7, [r2, #12]
    94f4:	e1c720f8 	strd	r2, [r7, #8]
    94f8:	eafffdde 	b	8c78 <malloc+0x66c>
        unlink_large_chunk(m, v);
    94fc:	e5901014 	ldr	r1, [r0, #20]
    9500:	e3510000 	cmp	r1, #0
    9504:	12803014 	addne	r3, r0, #20
    9508:	0a000094 	beq	9760 <malloc+0x1154>
    950c:	e1a0c003 	mov	ip, r3
    9510:	e1a03001 	mov	r3, r1
    9514:	e1a02001 	mov	r2, r1
    9518:	e5b31014 	ldr	r1, [r3, #20]!
    951c:	e3510000 	cmp	r1, #0
    9520:	1afffff9 	bne	950c <malloc+0xf00>
    9524:	e1a03002 	mov	r3, r2
    9528:	e5b31010 	ldr	r1, [r3, #16]!
    952c:	e3510000 	cmp	r1, #0
    9530:	1afffff5 	bne	950c <malloc+0xf00>
    9534:	e155000c 	cmp	r5, ip
    9538:	8afffe0e 	bhi	8d78 <malloc+0x76c>
    953c:	e58c1000 	str	r1, [ip]
    9540:	eafffda3 	b	8bd4 <malloc+0x5c8>
    insert_chunk(m, q, psize);
    9544:	e1a03421 	lsr	r3, r1, #8
    9548:	e3530801 	cmp	r3, #65536	; 0x10000
    954c:	2a000070 	bcs	9714 <malloc+0x1108>
    9550:	e2430c01 	sub	r0, r3, #256	; 0x100
    9554:	e3a02001 	mov	r2, #1
    9558:	e1a00820 	lsr	r0, r0, #16
    955c:	e2000008 	and	r0, r0, #8
    9560:	e1a03013 	lsl	r3, r3, r0
    9564:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    9568:	e1a0c82c 	lsr	ip, ip, #16
    956c:	e20cc004 	and	ip, ip, #4
    9570:	e1a03c13 	lsl	r3, r3, ip
    9574:	e180000c 	orr	r0, r0, ip
    9578:	e243c901 	sub	ip, r3, #16384	; 0x4000
    957c:	e1a0c82c 	lsr	ip, ip, #16
    9580:	e20cc002 	and	ip, ip, #2
    9584:	e1a03c13 	lsl	r3, r3, ip
    9588:	e080000c 	add	r0, r0, ip
    958c:	e06007a3 	rsb	r0, r0, r3, lsr #15
    9590:	e2803015 	add	r3, r0, #21
    9594:	e280000e 	add	r0, r0, #14
    9598:	e1a03331 	lsr	r3, r1, r3
    959c:	e0033002 	and	r3, r3, r2
    95a0:	e0833210 	add	r3, r3, r0, lsl r2
    95a4:	e283704c 	add	r7, r3, #76	; 0x4c
    95a8:	e1a02312 	lsl	r2, r2, r3
    95ac:	e1a05107 	lsl	r5, r7, #2
    95b0:	e596c004 	ldr	ip, [r6, #4]
    95b4:	e3a00000 	mov	r0, #0
    95b8:	e58e301c 	str	r3, [lr, #28]
    95bc:	e58e0014 	str	r0, [lr, #20]
    95c0:	e112000c 	tst	r2, ip
    95c4:	e58e0010 	str	r0, [lr, #16]
    95c8:	0a00005b 	beq	973c <malloc+0x1130>
    95cc:	e353001f 	cmp	r3, #31
    95d0:	e7960107 	ldr	r0, [r6, r7, lsl #2]
    95d4:	11a020a3 	lsrne	r2, r3, #1
    95d8:	01a02001 	moveq	r2, r1
    95dc:	12622019 	rsbne	r2, r2, #25
    95e0:	11a02211 	lslne	r2, r1, r2
    95e4:	ea000006 	b	9604 <malloc+0xff8>
    95e8:	e1a03fa2 	lsr	r3, r2, #31
    95ec:	e1a02082 	lsl	r2, r2, #1
    95f0:	e2833004 	add	r3, r3, #4
    95f4:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    95f8:	e35c0000 	cmp	ip, #0
    95fc:	0a0000a1 	beq	9888 <malloc+0x127c>
    9600:	e1a0000c 	mov	r0, ip
    9604:	e5903004 	ldr	r3, [r0, #4]
    9608:	e3c33007 	bic	r3, r3, #7
    960c:	e1510003 	cmp	r1, r3
    9610:	1afffff4 	bne	95e8 <malloc+0xfdc>
    9614:	e5903008 	ldr	r3, [r0, #8]
    9618:	e5962010 	ldr	r2, [r6, #16]
    961c:	e1530002 	cmp	r3, r2
    9620:	21500002 	cmpcs	r0, r2
    9624:	3afffdd3 	bcc	8d78 <malloc+0x76c>
    9628:	e3a02000 	mov	r2, #0
    962c:	e583e00c 	str	lr, [r3, #12]
    9630:	e580e008 	str	lr, [r0, #8]
    9634:	e58e3008 	str	r3, [lr, #8]
    9638:	e58e000c 	str	r0, [lr, #12]
    963c:	e58e2018 	str	r2, [lr, #24]
    9640:	e596300c 	ldr	r3, [r6, #12]
    9644:	eafffeb1 	b	9110 <malloc+0xb04>
            replace_dv(gm, r, rsize);
    9648:	e593e008 	ldr	lr, [r3, #8]
    964c:	e5961010 	ldr	r1, [r6, #16]
    9650:	e15e0001 	cmp	lr, r1
    9654:	2afffc96 	bcs	88b4 <malloc+0x2a8>
    9658:	eafffdc6 	b	8d78 <malloc+0x76c>
    965c:	e3811003 	orr	r1, r1, #3
    9660:	eafffc24 	b	86f8 <malloc+0xec>
    9664:	e596300c 	ldr	r3, [r6, #12]
    9668:	eafffea8 	b	9110 <malloc+0xb04>
          insert_chunk(m, r, rsize);
    966c:	e1a03429 	lsr	r3, r9, #8
    9670:	e3530801 	cmp	r3, #65536	; 0x10000
    9674:	2a00007a 	bcs	9864 <malloc+0x1258>
    9678:	e2431c01 	sub	r1, r3, #256	; 0x100
    967c:	e3a02001 	mov	r2, #1
    9680:	e1a01821 	lsr	r1, r1, #16
    9684:	e2011008 	and	r1, r1, #8
    9688:	e1a03113 	lsl	r3, r3, r1
    968c:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    9690:	e1a0c82c 	lsr	ip, ip, #16
    9694:	e20cc004 	and	ip, ip, #4
    9698:	e1a03c13 	lsl	r3, r3, ip
    969c:	e181100c 	orr	r1, r1, ip
    96a0:	e243c901 	sub	ip, r3, #16384	; 0x4000
    96a4:	e1a0c82c 	lsr	ip, ip, #16
    96a8:	e20cc002 	and	ip, ip, #2
    96ac:	e1a03c13 	lsl	r3, r3, ip
    96b0:	e081100c 	add	r1, r1, ip
    96b4:	e06117a3 	rsb	r1, r1, r3, lsr #15
    96b8:	e2813015 	add	r3, r1, #21
    96bc:	e281100e 	add	r1, r1, #14
    96c0:	e1a03339 	lsr	r3, r9, r3
    96c4:	e0033002 	and	r3, r3, r2
    96c8:	e0833211 	add	r3, r3, r1, lsl r2
    96cc:	e283804c 	add	r8, r3, #76	; 0x4c
    96d0:	e1a02312 	lsl	r2, r2, r3
    96d4:	e1a0e108 	lsl	lr, r8, #2
    96d8:	e5961004 	ldr	r1, [r6, #4]
    96dc:	e3a0c000 	mov	ip, #0
    96e0:	e587301c 	str	r3, [r7, #28]
    96e4:	e587c014 	str	ip, [r7, #20]
    96e8:	e1110002 	tst	r1, r2
    96ec:	e587c010 	str	ip, [r7, #16]
    96f0:	1a00003e 	bne	97f0 <malloc+0x11e4>
    96f4:	e1811002 	orr	r1, r1, r2
    96f8:	e086e00e 	add	lr, r6, lr
    96fc:	e7867108 	str	r7, [r6, r8, lsl #2]
    9700:	e5861004 	str	r1, [r6, #4]
    9704:	e587e018 	str	lr, [r7, #24]
    9708:	e587700c 	str	r7, [r7, #12]
    970c:	e5877008 	str	r7, [r7, #8]
    9710:	eafffd58 	b	8c78 <malloc+0x66c>
    insert_chunk(m, q, psize);
    9714:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    9718:	e3a05f6b 	mov	r5, #428	; 0x1ac
    971c:	e3a0301f 	mov	r3, #31
    9720:	e3a0706b 	mov	r7, #107	; 0x6b
    9724:	eaffffa1 	b	95b0 <malloc+0xfa4>
    9728:	e5931008 	ldr	r1, [r3, #8]
    972c:	e5962010 	ldr	r2, [r6, #16]
    9730:	e1510002 	cmp	r1, r2
    9734:	2afffec8 	bcs	925c <malloc+0xc50>
    9738:	eafffd8e 	b	8d78 <malloc+0x76c>
    973c:	e182200c 	orr	r2, r2, ip
    9740:	e0865005 	add	r5, r6, r5
    9744:	e786e107 	str	lr, [r6, r7, lsl #2]
    9748:	e596300c 	ldr	r3, [r6, #12]
    974c:	e5862004 	str	r2, [r6, #4]
    9750:	e58e5018 	str	r5, [lr, #24]
    9754:	e58ee00c 	str	lr, [lr, #12]
    9758:	e58ee008 	str	lr, [lr, #8]
    975c:	eafffe6b 	b	9110 <malloc+0xb04>
        unlink_large_chunk(m, v);
    9760:	e5901010 	ldr	r1, [r0, #16]
    9764:	e3510000 	cmp	r1, #0
    9768:	0a0000e4 	beq	9b00 <malloc+0x14f4>
    976c:	e2803010 	add	r3, r0, #16
    9770:	eaffff65 	b	950c <malloc+0xf00>
        set_inuse_and_pinuse(m, v, (rsize + nb));
    9774:	e0802008 	add	r2, r0, r8
    9778:	e3888003 	orr	r8, r8, #3
    977c:	e5923004 	ldr	r3, [r2, #4]
    9780:	e5808004 	str	r8, [r0, #4]
    9784:	e3833001 	orr	r3, r3, #1
    9788:	e5823004 	str	r3, [r2, #4]
    978c:	eafffd39 	b	8c78 <malloc+0x66c>
      unlink_large_chunk(m, v);
    9790:	e5903014 	ldr	r3, [r0, #20]
    9794:	e3530000 	cmp	r3, #0
    9798:	12802014 	addne	r2, r0, #20
    979c:	0a0000e9 	beq	9b48 <malloc+0x153c>
  rsize = chunksize(t) - nb;
    97a0:	e1a07003 	mov	r7, r3
    97a4:	e1a05002 	mov	r5, r2
      unlink_large_chunk(m, v);
    97a8:	e1a03007 	mov	r3, r7
    97ac:	e5b32014 	ldr	r2, [r3, #20]!
    97b0:	e3520000 	cmp	r2, #0
    97b4:	0a000005 	beq	97d0 <malloc+0x11c4>
    97b8:	e1a07002 	mov	r7, r2
    97bc:	e1a05003 	mov	r5, r3
    97c0:	e1a03007 	mov	r3, r7
    97c4:	e5b32014 	ldr	r2, [r3, #20]!
    97c8:	e3520000 	cmp	r2, #0
    97cc:	1afffff9 	bne	97b8 <malloc+0x11ac>
    97d0:	e1a02007 	mov	r2, r7
    97d4:	e5b23010 	ldr	r3, [r2, #16]!
    97d8:	e3530000 	cmp	r3, #0
    97dc:	1affffef 	bne	97a0 <malloc+0x1194>
    97e0:	e15a0005 	cmp	sl, r5
    97e4:	8afffd63 	bhi	8d78 <malloc+0x76c>
    97e8:	e5853000 	str	r3, [r5]
    97ec:	eafffda9 	b	8e98 <malloc+0x88c>
          insert_chunk(m, r, rsize);
    97f0:	e353001f 	cmp	r3, #31
    97f4:	e7961108 	ldr	r1, [r6, r8, lsl #2]
    97f8:	11a020a3 	lsrne	r2, r3, #1
    97fc:	01a02009 	moveq	r2, r9
    9800:	12622019 	rsbne	r2, r2, #25
    9804:	11a02219 	lslne	r2, r9, r2
    9808:	ea000006 	b	9828 <malloc+0x121c>
    980c:	e1a03fa2 	lsr	r3, r2, #31
    9810:	e1a02082 	lsl	r2, r2, #1
    9814:	e2833004 	add	r3, r3, #4
    9818:	e791c103 	ldr	ip, [r1, r3, lsl #2]
    981c:	e35c0000 	cmp	ip, #0
    9820:	0a00009c 	beq	9a98 <malloc+0x148c>
    9824:	e1a0100c 	mov	r1, ip
    9828:	e5913004 	ldr	r3, [r1, #4]
    982c:	e3c33007 	bic	r3, r3, #7
    9830:	e1530009 	cmp	r3, r9
    9834:	1afffff4 	bne	980c <malloc+0x1200>
    9838:	e5913008 	ldr	r3, [r1, #8]
    983c:	e1550001 	cmp	r5, r1
    9840:	91550003 	cmpls	r5, r3
    9844:	8afffd4b 	bhi	8d78 <malloc+0x76c>
    9848:	e3a02000 	mov	r2, #0
    984c:	e583700c 	str	r7, [r3, #12]
    9850:	e5817008 	str	r7, [r1, #8]
    9854:	e5873008 	str	r3, [r7, #8]
    9858:	e587100c 	str	r1, [r7, #12]
    985c:	e5872018 	str	r2, [r7, #24]
    9860:	eafffd04 	b	8c78 <malloc+0x66c>
    9864:	e3a0ef6b 	mov	lr, #428	; 0x1ac
    9868:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
    986c:	e3a0301f 	mov	r3, #31
    9870:	e3a0806b 	mov	r8, #107	; 0x6b
    9874:	eaffff97 	b	96d8 <malloc+0x10cc>
    9878:	e5932008 	ldr	r2, [r3, #8]
    987c:	e1550002 	cmp	r5, r2
    9880:	9affff19 	bls	94ec <malloc+0xee0>
    9884:	eafffd3b 	b	8d78 <malloc+0x76c>
    insert_chunk(m, q, psize);
    9888:	e5961010 	ldr	r1, [r6, #16]
    988c:	e0802103 	add	r2, r0, r3, lsl #2
    9890:	e1510002 	cmp	r1, r2
    9894:	8afffd37 	bhi	8d78 <malloc+0x76c>
    9898:	e780e103 	str	lr, [r0, r3, lsl #2]
    989c:	e596300c 	ldr	r3, [r6, #12]
    98a0:	e58e0018 	str	r0, [lr, #24]
    98a4:	e58ee00c 	str	lr, [lr, #12]
    98a8:	e58ee008 	str	lr, [lr, #8]
    98ac:	eafffe17 	b	9110 <malloc+0xb04>
    size_t tsize = m->topsize += qsize;
    98b0:	e596300c 	ldr	r3, [r6, #12]
    m->top = q;
    98b4:	e5862018 	str	r2, [r6, #24]
    size_t tsize = m->topsize += qsize;
    98b8:	e0844003 	add	r4, r4, r3
    q->head = tsize | PINUSE_BIT;
    98bc:	e3843001 	orr	r3, r4, #1
    size_t tsize = m->topsize += qsize;
    98c0:	e586400c 	str	r4, [r6, #12]
    q->head = tsize | PINUSE_BIT;
    98c4:	e5823004 	str	r3, [r2, #4]
    98c8:	eafffdf2 	b	9098 <malloc+0xa8c>
    insert_chunk(m, q, qsize);
    98cc:	e1a01424 	lsr	r1, r4, #8
    98d0:	e3510801 	cmp	r1, #65536	; 0x10000
    98d4:	2a000077 	bcs	9ab8 <malloc+0x14ac>
    98d8:	e2413c01 	sub	r3, r1, #256	; 0x100
    98dc:	e3a00001 	mov	r0, #1
    98e0:	e1a03823 	lsr	r3, r3, #16
    98e4:	e2033008 	and	r3, r3, #8
    98e8:	e1a01311 	lsl	r1, r1, r3
    98ec:	e241ca01 	sub	ip, r1, #4096	; 0x1000
    98f0:	e1a0c82c 	lsr	ip, ip, #16
    98f4:	e20cc004 	and	ip, ip, #4
    98f8:	e1a01c11 	lsl	r1, r1, ip
    98fc:	e183300c 	orr	r3, r3, ip
    9900:	e241c901 	sub	ip, r1, #16384	; 0x4000
    9904:	e1a0c82c 	lsr	ip, ip, #16
    9908:	e20cc002 	and	ip, ip, #2
    990c:	e1a01c11 	lsl	r1, r1, ip
    9910:	e083300c 	add	r3, r3, ip
    9914:	e06337a1 	rsb	r3, r3, r1, lsr #15
    9918:	e2831015 	add	r1, r3, #21
    991c:	e283300e 	add	r3, r3, #14
    9920:	e1a01134 	lsr	r1, r4, r1
    9924:	e0011000 	and	r1, r1, r0
    9928:	e0811013 	add	r1, r1, r3, lsl r0
    992c:	e281e04c 	add	lr, r1, #76	; 0x4c
    9930:	e1a00110 	lsl	r0, r0, r1
    9934:	e1a0710e 	lsl	r7, lr, #2
    9938:	e596c004 	ldr	ip, [r6, #4]
    993c:	e3a03000 	mov	r3, #0
    9940:	e582101c 	str	r1, [r2, #28]
    9944:	e5823014 	str	r3, [r2, #20]
    9948:	e110000c 	tst	r0, ip
    994c:	e5823010 	str	r3, [r2, #16]
    9950:	0a000062 	beq	9ae0 <malloc+0x14d4>
    9954:	e351001f 	cmp	r1, #31
    9958:	e796010e 	ldr	r0, [r6, lr, lsl #2]
    995c:	11a030a1 	lsrne	r3, r1, #1
    9960:	12633019 	rsbne	r3, r3, #25
    9964:	e1a01314 	lsl	r1, r4, r3
    9968:	ea000006 	b	9988 <malloc+0x137c>
    996c:	e1a03fa1 	lsr	r3, r1, #31
    9970:	e1a01081 	lsl	r1, r1, #1
    9974:	e2833004 	add	r3, r3, #4
    9978:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    997c:	e35c0000 	cmp	ip, #0
    9980:	0a0000a8 	beq	9c28 <malloc+0x161c>
    9984:	e1a0000c 	mov	r0, ip
    9988:	e5903004 	ldr	r3, [r0, #4]
    998c:	e3c33007 	bic	r3, r3, #7
    9990:	e1540003 	cmp	r4, r3
    9994:	1afffff4 	bne	996c <malloc+0x1360>
    9998:	e5961010 	ldr	r1, [r6, #16]
    999c:	e5903008 	ldr	r3, [r0, #8]
    99a0:	e1530001 	cmp	r3, r1
    99a4:	21500001 	cmpcs	r0, r1
    99a8:	3afffcf2 	bcc	8d78 <malloc+0x76c>
    99ac:	e3a01000 	mov	r1, #0
    99b0:	e583200c 	str	r2, [r3, #12]
    99b4:	e5802008 	str	r2, [r0, #8]
    99b8:	e5823008 	str	r3, [r2, #8]
    99bc:	e582000c 	str	r0, [r2, #12]
    99c0:	e5821018 	str	r1, [r2, #24]
    99c4:	eafffdb3 	b	9098 <malloc+0xa8c>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    99c8:	e1a00007 	mov	r0, r7
    99cc:	ebfffa7c 	bl	83c4 <sbrk>
    99d0:	e1590000 	cmp	r9, r0
    99d4:	e1a05000 	mov	r5, r0
    99d8:	1afffe58 	bne	9340 <malloc+0xd34>
    99dc:	eafffbfd 	b	89d8 <malloc+0x3cc>
    99e0:	0000d284 	.word	0x0000d284
    99e4:	0000d0ec 	.word	0x0000d0ec
    size_t dsize = m->dvsize += qsize;
    99e8:	e5963008 	ldr	r3, [r6, #8]
    m->dv = q;
    99ec:	e5862014 	str	r2, [r6, #20]
    size_t dsize = m->dvsize += qsize;
    99f0:	e0844003 	add	r4, r4, r3
    set_size_and_pinuse_of_free_chunk(q, dsize);
    99f4:	e3843001 	orr	r3, r4, #1
    size_t dsize = m->dvsize += qsize;
    99f8:	e5864008 	str	r4, [r6, #8]
    set_size_and_pinuse_of_free_chunk(q, dsize);
    99fc:	e5823004 	str	r3, [r2, #4]
    9a00:	e7824004 	str	r4, [r2, r4]
    9a04:	eafffda3 	b	9098 <malloc+0xa8c>
      size_t nsize = chunksize(oldfirst);
    9a08:	e3c33007 	bic	r3, r3, #7
    9a0c:	e591000c 	ldr	r0, [r1, #12]
      unlink_chunk(m, oldfirst, nsize);
    9a10:	e1a0e1a3 	lsr	lr, r3, #3
    9a14:	e35e001f 	cmp	lr, #31
    9a18:	8a00004f 	bhi	9b5c <malloc+0x1550>
    9a1c:	e1500001 	cmp	r0, r1
    9a20:	e591c008 	ldr	ip, [r1, #8]
    9a24:	0afffcd3 	beq	8d78 <malloc+0x76c>
    9a28:	e15c0001 	cmp	ip, r1
    9a2c:	0afffcd1 	beq	8d78 <malloc+0x76c>
    9a30:	e086718e 	add	r7, r6, lr, lsl #3
    9a34:	e2877028 	add	r7, r7, #40	; 0x28
    9a38:	e15c0007 	cmp	ip, r7
    9a3c:	1afffcc7 	bne	8d60 <malloc+0x754>
    9a40:	e15c0000 	cmp	ip, r0
    9a44:	0a0000a2 	beq	9cd4 <malloc+0x16c8>
    9a48:	e1570000 	cmp	r7, r0
    9a4c:	1a0000b7 	bne	9d30 <malloc+0x1724>
    9a50:	e58c000c 	str	r0, [ip, #12]
    9a54:	e580c008 	str	ip, [r0, #8]
      qsize += nsize;
    9a58:	e0844003 	add	r4, r4, r3
      oldfirst = chunk_plus_offset(oldfirst, nsize);
    9a5c:	e0811003 	add	r1, r1, r3
    set_free_with_pinuse(q, qsize, oldfirst);
    9a60:	e5913004 	ldr	r3, [r1, #4]
    insert_chunk(m, q, qsize);
    9a64:	e1a001a4 	lsr	r0, r4, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    9a68:	e384c001 	orr	ip, r4, #1
    insert_chunk(m, q, qsize);
    9a6c:	e350001f 	cmp	r0, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    9a70:	e3c33001 	bic	r3, r3, #1
    9a74:	e5813004 	str	r3, [r1, #4]
    9a78:	e582c004 	str	ip, [r2, #4]
    9a7c:	e7824004 	str	r4, [r2, r4]
    insert_chunk(m, q, qsize);
    9a80:	8affff91 	bhi	98cc <malloc+0x12c0>
    9a84:	e0863180 	add	r3, r6, r0, lsl #3
    9a88:	e354000f 	cmp	r4, #15
    9a8c:	e2833028 	add	r3, r3, #40	; 0x28
    9a90:	8afffd74 	bhi	9068 <malloc+0xa5c>
    9a94:	eafffcb7 	b	8d78 <malloc+0x76c>
          insert_chunk(m, r, rsize);
    9a98:	e0812103 	add	r2, r1, r3, lsl #2
    9a9c:	e1550002 	cmp	r5, r2
    9aa0:	8afffcb4 	bhi	8d78 <malloc+0x76c>
    9aa4:	e7817103 	str	r7, [r1, r3, lsl #2]
    9aa8:	e5871018 	str	r1, [r7, #24]
    9aac:	e587700c 	str	r7, [r7, #12]
    9ab0:	e5877008 	str	r7, [r7, #8]
    9ab4:	eafffc6f 	b	8c78 <malloc+0x66c>
    insert_chunk(m, q, qsize);
    9ab8:	e3a07f6b 	mov	r7, #428	; 0x1ac
    9abc:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
    9ac0:	e3a0101f 	mov	r1, #31
    9ac4:	e3a0e06b 	mov	lr, #107	; 0x6b
    9ac8:	eaffff9a 	b	9938 <malloc+0x132c>
    9acc:	e5960010 	ldr	r0, [r6, #16]
    9ad0:	e5931008 	ldr	r1, [r3, #8]
    9ad4:	e1510000 	cmp	r1, r0
    9ad8:	2afffd6a 	bcs	9088 <malloc+0xa7c>
    9adc:	eafffca5 	b	8d78 <malloc+0x76c>
    9ae0:	e180000c 	orr	r0, r0, ip
    9ae4:	e0867007 	add	r7, r6, r7
    9ae8:	e786210e 	str	r2, [r6, lr, lsl #2]
    9aec:	e5860004 	str	r0, [r6, #4]
    9af0:	e5827018 	str	r7, [r2, #24]
    9af4:	e582200c 	str	r2, [r2, #12]
    9af8:	e5822008 	str	r2, [r2, #8]
    9afc:	eafffd65 	b	9098 <malloc+0xa8c>
        unlink_large_chunk(m, v);
    9b00:	e3580000 	cmp	r8, #0
    9b04:	0afffc53 	beq	8c58 <malloc+0x64c>
    9b08:	e590101c 	ldr	r1, [r0, #28]
    9b0c:	e281304c 	add	r3, r1, #76	; 0x4c
    9b10:	e7962103 	ldr	r2, [r6, r3, lsl #2]
    9b14:	e1520000 	cmp	r2, r0
    9b18:	13a02000 	movne	r2, #0
    9b1c:	1afffc34 	bne	8bf4 <malloc+0x5e8>
    9b20:	e3a08001 	mov	r8, #1
    9b24:	e3a02000 	mov	r2, #0
    9b28:	e1ccc118 	bic	ip, ip, r8, lsl r1
    9b2c:	e7862103 	str	r2, [r6, r3, lsl #2]
    9b30:	e586c004 	str	ip, [r6, #4]
    9b34:	eafffc47 	b	8c58 <malloc+0x64c>
        replace_dv(m, r, rsize);
    9b38:	e5932008 	ldr	r2, [r3, #8]
    9b3c:	e15a0002 	cmp	sl, r2
    9b40:	9afffd0b 	bls	8f74 <malloc+0x968>
    9b44:	eafffc8b 	b	8d78 <malloc+0x76c>
      unlink_large_chunk(m, v);
    9b48:	e5903010 	ldr	r3, [r0, #16]
    9b4c:	e3530000 	cmp	r3, #0
    9b50:	0a00003d 	beq	9c4c <malloc+0x1640>
    9b54:	e2802010 	add	r2, r0, #16
    9b58:	eaffff10 	b	97a0 <malloc+0x1194>
      unlink_chunk(m, oldfirst, nsize);
    9b5c:	e1500001 	cmp	r0, r1
    9b60:	e5918018 	ldr	r8, [r1, #24]
    9b64:	0a000046 	beq	9c84 <malloc+0x1678>
    9b68:	e591c008 	ldr	ip, [r1, #8]
    9b6c:	e596e010 	ldr	lr, [r6, #16]
    9b70:	e15c000e 	cmp	ip, lr
    9b74:	3afffc7f 	bcc	8d78 <malloc+0x76c>
    9b78:	e59ce00c 	ldr	lr, [ip, #12]
    9b7c:	e15e0001 	cmp	lr, r1
    9b80:	1afffc7c 	bne	8d78 <malloc+0x76c>
    9b84:	e5907008 	ldr	r7, [r0, #8]
    9b88:	e15e0007 	cmp	lr, r7
    9b8c:	1afffc79 	bne	8d78 <malloc+0x76c>
    9b90:	e58c000c 	str	r0, [ip, #12]
    9b94:	e580c008 	str	ip, [r0, #8]
    9b98:	e3580000 	cmp	r8, #0
    9b9c:	0affffad 	beq	9a58 <malloc+0x144c>
    9ba0:	e591c01c 	ldr	ip, [r1, #28]
    9ba4:	e28cc04c 	add	ip, ip, #76	; 0x4c
    9ba8:	e796e10c 	ldr	lr, [r6, ip, lsl #2]
    9bac:	e15e0001 	cmp	lr, r1
    9bb0:	0786010c 	streq	r0, [r6, ip, lsl #2]
    9bb4:	0a000008 	beq	9bdc <malloc+0x15d0>
    9bb8:	e596c010 	ldr	ip, [r6, #16]
    9bbc:	e158000c 	cmp	r8, ip
    9bc0:	3afffc6c 	bcc	8d78 <malloc+0x76c>
    9bc4:	e598c010 	ldr	ip, [r8, #16]
    9bc8:	e15c0001 	cmp	ip, r1
    9bcc:	05880010 	streq	r0, [r8, #16]
    9bd0:	15880014 	strne	r0, [r8, #20]
    9bd4:	e3500000 	cmp	r0, #0
    9bd8:	0affff9e 	beq	9a58 <malloc+0x144c>
    9bdc:	e596e010 	ldr	lr, [r6, #16]
    9be0:	e150000e 	cmp	r0, lr
    9be4:	3afffc63 	bcc	8d78 <malloc+0x76c>
    9be8:	e591c010 	ldr	ip, [r1, #16]
    9bec:	e5808018 	str	r8, [r0, #24]
    9bf0:	e35c0000 	cmp	ip, #0
    9bf4:	0a000003 	beq	9c08 <malloc+0x15fc>
    9bf8:	e15e000c 	cmp	lr, ip
    9bfc:	8afffc5d 	bhi	8d78 <malloc+0x76c>
    9c00:	e580c010 	str	ip, [r0, #16]
    9c04:	e58c0018 	str	r0, [ip, #24]
    9c08:	e591c014 	ldr	ip, [r1, #20]
    9c0c:	e35c0000 	cmp	ip, #0
    9c10:	0affff90 	beq	9a58 <malloc+0x144c>
    9c14:	e15e000c 	cmp	lr, ip
    9c18:	8afffc56 	bhi	8d78 <malloc+0x76c>
    9c1c:	e580c014 	str	ip, [r0, #20]
    9c20:	e58c0018 	str	r0, [ip, #24]
    9c24:	eaffff8b 	b	9a58 <malloc+0x144c>
    insert_chunk(m, q, qsize);
    9c28:	e596c010 	ldr	ip, [r6, #16]
    9c2c:	e0801103 	add	r1, r0, r3, lsl #2
    9c30:	e15c0001 	cmp	ip, r1
    9c34:	8afffc4f 	bhi	8d78 <malloc+0x76c>
    9c38:	e7802103 	str	r2, [r0, r3, lsl #2]
    9c3c:	e5820018 	str	r0, [r2, #24]
    9c40:	e582200c 	str	r2, [r2, #12]
    9c44:	e5822008 	str	r2, [r2, #8]
    9c48:	eafffd12 	b	9098 <malloc+0xa8c>
      unlink_large_chunk(m, v);
    9c4c:	e35b0000 	cmp	fp, #0
    9c50:	0afffcb1 	beq	8f1c <malloc+0x910>
    9c54:	e590201c 	ldr	r2, [r0, #28]
    9c58:	e282304c 	add	r3, r2, #76	; 0x4c
    9c5c:	e7967103 	ldr	r7, [r6, r3, lsl #2]
    9c60:	e1500007 	cmp	r0, r7
    9c64:	13a07000 	movne	r7, #0
    9c68:	1afffc92 	bne	8eb8 <malloc+0x8ac>
    9c6c:	e3a0b001 	mov	fp, #1
    9c70:	e3a07000 	mov	r7, #0
    9c74:	e1c5521b 	bic	r5, r5, fp, lsl r2
    9c78:	e7867103 	str	r7, [r6, r3, lsl #2]
    9c7c:	e5865004 	str	r5, [r6, #4]
    9c80:	eafffca5 	b	8f1c <malloc+0x910>
      unlink_chunk(m, oldfirst, nsize);
    9c84:	e5910014 	ldr	r0, [r1, #20]
    9c88:	e281c014 	add	ip, r1, #20
    9c8c:	e3500000 	cmp	r0, #0
    9c90:	0a000014 	beq	9ce8 <malloc+0x16dc>
  size_t offset = align_offset(chunk2mem(p));
    9c94:	e1a0e000 	mov	lr, r0
      unlink_chunk(m, oldfirst, nsize);
    9c98:	e1a0700c 	mov	r7, ip
    9c9c:	e1a0c00e 	mov	ip, lr
    9ca0:	e1a0000e 	mov	r0, lr
    9ca4:	e5bce014 	ldr	lr, [ip, #20]!
    9ca8:	e35e0000 	cmp	lr, #0
    9cac:	1afffff9 	bne	9c98 <malloc+0x168c>
    9cb0:	e1a0c000 	mov	ip, r0
    9cb4:	e5bce010 	ldr	lr, [ip, #16]!
    9cb8:	e35e0000 	cmp	lr, #0
    9cbc:	1afffff5 	bne	9c98 <malloc+0x168c>
    9cc0:	e596c010 	ldr	ip, [r6, #16]
    9cc4:	e15c0007 	cmp	ip, r7
    9cc8:	8afffc2a 	bhi	8d78 <malloc+0x76c>
    9ccc:	e587e000 	str	lr, [r7]
    9cd0:	eaffffb0 	b	9b98 <malloc+0x158c>
    9cd4:	e5960000 	ldr	r0, [r6]
    9cd8:	e3a0c001 	mov	ip, #1
    9cdc:	e1c0ee1c 	bic	lr, r0, ip, lsl lr
    9ce0:	e586e000 	str	lr, [r6]
    9ce4:	eaffff5b 	b	9a58 <malloc+0x144c>
    9ce8:	e5910010 	ldr	r0, [r1, #16]
    9cec:	e281c010 	add	ip, r1, #16
    9cf0:	e3500000 	cmp	r0, #0
    9cf4:	1affffe6 	bne	9c94 <malloc+0x1688>
    9cf8:	e3580000 	cmp	r8, #0
    9cfc:	0affff55 	beq	9a58 <malloc+0x144c>
    9d00:	e591c01c 	ldr	ip, [r1, #28]
    9d04:	e28ce04c 	add	lr, ip, #76	; 0x4c
    9d08:	e796710e 	ldr	r7, [r6, lr, lsl #2]
    9d0c:	e1570001 	cmp	r7, r1
    9d10:	1affffa8 	bne	9bb8 <malloc+0x15ac>
    9d14:	e5960004 	ldr	r0, [r6, #4]
    9d18:	e3a07001 	mov	r7, #1
    9d1c:	e3a08000 	mov	r8, #0
    9d20:	e786810e 	str	r8, [r6, lr, lsl #2]
    9d24:	e1c00c17 	bic	r0, r0, r7, lsl ip
    9d28:	e5860004 	str	r0, [r6, #4]
    9d2c:	eaffff49 	b	9a58 <malloc+0x144c>
    9d30:	e596e010 	ldr	lr, [r6, #16]
    9d34:	e15e0000 	cmp	lr, r0
    9d38:	8afffc0e 	bhi	8d78 <malloc+0x76c>
    9d3c:	e590e008 	ldr	lr, [r0, #8]
    9d40:	e15e0001 	cmp	lr, r1
    9d44:	0affff41 	beq	9a50 <malloc+0x1444>
    9d48:	eafffc0a 	b	8d78 <malloc+0x76c>
  ensure_initialization();
    9d4c:	e30d829c 	movw	r8, #53916	; 0xd29c
    9d50:	e3408000 	movt	r8, #0
    9d54:	e5983000 	ldr	r3, [r8]
    9d58:	e3530000 	cmp	r3, #0
    9d5c:	1afffaf1 	bne	8928 <malloc+0x31c>
    9d60:	eafffaef 	b	8924 <malloc+0x318>

00009d64 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
    9d64:	e3500000 	cmp	r0, #0
    9d68:	012fff1e 	bxeq	lr
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    9d6c:	e30d10c4 	movw	r1, #53444	; 0xd0c4
void dlfree(void* mem) {
    9d70:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    9d74:	e3401000 	movt	r1, #0
    mchunkptr p  = mem2chunk(mem);
    9d78:	e2402008 	sub	r2, r0, #8
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    9d7c:	e591e010 	ldr	lr, [r1, #16]
    9d80:	e15e0002 	cmp	lr, r2
    9d84:	8a00004a 	bhi	9eb4 <free+0x150>
    9d88:	e5103004 	ldr	r3, [r0, #-4]
    9d8c:	e2034003 	and	r4, r3, #3
    9d90:	e3540001 	cmp	r4, #1
    9d94:	0a000046 	beq	9eb4 <free+0x150>
        size_t psize = chunksize(p);
        mchunkptr next = chunk_plus_offset(p, psize);
        if (!pinuse(p)) {
    9d98:	e3130001 	tst	r3, #1
        size_t psize = chunksize(p);
    9d9c:	e3c33007 	bic	r3, r3, #7
        mchunkptr next = chunk_plus_offset(p, psize);
    9da0:	e082c003 	add	ip, r2, r3
        if (!pinuse(p)) {
    9da4:	0a00001f 	beq	9e28 <free+0xc4>
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
    9da8:	e152000c 	cmp	r2, ip
    9dac:	2a000040 	bcs	9eb4 <free+0x150>
    9db0:	e59c0004 	ldr	r0, [ip, #4]
    9db4:	e3100001 	tst	r0, #1
    9db8:	0a00003d 	beq	9eb4 <free+0x150>
          if (!cinuse(next)) {  /* consolidate forward */
    9dbc:	e2104002 	ands	r4, r0, #2
    9dc0:	0a00003d 	beq	9ebc <free+0x158>
                goto postaction;
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
    9dc4:	e3c00001 	bic	r0, r0, #1
    9dc8:	e383e001 	orr	lr, r3, #1
    9dcc:	e58c0004 	str	r0, [ip, #4]
    9dd0:	e582e004 	str	lr, [r2, #4]
    9dd4:	e7823003 	str	r3, [r2, r3]

          if (is_small(psize)) {
    9dd8:	e1a001a3 	lsr	r0, r3, #3
    9ddc:	e350001f 	cmp	r0, #31
    9de0:	8a00007e 	bhi	9fe0 <free+0x27c>
            insert_small_chunk(fm, p, psize);
    9de4:	e353000f 	cmp	r3, #15
    9de8:	e0813180 	add	r3, r1, r0, lsl #3
    9dec:	e2833028 	add	r3, r3, #40	; 0x28
    9df0:	9a000078 	bls	9fd8 <free+0x274>
    9df4:	e3a0c001 	mov	ip, #1
    9df8:	e591e000 	ldr	lr, [r1]
    9dfc:	e1a0001c 	lsl	r0, ip, r0
    9e00:	e11e0000 	tst	lr, r0
    9e04:	1a00006f 	bne	9fc8 <free+0x264>
    9e08:	e1a0c003 	mov	ip, r3
    9e0c:	e18e0000 	orr	r0, lr, r0
    9e10:	e5810000 	str	r0, [r1]
    9e14:	e5832008 	str	r2, [r3, #8]
    9e18:	e58c200c 	str	r2, [ip, #12]
    9e1c:	e582c008 	str	ip, [r2, #8]
    9e20:	e582300c 	str	r3, [r2, #12]
    9e24:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          if (is_mmapped(p)) {
    9e28:	e3540000 	cmp	r4, #0
    9e2c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
          size_t prevsize = p->prev_foot;
    9e30:	e5104008 	ldr	r4, [r0, #-8]
            mchunkptr prev = chunk_minus_offset(p, prevsize);
    9e34:	e0422004 	sub	r2, r2, r4
            psize += prevsize;
    9e38:	e0833004 	add	r3, r3, r4
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
    9e3c:	e15e0002 	cmp	lr, r2
    9e40:	8a00001b 	bhi	9eb4 <free+0x150>
              if (p != fm->dv) {
    9e44:	e5910014 	ldr	r0, [r1, #20]
    9e48:	e1500002 	cmp	r0, r2
    9e4c:	0a00011b 	beq	a2c0 <free+0x55c>
                unlink_chunk(fm, p, prevsize);
    9e50:	e1a061a4 	lsr	r6, r4, #3
    9e54:	e592000c 	ldr	r0, [r2, #12]
    9e58:	e356001f 	cmp	r6, #31
    9e5c:	8a000079 	bhi	a048 <free+0x2e4>
    9e60:	e1500002 	cmp	r0, r2
    9e64:	e5925008 	ldr	r5, [r2, #8]
    9e68:	0a00005a 	beq	9fd8 <free+0x274>
    9e6c:	e1520005 	cmp	r2, r5
    9e70:	0a000058 	beq	9fd8 <free+0x274>
    9e74:	e5927004 	ldr	r7, [r2, #4]
    9e78:	e3c44007 	bic	r4, r4, #7
    9e7c:	e3c77007 	bic	r7, r7, #7
    9e80:	e1570004 	cmp	r7, r4
    9e84:	1a000053 	bne	9fd8 <free+0x274>
    9e88:	e0814186 	add	r4, r1, r6, lsl #3
    9e8c:	e2844028 	add	r4, r4, #40	; 0x28
    9e90:	e1540005 	cmp	r4, r5
    9e94:	1a0000d6 	bne	a1f4 <free+0x490>
    9e98:	e1500005 	cmp	r0, r5
    9e9c:	0a000125 	beq	a338 <free+0x5d4>
    9ea0:	e1540000 	cmp	r4, r0
    9ea4:	1a000155 	bne	a400 <free+0x69c>
    9ea8:	e585000c 	str	r0, [r5, #12]
    9eac:	e5805008 	str	r5, [r0, #8]
    9eb0:	eaffffbc 	b	9da8 <free+0x44>
          }
          goto postaction;
        }
      }
    erroraction:
      USAGE_ERROR_ACTION(fm, p);
    9eb4:	e3e00000 	mvn	r0, #0
    9eb8:	ebfff850 	bl	8000 <exit>
            if (next == fm->top) {
    9ebc:	e5916018 	ldr	r6, [r1, #24]
    9ec0:	e5915014 	ldr	r5, [r1, #20]
    9ec4:	e156000c 	cmp	r6, ip
    9ec8:	0a0000ed 	beq	a284 <free+0x520>
            else if (next == fm->dv) {
    9ecc:	e155000c 	cmp	r5, ip
    9ed0:	0a000105 	beq	a2ec <free+0x588>
              size_t nsize = chunksize(next);
    9ed4:	e3c00007 	bic	r0, r0, #7
    9ed8:	e59c400c 	ldr	r4, [ip, #12]
              unlink_chunk(fm, next, nsize);
    9edc:	e1a061a0 	lsr	r6, r0, #3
              psize += nsize;
    9ee0:	e0833000 	add	r3, r3, r0
              unlink_chunk(fm, next, nsize);
    9ee4:	e356001f 	cmp	r6, #31
    9ee8:	9a000086 	bls	a108 <free+0x3a4>
    9eec:	e154000c 	cmp	r4, ip
    9ef0:	e59c8018 	ldr	r8, [ip, #24]
    9ef4:	0a000114 	beq	a34c <free+0x5e8>
    9ef8:	e59c0008 	ldr	r0, [ip, #8]
    9efc:	e15e0000 	cmp	lr, r0
    9f00:	8a000034 	bhi	9fd8 <free+0x274>
    9f04:	e590500c 	ldr	r5, [r0, #12]
    9f08:	e155000c 	cmp	r5, ip
    9f0c:	1a000031 	bne	9fd8 <free+0x274>
    9f10:	e5945008 	ldr	r5, [r4, #8]
    9f14:	e155000c 	cmp	r5, ip
    9f18:	1a00002e 	bne	9fd8 <free+0x274>
    9f1c:	e580400c 	str	r4, [r0, #12]
    9f20:	e5840008 	str	r0, [r4, #8]
    9f24:	e3580000 	cmp	r8, #0
    9f28:	0a000100 	beq	a330 <free+0x5cc>
    9f2c:	e59c001c 	ldr	r0, [ip, #28]
    9f30:	e280004c 	add	r0, r0, #76	; 0x4c
    9f34:	e7915100 	ldr	r5, [r1, r0, lsl #2]
    9f38:	e155000c 	cmp	r5, ip
    9f3c:	07814100 	streq	r4, [r1, r0, lsl #2]
    9f40:	0a000007 	beq	9f64 <free+0x200>
    9f44:	e15e0008 	cmp	lr, r8
    9f48:	8a000022 	bhi	9fd8 <free+0x274>
    9f4c:	e5980010 	ldr	r0, [r8, #16]
    9f50:	e150000c 	cmp	r0, ip
    9f54:	05884010 	streq	r4, [r8, #16]
    9f58:	15884014 	strne	r4, [r8, #20]
    9f5c:	e3540000 	cmp	r4, #0
    9f60:	0a0000f2 	beq	a330 <free+0x5cc>
    9f64:	e15e0004 	cmp	lr, r4
    9f68:	8a00001a 	bhi	9fd8 <free+0x274>
    9f6c:	e59c0010 	ldr	r0, [ip, #16]
    9f70:	e5848018 	str	r8, [r4, #24]
    9f74:	e3500000 	cmp	r0, #0
    9f78:	0a000003 	beq	9f8c <free+0x228>
    9f7c:	e15e0000 	cmp	lr, r0
    9f80:	8a000014 	bhi	9fd8 <free+0x274>
    9f84:	e5840010 	str	r0, [r4, #16]
    9f88:	e5804018 	str	r4, [r0, #24]
    9f8c:	e59c0014 	ldr	r0, [ip, #20]
    9f90:	e3500000 	cmp	r0, #0
    9f94:	0a0000e5 	beq	a330 <free+0x5cc>
    9f98:	e15e0000 	cmp	lr, r0
    9f9c:	8a00000d 	bhi	9fd8 <free+0x274>
    9fa0:	e5915014 	ldr	r5, [r1, #20]
    9fa4:	e5840014 	str	r0, [r4, #20]
    9fa8:	e5804018 	str	r4, [r0, #24]
              if (p == fm->dv) {
    9fac:	e1520005 	cmp	r2, r5
              set_size_and_pinuse_of_free_chunk(p, psize);
    9fb0:	e3830001 	orr	r0, r3, #1
    9fb4:	e5820004 	str	r0, [r2, #4]
    9fb8:	e7823003 	str	r3, [r2, r3]
              if (p == fm->dv) {
    9fbc:	1affff85 	bne	9dd8 <free+0x74>
                fm->dvsize = psize;
    9fc0:	e5813008 	str	r3, [r1, #8]
                goto postaction;
    9fc4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_small_chunk(fm, p, psize);
    9fc8:	e5911010 	ldr	r1, [r1, #16]
    9fcc:	e593c008 	ldr	ip, [r3, #8]
    9fd0:	e15c0001 	cmp	ip, r1
    9fd4:	2affff8e 	bcs	9e14 <free+0xb0>
                unlink_chunk(fm, p, prevsize);
    9fd8:	e3e00000 	mvn	r0, #0
    9fdc:	ebfff807 	bl	8000 <exit>
            insert_large_chunk(fm, tp, psize);
    9fe0:	e1a0c423 	lsr	ip, r3, #8
    9fe4:	e35c0801 	cmp	ip, #65536	; 0x10000
    9fe8:	3a000056 	bcc	a148 <free+0x3e4>
    9fec:	e3a0e102 	mov	lr, #-2147483648	; 0x80000000
    9ff0:	e3a05f6b 	mov	r5, #428	; 0x1ac
    9ff4:	e3a0001f 	mov	r0, #31
    9ff8:	e3a0606b 	mov	r6, #107	; 0x6b
    9ffc:	e5914004 	ldr	r4, [r1, #4]
    a000:	e3a0c000 	mov	ip, #0
    a004:	e582001c 	str	r0, [r2, #28]
    a008:	e582c014 	str	ip, [r2, #20]
    a00c:	e11e0004 	tst	lr, r4
    a010:	e582c010 	str	ip, [r2, #16]
    a014:	1a00007c 	bne	a20c <free+0x4a8>
    a018:	e18ee004 	orr	lr, lr, r4
    a01c:	e0813005 	add	r3, r1, r5
    a020:	e7812106 	str	r2, [r1, r6, lsl #2]
    a024:	e581e004 	str	lr, [r1, #4]
    a028:	e5823018 	str	r3, [r2, #24]
    a02c:	e582200c 	str	r2, [r2, #12]
    a030:	e5822008 	str	r2, [r2, #8]
            if (--fm->release_checks == 0)
    a034:	e5913020 	ldr	r3, [r1, #32]
    a038:	e2533001 	subs	r3, r3, #1
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
    a03c:	03e03000 	mvneq	r3, #0
    a040:	e5813020 	str	r3, [r1, #32]
    }
  }
#if !FOOTERS
#undef fm
#endif /* FOOTERS */
}
    a044:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                unlink_chunk(fm, p, prevsize);
    a048:	e1500002 	cmp	r0, r2
    a04c:	e5927018 	ldr	r7, [r2, #24]
    a050:	0a000055 	beq	a1ac <free+0x448>
    a054:	e5924008 	ldr	r4, [r2, #8]
    a058:	e15e0004 	cmp	lr, r4
    a05c:	8affffdd 	bhi	9fd8 <free+0x274>
    a060:	e594500c 	ldr	r5, [r4, #12]
    a064:	e1550002 	cmp	r5, r2
    a068:	1affffda 	bne	9fd8 <free+0x274>
    a06c:	e5905008 	ldr	r5, [r0, #8]
    a070:	e1550002 	cmp	r5, r2
    a074:	1affffd7 	bne	9fd8 <free+0x274>
    a078:	e584000c 	str	r0, [r4, #12]
    a07c:	e5804008 	str	r4, [r0, #8]
    a080:	e3570000 	cmp	r7, #0
    a084:	0affff47 	beq	9da8 <free+0x44>
    a088:	e592401c 	ldr	r4, [r2, #28]
    a08c:	e284404c 	add	r4, r4, #76	; 0x4c
    a090:	e7915104 	ldr	r5, [r1, r4, lsl #2]
    a094:	e1550002 	cmp	r5, r2
    a098:	07810104 	streq	r0, [r1, r4, lsl #2]
    a09c:	0a000007 	beq	a0c0 <free+0x35c>
    a0a0:	e15e0007 	cmp	lr, r7
    a0a4:	8affffcb 	bhi	9fd8 <free+0x274>
    a0a8:	e5974010 	ldr	r4, [r7, #16]
    a0ac:	e1540002 	cmp	r4, r2
    a0b0:	05870010 	streq	r0, [r7, #16]
    a0b4:	15870014 	strne	r0, [r7, #20]
    a0b8:	e3500000 	cmp	r0, #0
    a0bc:	0affff39 	beq	9da8 <free+0x44>
    a0c0:	e15e0000 	cmp	lr, r0
    a0c4:	8affffc3 	bhi	9fd8 <free+0x274>
    a0c8:	e5924010 	ldr	r4, [r2, #16]
    a0cc:	e5807018 	str	r7, [r0, #24]
    a0d0:	e3540000 	cmp	r4, #0
    a0d4:	0a000003 	beq	a0e8 <free+0x384>
    a0d8:	e15e0004 	cmp	lr, r4
    a0dc:	8affffbd 	bhi	9fd8 <free+0x274>
    a0e0:	e5804010 	str	r4, [r0, #16]
    a0e4:	e5840018 	str	r0, [r4, #24]
    a0e8:	e5924014 	ldr	r4, [r2, #20]
    a0ec:	e3540000 	cmp	r4, #0
    a0f0:	0affff2c 	beq	9da8 <free+0x44>
    a0f4:	e15e0004 	cmp	lr, r4
    a0f8:	8affffb6 	bhi	9fd8 <free+0x274>
    a0fc:	e5804014 	str	r4, [r0, #20]
    a100:	e5840018 	str	r0, [r4, #24]
    a104:	eaffff27 	b	9da8 <free+0x44>
              unlink_chunk(fm, next, nsize);
    a108:	e154000c 	cmp	r4, ip
    a10c:	e59c0008 	ldr	r0, [ip, #8]
    a110:	0affffb0 	beq	9fd8 <free+0x274>
    a114:	e15c0000 	cmp	ip, r0
    a118:	0affffae 	beq	9fd8 <free+0x274>
    a11c:	e0817186 	add	r7, r1, r6, lsl #3
    a120:	e2877028 	add	r7, r7, #40	; 0x28
    a124:	e1570000 	cmp	r7, r0
    a128:	1a0000a9 	bne	a3d4 <free+0x670>
    a12c:	e1540000 	cmp	r4, r0
    a130:	0a00009d 	beq	a3ac <free+0x648>
    a134:	e1540007 	cmp	r4, r7
    a138:	1a0000b6 	bne	a418 <free+0x6b4>
    a13c:	e580400c 	str	r4, [r0, #12]
    a140:	e5840008 	str	r0, [r4, #8]
    a144:	eaffff98 	b	9fac <free+0x248>
            insert_large_chunk(fm, tp, psize);
    a148:	e24c0c01 	sub	r0, ip, #256	; 0x100
    a14c:	e3a0e001 	mov	lr, #1
    a150:	e1a00820 	lsr	r0, r0, #16
    a154:	e2000008 	and	r0, r0, #8
    a158:	e1a0401c 	lsl	r4, ip, r0
    a15c:	e244ca01 	sub	ip, r4, #4096	; 0x1000
    a160:	e1a0c82c 	lsr	ip, ip, #16
    a164:	e20cc004 	and	ip, ip, #4
    a168:	e1a04c14 	lsl	r4, r4, ip
    a16c:	e180c00c 	orr	ip, r0, ip
    a170:	e2440901 	sub	r0, r4, #16384	; 0x4000
    a174:	e1a00820 	lsr	r0, r0, #16
    a178:	e2000002 	and	r0, r0, #2
    a17c:	e1a04014 	lsl	r4, r4, r0
    a180:	e08cc000 	add	ip, ip, r0
    a184:	e06cc7a4 	rsb	ip, ip, r4, lsr #15
    a188:	e28c0015 	add	r0, ip, #21
    a18c:	e28cc00e 	add	ip, ip, #14
    a190:	e1a00033 	lsr	r0, r3, r0
    a194:	e000000e 	and	r0, r0, lr
    a198:	e0800e1c 	add	r0, r0, ip, lsl lr
    a19c:	e280604c 	add	r6, r0, #76	; 0x4c
    a1a0:	e1a0e01e 	lsl	lr, lr, r0
    a1a4:	e1a05106 	lsl	r5, r6, #2
    a1a8:	eaffff93 	b	9ffc <free+0x298>
                unlink_chunk(fm, p, prevsize);
    a1ac:	e5925014 	ldr	r5, [r2, #20]
    a1b0:	e3550000 	cmp	r5, #0
    a1b4:	12824014 	addne	r4, r2, #20
    a1b8:	0a000080 	beq	a3c0 <free+0x65c>
    a1bc:	e1a06004 	mov	r6, r4
    a1c0:	e1a04005 	mov	r4, r5
    a1c4:	e1a00005 	mov	r0, r5
    a1c8:	e5b45014 	ldr	r5, [r4, #20]!
    a1cc:	e3550000 	cmp	r5, #0
    a1d0:	1afffff9 	bne	a1bc <free+0x458>
    a1d4:	e1a04000 	mov	r4, r0
    a1d8:	e5b45010 	ldr	r5, [r4, #16]!
    a1dc:	e3550000 	cmp	r5, #0
    a1e0:	1afffff5 	bne	a1bc <free+0x458>
    a1e4:	e15e0006 	cmp	lr, r6
    a1e8:	8affff7a 	bhi	9fd8 <free+0x274>
    a1ec:	e5865000 	str	r5, [r6]
    a1f0:	eaffffa2 	b	a080 <free+0x31c>
    a1f4:	e15e0005 	cmp	lr, r5
    a1f8:	8affff76 	bhi	9fd8 <free+0x274>
    a1fc:	e595700c 	ldr	r7, [r5, #12]
    a200:	e1570002 	cmp	r7, r2
    a204:	0affff23 	beq	9e98 <free+0x134>
    a208:	eaffff72 	b	9fd8 <free+0x274>
            insert_large_chunk(fm, tp, psize);
    a20c:	e350001f 	cmp	r0, #31
    a210:	e791e106 	ldr	lr, [r1, r6, lsl #2]
    a214:	11a0c0a0 	lsrne	ip, r0, #1
    a218:	01a0c003 	moveq	ip, r3
    a21c:	126cc019 	rsbne	ip, ip, #25
    a220:	11a0cc13 	lslne	ip, r3, ip
    a224:	ea000006 	b	a244 <free+0x4e0>
    a228:	e1a00fac 	lsr	r0, ip, #31
    a22c:	e1a0c08c 	lsl	ip, ip, #1
    a230:	e2800004 	add	r0, r0, #4
    a234:	e79e4100 	ldr	r4, [lr, r0, lsl #2]
    a238:	e3540000 	cmp	r4, #0
    a23c:	0a000032 	beq	a30c <free+0x5a8>
    a240:	e1a0e004 	mov	lr, r4
    a244:	e59e0004 	ldr	r0, [lr, #4]
    a248:	e3c00007 	bic	r0, r0, #7
    a24c:	e1500003 	cmp	r0, r3
    a250:	1afffff4 	bne	a228 <free+0x4c4>
    a254:	e59e3008 	ldr	r3, [lr, #8]
    a258:	e5910010 	ldr	r0, [r1, #16]
    a25c:	e1500003 	cmp	r0, r3
    a260:	9150000e 	cmpls	r0, lr
    a264:	8affff5b 	bhi	9fd8 <free+0x274>
    a268:	e3a00000 	mov	r0, #0
    a26c:	e583200c 	str	r2, [r3, #12]
    a270:	e58e2008 	str	r2, [lr, #8]
    a274:	e5823008 	str	r3, [r2, #8]
    a278:	e582e00c 	str	lr, [r2, #12]
    a27c:	e5820018 	str	r0, [r2, #24]
    a280:	eaffff6b 	b	a034 <free+0x2d0>
              size_t tsize = fm->topsize += psize;
    a284:	e591000c 	ldr	r0, [r1, #12]
              if (p == fm->dv) {
    a288:	e1520005 	cmp	r2, r5
              fm->top = p;
    a28c:	e5812018 	str	r2, [r1, #24]
              size_t tsize = fm->topsize += psize;
    a290:	e0833000 	add	r3, r3, r0
              p->head = tsize | PINUSE_BIT;
    a294:	e3830001 	orr	r0, r3, #1
              size_t tsize = fm->topsize += psize;
    a298:	e581300c 	str	r3, [r1, #12]
              p->head = tsize | PINUSE_BIT;
    a29c:	e5820004 	str	r0, [r2, #4]
              if (should_trim(fm, tsize))
    a2a0:	e591201c 	ldr	r2, [r1, #28]
                fm->dv = 0;
    a2a4:	05814014 	streq	r4, [r1, #20]
                fm->dvsize = 0;
    a2a8:	05814008 	streq	r4, [r1, #8]
              if (should_trim(fm, tsize))
    a2ac:	e1530002 	cmp	r3, r2
    a2b0:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
                sys_trim(fm, 0);
    a2b4:	e3a00000 	mov	r0, #0
}
    a2b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
                sys_trim(fm, 0);
    a2bc:	eafff86e 	b	847c <sys_trim.constprop.7>
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
    a2c0:	e59c4004 	ldr	r4, [ip, #4]
    a2c4:	e2045003 	and	r5, r4, #3
    a2c8:	e3550003 	cmp	r5, #3
    a2cc:	1afffeb5 	bne	9da8 <free+0x44>
                set_free_with_pinuse(p, psize, next);
    a2d0:	e3c44001 	bic	r4, r4, #1
    a2d4:	e3832001 	orr	r2, r3, #1
                fm->dvsize = psize;
    a2d8:	e5813008 	str	r3, [r1, #8]
                set_free_with_pinuse(p, psize, next);
    a2dc:	e58c4004 	str	r4, [ip, #4]
    a2e0:	e5802004 	str	r2, [r0, #4]
    a2e4:	e58c3000 	str	r3, [ip]
                goto postaction;
    a2e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              size_t dsize = fm->dvsize += psize;
    a2ec:	e5910008 	ldr	r0, [r1, #8]
              fm->dv = p;
    a2f0:	e5812014 	str	r2, [r1, #20]
              size_t dsize = fm->dvsize += psize;
    a2f4:	e0833000 	add	r3, r3, r0
              set_size_and_pinuse_of_free_chunk(p, dsize);
    a2f8:	e3830001 	orr	r0, r3, #1
              size_t dsize = fm->dvsize += psize;
    a2fc:	e5813008 	str	r3, [r1, #8]
              set_size_and_pinuse_of_free_chunk(p, dsize);
    a300:	e5820004 	str	r0, [r2, #4]
    a304:	e7823003 	str	r3, [r2, r3]
              goto postaction;
    a308:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_large_chunk(fm, tp, psize);
    a30c:	e591c010 	ldr	ip, [r1, #16]
    a310:	e08e3100 	add	r3, lr, r0, lsl #2
    a314:	e15c0003 	cmp	ip, r3
    a318:	8affff2e 	bhi	9fd8 <free+0x274>
    a31c:	e78e2100 	str	r2, [lr, r0, lsl #2]
    a320:	e582e018 	str	lr, [r2, #24]
    a324:	e582200c 	str	r2, [r2, #12]
    a328:	e5822008 	str	r2, [r2, #8]
    a32c:	eaffff40 	b	a034 <free+0x2d0>
    a330:	e5915014 	ldr	r5, [r1, #20]
    a334:	eaffff1c 	b	9fac <free+0x248>
                unlink_chunk(fm, p, prevsize);
    a338:	e5910000 	ldr	r0, [r1]
    a33c:	e3a04001 	mov	r4, #1
    a340:	e1c06614 	bic	r6, r0, r4, lsl r6
    a344:	e5816000 	str	r6, [r1]
    a348:	eafffe96 	b	9da8 <free+0x44>
              unlink_chunk(fm, next, nsize);
    a34c:	e59c7014 	ldr	r7, [ip, #20]
    a350:	e3570000 	cmp	r7, #0
    a354:	128c0014 	addne	r0, ip, #20
    a358:	0a000023 	beq	a3ec <free+0x688>
                unlink_chunk(fm, p, prevsize);
    a35c:	e1a04007 	mov	r4, r7
    a360:	e1a06000 	mov	r6, r0
              unlink_chunk(fm, next, nsize);
    a364:	e1a00004 	mov	r0, r4
    a368:	e5b05014 	ldr	r5, [r0, #20]!
    a36c:	e3550000 	cmp	r5, #0
    a370:	0a000005 	beq	a38c <free+0x628>
    a374:	e1a04005 	mov	r4, r5
    a378:	e1a06000 	mov	r6, r0
    a37c:	e1a00004 	mov	r0, r4
    a380:	e5b05014 	ldr	r5, [r0, #20]!
    a384:	e3550000 	cmp	r5, #0
    a388:	1afffff9 	bne	a374 <free+0x610>
    a38c:	e1a00004 	mov	r0, r4
    a390:	e5b07010 	ldr	r7, [r0, #16]!
    a394:	e3570000 	cmp	r7, #0
    a398:	1affffef 	bne	a35c <free+0x5f8>
    a39c:	e15e0006 	cmp	lr, r6
    a3a0:	8affff0c 	bhi	9fd8 <free+0x274>
    a3a4:	e5867000 	str	r7, [r6]
    a3a8:	eafffedd 	b	9f24 <free+0x1c0>
    a3ac:	e5910000 	ldr	r0, [r1]
    a3b0:	e3a0c001 	mov	ip, #1
    a3b4:	e1c0661c 	bic	r6, r0, ip, lsl r6
    a3b8:	e5816000 	str	r6, [r1]
    a3bc:	eafffefa 	b	9fac <free+0x248>
                unlink_chunk(fm, p, prevsize);
    a3c0:	e5925010 	ldr	r5, [r2, #16]
    a3c4:	e3550000 	cmp	r5, #0
    a3c8:	0a000018 	beq	a430 <free+0x6cc>
    a3cc:	e2824010 	add	r4, r2, #16
    a3d0:	eaffff79 	b	a1bc <free+0x458>
              unlink_chunk(fm, next, nsize);
    a3d4:	e15e0000 	cmp	lr, r0
    a3d8:	8afffefe 	bhi	9fd8 <free+0x274>
    a3dc:	e590800c 	ldr	r8, [r0, #12]
    a3e0:	e158000c 	cmp	r8, ip
    a3e4:	0affff50 	beq	a12c <free+0x3c8>
    a3e8:	eafffefa 	b	9fd8 <free+0x274>
    a3ec:	e59c7010 	ldr	r7, [ip, #16]
    a3f0:	e3570000 	cmp	r7, #0
    a3f4:	0a00001b 	beq	a468 <free+0x704>
    a3f8:	e28c0010 	add	r0, ip, #16
    a3fc:	eaffffd6 	b	a35c <free+0x5f8>
                unlink_chunk(fm, p, prevsize);
    a400:	e15e0000 	cmp	lr, r0
    a404:	8afffef3 	bhi	9fd8 <free+0x274>
    a408:	e5904008 	ldr	r4, [r0, #8]
    a40c:	e1540002 	cmp	r4, r2
    a410:	0afffea4 	beq	9ea8 <free+0x144>
    a414:	eafffeef 	b	9fd8 <free+0x274>
              unlink_chunk(fm, next, nsize);
    a418:	e15e0004 	cmp	lr, r4
    a41c:	8afffeed 	bhi	9fd8 <free+0x274>
    a420:	e594e008 	ldr	lr, [r4, #8]
    a424:	e15e000c 	cmp	lr, ip
    a428:	0affff43 	beq	a13c <free+0x3d8>
    a42c:	eafffee9 	b	9fd8 <free+0x274>
                unlink_chunk(fm, p, prevsize);
    a430:	e3570000 	cmp	r7, #0
    a434:	0afffe5b 	beq	9da8 <free+0x44>
    a438:	e592401c 	ldr	r4, [r2, #28]
    a43c:	e284804c 	add	r8, r4, #76	; 0x4c
    a440:	e7910108 	ldr	r0, [r1, r8, lsl #2]
    a444:	e1500002 	cmp	r0, r2
    a448:	11a00005 	movne	r0, r5
    a44c:	1affff13 	bne	a0a0 <free+0x33c>
    a450:	e5910004 	ldr	r0, [r1, #4]
    a454:	e3a06001 	mov	r6, #1
    a458:	e7815108 	str	r5, [r1, r8, lsl #2]
    a45c:	e1c00416 	bic	r0, r0, r6, lsl r4
    a460:	e5810004 	str	r0, [r1, #4]
    a464:	eafffe4f 	b	9da8 <free+0x44>
              unlink_chunk(fm, next, nsize);
    a468:	e3580000 	cmp	r8, #0
    a46c:	0afffece 	beq	9fac <free+0x248>
    a470:	e59c401c 	ldr	r4, [ip, #28]
    a474:	e284504c 	add	r5, r4, #76	; 0x4c
    a478:	e7910105 	ldr	r0, [r1, r5, lsl #2]
    a47c:	e150000c 	cmp	r0, ip
    a480:	13a04000 	movne	r4, #0
    a484:	1afffeae 	bne	9f44 <free+0x1e0>
    a488:	e5910004 	ldr	r0, [r1, #4]
    a48c:	e3a0c001 	mov	ip, #1
    a490:	e3a0e000 	mov	lr, #0
    a494:	e781e105 	str	lr, [r1, r5, lsl #2]
    a498:	e5915014 	ldr	r5, [r1, #20]
    a49c:	e1c0041c 	bic	r0, r0, ip, lsl r4
    a4a0:	e5810004 	str	r0, [r1, #4]
    a4a4:	eafffec0 	b	9fac <free+0x248>

0000a4a8 <_stdio_fgetc>:
}

static int _stdio_fgetc(void *ctx)
{
	return (unsigned char)0xff;
}
    a4a8:	e3a000ff 	mov	r0, #255	; 0xff
    a4ac:	e12fff1e 	bx	lr

0000a4b0 <_stdio_vfprintf>:
	return buffered_write(ctx, str, strnlen(str, len));
}

static int _stdio_vfprintf(void *ctx, const char *fmt, va_list ap)
{
	return _printf_engine(_output_func, ctx, fmt, ap);
    a4b0:	e1a03002 	mov	r3, r2
    a4b4:	e1a02001 	mov	r2, r1
    a4b8:	e1a01000 	mov	r1, r0
    a4bc:	e30a0584 	movw	r0, #42372	; 0xa584
    a4c0:	e3400000 	movt	r0, #0
    a4c4:	ea0002ef 	b	b088 <_printf_engine>

0000a4c8 <_stdio_fputc>:
{
    a4c8:	e92d4010 	push	{r4, lr}
	buffered_put(fctx->buffer, fctx->fd, (char)c);
    a4cc:	e6ef1071 	uxtb	r1, r1
    a4d0:	e8900011 	ldm	r0, {r0, r4}
	buffer->data[buffer->pos++] = c;
    a4d4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    a4d8:	e2832001 	add	r2, r3, #1
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    a4dc:	e351000a 	cmp	r1, #10
    a4e0:	13520080 	cmpne	r2, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    a4e4:	e5842080 	str	r2, [r4, #128]	; 0x80
    a4e8:	e7c41003 	strb	r1, [r4, r3]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    a4ec:	1a000003 	bne	a500 <_stdio_fputc+0x38>
		result = write(fd, buffer->data, buffer->pos);
    a4f0:	e1a01004 	mov	r1, r4
    a4f4:	eb000086 	bl	a714 <write>
		buffer->pos = 0;
    a4f8:	e3a03000 	mov	r3, #0
    a4fc:	e5843080 	str	r3, [r4, #128]	; 0x80
}
    a500:	e3e00102 	mvn	r0, #-2147483648	; 0x80000000
    a504:	e8bd8010 	pop	{r4, pc}

0000a508 <buffered_write.part.0>:
static int buffered_write(struct file_context *ctx, const char *str, size_t sz)
    a508:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < sz; i++) {
    a50c:	e2528000 	subs	r8, r2, #0
    a510:	0a000019 	beq	a57c <buffered_write.part.0+0x74>
    a514:	e2489001 	sub	r9, r8, #1
    a518:	e1a06000 	mov	r6, r0
    a51c:	e2415001 	sub	r5, r1, #1
    a520:	e0819009 	add	r9, r1, r9
		buffer->pos = 0;
    a524:	e3a07000 	mov	r7, #0
    a528:	ea000001 	b	a534 <buffered_write.part.0+0x2c>
	for (i = 0; i < sz; i++) {
    a52c:	e1550009 	cmp	r5, r9
    a530:	0a000011 	beq	a57c <buffered_write.part.0+0x74>
		int result = buffered_put(ctx->buffer, ctx->fd, str[i]);
    a534:	e5964004 	ldr	r4, [r6, #4]
    a538:	e5f5e001 	ldrb	lr, [r5, #1]!
    a53c:	e5960000 	ldr	r0, [r6]
	buffer->data[buffer->pos++] = c;
    a540:	e594c080 	ldr	ip, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    a544:	e1a01004 	mov	r1, r4
	buffer->data[buffer->pos++] = c;
    a548:	e28c3001 	add	r3, ip, #1
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    a54c:	e35e000a 	cmp	lr, #10
    a550:	13530080 	cmpne	r3, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    a554:	e5843080 	str	r3, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    a558:	e1a02003 	mov	r2, r3
	buffer->data[buffer->pos++] = c;
    a55c:	e7c4e00c 	strb	lr, [r4, ip]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    a560:	1afffff1 	bne	a52c <buffered_write.part.0+0x24>
		result = write(fd, buffer->data, buffer->pos);
    a564:	eb00006a 	bl	a714 <write>
		if (result < 0) {
    a568:	e3500000 	cmp	r0, #0
		buffer->pos = 0;
    a56c:	e5847080 	str	r7, [r4, #128]	; 0x80
		if (result < 0) {
    a570:	b8bd87f0 	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < sz; i++) {
    a574:	e1550009 	cmp	r5, r9
    a578:	1affffed 	bne	a534 <buffered_write.part.0+0x2c>
	return sz;
    a57c:	e1a00008 	mov	r0, r8
}
    a580:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000a584 <_output_func>:
{
    a584:	e92d4070 	push	{r4, r5, r6, lr}
    a588:	e1a04002 	mov	r4, r2
    a58c:	e1a05000 	mov	r5, r0
	return buffered_write(ctx, str, strnlen(str, len));
    a590:	eb00053f 	bl	ba94 <strnlen>
	if (!ctx->buffer) {
    a594:	e5943004 	ldr	r3, [r4, #4]
    a598:	e3530000 	cmp	r3, #0
    a59c:	0a000004 	beq	a5b4 <_output_func+0x30>
    a5a0:	e1a02000 	mov	r2, r0
    a5a4:	e1a01005 	mov	r1, r5
    a5a8:	e1a00004 	mov	r0, r4
}
    a5ac:	e8bd4070 	pop	{r4, r5, r6, lr}
    a5b0:	eaffffd4 	b	a508 <buffered_write.part.0>
    a5b4:	e3e00007 	mvn	r0, #7
    a5b8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a5bc <_stdio_fputs>:
{
    a5bc:	e92d4070 	push	{r4, r5, r6, lr}
    a5c0:	e1a04000 	mov	r4, r0
	return buffered_write(fctx, s, strlen(s));
    a5c4:	e1a00001 	mov	r0, r1
{
    a5c8:	e1a05001 	mov	r5, r1
	return buffered_write(fctx, s, strlen(s));
    a5cc:	eb000524 	bl	ba64 <strlen>
	if (!ctx->buffer) {
    a5d0:	e5943004 	ldr	r3, [r4, #4]
    a5d4:	e3530000 	cmp	r3, #0
    a5d8:	0a000004 	beq	a5f0 <_stdio_fputs+0x34>
    a5dc:	e1a02000 	mov	r2, r0
    a5e0:	e1a01005 	mov	r1, r5
    a5e4:	e1a00004 	mov	r0, r4
}
    a5e8:	e8bd4070 	pop	{r4, r5, r6, lr}
    a5ec:	eaffffc5 	b	a508 <buffered_write.part.0>
    a5f0:	e3e00007 	mvn	r0, #7
    a5f4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a5f8 <__libc_fini>:
 * of the executable, if any.
 *
 * 'fini_array' points to a list of function addresses. The first
 * entry in the list has value -1, the last one has value 0.
 */
void __libc_fini(void* array) {
    a5f8:	e92d4070 	push	{r4, r5, r6, lr}
  void** fini_array = (void **)array;
  const size_t minus1 = ~(size_t)0; /* ensure proper sign extension */

  /* Sanity check - first entry must be -1 */
  if (array == NULL || (size_t)fini_array[0] != minus1) {
    a5fc:	e2505000 	subs	r5, r0, #0
    a600:	08bd8070 	popeq	{r4, r5, r6, pc}
    a604:	e5953000 	ldr	r3, [r5]
    a608:	e3730001 	cmn	r3, #1
    a60c:	18bd8070 	popne	{r4, r5, r6, pc}
  /* skip over it */
  fini_array += 1;

  /* Count the number of destructors. */
  int count = 0;
  while (fini_array[count] != NULL) {
    a610:	e5952004 	ldr	r2, [r5, #4]
  fini_array += 1;
    a614:	e2853004 	add	r3, r5, #4
  while (fini_array[count] != NULL) {
    a618:	e3520000 	cmp	r2, #0
    a61c:	08bd8070 	popeq	{r4, r5, r6, pc}
  int count = 0;
    a620:	e3a04000 	mov	r4, #0
  while (fini_array[count] != NULL) {
    a624:	e5b32004 	ldr	r2, [r3, #4]!
    ++count;
    a628:	e2844001 	add	r4, r4, #1
  while (fini_array[count] != NULL) {
    a62c:	e3520000 	cmp	r2, #0
    a630:	1afffffb 	bne	a624 <__libc_fini+0x2c>
    a634:	e0854104 	add	r4, r5, r4, lsl #2
  }

  /* Now call each destructor in reverse order. */
  while (count > 0) {
    void (*func)(void) = (void (*)(void)) fini_array[--count];
    a638:	e4143004 	ldr	r3, [r4], #-4

    /* Sanity check, any -1 in the list is ignored */
    if ((size_t)func == minus1) {
    a63c:	e3730001 	cmn	r3, #1
    a640:	0a000000 	beq	a648 <__libc_fini+0x50>
      continue;
    }

    func();
    a644:	e12fff33 	blx	r3
  while (count > 0) {
    a648:	e1550004 	cmp	r5, r4
    a64c:	1afffff9 	bne	a638 <__libc_fini+0x40>
    a650:	e8bd8070 	pop	{r4, r5, r6, pc}

0000a654 <__libc_init>:
{
    a654:	e92d4010 	push	{r4, lr}
    a658:	e1a05002 	mov	r5, r2
	call_array(structors->preinit_array);
    a65c:	e5924000 	ldr	r4, [r2]
{
    a660:	e1a06001 	mov	r6, r1
  while (*++list) {
    a664:	e5943004 	ldr	r3, [r4, #4]
    a668:	e3530000 	cmp	r3, #0
    a66c:	0a000004 	beq	a684 <__libc_init+0x30>
    a670:	e2844004 	add	r4, r4, #4
    (*list)();
    a674:	e12fff33 	blx	r3
  while (*++list) {
    a678:	e5b43004 	ldr	r3, [r4, #4]!
    a67c:	e3530000 	cmp	r3, #0
    a680:	1afffffb 	bne	a674 <__libc_init+0x20>
	call_array(structors->init_array);
    a684:	e5954004 	ldr	r4, [r5, #4]
  while (*++list) {
    a688:	e5943004 	ldr	r3, [r4, #4]
    a68c:	e2844004 	add	r4, r4, #4
    a690:	e3530000 	cmp	r3, #0
    a694:	0a000003 	beq	a6a8 <__libc_init+0x54>
    (*list)();
    a698:	e12fff33 	blx	r3
  while (*++list) {
    a69c:	e5b43004 	ldr	r3, [r4, #4]!
    a6a0:	e3530000 	cmp	r3, #0
    a6a4:	1afffffb 	bne	a698 <__libc_init+0x44>
	if (structors->fini_array != NULL) {
    a6a8:	e5951008 	ldr	r1, [r5, #8]
    a6ac:	e3510000 	cmp	r1, #0
    a6b0:	1a000004 	bne	a6c8 <__libc_init+0x74>
	exit(slingshot(0, NULL, NULL));
    a6b4:	e3a02000 	mov	r2, #0
    a6b8:	e1a01002 	mov	r1, r2
    a6bc:	e1a00002 	mov	r0, r2
    a6c0:	e12fff36 	blx	r6
    a6c4:	ebfff64d 	bl	8000 <exit>
		ret = __cxa_atexit(__libc_fini, structors->fini_array);
    a6c8:	e30a05f8 	movw	r0, #42488	; 0xa5f8
    a6cc:	e3400000 	movt	r0, #0
    a6d0:	ebfff6dc 	bl	8248 <__cxa_atexit>
		if (ret)
    a6d4:	e3500000 	cmp	r0, #0
    a6d8:	0afffff5 	beq	a6b4 <__libc_init+0x60>
			__libc_fatal("__cxa_atexit failed\n");
    a6dc:	e30c01bc 	movw	r0, #49596	; 0xc1bc
    a6e0:	e3400000 	movt	r0, #0
    a6e4:	ebffffff 	bl	a6e8 <__libc_fatal>

0000a6e8 <__libc_fatal>:
    __libc_log_fatal(format, args);
    va_end(args);
}

void __libc_fatal(const char* format, ...)
{
    a6e8:	e92d000f 	push	{r0, r1, r2, r3}
    a6ec:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    a6f0:	e24dd00c 	sub	sp, sp, #12
    va_list args;
    va_start(args, format);
    a6f4:	e28d3014 	add	r3, sp, #20
    vfprintf(stderr, format, args);
    a6f8:	e1a02003 	mov	r2, r3
    a6fc:	e59d1010 	ldr	r1, [sp, #16]
    a700:	e59f0008 	ldr	r0, [pc, #8]	; a710 <__libc_fatal+0x28>
    va_start(args, format);
    a704:	e58d3004 	str	r3, [sp, #4]
    vfprintf(stderr, format, args);
    a708:	eb00049a 	bl	b978 <vfprintf>
    __libc_log_fatal(format, args);
    va_end(args);
    abort();
    a70c:	ebfff6ca 	bl	823c <abort>
    a710:	0000d048 	.word	0x0000d048

0000a714 <write>:
#include <asm.h>
#include <trusty_syscalls.h>

.section .text.write
FUNCTION(write)
    ldr     r12, =__NR_write
    a714:	e3a0c001 	mov	ip, #1
    swi     #0
    a718:	ef000000 	svc	0x00000000
    bx      lr
    a71c:	e12fff1e 	bx	lr

0000a720 <brk>:

.section .text.brk
FUNCTION(brk)
    ldr     r12, =__NR_brk
    a720:	e3a0c002 	mov	ip, #2
    swi     #0
    a724:	ef000000 	svc	0x00000000
    bx      lr
    a728:	e12fff1e 	bx	lr

0000a72c <exit_group>:

.section .text.exit_group
FUNCTION(exit_group)
    ldr     r12, =__NR_exit_group
    a72c:	e3a0c003 	mov	ip, #3
    swi     #0
    a730:	ef000000 	svc	0x00000000
    bx      lr
    a734:	e12fff1e 	bx	lr

0000a738 <port_create>:
    swi     #0
    bx      lr

.section .text.port_create
FUNCTION(port_create)
    ldr     r12, =__NR_port_create
    a738:	e3a0c010 	mov	ip, #16
    swi     #0
    a73c:	ef000000 	svc	0x00000000
    bx      lr
    a740:	e12fff1e 	bx	lr

0000a744 <accept>:
    swi     #0
    bx      lr

.section .text.accept
FUNCTION(accept)
    ldr     r12, =__NR_accept
    a744:	e3a0c012 	mov	ip, #18
    swi     #0
    a748:	ef000000 	svc	0x00000000
    bx      lr
    a74c:	e12fff1e 	bx	lr

0000a750 <wait>:
    swi     #0
    bx      lr

.section .text.wait
FUNCTION(wait)
    ldr     r12, =__NR_wait
    a750:	e3a0c018 	mov	ip, #24
    swi     #0
    a754:	ef000000 	svc	0x00000000
    bx      lr
    a758:	e12fff1e 	bx	lr

0000a75c <longlong_to_string>:
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    a75c:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a760:	e1a08000 	mov	r8, r0
    a764:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    a768:	e1a04002 	mov	r4, r2
    a76c:	e1a05003 	mov	r5, r3
    a770:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	size_t pos = len;
	int negative = 0;

	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    a774:	e219ab01 	ands	sl, r9, #1024	; 0x400
    a778:	0a000003 	beq	a78c <longlong_to_string+0x30>
    a77c:	e3520000 	cmp	r2, #0
    a780:	e2d53000 	sbcs	r3, r5, #0
	int negative = 0;
    a784:	a3a0a000 	movge	sl, #0
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    a788:	ba000030 	blt	a850 <longlong_to_string+0xf4>
	}

	buf[--pos] = 0;

	/* only do the math if the number is >= 10 */
	while (n >= 10) {
    a78c:	e3550000 	cmp	r5, #0
	buf[--pos] = 0;
    a790:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    a794:	03540009 	cmpeq	r4, #9
	buf[--pos] = 0;
    a798:	e3a03000 	mov	r3, #0
    a79c:	e088b007 	add	fp, r8, r7
    a7a0:	e7c83007 	strb	r3, [r8, r7]
	while (n >= 10) {
    a7a4:	9a000012 	bls	a7f4 <longlong_to_string+0x98>
		int digit = n % 10;
    a7a8:	e1a00004 	mov	r0, r4
    a7ac:	e1a01005 	mov	r1, r5
    a7b0:	e3a0200a 	mov	r2, #10
    a7b4:	e3a03000 	mov	r3, #0
    a7b8:	fa0005aa 	blx	be68 <__aeabi_uldivmod>

		n /= 10;
    a7bc:	e1a00004 	mov	r0, r4
		int digit = n % 10;
    a7c0:	e1a06002 	mov	r6, r2
		n /= 10;
    a7c4:	e1a01005 	mov	r1, r5
    a7c8:	e3a0200a 	mov	r2, #10
    a7cc:	e3a03000 	mov	r3, #0

		buf[--pos] = digit + '0';
    a7d0:	e2866030 	add	r6, r6, #48	; 0x30
		n /= 10;
    a7d4:	fa0005a3 	blx	be68 <__aeabi_uldivmod>
	while (n >= 10) {
    a7d8:	e3510000 	cmp	r1, #0
		buf[--pos] = digit + '0';
    a7dc:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    a7e0:	03500009 	cmpeq	r0, #9
		n /= 10;
    a7e4:	e1a04000 	mov	r4, r0
    a7e8:	e1a05001 	mov	r5, r1
		buf[--pos] = digit + '0';
    a7ec:	e56b6001 	strb	r6, [fp, #-1]!
	while (n >= 10) {
    a7f0:	8affffec 	bhi	a7a8 <longlong_to_string+0x4c>
	}
	buf[--pos] = n + '0';

	if (negative)
    a7f4:	e35a0000 	cmp	sl, #0
	buf[--pos] = n + '0';
    a7f8:	e2477001 	sub	r7, r7, #1
    a7fc:	e2844030 	add	r4, r4, #48	; 0x30
    a800:	e0880007 	add	r0, r8, r7
    a804:	e7c84007 	strb	r4, [r8, r7]
	if (negative)
    a808:	1a00000c 	bne	a840 <longlong_to_string+0xe4>
		*signchar = '-';
	else if ((flag & SHOWSIGNFLAG))
    a80c:	e3190c02 	tst	r9, #512	; 0x200
    a810:	1a000006 	bne	a830 <longlong_to_string+0xd4>
		*signchar = '+';
	else if ((flag & BLANKPOSFLAG))
    a814:	e3190a02 	tst	r9, #8192	; 0x2000
		*signchar = ' ';
    a818:	159d2030 	ldrne	r2, [sp, #48]	; 0x30
    a81c:	13a03020 	movne	r3, #32
	else
		*signchar = '\0';
    a820:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
		*signchar = ' ';
    a824:	15c23000 	strbne	r3, [r2]
		*signchar = '\0';
    a828:	05c3a000 	strbeq	sl, [r3]

	return &buf[pos];
}
    a82c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '+';
    a830:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    a834:	e3a0302b 	mov	r3, #43	; 0x2b
    a838:	e5c23000 	strb	r3, [r2]
    a83c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '-';
    a840:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    a844:	e3a0302d 	mov	r3, #45	; 0x2d
    a848:	e5c23000 	strb	r3, [r2]
    a84c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n = -n;
    a850:	e2724000 	rsbs	r4, r2, #0
		negative = 1;
    a854:	e3a0a001 	mov	sl, #1
		n = -n;
    a858:	e2e55000 	rsc	r5, r5, #0
    a85c:	eaffffca 	b	a78c <longlong_to_string+0x30>

0000a860 <exponent_to_string>:
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
	size_t pos = 0;

	/* handle sign */
	if (exponent < 0) {
    a860:	e3510000 	cmp	r1, #0
{
    a864:	e92d4070 	push	{r4, r5, r6, lr}
		OUT('-');
		exponent = -exponent;
    a868:	b2611000 	rsblt	r1, r1, #0
		OUT('-');
    a86c:	b3a0302d 	movlt	r3, #45	; 0x2d
	} else {
		OUT('+');
    a870:	a3a0302b 	movge	r3, #43	; 0x2b
	}

	/* see how far we need to bump into the string to print from the right */
	if (exponent >= 1000) pos += 4;
    a874:	e3510ffa 	cmp	r1, #1000	; 0x3e8
{
    a878:	e1a0e000 	mov	lr, r0
		OUT('+');
    a87c:	e5c03000 	strb	r3, [r0]
	if (exponent >= 1000) pos += 4;
    a880:	a3a00005 	movge	r0, #5
    a884:	aa000002 	bge	a894 <exponent_to_string+0x34>
	else if (exponent >= 100) pos += 3;
    a888:	e3510063 	cmp	r1, #99	; 0x63
    a88c:	c3a00004 	movgt	r0, #4
    a890:	da00000f 	ble	a8d4 <exponent_to_string+0x74>
	else pos++;

	/* print decimal string, from the right */
	uint i = pos;
	do {
		uint digit = (uint32_t)exponent % 10;
    a894:	e30c5ccd 	movw	r5, #52429	; 0xcccd

		buf[--i] = digit + '0';

		exponent /= 10;
    a898:	e3064667 	movw	r4, #26215	; 0x6667
    a89c:	e08ee000 	add	lr, lr, r0
		uint digit = (uint32_t)exponent % 10;
    a8a0:	e34c5ccc 	movt	r5, #52428	; 0xcccc
		exponent /= 10;
    a8a4:	e3464666 	movt	r4, #26214	; 0x6666
		uint digit = (uint32_t)exponent % 10;
    a8a8:	e0832195 	umull	r2, r3, r5, r1
		exponent /= 10;
    a8ac:	e1a02fc1 	asr	r2, r1, #31
    a8b0:	e0cc6194 	smull	r6, ip, r4, r1
		uint digit = (uint32_t)exponent % 10;
    a8b4:	e1a031a3 	lsr	r3, r3, #3
    a8b8:	e0833103 	add	r3, r3, r3, lsl #2
    a8bc:	e0413083 	sub	r3, r1, r3, lsl #1
	} while (exponent != 0);
    a8c0:	e072114c 	rsbs	r1, r2, ip, asr #2
		buf[--i] = digit + '0';
    a8c4:	e2833030 	add	r3, r3, #48	; 0x30
    a8c8:	e56e3001 	strb	r3, [lr, #-1]!
	} while (exponent != 0);
    a8cc:	1afffff5 	bne	a8a8 <exponent_to_string+0x48>
    a8d0:	e8bd8070 	pop	{r4, r5, r6, pc}
	else pos++;
    a8d4:	e3510009 	cmp	r1, #9
    a8d8:	c3a00003 	movgt	r0, #3
    a8dc:	d3a00002 	movle	r0, #2
    a8e0:	eaffffeb 	b	a894 <exponent_to_string+0x34>

0000a8e4 <double_to_hexstring.isra.0>:

	buf[pos] = 0;
	return buf;
}

__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    a8e4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	size_t pos = 0;
	union double_int u = { d };

	uint32_t exponent = (u.i >> 52) & 0x7ff;
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    a8e8:	e3a06000 	mov	r6, #0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    a8ec:	ec532b10 	vmov	r2, r3, d0
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    a8f0:	e3a07000 	mov	r7, #0
	bool neg = !!(u.i & (1ULL << 63));

	/* start constructing the string */
	if (neg) {
    a8f4:	e1520006 	cmp	r2, r6
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    a8f8:	e1a05000 	mov	r5, r0
	if (neg) {
    a8fc:	e0d30007 	sbcs	r0, r3, r7
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    a900:	e7ea2a53 	ubfx	r2, r3, #20, #11
		OUT('-');
    a904:	b3a0002d 	movlt	r0, #45	; 0x2d
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    a908:	e7f37053 	ubfx	r7, r3, #0, #20
		OUT('-');
    a90c:	b5c50000 	strblt	r0, [r5]
	}

	/* look for special cases */
	if (exponent == 0x7ff) {
    a910:	e30007ff 	movw	r0, #2047	; 0x7ff
		OUT('-');
    a914:	b3a03001 	movlt	r3, #1
	size_t pos = 0;
    a918:	a3a03000 	movge	r3, #0
	if (exponent == 0x7ff) {
    a91c:	e1520000 	cmp	r2, r0
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    a920:	e24dd014 	sub	sp, sp, #20
    a924:	e2011c01 	and	r1, r1, #256	; 0x100
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    a928:	ee106a10 	vmov	r6, s0
    a92c:	e58d1004 	str	r1, [sp, #4]
	if (exponent == 0x7ff) {
    a930:	0a000028 	beq	a9d8 <double_to_hexstring.isra.0+0xf4>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
		} else {
			/* NaN */
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
		}
	} else if (exponent == 0) {
    a934:	e3520000 	cmp	r2, #0
    a938:	1a000015 	bne	a994 <double_to_hexstring.isra.0+0xb0>
		if (fraction == 0) {
    a93c:	e1962007 	orrs	r2, r6, r7
			/* zero */
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    a940:	e59d2004 	ldr	r2, [sp, #4]
		if (fraction == 0) {
    a944:	1a000040 	bne	aa4c <double_to_hexstring.isra.0+0x168>
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    a948:	e3520000 	cmp	r2, #0
    a94c:	1a0000c3 	bne	ac60 <double_to_hexstring.isra.0+0x37c>
    a950:	e0850003 	add	r0, r5, r3
    a954:	e59fc334 	ldr	ip, [pc, #820]	; ac90 <double_to_hexstring.isra.0+0x3ac>
    a958:	e3a02078 	mov	r2, #120	; 0x78
    a95c:	e3a01030 	mov	r1, #48	; 0x30
    a960:	ea000000 	b	a968 <double_to_hexstring.isra.0+0x84>
    a964:	e5fc2001 	ldrb	r2, [ip, #1]!
    a968:	e3520000 	cmp	r2, #0
    a96c:	e4c01001 	strb	r1, [r0], #1
    a970:	e2833001 	add	r3, r3, #1
    a974:	e1a01002 	mov	r1, r2
    a978:	1afffff9 	bne	a964 <double_to_hexstring.isra.0+0x80>
    a97c:	e0853003 	add	r3, r5, r3
		/* handle the exponent */
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
		pos += exponent_to_string(&buf[pos], exponent_signed);
	}

	buf[pos] = 0;
    a980:	e3a02000 	mov	r2, #0
	return buf;
}
    a984:	e1a00005 	mov	r0, r5
	buf[pos] = 0;
    a988:	e5c32000 	strb	r2, [r3]
}
    a98c:	e28dd014 	add	sp, sp, #20
    a990:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    a994:	e59d1004 	ldr	r1, [sp, #4]
		int exponent_signed = exponent - 1023;
    a998:	e2422fff 	sub	r2, r2, #1020	; 0x3fc
    a99c:	e2422003 	sub	r2, r2, #3
    a9a0:	e58d200c 	str	r2, [sp, #12]
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    a9a4:	e3510000 	cmp	r1, #0
    a9a8:	0a000034 	beq	aa80 <double_to_hexstring.isra.0+0x19c>
    a9ac:	e59fc2e0 	ldr	ip, [pc, #736]	; ac94 <double_to_hexstring.isra.0+0x3b0>
    a9b0:	e0850003 	add	r0, r5, r3
    a9b4:	e3a02058 	mov	r2, #88	; 0x58
    a9b8:	e3a01030 	mov	r1, #48	; 0x30
    a9bc:	e3520000 	cmp	r2, #0
    a9c0:	e4c01001 	strb	r1, [r0], #1
    a9c4:	e2833001 	add	r3, r3, #1
    a9c8:	e1a01002 	mov	r1, r2
    a9cc:	0a000036 	beq	aaac <double_to_hexstring.isra.0+0x1c8>
    a9d0:	e5fc2001 	ldrb	r2, [ip, #1]!
    a9d4:	eafffff8 	b	a9bc <double_to_hexstring.isra.0+0xd8>
		if (fraction == 0) {
    a9d8:	e1962007 	orrs	r2, r6, r7
    a9dc:	1a00000c 	bne	aa14 <double_to_hexstring.isra.0+0x130>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    a9e0:	e3510000 	cmp	r1, #0
    a9e4:	1a000087 	bne	ac08 <double_to_hexstring.isra.0+0x324>
    a9e8:	e59fc2a8 	ldr	ip, [pc, #680]	; ac98 <double_to_hexstring.isra.0+0x3b4>
    a9ec:	e0850003 	add	r0, r5, r3
    a9f0:	e3a0206e 	mov	r2, #110	; 0x6e
    a9f4:	e3a01069 	mov	r1, #105	; 0x69
    a9f8:	e3520000 	cmp	r2, #0
    a9fc:	e4c01001 	strb	r1, [r0], #1
    aa00:	e2833001 	add	r3, r3, #1
    aa04:	e1a01002 	mov	r1, r2
    aa08:	0affffdb 	beq	a97c <double_to_hexstring.isra.0+0x98>
    aa0c:	e5fc2001 	ldrb	r2, [ip, #1]!
    aa10:	eafffff8 	b	a9f8 <double_to_hexstring.isra.0+0x114>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    aa14:	e59d2004 	ldr	r2, [sp, #4]
    aa18:	e3520000 	cmp	r2, #0
    aa1c:	1a00006e 	bne	abdc <double_to_hexstring.isra.0+0x2f8>
    aa20:	e59fc274 	ldr	ip, [pc, #628]	; ac9c <double_to_hexstring.isra.0+0x3b8>
    aa24:	e0850003 	add	r0, r5, r3
    aa28:	e3a02061 	mov	r2, #97	; 0x61
    aa2c:	e3a0106e 	mov	r1, #110	; 0x6e
    aa30:	e3520000 	cmp	r2, #0
    aa34:	e4c01001 	strb	r1, [r0], #1
    aa38:	e2833001 	add	r3, r3, #1
    aa3c:	e1a01002 	mov	r1, r2
    aa40:	0affffcd 	beq	a97c <double_to_hexstring.isra.0+0x98>
    aa44:	e5fc2001 	ldrb	r2, [ip, #1]!
    aa48:	eafffff8 	b	aa30 <double_to_hexstring.isra.0+0x14c>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    aa4c:	e3520000 	cmp	r2, #0
    aa50:	1a000077 	bne	ac34 <double_to_hexstring.isra.0+0x350>
    aa54:	e59fc244 	ldr	ip, [pc, #580]	; aca0 <double_to_hexstring.isra.0+0x3bc>
    aa58:	e0850003 	add	r0, r5, r3
    aa5c:	e3a02065 	mov	r2, #101	; 0x65
    aa60:	e3a01064 	mov	r1, #100	; 0x64
    aa64:	e3520000 	cmp	r2, #0
    aa68:	e4c01001 	strb	r1, [r0], #1
    aa6c:	e2833001 	add	r3, r3, #1
    aa70:	e1a01002 	mov	r1, r2
    aa74:	0affffc0 	beq	a97c <double_to_hexstring.isra.0+0x98>
    aa78:	e5fc2001 	ldrb	r2, [ip, #1]!
    aa7c:	eafffff8 	b	aa64 <double_to_hexstring.isra.0+0x180>
    aa80:	e59fc21c 	ldr	ip, [pc, #540]	; aca4 <double_to_hexstring.isra.0+0x3c0>
    aa84:	e0850003 	add	r0, r5, r3
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    aa88:	e3a02078 	mov	r2, #120	; 0x78
    aa8c:	e3a01030 	mov	r1, #48	; 0x30
    aa90:	e3520000 	cmp	r2, #0
    aa94:	e4c01001 	strb	r1, [r0], #1
    aa98:	e2833001 	add	r3, r3, #1
    aa9c:	e1a01002 	mov	r1, r2
    aaa0:	0a000049 	beq	abcc <double_to_hexstring.isra.0+0x2e8>
    aaa4:	e5fc2001 	ldrb	r2, [ip, #1]!
    aaa8:	eafffff8 	b	aa90 <double_to_hexstring.isra.0+0x1ac>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    aaac:	e30c2230 	movw	r2, #49712	; 0xc230
    aab0:	e3402000 	movt	r2, #0
    aab4:	e58d2008 	str	r2, [sp, #8]
		bool output_dot = false;
    aab8:	e3a0a000 	mov	sl, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
    aabc:	e3a01030 	mov	r1, #48	; 0x30
		int zero_count = 0;
    aac0:	e1a0c00a 	mov	ip, sl
					OUT('0');
    aac4:	e1a0e001 	mov	lr, r1
    aac8:	ea000002 	b	aad8 <double_to_hexstring.isra.0+0x1f4>
		for (int i = 52 - 4; i >= 0; i -= 4) {
    aacc:	e2411004 	sub	r1, r1, #4
    aad0:	e3710004 	cmn	r1, #4
    aad4:	0a00002d 	beq	ab90 <double_to_hexstring.isra.0+0x2ac>
			uint digit = (fraction >> i) & 0xf;
    aad8:	e1a02136 	lsr	r2, r6, r1
    aadc:	e2610020 	rsb	r0, r1, #32
    aae0:	e2418020 	sub	r8, r1, #32
    aae4:	e1822017 	orr	r2, r2, r7, lsl r0
    aae8:	e2834001 	add	r4, r3, #1
    aaec:	e0850004 	add	r0, r5, r4
    aaf0:	e1822837 	orr	r2, r2, r7, lsr r8
    aaf4:	e0859003 	add	r9, r5, r3
			if (digit == 0) {
    aaf8:	e212200f 	ands	r2, r2, #15
				zero_count++;
    aafc:	028cc001 	addeq	ip, ip, #1
			if (digit == 0) {
    ab00:	0afffff1 	beq	aacc <double_to_hexstring.isra.0+0x1e8>
				if (!output_dot) {
    ab04:	e35a0000 	cmp	sl, #0
    ab08:	e283a002 	add	sl, r3, #2
    ab0c:	e085b00a 	add	fp, r5, sl
    ab10:	1a000008 	bne	ab38 <double_to_hexstring.isra.0+0x254>
    ab14:	e2838003 	add	r8, r3, #3
					OUT('.');
    ab18:	e3a0302e 	mov	r3, #46	; 0x2e
    ab1c:	e5c93000 	strb	r3, [r9]
    ab20:	e1a03004 	mov	r3, r4
    ab24:	e1a09000 	mov	r9, r0
    ab28:	e1a0400a 	mov	r4, sl
    ab2c:	e1a0000b 	mov	r0, fp
    ab30:	e1a0a008 	mov	sl, r8
    ab34:	e085b008 	add	fp, r5, r8
				while (zero_count > 0) {
    ab38:	e35c0000 	cmp	ip, #0
    ab3c:	0a00001c 	beq	abb4 <double_to_hexstring.isra.0+0x2d0>
    ab40:	e085400c 	add	r4, r5, ip
    ab44:	e0850003 	add	r0, r5, r3
    ab48:	e0844003 	add	r4, r4, r3
					OUT('0');
    ab4c:	e4c0e001 	strb	lr, [r0], #1
				while (zero_count > 0) {
    ab50:	e1540000 	cmp	r4, r0
    ab54:	1afffffc 	bne	ab4c <double_to_hexstring.isra.0+0x268>
    ab58:	e08cc003 	add	ip, ip, r3
    ab5c:	e28c3001 	add	r3, ip, #1
    ab60:	e28c4002 	add	r4, ip, #2
    ab64:	e0859003 	add	r9, r5, r3
    ab68:	e085800c 	add	r8, r5, ip
    ab6c:	e0850004 	add	r0, r5, r4
				buf[pos++] = table[digit];
    ab70:	e59dc008 	ldr	ip, [sp, #8]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    ab74:	e2411004 	sub	r1, r1, #4
    ab78:	e3710004 	cmn	r1, #4
				buf[pos++] = table[digit];
    ab7c:	e3a0a001 	mov	sl, #1
    ab80:	e7dc2002 	ldrb	r2, [ip, r2]
    ab84:	e3a0c000 	mov	ip, #0
    ab88:	e5c82000 	strb	r2, [r8]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    ab8c:	1affffd1 	bne	aad8 <double_to_hexstring.isra.0+0x1f4>
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    ab90:	e59d3004 	ldr	r3, [sp, #4]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    ab94:	e59d100c 	ldr	r1, [sp, #12]
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    ab98:	e3530000 	cmp	r3, #0
    ab9c:	03a03070 	moveq	r3, #112	; 0x70
    aba0:	13a03050 	movne	r3, #80	; 0x50
    aba4:	e5c93000 	strb	r3, [r9]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    aba8:	ebffff2c 	bl	a860 <exponent_to_string>
    abac:	e0803004 	add	r3, r0, r4
    abb0:	eaffff71 	b	a97c <double_to_hexstring.isra.0+0x98>
				while (zero_count > 0) {
    abb4:	e1a08009 	mov	r8, r9
    abb8:	e1a03004 	mov	r3, r4
    abbc:	e1a09000 	mov	r9, r0
    abc0:	e1a0400a 	mov	r4, sl
    abc4:	e1a0000b 	mov	r0, fp
    abc8:	eaffffe8 	b	ab70 <double_to_hexstring.isra.0+0x28c>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    abcc:	e30c2220 	movw	r2, #49696	; 0xc220
    abd0:	e3402000 	movt	r2, #0
    abd4:	e58d2008 	str	r2, [sp, #8]
    abd8:	eaffffb6 	b	aab8 <double_to_hexstring.isra.0+0x1d4>
    abdc:	e59fc0c4 	ldr	ip, [pc, #196]	; aca8 <double_to_hexstring.isra.0+0x3c4>
    abe0:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    abe4:	e3a02041 	mov	r2, #65	; 0x41
    abe8:	e3a0104e 	mov	r1, #78	; 0x4e
    abec:	e3520000 	cmp	r2, #0
    abf0:	e4c01001 	strb	r1, [r0], #1
    abf4:	e2833001 	add	r3, r3, #1
    abf8:	e1a01002 	mov	r1, r2
    abfc:	0affff5e 	beq	a97c <double_to_hexstring.isra.0+0x98>
    ac00:	e5fc2001 	ldrb	r2, [ip, #1]!
    ac04:	eafffff8 	b	abec <double_to_hexstring.isra.0+0x308>
    ac08:	e59fc09c 	ldr	ip, [pc, #156]	; acac <double_to_hexstring.isra.0+0x3c8>
    ac0c:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    ac10:	e3a0204e 	mov	r2, #78	; 0x4e
    ac14:	e3a01049 	mov	r1, #73	; 0x49
    ac18:	e3520000 	cmp	r2, #0
    ac1c:	e4c01001 	strb	r1, [r0], #1
    ac20:	e2833001 	add	r3, r3, #1
    ac24:	e1a01002 	mov	r1, r2
    ac28:	0affff53 	beq	a97c <double_to_hexstring.isra.0+0x98>
    ac2c:	e5fc2001 	ldrb	r2, [ip, #1]!
    ac30:	eafffff8 	b	ac18 <double_to_hexstring.isra.0+0x334>
    ac34:	e59fc074 	ldr	ip, [pc, #116]	; acb0 <double_to_hexstring.isra.0+0x3cc>
    ac38:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    ac3c:	e3a02045 	mov	r2, #69	; 0x45
    ac40:	e3a01044 	mov	r1, #68	; 0x44
    ac44:	e3520000 	cmp	r2, #0
    ac48:	e4c01001 	strb	r1, [r0], #1
    ac4c:	e2833001 	add	r3, r3, #1
    ac50:	e1a01002 	mov	r1, r2
    ac54:	0affff48 	beq	a97c <double_to_hexstring.isra.0+0x98>
    ac58:	e5fc2001 	ldrb	r2, [ip, #1]!
    ac5c:	eafffff8 	b	ac44 <double_to_hexstring.isra.0+0x360>
    ac60:	e59fc04c 	ldr	ip, [pc, #76]	; acb4 <double_to_hexstring.isra.0+0x3d0>
    ac64:	e0850003 	add	r0, r5, r3
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    ac68:	e3a02058 	mov	r2, #88	; 0x58
    ac6c:	e3a01030 	mov	r1, #48	; 0x30
    ac70:	ea000000 	b	ac78 <double_to_hexstring.isra.0+0x394>
    ac74:	e5fc2001 	ldrb	r2, [ip, #1]!
    ac78:	e3520000 	cmp	r2, #0
    ac7c:	e4c01001 	strb	r1, [r0], #1
    ac80:	e2833001 	add	r3, r3, #1
    ac84:	e1a01002 	mov	r1, r2
    ac88:	1afffff9 	bne	ac74 <double_to_hexstring.isra.0+0x390>
    ac8c:	eaffff3a 	b	a97c <double_to_hexstring.isra.0+0x98>
    ac90:	0000c1ed 	.word	0x0000c1ed
    ac94:	0000c209 	.word	0x0000c209
    ac98:	0000c1dd 	.word	0x0000c1dd
    ac9c:	0000c1e5 	.word	0x0000c1e5
    aca0:	0000c1fd 	.word	0x0000c1fd
    aca4:	0000c205 	.word	0x0000c205
    aca8:	0000c1e9 	.word	0x0000c1e9
    acac:	0000c1e1 	.word	0x0000c1e1
    acb0:	0000c201 	.word	0x0000c201
    acb4:	0000c1f5 	.word	0x0000c1f5

0000acb8 <longlong_to_hexstring.constprop.1>:
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    acb8:	e92d4010 	push	{r4, lr}
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    acbc:	e30c1220 	movw	r1, #49696	; 0xc220
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    acc0:	e59dc008 	ldr	ip, [sp, #8]
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    acc4:	e3401000 	movt	r1, #0
    acc8:	e30c4230 	movw	r4, #49712	; 0xc230
    accc:	e3404000 	movt	r4, #0
    acd0:	e31c0c01 	tst	ip, #256	; 0x100
    acd4:	e280c01e 	add	ip, r0, #30
    acd8:	01a04001 	moveq	r4, r1
	buf[--pos] = 0;
    acdc:	e3a01000 	mov	r1, #0
    ace0:	e5c0101f 	strb	r1, [r0, #31]
		u /= 16;
    ace4:	e1a01222 	lsr	r1, r2, #4
    ace8:	e1a00223 	lsr	r0, r3, #4
    acec:	e1811e03 	orr	r1, r1, r3, lsl #28
		unsigned int digit = u % 16;
    acf0:	e202e00f 	and	lr, r2, #15
		u /= 16;
    acf4:	e1a03000 	mov	r3, r0
    acf8:	e1a02001 	mov	r2, r1
		buf[--pos] = table[digit];
    acfc:	e7d4100e 	ldrb	r1, [r4, lr]
	} while (u != 0);
    ad00:	e192e003 	orrs	lr, r2, r3
		buf[--pos] = table[digit];
    ad04:	e1a0000c 	mov	r0, ip
    ad08:	e44c1001 	strb	r1, [ip], #-1
	} while (u != 0);
    ad0c:	1afffff4 	bne	ace4 <longlong_to_hexstring.constprop.1+0x2c>
    ad10:	e8bd8010 	pop	{r4, pc}
    ad14:	00000000 	andeq	r0, r0, r0

0000ad18 <double_to_string.constprop.2>:
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    ad18:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    ad1c:	e1a0a000 	mov	sl, r0
    ad20:	ec576b10 	vmov	r6, r7, d0
    ad24:	e24dd018 	sub	sp, sp, #24
	if (neg) {
    ad28:	e3560000 	cmp	r6, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    ad2c:	e1a03007 	mov	r3, r7
	if (neg) {
    ad30:	e2d72000 	sbcs	r2, r7, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    ad34:	e7ea2a57 	ubfx	r2, r7, #20, #11
		OUT('-');
    ad38:	b3a0302d 	movlt	r3, #45	; 0x2d
	bool neg = !!(u.i & (1ULL << 63));
    ad3c:	e1a05007 	mov	r5, r7
		OUT('-');
    ad40:	b5c03000 	strblt	r3, [r0]
	if (exponent == 0x7ff) {
    ad44:	e30007ff 	movw	r0, #2047	; 0x7ff
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    ad48:	e7f39057 	ubfx	r9, r7, #0, #20
		OUT('-');
    ad4c:	b3a03001 	movlt	r3, #1
		d = -d;
    ad50:	b2277102 	eorlt	r7, r7, #-2147483648	; 0x80000000
	size_t pos = 0;
    ad54:	a3a03000 	movge	r3, #0
	if (exponent == 0x7ff) {
    ad58:	e1520000 	cmp	r2, r0
	bool neg = !!(u.i & (1ULL << 63));
    ad5c:	ee104a10 	vmov	r4, s0
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    ad60:	ee108a10 	vmov	r8, s0
	if (exponent == 0x7ff) {
    ad64:	0a000024 	beq	adfc <double_to_string.constprop.2+0xe4>
	} else if (exponent == 0) {
    ad68:	e3520000 	cmp	r2, #0
    ad6c:	1a00000e 	bne	adac <double_to_string.constprop.2+0x94>
		if (fraction == 0) {
    ad70:	e1982009 	orrs	r2, r8, r9
    ad74:	0a00003f 	beq	ae78 <double_to_string.constprop.2+0x160>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    ad78:	e3110c01 	tst	r1, #256	; 0x100
    ad7c:	1a00008f 	bne	afc0 <double_to_string.constprop.2+0x2a8>
    ad80:	e59fc2e0 	ldr	ip, [pc, #736]	; b068 <double_to_string.constprop.2+0x350>
    ad84:	e08a0003 	add	r0, sl, r3
    ad88:	e3a02065 	mov	r2, #101	; 0x65
    ad8c:	e3a01064 	mov	r1, #100	; 0x64
    ad90:	e3520000 	cmp	r2, #0
    ad94:	e4c01001 	strb	r1, [r0], #1
    ad98:	e2833001 	add	r3, r3, #1
    ad9c:	e1a01002 	mov	r1, r2
    ada0:	0a000010 	beq	ade8 <double_to_string.constprop.2+0xd0>
    ada4:	e5fc2001 	ldrb	r2, [ip, #1]!
    ada8:	eafffff8 	b	ad90 <double_to_string.constprop.2+0x78>
		if (exponent_signed < -52 || exponent_signed > 52) {
    adac:	e2420ff2 	sub	r0, r2, #968	; 0x3c8
    adb0:	e2400003 	sub	r0, r0, #3
    adb4:	e3500068 	cmp	r0, #104	; 0x68
    adb8:	9a00003a 	bls	aea8 <double_to_string.constprop.2+0x190>
    adbc:	e59fc2a8 	ldr	ip, [pc, #680]	; b06c <double_to_string.constprop.2+0x354>
    adc0:	e08a0003 	add	r0, sl, r3
    adc4:	e3a02072 	mov	r2, #114	; 0x72
			OUTSTR("<range>");
    adc8:	e3a0103c 	mov	r1, #60	; 0x3c
    adcc:	ea000000 	b	add4 <double_to_string.constprop.2+0xbc>
    add0:	e5fc2001 	ldrb	r2, [ip, #1]!
    add4:	e3520000 	cmp	r2, #0
    add8:	e4c01001 	strb	r1, [r0], #1
    addc:	e2833001 	add	r3, r3, #1
    ade0:	e1a01002 	mov	r1, r2
    ade4:	1afffff9 	bne	add0 <double_to_string.constprop.2+0xb8>
	buf[pos] = 0;
    ade8:	e1a0000a 	mov	r0, sl
    adec:	e3a02000 	mov	r2, #0
    adf0:	e7ca2003 	strb	r2, [sl, r3]
}
    adf4:	e28dd018 	add	sp, sp, #24
    adf8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
		if (fraction == 0) {
    adfc:	e1982009 	orrs	r2, r8, r9
    ae00:	e2011c01 	and	r1, r1, #256	; 0x100
    ae04:	1a00000d 	bne	ae40 <double_to_string.constprop.2+0x128>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    ae08:	e3510000 	cmp	r1, #0
    ae0c:	1a00005f 	bne	af90 <double_to_string.constprop.2+0x278>
    ae10:	e08a0003 	add	r0, sl, r3
    ae14:	e59fc254 	ldr	ip, [pc, #596]	; b070 <double_to_string.constprop.2+0x358>
    ae18:	e3a0206e 	mov	r2, #110	; 0x6e
    ae1c:	e3a01069 	mov	r1, #105	; 0x69
    ae20:	ea000000 	b	ae28 <double_to_string.constprop.2+0x110>
    ae24:	e5fc2001 	ldrb	r2, [ip, #1]!
    ae28:	e3520000 	cmp	r2, #0
    ae2c:	e4c01001 	strb	r1, [r0], #1
    ae30:	e2833001 	add	r3, r3, #1
    ae34:	e1a01002 	mov	r1, r2
    ae38:	1afffff9 	bne	ae24 <double_to_string.constprop.2+0x10c>
    ae3c:	eaffffe9 	b	ade8 <double_to_string.constprop.2+0xd0>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    ae40:	e3510000 	cmp	r1, #0
    ae44:	1a000045 	bne	af60 <double_to_string.constprop.2+0x248>
    ae48:	e08a0003 	add	r0, sl, r3
    ae4c:	e59fc220 	ldr	ip, [pc, #544]	; b074 <double_to_string.constprop.2+0x35c>
    ae50:	e3a02061 	mov	r2, #97	; 0x61
    ae54:	e3a0106e 	mov	r1, #110	; 0x6e
    ae58:	ea000000 	b	ae60 <double_to_string.constprop.2+0x148>
    ae5c:	e5fc2001 	ldrb	r2, [ip, #1]!
    ae60:	e3520000 	cmp	r2, #0
    ae64:	e4c01001 	strb	r1, [r0], #1
    ae68:	e2833001 	add	r3, r3, #1
    ae6c:	e1a01002 	mov	r1, r2
    ae70:	1afffff9 	bne	ae5c <double_to_string.constprop.2+0x144>
    ae74:	eaffffdb 	b	ade8 <double_to_string.constprop.2+0xd0>
    ae78:	e59fc1f8 	ldr	ip, [pc, #504]	; b078 <double_to_string.constprop.2+0x360>
    ae7c:	e08a0003 	add	r0, sl, r3
		if (fraction == 0) {
    ae80:	e3a0202e 	mov	r2, #46	; 0x2e
			OUTSTR("0.000000");
    ae84:	e3a01030 	mov	r1, #48	; 0x30
    ae88:	ea000000 	b	ae90 <double_to_string.constprop.2+0x178>
    ae8c:	e5fc2001 	ldrb	r2, [ip, #1]!
    ae90:	e3520000 	cmp	r2, #0
    ae94:	e4c01001 	strb	r1, [r0], #1
    ae98:	e2833001 	add	r3, r3, #1
    ae9c:	e1a01002 	mov	r1, r2
    aea0:	1afffff9 	bne	ae8c <double_to_string.constprop.2+0x174>
    aea4:	eaffffcf 	b	ade8 <double_to_string.constprop.2+0xd0>
    aea8:	e28ac018 	add	ip, sl, #24
				OUTREV('0');
    aeac:	e3a00030 	mov	r0, #48	; 0x30
			OUTREV(0);
    aeb0:	e3a0e000 	mov	lr, #0
    aeb4:	e1a0300a 	mov	r3, sl
    aeb8:	e5e3e01f 	strb	lr, [r3, #31]!
				OUTREV('0');
    aebc:	e5630001 	strb	r0, [r3, #-1]!
			for (int i = 0; i <= 6; i++)
    aec0:	e153000c 	cmp	r3, ip
    aec4:	1afffffc 	bne	aebc <double_to_string.constprop.2+0x1a4>
		int exponent_signed = exponent - 1023;
    aec8:	e2423fff 	sub	r3, r2, #1020	; 0x3fc
    aecc:	e2433003 	sub	r3, r3, #3
			if (exponent_signed >= 0) {
    aed0:	e3530000 	cmp	r3, #0
				OUTREV('0');
    aed4:	b3a09017 	movlt	r9, #23
    aed8:	b5ca0017 	strblt	r0, [sl, #23]
			if (exponent_signed >= 0) {
    aedc:	aa000042 	bge	afec <double_to_string.constprop.2+0x2d4>
				uint32_t frac = ((d - u) * 1000000) + .5;
    aee0:	ed9f6b5e 	vldr	d6, [pc, #376]	; b060 <double_to_string.constprop.2+0x348>
			buf[decimal_spot] = '.';
    aee4:	e3a0302e 	mov	r3, #46	; 0x2e
				uint32_t frac = ((d - u) * 1000000) + .5;
    aee8:	eeb67b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    aeec:	ec476b15 	vmov	d5, r6, r7
			buf[decimal_spot] = '.';
    aef0:	e5ca3020 	strb	r3, [sl, #32]
				uint32_t frac = ((d - u) * 1000000) + .5;
    aef4:	ee057b06 	vmla.f64	d7, d5, d6
    aef8:	eefc7bc7 	vcvt.u32.f64	s15, d7
    aefc:	ee171a90 	vmov	r1, s15
				while (frac != 0) {
    af00:	e3510000 	cmp	r1, #0
    af04:	0a00000a 	beq	af34 <double_to_string.constprop.2+0x21c>
					uint digit = frac % 10;
    af08:	e30ccccd 	movw	ip, #52429	; 0xcccd
    af0c:	e28a0027 	add	r0, sl, #39	; 0x27
    af10:	e34ccccc 	movt	ip, #52428	; 0xcccc
    af14:	e083219c 	umull	r2, r3, ip, r1
    af18:	e1a031a3 	lsr	r3, r3, #3
    af1c:	e0832103 	add	r2, r3, r3, lsl #2
    af20:	e0412082 	sub	r2, r1, r2, lsl #1
				while (frac != 0) {
    af24:	e2531000 	subs	r1, r3, #0
					buf[--i] = digit + '0';
    af28:	e2823030 	add	r3, r2, #48	; 0x30
    af2c:	e5603001 	strb	r3, [r0, #-1]!
				while (frac != 0) {
    af30:	1afffff7 	bne	af14 <double_to_string.constprop.2+0x1fc>
			if (neg)
    af34:	e3540000 	cmp	r4, #0
    af38:	e2d53000 	sbcs	r3, r5, #0
    af3c:	a08a0009 	addge	r0, sl, r9
    af40:	aaffffab 	bge	adf4 <double_to_string.constprop.2+0xdc>
				OUTREV('-');
    af44:	e3590000 	cmp	r9, #0
    af48:	12490001 	subne	r0, r9, #1
    af4c:	13a0302d 	movne	r3, #45	; 0x2d
    af50:	17ca3000 	strbne	r3, [sl, r0]
    af54:	01a0000a 	moveq	r0, sl
    af58:	108a0000 	addne	r0, sl, r0
    af5c:	eaffffa4 	b	adf4 <double_to_string.constprop.2+0xdc>
    af60:	e59fc114 	ldr	ip, [pc, #276]	; b07c <double_to_string.constprop.2+0x364>
    af64:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    af68:	e3a02041 	mov	r2, #65	; 0x41
    af6c:	e3a0104e 	mov	r1, #78	; 0x4e
    af70:	ea000000 	b	af78 <double_to_string.constprop.2+0x260>
    af74:	e5fc2001 	ldrb	r2, [ip, #1]!
    af78:	e3520000 	cmp	r2, #0
    af7c:	e4c01001 	strb	r1, [r0], #1
    af80:	e2833001 	add	r3, r3, #1
    af84:	e1a01002 	mov	r1, r2
    af88:	1afffff9 	bne	af74 <double_to_string.constprop.2+0x25c>
    af8c:	eaffff95 	b	ade8 <double_to_string.constprop.2+0xd0>
    af90:	e59fc0e8 	ldr	ip, [pc, #232]	; b080 <double_to_string.constprop.2+0x368>
    af94:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    af98:	e3a0204e 	mov	r2, #78	; 0x4e
    af9c:	e3a01049 	mov	r1, #73	; 0x49
    afa0:	ea000000 	b	afa8 <double_to_string.constprop.2+0x290>
    afa4:	e5fc2001 	ldrb	r2, [ip, #1]!
    afa8:	e3520000 	cmp	r2, #0
    afac:	e4c01001 	strb	r1, [r0], #1
    afb0:	e2833001 	add	r3, r3, #1
    afb4:	e1a01002 	mov	r1, r2
    afb8:	1afffff9 	bne	afa4 <double_to_string.constprop.2+0x28c>
    afbc:	eaffff89 	b	ade8 <double_to_string.constprop.2+0xd0>
    afc0:	e59fc0bc 	ldr	ip, [pc, #188]	; b084 <double_to_string.constprop.2+0x36c>
    afc4:	e08a0003 	add	r0, sl, r3
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    afc8:	e3a02045 	mov	r2, #69	; 0x45
    afcc:	e3a01044 	mov	r1, #68	; 0x44
    afd0:	e3520000 	cmp	r2, #0
    afd4:	e4c01001 	strb	r1, [r0], #1
    afd8:	e2833001 	add	r3, r3, #1
    afdc:	e1a01002 	mov	r1, r2
    afe0:	0affff80 	beq	ade8 <double_to_string.constprop.2+0xd0>
    afe4:	e5fc2001 	ldrb	r2, [ip, #1]!
    afe8:	eafffff8 	b	afd0 <double_to_string.constprop.2+0x2b8>
				u >>= (52 - exponent_signed);
    afec:	e2633034 	rsb	r3, r3, #52	; 0x34
				u |= (1ULL<<52);
    aff0:	e3892601 	orr	r2, r9, #1048576	; 0x100000
				u >>= (52 - exponent_signed);
    aff4:	e1a08338 	lsr	r8, r8, r3
    aff8:	e263c020 	rsb	ip, r3, #32
    affc:	e2430020 	sub	r0, r3, #32
    b000:	e1a09332 	lsr	r9, r2, r3
    b004:	e1888c12 	orr	r8, r8, r2, lsl ip
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    b008:	e58d1004 	str	r1, [sp, #4]
				u |= (1ULL<<52);
    b00c:	e3a0c000 	mov	ip, #0
				u >>= (52 - exponent_signed);
    b010:	e1888032 	orr	r8, r8, r2, lsr r0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    b014:	e28d1018 	add	r1, sp, #24
    b018:	e3a00019 	mov	r0, #25
    b01c:	e561c001 	strb	ip, [r1, #-1]!
    b020:	e1a03009 	mov	r3, r9
    b024:	e1a02008 	mov	r2, r8
    b028:	e58d1008 	str	r1, [sp, #8]
    b02c:	e58d0000 	str	r0, [sp]
    b030:	e1a0000a 	mov	r0, sl
    b034:	ebfffdc8 	bl	a75c <longlong_to_string>
    b038:	e1a01009 	mov	r1, r9
				pos = s - buf;
    b03c:	e040900a 	sub	r9, r0, sl
    b040:	e1a00008 	mov	r0, r8
    b044:	fa00036c 	blx	bdfc <__aeabi_ul2d>
    b048:	ec476b17 	vmov	d7, r6, r7
    b04c:	ec410b16 	vmov	d6, r0, r1
    b050:	ee377b46 	vsub.f64	d7, d7, d6
    b054:	ec576b17 	vmov	r6, r7, d7
    b058:	eaffffa0 	b	aee0 <double_to_string.constprop.2+0x1c8>
    b05c:	e320f000 	nop	{0}
    b060:	00000000 	.word	0x00000000
    b064:	412e8480 	.word	0x412e8480
    b068:	0000c1fd 	.word	0x0000c1fd
    b06c:	0000c219 	.word	0x0000c219
    b070:	0000c1dd 	.word	0x0000c1dd
    b074:	0000c1e5 	.word	0x0000c1e5
    b078:	0000c20d 	.word	0x0000c20d
    b07c:	0000c1e9 	.word	0x0000c1e9
    b080:	0000c1e1 	.word	0x0000c1e1
    b084:	0000c201 	.word	0x0000c201

0000b088 <_printf_engine>:
		str[wlen] = '\0';
	return wlen;
}

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
    b088:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if (s == 0)
					s = "<null>";
    b08c:	e30cc1d4 	movw	ip, #49620	; 0xc1d4
{
    b090:	e1a0b000 	mov	fp, r0
	size_t chars_written = 0;
    b094:	e3a06000 	mov	r6, #0
{
    b098:	e1a07001 	mov	r7, r1
    b09c:	e1a00002 	mov	r0, r2
    b0a0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
					s = "<null>";
    b0a4:	e340c000 	movt	ip, #0
{
    b0a8:	e58d3010 	str	r3, [sp, #16]
					s = "<null>";
    b0ac:	e58dc014 	str	ip, [sp, #20]
		while ((c = *fmt++) != 0) {
    b0b0:	e5d01000 	ldrb	r1, [r0]
		signchar = '\0';
    b0b4:	e3a03000 	mov	r3, #0
		while ((c = *fmt++) != 0) {
    b0b8:	e2804001 	add	r4, r0, #1
		signchar = '\0';
    b0bc:	e5cd3027 	strb	r3, [sp, #39]	; 0x27
		while ((c = *fmt++) != 0) {
    b0c0:	e3510000 	cmp	r1, #0
    b0c4:	0a000008 	beq	b0ec <_printf_engine+0x64>
			if (c == '%')
    b0c8:	e3510025 	cmp	r1, #37	; 0x25
    b0cc:	1a000002 	bne	b0dc <_printf_engine+0x54>
    b0d0:	ea00000c 	b	b108 <_printf_engine+0x80>
    b0d4:	e3530025 	cmp	r3, #37	; 0x25
    b0d8:	0a00000b 	beq	b10c <_printf_engine+0x84>
    b0dc:	e0441000 	sub	r1, r4, r0
		while ((c = *fmt++) != 0) {
    b0e0:	e4d43001 	ldrb	r3, [r4], #1
    b0e4:	e3530000 	cmp	r3, #0
    b0e8:	1afffff9 	bne	b0d4 <_printf_engine+0x4c>
		OUTPUT_STRING(s, string_len);
    b0ec:	e1a02007 	mov	r2, r7
    b0f0:	e12fff3b 	blx	fp
    b0f4:	e2503000 	subs	r3, r0, #0
    b0f8:	aa00006c 	bge	b2b0 <_printf_engine+0x228>
#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
	return (err < 0) ? err : (int)chars_written;
}
    b0fc:	e1a00003 	mov	r0, r3
    b100:	e28dd04c 	add	sp, sp, #76	; 0x4c
    b104:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		string_len = 0;
    b108:	e3a01000 	mov	r1, #0
		OUTPUT_STRING(s, string_len);
    b10c:	e1a02007 	mov	r2, r7
    b110:	e12fff3b 	blx	fp
    b114:	e2503000 	subs	r3, r0, #0
    b118:	bafffff7 	blt	b0fc <_printf_engine+0x74>
		format_num = 0;
    b11c:	e3a05000 	mov	r5, #0
		OUTPUT_STRING(s, string_len);
    b120:	e0866003 	add	r6, r6, r3
		flags = 0;
    b124:	e1a0a005 	mov	sl, r5
		c = *fmt++;
    b128:	e4d49001 	ldrb	r9, [r4], #1
		if (c == 0)
    b12c:	e3590000 	cmp	r9, #0
    b130:	0a00005f 	beq	b2b4 <_printf_engine+0x22c>
		switch (c) {
    b134:	e2493020 	sub	r3, r9, #32
    b138:	e353005a 	cmp	r3, #90	; 0x5a
    b13c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b140:	ea000163 	b	b6d4 <_printf_engine+0x64c>
    b144:	0000b590 	.word	0x0000b590
    b148:	0000b6d4 	.word	0x0000b6d4
    b14c:	0000b6d4 	.word	0x0000b6d4
    b150:	0000b558 	.word	0x0000b558
    b154:	0000b6d4 	.word	0x0000b6d4
    b158:	0000b560 	.word	0x0000b560
    b15c:	0000b6d4 	.word	0x0000b6d4
    b160:	0000b6d4 	.word	0x0000b6d4
    b164:	0000b6d4 	.word	0x0000b6d4
    b168:	0000b6d4 	.word	0x0000b6d4
    b16c:	0000b6d4 	.word	0x0000b6d4
    b170:	0000b598 	.word	0x0000b598
    b174:	0000b6d4 	.word	0x0000b6d4
    b178:	0000b5a0 	.word	0x0000b5a0
    b17c:	0000b128 	.word	0x0000b128
    b180:	0000b6d4 	.word	0x0000b6d4
    b184:	0000b5a8 	.word	0x0000b5a8
    b188:	0000b5a8 	.word	0x0000b5a8
    b18c:	0000b5a8 	.word	0x0000b5a8
    b190:	0000b5a8 	.word	0x0000b5a8
    b194:	0000b5a8 	.word	0x0000b5a8
    b198:	0000b5a8 	.word	0x0000b5a8
    b19c:	0000b5a8 	.word	0x0000b5a8
    b1a0:	0000b5a8 	.word	0x0000b5a8
    b1a4:	0000b5a8 	.word	0x0000b5a8
    b1a8:	0000b5a8 	.word	0x0000b5a8
    b1ac:	0000b6d4 	.word	0x0000b6d4
    b1b0:	0000b6d4 	.word	0x0000b6d4
    b1b4:	0000b6d4 	.word	0x0000b6d4
    b1b8:	0000b6d4 	.word	0x0000b6d4
    b1bc:	0000b6d4 	.word	0x0000b6d4
    b1c0:	0000b6d4 	.word	0x0000b6d4
    b1c4:	0000b6d4 	.word	0x0000b6d4
    b1c8:	0000b4b4 	.word	0x0000b4b4
    b1cc:	0000b6d4 	.word	0x0000b6d4
    b1d0:	0000b6d4 	.word	0x0000b6d4
    b1d4:	0000b6d4 	.word	0x0000b6d4
    b1d8:	0000b6d4 	.word	0x0000b6d4
    b1dc:	0000b41c 	.word	0x0000b41c
    b1e0:	0000b6d4 	.word	0x0000b6d4
    b1e4:	0000b6d4 	.word	0x0000b6d4
    b1e8:	0000b6d4 	.word	0x0000b6d4
    b1ec:	0000b6d4 	.word	0x0000b6d4
    b1f0:	0000b6d4 	.word	0x0000b6d4
    b1f4:	0000b6d4 	.word	0x0000b6d4
    b1f8:	0000b6d4 	.word	0x0000b6d4
    b1fc:	0000b6d4 	.word	0x0000b6d4
    b200:	0000b6d4 	.word	0x0000b6d4
    b204:	0000b6d4 	.word	0x0000b6d4
    b208:	0000b6d4 	.word	0x0000b6d4
    b20c:	0000b6d4 	.word	0x0000b6d4
    b210:	0000b6d4 	.word	0x0000b6d4
    b214:	0000b6d4 	.word	0x0000b6d4
    b218:	0000b6d4 	.word	0x0000b6d4
    b21c:	0000b6d4 	.word	0x0000b6d4
    b220:	0000b6d4 	.word	0x0000b6d4
    b224:	0000b690 	.word	0x0000b690
    b228:	0000b6d4 	.word	0x0000b6d4
    b22c:	0000b6d4 	.word	0x0000b6d4
    b230:	0000b6d4 	.word	0x0000b6d4
    b234:	0000b6d4 	.word	0x0000b6d4
    b238:	0000b6d4 	.word	0x0000b6d4
    b23c:	0000b6d4 	.word	0x0000b6d4
    b240:	0000b6d4 	.word	0x0000b6d4
    b244:	0000b6d4 	.word	0x0000b6d4
    b248:	0000b4b8 	.word	0x0000b4b8
    b24c:	0000b6d4 	.word	0x0000b6d4
    b250:	0000b5c4 	.word	0x0000b5c4
    b254:	0000b5fc 	.word	0x0000b5fc
    b258:	0000b6d4 	.word	0x0000b6d4
    b25c:	0000b420 	.word	0x0000b420
    b260:	0000b6d4 	.word	0x0000b6d4
    b264:	0000b63c 	.word	0x0000b63c
    b268:	0000b5fc 	.word	0x0000b5fc
    b26c:	0000b6a8 	.word	0x0000b6a8
    b270:	0000b6d4 	.word	0x0000b6d4
    b274:	0000b62c 	.word	0x0000b62c
    b278:	0000b6d4 	.word	0x0000b6d4
    b27c:	0000b4e4 	.word	0x0000b4e4
    b280:	0000b6d4 	.word	0x0000b6d4
    b284:	0000b2c4 	.word	0x0000b2c4
    b288:	0000b6d4 	.word	0x0000b6d4
    b28c:	0000b6d4 	.word	0x0000b6d4
    b290:	0000b6b0 	.word	0x0000b6b0
    b294:	0000b6a0 	.word	0x0000b6a0
    b298:	0000b64c 	.word	0x0000b64c
    b29c:	0000b6d4 	.word	0x0000b6d4
    b2a0:	0000b6d4 	.word	0x0000b6d4
    b2a4:	0000b2c8 	.word	0x0000b2c8
    b2a8:	0000b6d4 	.word	0x0000b6d4
    b2ac:	0000b550 	.word	0x0000b550
		OUTPUT_STRING(s, string_len);
    b2b0:	e0866003 	add	r6, r6, r3
	return (err < 0) ? err : (int)chars_written;
    b2b4:	e1a03006 	mov	r3, r6
}
    b2b8:	e1a00003 	mov	r0, r3
    b2bc:	e28dd04c 	add	sp, sp, #76	; 0x4c
    b2c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= LONGFLAG | ALTFLAG;
    b2c4:	e38aa081 	orr	sl, sl, #129	; 0x81
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    b2c8:	e31a0002 	tst	sl, #2
    b2cc:	0a00008f 	beq	b510 <_printf_engine+0x488>
    b2d0:	e59d3010 	ldr	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b2d4:	e2833007 	add	r3, r3, #7
    b2d8:	e3c33007 	bic	r3, r3, #7
    b2dc:	e2832008 	add	r2, r3, #8
    b2e0:	e58d2010 	str	r2, [sp, #16]
    b2e4:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    b2e8:	e58da000 	str	sl, [sp]
    b2ec:	e28d0028 	add	r0, sp, #40	; 0x28
    b2f0:	ebfffe70 	bl	acb8 <longlong_to_hexstring.constprop.1>
				if (flags & ALTFLAG) {
    b2f4:	e31a0080 	tst	sl, #128	; 0x80
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    b2f8:	e1a09000 	mov	r9, r0
				if (flags & ALTFLAG) {
    b2fc:	0a000051 	beq	b448 <_printf_engine+0x3c0>
					OUTPUT_CHAR('0');
    b300:	e3a03030 	mov	r3, #48	; 0x30
    b304:	e28d8048 	add	r8, sp, #72	; 0x48
    b308:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    b30c:	e1a02007 	mov	r2, r7
    b310:	e1a00008 	mov	r0, r8
    b314:	e3a01001 	mov	r1, #1
    b318:	e12fff3b 	blx	fp
    b31c:	e2503000 	subs	r3, r0, #0
    b320:	baffff75 	blt	b0fc <_printf_engine+0x74>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    b324:	e31a0c01 	tst	sl, #256	; 0x100
    b328:	e1a00008 	mov	r0, r8
    b32c:	03a0c078 	moveq	ip, #120	; 0x78
    b330:	13a0c058 	movne	ip, #88	; 0x58
    b334:	e1a02007 	mov	r2, r7
    b338:	e3a01001 	mov	r1, #1
    b33c:	e5cdc024 	strb	ip, [sp, #36]	; 0x24
					OUTPUT_CHAR('0');
    b340:	e0836006 	add	r6, r3, r6
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    b344:	e12fff3b 	blx	fp
    b348:	e2503000 	subs	r3, r0, #0
    b34c:	baffff6a 	blt	b0fc <_printf_engine+0x74>
		if (flags & LEFTFORMATFLAG) {
    b350:	e31a0b02 	tst	sl, #2048	; 0x800
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    b354:	e0836006 	add	r6, r3, r6
			OUTPUT_STRING(s, SIZE_MAX);
    b358:	e1a00009 	mov	r0, r9
		if (flags & LEFTFORMATFLAG) {
    b35c:	1a00003c 	bne	b454 <_printf_engine+0x3cc>
    b360:	e20a8a01 	and	r8, sl, #4096	; 0x1000
    b364:	e58d8018 	str	r8, [sp, #24]
			string_len = strlen(s);
    b368:	eb0001bd 	bl	ba64 <strlen>
			if (signchar != '\0' && format_num > 0)
    b36c:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
			string_len = strlen(s);
    b370:	e1a0a000 	mov	sl, r0
			if (signchar != '\0' && format_num > 0)
    b374:	e3530000 	cmp	r3, #0
    b378:	0a000070 	beq	b540 <_printf_engine+0x4b8>
    b37c:	e3550000 	cmp	r5, #0
    b380:	0a000102 	beq	b790 <_printf_engine+0x708>
			if (flags & LEADZEROFLAG && signchar != '\0')
    b384:	e3580000 	cmp	r8, #0
				format_num--;
    b388:	e2455001 	sub	r5, r5, #1
			if (flags & LEADZEROFLAG && signchar != '\0')
    b38c:	0a00016c 	beq	b944 <_printf_engine+0x8bc>
				OUTPUT_CHAR(signchar);
    b390:	e28d8048 	add	r8, sp, #72	; 0x48
    b394:	e1a02007 	mov	r2, r7
    b398:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    b39c:	e3a01001 	mov	r1, #1
    b3a0:	e1a00008 	mov	r0, r8
    b3a4:	e12fff3b 	blx	fp
    b3a8:	e2503000 	subs	r3, r0, #0
    b3ac:	baffff52 	blt	b0fc <_printf_engine+0x74>
			for (; format_num > string_len; format_num--)
    b3b0:	e15a0005 	cmp	sl, r5
				OUTPUT_CHAR(signchar);
    b3b4:	e0866003 	add	r6, r6, r3
			for (; format_num > string_len; format_num--)
    b3b8:	2a0000e7 	bcs	b75c <_printf_engine+0x6d4>
    b3bc:	e59d3018 	ldr	r3, [sp, #24]
    b3c0:	e58d401c 	str	r4, [sp, #28]
    b3c4:	e1a0400a 	mov	r4, sl
    b3c8:	e1a0a008 	mov	sl, r8
    b3cc:	e3530000 	cmp	r3, #0
    b3d0:	13a03030 	movne	r3, #48	; 0x30
    b3d4:	03a03020 	moveq	r3, #32
    b3d8:	e1a08003 	mov	r8, r3
    b3dc:	ea000001 	b	b3e8 <_printf_engine+0x360>
    b3e0:	e1540005 	cmp	r4, r5
    b3e4:	0a0000cc 	beq	b71c <_printf_engine+0x694>
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    b3e8:	e1a02007 	mov	r2, r7
    b3ec:	e3a01001 	mov	r1, #1
    b3f0:	e1a0000a 	mov	r0, sl
    b3f4:	e5cd8024 	strb	r8, [sp, #36]	; 0x24
    b3f8:	e12fff3b 	blx	fp
    b3fc:	e3500000 	cmp	r0, #0
			for (; format_num > string_len; format_num--)
    b400:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    b404:	e0866000 	add	r6, r6, r0
    b408:	aafffff4 	bge	b3e0 <_printf_engine+0x358>
    b40c:	e1a03000 	mov	r3, r0
}
    b410:	e1a00003 	mov	r0, r3
    b414:	e28dd04c 	add	sp, sp, #76	; 0x4c
    b418:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= CAPSFLAG;
    b41c:	e38aac01 	orr	sl, sl, #256	; 0x100
				double d = va_arg(ap, double);
    b420:	e59d3010 	ldr	r3, [sp, #16]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    b424:	e1a0100a 	mov	r1, sl
    b428:	e28d0028 	add	r0, sp, #40	; 0x28
				double d = va_arg(ap, double);
    b42c:	e2833007 	add	r3, r3, #7
    b430:	e3c33007 	bic	r3, r3, #7
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    b434:	ed930b00 	vldr	d0, [r3]
				double d = va_arg(ap, double);
    b438:	e2833008 	add	r3, r3, #8
    b43c:	e58d3010 	str	r3, [sp, #16]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    b440:	ebfffe34 	bl	ad18 <double_to_string.constprop.2>
    b444:	e1a09000 	mov	r9, r0
		if (flags & LEFTFORMATFLAG) {
    b448:	e31a0b02 	tst	sl, #2048	; 0x800
			OUTPUT_STRING(s, SIZE_MAX);
    b44c:	e1a00009 	mov	r0, r9
		if (flags & LEFTFORMATFLAG) {
    b450:	0affffc2 	beq	b360 <_printf_engine+0x2d8>
			OUTPUT_STRING(s, SIZE_MAX);
    b454:	e1a02007 	mov	r2, r7
    b458:	e3e01000 	mvn	r1, #0
    b45c:	e12fff3b 	blx	fp
    b460:	e2503000 	subs	r3, r0, #0
    b464:	baffff24 	blt	b0fc <_printf_engine+0x74>
			for (; format_num > written; format_num--)
    b468:	e1530005 	cmp	r3, r5
			OUTPUT_STRING(s, SIZE_MAX);
    b46c:	e1a09003 	mov	r9, r3
    b470:	e0866003 	add	r6, r6, r3
			for (; format_num > written; format_num--)
    b474:	2a000023 	bcs	b508 <_printf_engine+0x480>
    b478:	e28d8024 	add	r8, sp, #36	; 0x24
				OUTPUT_CHAR(' ');
    b47c:	e3a0a020 	mov	sl, #32
    b480:	ea000001 	b	b48c <_printf_engine+0x404>
			for (; format_num > written; format_num--)
    b484:	e1590005 	cmp	r9, r5
    b488:	0a00001e 	beq	b508 <_printf_engine+0x480>
				OUTPUT_CHAR(' ');
    b48c:	e1a02007 	mov	r2, r7
    b490:	e3a01001 	mov	r1, #1
    b494:	e1a00008 	mov	r0, r8
    b498:	e5cda024 	strb	sl, [sp, #36]	; 0x24
    b49c:	e12fff3b 	blx	fp
    b4a0:	e3500000 	cmp	r0, #0
			for (; format_num > written; format_num--)
    b4a4:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(' ');
    b4a8:	e0866000 	add	r6, r6, r0
    b4ac:	aafffff4 	bge	b484 <_printf_engine+0x3fc>
    b4b0:	eaffffd5 	b	b40c <_printf_engine+0x384>
				flags |= CAPSFLAG;
    b4b4:	e38aac01 	orr	sl, sl, #256	; 0x100
				double d = va_arg(ap, double);
    b4b8:	e59d3010 	ldr	r3, [sp, #16]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    b4bc:	e1a0100a 	mov	r1, sl
    b4c0:	e28d0028 	add	r0, sp, #40	; 0x28
				double d = va_arg(ap, double);
    b4c4:	e2833007 	add	r3, r3, #7
    b4c8:	e3c33007 	bic	r3, r3, #7
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    b4cc:	ed930b00 	vldr	d0, [r3]
				double d = va_arg(ap, double);
    b4d0:	e2833008 	add	r3, r3, #8
    b4d4:	e58d3010 	str	r3, [sp, #16]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    b4d8:	ebfffd01 	bl	a8e4 <double_to_hexstring.isra.0>
    b4dc:	e1a09000 	mov	r9, r0
				goto _output_string;
    b4e0:	eaffffd8 	b	b448 <_printf_engine+0x3c0>
				ptr = va_arg(ap, void *);
    b4e4:	e59d3010 	ldr	r3, [sp, #16]
				if (flags & LONGLONGFLAG)
    b4e8:	e31a0002 	tst	sl, #2
				ptr = va_arg(ap, void *);
    b4ec:	e2832004 	add	r2, r3, #4
    b4f0:	e5933000 	ldr	r3, [r3]
				if (flags & LONGLONGFLAG)
    b4f4:	0a0000c3 	beq	b808 <_printf_engine+0x780>
				ptr = va_arg(ap, void *);
    b4f8:	e58d2010 	str	r2, [sp, #16]
					*(long long *)ptr = chars_written;
    b4fc:	e3a02000 	mov	r2, #0
    b500:	e5836000 	str	r6, [r3]
    b504:	e5832004 	str	r2, [r3, #4]
				ptr = va_arg(ap, void *);
    b508:	e1a00004 	mov	r0, r4
    b50c:	eafffee7 	b	b0b0 <_printf_engine+0x28>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b510:	e31a0001 	tst	sl, #1
    b514:	1a000097 	bne	b778 <_printf_engine+0x6f0>
    b518:	e31a0008 	tst	sl, #8
    b51c:	1a0000c6 	bne	b83c <_printf_engine+0x7b4>
    b520:	e31a0004 	tst	sl, #4
    b524:	0a0000d6 	beq	b884 <_printf_engine+0x7fc>
    b528:	e59d1010 	ldr	r1, [sp, #16]
    b52c:	e3a03000 	mov	r3, #0
    b530:	e1d120b0 	ldrh	r2, [r1]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    b534:	e2811004 	add	r1, r1, #4
    b538:	e58d1010 	str	r1, [sp, #16]
    b53c:	eaffff69 	b	b2e8 <_printf_engine+0x260>
			for (; format_num > string_len; format_num--)
    b540:	e1550000 	cmp	r5, r0
    b544:	9a000075 	bls	b720 <_printf_engine+0x698>
    b548:	e28d8024 	add	r8, sp, #36	; 0x24
    b54c:	eaffff9a 	b	b3bc <_printf_engine+0x334>
				flags |= SIZETFLAG;
    b550:	e38aa010 	orr	sl, sl, #16
				goto next_format;
    b554:	eafffef3 	b	b128 <_printf_engine+0xa0>
				flags |= ALTFLAG;
    b558:	e38aa080 	orr	sl, sl, #128	; 0x80
				goto next_format;
    b55c:	eafffef1 	b	b128 <_printf_engine+0xa0>
				OUTPUT_CHAR('%');
    b560:	e3a03025 	mov	r3, #37	; 0x25
    b564:	e28d8048 	add	r8, sp, #72	; 0x48
    b568:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    b56c:	e1a02007 	mov	r2, r7
    b570:	e1a00008 	mov	r0, r8
    b574:	e3a01001 	mov	r1, #1
    b578:	e12fff3b 	blx	fp
    b57c:	e2503000 	subs	r3, r0, #0
    b580:	bafffedd 	blt	b0fc <_printf_engine+0x74>
				OUTPUT_CHAR(c);
    b584:	e0836006 	add	r6, r3, r6
				ptr = va_arg(ap, void *);
    b588:	e1a00004 	mov	r0, r4
    b58c:	eafffec7 	b	b0b0 <_printf_engine+0x28>
				flags |= BLANKPOSFLAG;
    b590:	e38aaa02 	orr	sl, sl, #8192	; 0x2000
				goto next_format;
    b594:	eafffee3 	b	b128 <_printf_engine+0xa0>
				flags |= SHOWSIGNFLAG;
    b598:	e38aac02 	orr	sl, sl, #512	; 0x200
				goto next_format;
    b59c:	eafffee1 	b	b128 <_printf_engine+0xa0>
				flags |= LEFTFORMATFLAG;
    b5a0:	e38aab02 	orr	sl, sl, #2048	; 0x800
				goto next_format;
    b5a4:	eafffedf 	b	b128 <_printf_engine+0xa0>
				if (c == '0' && format_num == 0)
    b5a8:	e3590030 	cmp	r9, #48	; 0x30
    b5ac:	03550000 	cmpeq	r5, #0
				format_num *= 10;
    b5b0:	e0855105 	add	r5, r5, r5, lsl #2
				format_num += c - '0';
    b5b4:	e2499030 	sub	r9, r9, #48	; 0x30
					flags |= LEADZEROFLAG;
    b5b8:	038aaa01 	orreq	sl, sl, #4096	; 0x1000
				format_num += c - '0';
    b5bc:	e0895085 	add	r5, r9, r5, lsl #1
				goto next_format;
    b5c0:	eafffed8 	b	b128 <_printf_engine+0xa0>
				uc = va_arg(ap, unsigned int);
    b5c4:	e59d5010 	ldr	r5, [sp, #16]
    b5c8:	e28d8048 	add	r8, sp, #72	; 0x48
				OUTPUT_CHAR(uc);
    b5cc:	e1a02007 	mov	r2, r7
    b5d0:	e3a01001 	mov	r1, #1
				uc = va_arg(ap, unsigned int);
    b5d4:	e5953000 	ldr	r3, [r5]
    b5d8:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
				OUTPUT_CHAR(uc);
    b5dc:	e1a00008 	mov	r0, r8
    b5e0:	e12fff3b 	blx	fp
    b5e4:	e2503000 	subs	r3, r0, #0
    b5e8:	bafffec3 	blt	b0fc <_printf_engine+0x74>
				uc = va_arg(ap, unsigned int);
    b5ec:	e2852004 	add	r2, r5, #4
				OUTPUT_CHAR(uc);
    b5f0:	e0866003 	add	r6, r6, r3
				uc = va_arg(ap, unsigned int);
    b5f4:	e58d2010 	str	r2, [sp, #16]
				break;
    b5f8:	eaffffc2 	b	b508 <_printf_engine+0x480>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b5fc:	e31a0002 	tst	sl, #2
    b600:	1a000066 	bne	b7a0 <_printf_engine+0x718>
    b604:	e31a0001 	tst	sl, #1
    b608:	1a000097 	bne	b86c <_printf_engine+0x7e4>
    b60c:	e31a0008 	tst	sl, #8
    b610:	0a0000a4 	beq	b8a8 <_printf_engine+0x820>
    b614:	e59d1010 	ldr	r1, [sp, #16]
    b618:	e1d120d0 	ldrsb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    b61c:	e2811004 	add	r1, r1, #4
    b620:	e58d1010 	str	r1, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b624:	e1a03fc2 	asr	r3, r2, #31
    b628:	ea000062 	b	b7b8 <_printf_engine+0x730>
				if (flags & LONGFLAG)
    b62c:	e31a0001 	tst	sl, #1
					flags |= LONGLONGFLAG;
    b630:	138aa002 	orrne	sl, sl, #2
				flags |= LONGFLAG;
    b634:	e38aa001 	orr	sl, sl, #1
				goto next_format;
    b638:	eafffeba 	b	b128 <_printf_engine+0xa0>
				if (flags & HALFFLAG)
    b63c:	e31a0004 	tst	sl, #4
					flags |= HALFHALFFLAG;
    b640:	138aa008 	orrne	sl, sl, #8
				flags |= HALFFLAG;
    b644:	e38aa004 	orr	sl, sl, #4
				goto next_format;
    b648:	eafffeb6 	b	b128 <_printf_engine+0xa0>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    b64c:	e31a0002 	tst	sl, #2
    b650:	0a000062 	beq	b7e0 <_printf_engine+0x758>
    b654:	e59d3010 	ldr	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b658:	e2833007 	add	r3, r3, #7
    b65c:	e3c33007 	bic	r3, r3, #7
    b660:	e2832008 	add	r2, r3, #8
    b664:	e58d2010 	str	r2, [sp, #16]
    b668:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    b66c:	e28d0027 	add	r0, sp, #39	; 0x27
    b670:	e3a01020 	mov	r1, #32
    b674:	e58d0008 	str	r0, [sp, #8]
    b678:	e28d0028 	add	r0, sp, #40	; 0x28
    b67c:	e58da004 	str	sl, [sp, #4]
    b680:	e58d1000 	str	r1, [sp]
    b684:	ebfffc34 	bl	a75c <longlong_to_string>
    b688:	e1a09000 	mov	r9, r0
				goto _output_string;
    b68c:	eaffff6d 	b	b448 <_printf_engine+0x3c0>
				flags |= CAPSFLAG;
    b690:	e38aac01 	orr	sl, sl, #256	; 0x100
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    b694:	e31a0002 	tst	sl, #2
    b698:	0affff9c 	beq	b510 <_printf_engine+0x488>
    b69c:	eaffff0b 	b	b2d0 <_printf_engine+0x248>
				flags |= PTRDIFFFLAG;
    b6a0:	e38aa040 	orr	sl, sl, #64	; 0x40
				goto next_format;
    b6a4:	eafffe9f 	b	b128 <_printf_engine+0xa0>
				flags |= INTMAXFLAG;
    b6a8:	e38aa020 	orr	sl, sl, #32
				goto next_format;
    b6ac:	eafffe9d 	b	b128 <_printf_engine+0xa0>
				s = va_arg(ap, const char *);
    b6b0:	e59d3010 	ldr	r3, [sp, #16]
				flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
    b6b4:	e3caaa01 	bic	sl, sl, #4096	; 0x1000
				s = va_arg(ap, const char *);
    b6b8:	e5939000 	ldr	r9, [r3]
    b6bc:	e2833004 	add	r3, r3, #4
    b6c0:	e58d3010 	str	r3, [sp, #16]
					s = "<null>";
    b6c4:	e59d3014 	ldr	r3, [sp, #20]
    b6c8:	e3590000 	cmp	r9, #0
    b6cc:	01a09003 	moveq	r9, r3
				goto _output_string;
    b6d0:	eaffff5c 	b	b448 <_printf_engine+0x3c0>
				OUTPUT_CHAR('%');
    b6d4:	e3a03025 	mov	r3, #37	; 0x25
    b6d8:	e28d8048 	add	r8, sp, #72	; 0x48
    b6dc:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    b6e0:	e1a02007 	mov	r2, r7
    b6e4:	e1a00008 	mov	r0, r8
    b6e8:	e3a01001 	mov	r1, #1
    b6ec:	e12fff3b 	blx	fp
    b6f0:	e2505000 	subs	r5, r0, #0
    b6f4:	ba000090 	blt	b93c <_printf_engine+0x8b4>
				OUTPUT_CHAR(c);
    b6f8:	e1a00008 	mov	r0, r8
    b6fc:	e1a02007 	mov	r2, r7
    b700:	e3a01001 	mov	r1, #1
    b704:	e5cd9024 	strb	r9, [sp, #36]	; 0x24
    b708:	e12fff3b 	blx	fp
    b70c:	e2503000 	subs	r3, r0, #0
    b710:	bafffe79 	blt	b0fc <_printf_engine+0x74>
				OUTPUT_CHAR('%');
    b714:	e0856006 	add	r6, r5, r6
    b718:	eaffff99 	b	b584 <_printf_engine+0x4fc>
    b71c:	e59d401c 	ldr	r4, [sp, #28]
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
    b720:	e59d3018 	ldr	r3, [sp, #24]
    b724:	e3530000 	cmp	r3, #0
    b728:	1a00000b 	bne	b75c <_printf_engine+0x6d4>
    b72c:	e5dd3027 	ldrb	r3, [sp, #39]	; 0x27
    b730:	e3530000 	cmp	r3, #0
    b734:	0a000008 	beq	b75c <_printf_engine+0x6d4>
				OUTPUT_CHAR(signchar);
    b738:	e28d8048 	add	r8, sp, #72	; 0x48
    b73c:	e1a02007 	mov	r2, r7
    b740:	e5683024 	strb	r3, [r8, #-36]!	; 0xffffffdc
    b744:	e3a01001 	mov	r1, #1
    b748:	e1a00008 	mov	r0, r8
    b74c:	e12fff3b 	blx	fp
    b750:	e2503000 	subs	r3, r0, #0
    b754:	bafffe68 	blt	b0fc <_printf_engine+0x74>
    b758:	e0866003 	add	r6, r6, r3
			OUTPUT_STRING(s, SIZE_MAX);
    b75c:	e1a00009 	mov	r0, r9
    b760:	e1a02007 	mov	r2, r7
    b764:	e3e01000 	mvn	r1, #0
    b768:	e12fff3b 	blx	fp
    b76c:	e2503000 	subs	r3, r0, #0
    b770:	bafffe61 	blt	b0fc <_printf_engine+0x74>
    b774:	eaffff82 	b	b584 <_printf_engine+0x4fc>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b778:	e59d3010 	ldr	r3, [sp, #16]
    b77c:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    b780:	e2833004 	add	r3, r3, #4
    b784:	e58d3010 	str	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b788:	e3a03000 	mov	r3, #0
    b78c:	eafffed5 	b	b2e8 <_printf_engine+0x260>
			if (flags & LEADZEROFLAG && signchar != '\0')
    b790:	e59d2018 	ldr	r2, [sp, #24]
    b794:	e3520000 	cmp	r2, #0
    b798:	1afffefc 	bne	b390 <_printf_engine+0x308>
    b79c:	eaffffe5 	b	b738 <_printf_engine+0x6b0>
				    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
    b7a0:	e59d3010 	ldr	r3, [sp, #16]
    b7a4:	e2833007 	add	r3, r3, #7
    b7a8:	e3c33007 	bic	r3, r3, #7
    b7ac:	e2832008 	add	r2, r3, #8
    b7b0:	e58d2010 	str	r2, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b7b4:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    b7b8:	e28d0027 	add	r0, sp, #39	; 0x27
    b7bc:	e3a01020 	mov	r1, #32
				flags |= SIGNEDFLAG;
    b7c0:	e38aab01 	orr	sl, sl, #1024	; 0x400
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    b7c4:	e58d0008 	str	r0, [sp, #8]
    b7c8:	e58da004 	str	sl, [sp, #4]
    b7cc:	e28d0028 	add	r0, sp, #40	; 0x28
    b7d0:	e58d1000 	str	r1, [sp]
    b7d4:	ebfffbe0 	bl	a75c <longlong_to_string>
    b7d8:	e1a09000 	mov	r9, r0
				goto _output_string;
    b7dc:	eaffff19 	b	b448 <_printf_engine+0x3c0>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b7e0:	e31a0001 	tst	sl, #1
    b7e4:	1a00001a 	bne	b854 <_printf_engine+0x7cc>
    b7e8:	e31a0008 	tst	sl, #8
    b7ec:	0a000035 	beq	b8c8 <_printf_engine+0x840>
    b7f0:	e59d1010 	ldr	r1, [sp, #16]
    b7f4:	e3a03000 	mov	r3, #0
    b7f8:	e5d12000 	ldrb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    b7fc:	e2811004 	add	r1, r1, #4
    b800:	e58d1010 	str	r1, [sp, #16]
    b804:	eaffff98 	b	b66c <_printf_engine+0x5e4>
				else if (flags & LONGFLAG)
    b808:	e31a0001 	tst	sl, #1
    b80c:	1a000007 	bne	b830 <_printf_engine+0x7a8>
				else if (flags & HALFHALFFLAG)
    b810:	e31a0008 	tst	sl, #8
					*(signed char *)ptr = chars_written;
    b814:	15c36000 	strbne	r6, [r3]
				ptr = va_arg(ap, void *);
    b818:	158d2010 	strne	r2, [sp, #16]
				else if (flags & HALFHALFFLAG)
    b81c:	1affff39 	bne	b508 <_printf_engine+0x480>
				else if (flags & HALFFLAG)
    b820:	e31a0004 	tst	sl, #4
					*(short *)ptr = chars_written;
    b824:	11c360b0 	strhne	r6, [r3]
				ptr = va_arg(ap, void *);
    b828:	158d2010 	strne	r2, [sp, #16]
				else if (flags & HALFFLAG)
    b82c:	1affff35 	bne	b508 <_printf_engine+0x480>
					*(int *)ptr = chars_written;
    b830:	e5836000 	str	r6, [r3]
				ptr = va_arg(ap, void *);
    b834:	e58d2010 	str	r2, [sp, #16]
    b838:	eaffff32 	b	b508 <_printf_engine+0x480>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b83c:	e59d1010 	ldr	r1, [sp, #16]
    b840:	e3a03000 	mov	r3, #0
    b844:	e5d12000 	ldrb	r2, [r1]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    b848:	e2811004 	add	r1, r1, #4
    b84c:	e58d1010 	str	r1, [sp, #16]
    b850:	eafffea4 	b	b2e8 <_printf_engine+0x260>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b854:	e59d3010 	ldr	r3, [sp, #16]
    b858:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    b85c:	e2833004 	add	r3, r3, #4
    b860:	e58d3010 	str	r3, [sp, #16]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b864:	e3a03000 	mov	r3, #0
    b868:	eaffff7f 	b	b66c <_printf_engine+0x5e4>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b86c:	e59d3010 	ldr	r3, [sp, #16]
    b870:	e5932000 	ldr	r2, [r3]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
    b874:	e2833004 	add	r3, r3, #4
    b878:	e58d3010 	str	r3, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b87c:	e1a03fc2 	asr	r3, r2, #31
    b880:	eaffffcc 	b	b7b8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b884:	e31a0010 	tst	sl, #16
    b888:	1affffba 	bne	b778 <_printf_engine+0x6f0>
    b88c:	e31a0020 	tst	sl, #32
    b890:	e59d3010 	ldr	r3, [sp, #16]
    b894:	1afffe8e 	bne	b2d4 <_printf_engine+0x24c>
    b898:	e4932004 	ldr	r2, [r3], #4
    b89c:	e58d3010 	str	r3, [sp, #16]
    b8a0:	e3a03000 	mov	r3, #0
    b8a4:	eafffe8f 	b	b2e8 <_printf_engine+0x260>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b8a8:	e31a0004 	tst	sl, #4
    b8ac:	0a00000d 	beq	b8e8 <_printf_engine+0x860>
    b8b0:	e59d1010 	ldr	r1, [sp, #16]
    b8b4:	e1d120f0 	ldrsh	r2, [r1]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    b8b8:	e2811004 	add	r1, r1, #4
    b8bc:	e58d1010 	str	r1, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b8c0:	e1a03fc2 	asr	r3, r2, #31
    b8c4:	eaffffbb 	b	b7b8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b8c8:	e31a0004 	tst	sl, #4
    b8cc:	0a000011 	beq	b918 <_printf_engine+0x890>
    b8d0:	e59d1010 	ldr	r1, [sp, #16]
    b8d4:	e3a03000 	mov	r3, #0
    b8d8:	e1d120b0 	ldrh	r2, [r1]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    b8dc:	e2811004 	add	r1, r1, #4
    b8e0:	e58d1010 	str	r1, [sp, #16]
    b8e4:	eaffff60 	b	b66c <_printf_engine+0x5e4>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b8e8:	e31a0010 	tst	sl, #16
    b8ec:	1affffde 	bne	b86c <_printf_engine+0x7e4>
    b8f0:	e31a0020 	tst	sl, #32
    b8f4:	1affffa9 	bne	b7a0 <_printf_engine+0x718>
    b8f8:	e59d2010 	ldr	r2, [sp, #16]
    b8fc:	e31a0040 	tst	sl, #64	; 0x40
    b900:	e2823004 	add	r3, r2, #4
    b904:	059d2010 	ldreq	r2, [sp, #16]
    b908:	e5922000 	ldr	r2, [r2]
				    va_arg(ap, int);
    b90c:	e58d3010 	str	r3, [sp, #16]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    b910:	e1a03fc2 	asr	r3, r2, #31
    b914:	eaffffa7 	b	b7b8 <_printf_engine+0x730>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    b918:	e31a0010 	tst	sl, #16
    b91c:	1affffcc 	bne	b854 <_printf_engine+0x7cc>
    b920:	e31a0020 	tst	sl, #32
    b924:	e59d3010 	ldr	r3, [sp, #16]
    b928:	1affff4a 	bne	b658 <_printf_engine+0x5d0>
    b92c:	e4932004 	ldr	r2, [r3], #4
    b930:	e58d3010 	str	r3, [sp, #16]
    b934:	e3a03000 	mov	r3, #0
    b938:	eaffff4b 	b	b66c <_printf_engine+0x5e4>
				OUTPUT_CHAR('%');
    b93c:	e1a03005 	mov	r3, r5
    b940:	eafffded 	b	b0fc <_printf_engine+0x74>
			for (; format_num > string_len; format_num--)
    b944:	e1500005 	cmp	r0, r5
    b948:	3afffefe 	bcc	b548 <_printf_engine+0x4c0>
    b94c:	eaffff77 	b	b730 <_printf_engine+0x6a8>

0000b950 <rand>:
	randseed ^= enp;
}

int rand(void)
{
	return (randseed = randseed * 1664525 + 1013904223);
    b950:	e30d3074 	movw	r3, #53364	; 0xd074
    b954:	e306160d 	movw	r1, #26125	; 0x660d
    b958:	e3403000 	movt	r3, #0
    b95c:	e30f235f 	movw	r2, #62303	; 0xf35f
    b960:	e5930000 	ldr	r0, [r3]
    b964:	e3401019 	movt	r1, #25
    b968:	e3432c6e 	movt	r2, #15470	; 0x3c6e
    b96c:	e0202091 	mla	r0, r1, r0, r2
    b970:	e5830000 	str	r0, [r3]
}
    b974:	e12fff1e 	bx	lr

0000b978 <vfprintf>:
	return getc(stdin);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
	return fp->vfprintf(fp->ctx, fmt, ap);
    b978:	e5903010 	ldr	r3, [r0, #16]
    b97c:	e5900000 	ldr	r0, [r0]
    b980:	e12fff13 	bx	r3

0000b984 <fprintf>:
}

int fprintf(FILE *fp, const char *fmt, ...)
{
    b984:	e92d000e 	push	{r1, r2, r3}
    b988:	e92d4010 	push	{r4, lr}
    b98c:	e24dd00c 	sub	sp, sp, #12
	va_list ap;
	int err;

	va_start(ap, fmt);
    b990:	e28d3018 	add	r3, sp, #24
	return fp->vfprintf(fp->ctx, fmt, ap);
    b994:	e1a02003 	mov	r2, r3
    b998:	e5904010 	ldr	r4, [r0, #16]
    b99c:	e59d1014 	ldr	r1, [sp, #20]
    b9a0:	e5900000 	ldr	r0, [r0]
	va_start(ap, fmt);
    b9a4:	e58d3004 	str	r3, [sp, #4]
	return fp->vfprintf(fp->ctx, fmt, ap);
    b9a8:	e12fff34 	blx	r4
	err = vfprintf(fp, fmt, ap);
	va_end(ap);
	return err;
}
    b9ac:	e28dd00c 	add	sp, sp, #12
    b9b0:	e8bd4010 	pop	{r4, lr}
    b9b4:	e28dd00c 	add	sp, sp, #12
    b9b8:	e12fff1e 	bx	lr

0000b9bc <raise>:
#endif

/* needed by some piece of EABI */
void raise(void)
{
}
    b9bc:	e12fff1e 	bx	lr

0000b9c0 <memset>:

void *
memset(void *s, int c, size_t count)
{
	char *xs = (char *) s;
	size_t len = (-(size_t)s) & (sizeof(size_t)-1);
    b9c0:	e2603000 	rsb	r3, r0, #0
    b9c4:	e2033003 	and	r3, r3, #3
	size_t cc = c & 0xff;

	if ( count > len ) {
    b9c8:	e1530002 	cmp	r3, r2
    b9cc:	2a00001b 	bcs	ba40 <memset+0x80>
{
    b9d0:	e92d4010 	push	{r4, lr}
	size_t cc = c & 0xff;
    b9d4:	e6ef4071 	uxtb	r4, r1
		cc |= cc << 16;
		if (sizeof(size_t) == 8)
			cc |= (uint64_t)cc << 32; // should be optimized out on 32 bit machines

		// write to non-aligned memory byte-wise
		for ( ; len > 0; len-- )
    b9d8:	e3530000 	cmp	r3, #0
		cc |= cc << 8;
    b9dc:	e184e404 	orr	lr, r4, r4, lsl #8
		count -= len;
    b9e0:	e0422003 	sub	r2, r2, r3
	char *xs = (char *) s;
    b9e4:	01a03000 	moveq	r3, r0
		cc |= cc << 16;
    b9e8:	e18ee80e 	orr	lr, lr, lr, lsl #16
		for ( ; len > 0; len-- )
    b9ec:	0a000004 	beq	ba04 <memset+0x44>
    b9f0:	e080c003 	add	ip, r0, r3
	char *xs = (char *) s;
    b9f4:	e1a03000 	mov	r3, r0
			*xs++ = c;
    b9f8:	e4c34001 	strb	r4, [r3], #1
		for ( ; len > 0; len-- )
    b9fc:	e15c0003 	cmp	ip, r3
    ba00:	1afffffc 	bne	b9f8 <memset+0x38>

		// write to aligned memory dword-wise
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    ba04:	e1b0c122 	lsrs	ip, r2, #2
    ba08:	0a000003 	beq	ba1c <memset+0x5c>
    ba0c:	e083c10c 	add	ip, r3, ip, lsl #2
			*((size_t *)xs) = (size_t)cc;
    ba10:	e483e004 	str	lr, [r3], #4
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    ba14:	e15c0003 	cmp	ip, r3
    ba18:	1afffffc 	bne	ba10 <memset+0x50>
			xs += sizeof(size_t);
		}

		count &= sizeof(size_t)-1;
    ba1c:	e2022003 	and	r2, r2, #3
	}

	// write remaining bytes
	for ( ; count > 0; count-- )
    ba20:	e3520000 	cmp	r2, #0
    ba24:	08bd8010 	popeq	{r4, pc}
    ba28:	e6ef1071 	uxtb	r1, r1
    ba2c:	e0832002 	add	r2, r3, r2
		*xs++ = c;
    ba30:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    ba34:	e1520003 	cmp	r2, r3
    ba38:	1afffffc 	bne	ba30 <memset+0x70>
    ba3c:	e8bd8010 	pop	{r4, pc}
    ba40:	e3520000 	cmp	r2, #0
	char *xs = (char *) s;
    ba44:	e1a03000 	mov	r3, r0
	for ( ; count > 0; count-- )
    ba48:	012fff1e 	bxeq	lr
    ba4c:	e6ef1071 	uxtb	r1, r1
    ba50:	e0802002 	add	r2, r0, r2
		*xs++ = c;
    ba54:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    ba58:	e1520003 	cmp	r2, r3
    ba5c:	1afffffc 	bne	ba54 <memset+0x94>
    ba60:	e12fff1e 	bx	lr

0000ba64 <strlen>:
strlen(char const *s)
{
	size_t i;

	i= 0;
	while (s[i]) {
    ba64:	e5d03000 	ldrb	r3, [r0]
    ba68:	e3530000 	cmp	r3, #0
    ba6c:	0a000006 	beq	ba8c <strlen+0x28>
    ba70:	e1a03000 	mov	r3, r0
	i= 0;
    ba74:	e3a00000 	mov	r0, #0
	while (s[i]) {
    ba78:	e5f32001 	ldrb	r2, [r3, #1]!
		i+= 1;
    ba7c:	e2800001 	add	r0, r0, #1
	while (s[i]) {
    ba80:	e3520000 	cmp	r2, #0
    ba84:	1afffffb 	bne	ba78 <strlen+0x14>
    ba88:	e12fff1e 	bx	lr
	i= 0;
    ba8c:	e1a00003 	mov	r0, r3
	}

	return i;
}
    ba90:	e12fff1e 	bx	lr

0000ba94 <strnlen>:
size_t
strnlen(char const *s, size_t count)
{
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
    ba94:	e3510000 	cmp	r1, #0
    ba98:	0a000010 	beq	bae0 <strnlen+0x4c>
    ba9c:	e5d03000 	ldrb	r3, [r0]
    baa0:	e3530000 	cmp	r3, #0
    baa4:	0a00000f 	beq	bae8 <strnlen+0x54>
    baa8:	e0801001 	add	r1, r0, r1
    baac:	e2803001 	add	r3, r0, #1
    bab0:	ea000003 	b	bac4 <strnlen+0x30>
    bab4:	e5d3c000 	ldrb	ip, [r3]
    bab8:	e35c0000 	cmp	ip, #0
    babc:	0a000005 	beq	bad8 <strnlen+0x44>
    bac0:	e1a03002 	mov	r3, r2
    bac4:	e1510003 	cmp	r1, r3
    bac8:	e2832001 	add	r2, r3, #1
    bacc:	1afffff8 	bne	bab4 <strnlen+0x20>
    bad0:	e0410000 	sub	r0, r1, r0
    bad4:	e12fff1e 	bx	lr
    bad8:	e0430000 	sub	r0, r3, r0
    badc:	e12fff1e 	bx	lr
    bae0:	e1a00001 	mov	r0, r1
    bae4:	e12fff1e 	bx	lr
    bae8:	e1a00003 	mov	r0, r3
		;
	return sc - s;
}
    baec:	e12fff1e 	bx	lr

0000baf0 <__aeabi_drsub>:
    baf0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    baf4:	e002      	b.n	bafc <__adddf3>
    baf6:	bf00      	nop

0000baf8 <__aeabi_dsub>:
    baf8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000bafc <__adddf3>:
    bafc:	b530      	push	{r4, r5, lr}
    bafe:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bb02:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bb06:	ea94 0f05 	teq	r4, r5
    bb0a:	bf08      	it	eq
    bb0c:	ea90 0f02 	teqeq	r0, r2
    bb10:	bf1f      	itttt	ne
    bb12:	ea54 0c00 	orrsne.w	ip, r4, r0
    bb16:	ea55 0c02 	orrsne.w	ip, r5, r2
    bb1a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bb1e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bb22:	f000 80e2 	beq.w	bcea <__adddf3+0x1ee>
    bb26:	ea4f 5454 	mov.w	r4, r4, lsr #21
    bb2a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    bb2e:	bfb8      	it	lt
    bb30:	426d      	neglt	r5, r5
    bb32:	dd0c      	ble.n	bb4e <__adddf3+0x52>
    bb34:	442c      	add	r4, r5
    bb36:	ea80 0202 	eor.w	r2, r0, r2
    bb3a:	ea81 0303 	eor.w	r3, r1, r3
    bb3e:	ea82 0000 	eor.w	r0, r2, r0
    bb42:	ea83 0101 	eor.w	r1, r3, r1
    bb46:	ea80 0202 	eor.w	r2, r0, r2
    bb4a:	ea81 0303 	eor.w	r3, r1, r3
    bb4e:	2d36      	cmp	r5, #54	; 0x36
    bb50:	bf88      	it	hi
    bb52:	bd30      	pophi	{r4, r5, pc}
    bb54:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bb58:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bb5c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bb60:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bb64:	d002      	beq.n	bb6c <__adddf3+0x70>
    bb66:	4240      	negs	r0, r0
    bb68:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bb6c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bb70:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bb74:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bb78:	d002      	beq.n	bb80 <__adddf3+0x84>
    bb7a:	4252      	negs	r2, r2
    bb7c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bb80:	ea94 0f05 	teq	r4, r5
    bb84:	f000 80a7 	beq.w	bcd6 <__adddf3+0x1da>
    bb88:	f1a4 0401 	sub.w	r4, r4, #1
    bb8c:	f1d5 0e20 	rsbs	lr, r5, #32
    bb90:	db0d      	blt.n	bbae <__adddf3+0xb2>
    bb92:	fa02 fc0e 	lsl.w	ip, r2, lr
    bb96:	fa22 f205 	lsr.w	r2, r2, r5
    bb9a:	1880      	adds	r0, r0, r2
    bb9c:	f141 0100 	adc.w	r1, r1, #0
    bba0:	fa03 f20e 	lsl.w	r2, r3, lr
    bba4:	1880      	adds	r0, r0, r2
    bba6:	fa43 f305 	asr.w	r3, r3, r5
    bbaa:	4159      	adcs	r1, r3
    bbac:	e00e      	b.n	bbcc <__adddf3+0xd0>
    bbae:	f1a5 0520 	sub.w	r5, r5, #32
    bbb2:	f10e 0e20 	add.w	lr, lr, #32
    bbb6:	2a01      	cmp	r2, #1
    bbb8:	fa03 fc0e 	lsl.w	ip, r3, lr
    bbbc:	bf28      	it	cs
    bbbe:	f04c 0c02 	orrcs.w	ip, ip, #2
    bbc2:	fa43 f305 	asr.w	r3, r3, r5
    bbc6:	18c0      	adds	r0, r0, r3
    bbc8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bbcc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bbd0:	d507      	bpl.n	bbe2 <__adddf3+0xe6>
    bbd2:	f04f 0e00 	mov.w	lr, #0
    bbd6:	f1dc 0c00 	rsbs	ip, ip, #0
    bbda:	eb7e 0000 	sbcs.w	r0, lr, r0
    bbde:	eb6e 0101 	sbc.w	r1, lr, r1
    bbe2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bbe6:	d31b      	bcc.n	bc20 <__adddf3+0x124>
    bbe8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    bbec:	d30c      	bcc.n	bc08 <__adddf3+0x10c>
    bbee:	0849      	lsrs	r1, r1, #1
    bbf0:	ea5f 0030 	movs.w	r0, r0, rrx
    bbf4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    bbf8:	f104 0401 	add.w	r4, r4, #1
    bbfc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    bc00:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    bc04:	f080 809a 	bcs.w	bd3c <__adddf3+0x240>
    bc08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bc0c:	bf08      	it	eq
    bc0e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bc12:	f150 0000 	adcs.w	r0, r0, #0
    bc16:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bc1a:	ea41 0105 	orr.w	r1, r1, r5
    bc1e:	bd30      	pop	{r4, r5, pc}
    bc20:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    bc24:	4140      	adcs	r0, r0
    bc26:	eb41 0101 	adc.w	r1, r1, r1
    bc2a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bc2e:	f1a4 0401 	sub.w	r4, r4, #1
    bc32:	d1e9      	bne.n	bc08 <__adddf3+0x10c>
    bc34:	f091 0f00 	teq	r1, #0
    bc38:	bf04      	itt	eq
    bc3a:	4601      	moveq	r1, r0
    bc3c:	2000      	moveq	r0, #0
    bc3e:	fab1 f381 	clz	r3, r1
    bc42:	bf08      	it	eq
    bc44:	3320      	addeq	r3, #32
    bc46:	f1a3 030b 	sub.w	r3, r3, #11
    bc4a:	f1b3 0220 	subs.w	r2, r3, #32
    bc4e:	da0c      	bge.n	bc6a <__adddf3+0x16e>
    bc50:	320c      	adds	r2, #12
    bc52:	dd08      	ble.n	bc66 <__adddf3+0x16a>
    bc54:	f102 0c14 	add.w	ip, r2, #20
    bc58:	f1c2 020c 	rsb	r2, r2, #12
    bc5c:	fa01 f00c 	lsl.w	r0, r1, ip
    bc60:	fa21 f102 	lsr.w	r1, r1, r2
    bc64:	e00c      	b.n	bc80 <__adddf3+0x184>
    bc66:	f102 0214 	add.w	r2, r2, #20
    bc6a:	bfd8      	it	le
    bc6c:	f1c2 0c20 	rsble	ip, r2, #32
    bc70:	fa01 f102 	lsl.w	r1, r1, r2
    bc74:	fa20 fc0c 	lsr.w	ip, r0, ip
    bc78:	bfdc      	itt	le
    bc7a:	ea41 010c 	orrle.w	r1, r1, ip
    bc7e:	4090      	lslle	r0, r2
    bc80:	1ae4      	subs	r4, r4, r3
    bc82:	bfa2      	ittt	ge
    bc84:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    bc88:	4329      	orrge	r1, r5
    bc8a:	bd30      	popge	{r4, r5, pc}
    bc8c:	ea6f 0404 	mvn.w	r4, r4
    bc90:	3c1f      	subs	r4, #31
    bc92:	da1c      	bge.n	bcce <__adddf3+0x1d2>
    bc94:	340c      	adds	r4, #12
    bc96:	dc0e      	bgt.n	bcb6 <__adddf3+0x1ba>
    bc98:	f104 0414 	add.w	r4, r4, #20
    bc9c:	f1c4 0220 	rsb	r2, r4, #32
    bca0:	fa20 f004 	lsr.w	r0, r0, r4
    bca4:	fa01 f302 	lsl.w	r3, r1, r2
    bca8:	ea40 0003 	orr.w	r0, r0, r3
    bcac:	fa21 f304 	lsr.w	r3, r1, r4
    bcb0:	ea45 0103 	orr.w	r1, r5, r3
    bcb4:	bd30      	pop	{r4, r5, pc}
    bcb6:	f1c4 040c 	rsb	r4, r4, #12
    bcba:	f1c4 0220 	rsb	r2, r4, #32
    bcbe:	fa20 f002 	lsr.w	r0, r0, r2
    bcc2:	fa01 f304 	lsl.w	r3, r1, r4
    bcc6:	ea40 0003 	orr.w	r0, r0, r3
    bcca:	4629      	mov	r1, r5
    bccc:	bd30      	pop	{r4, r5, pc}
    bcce:	fa21 f004 	lsr.w	r0, r1, r4
    bcd2:	4629      	mov	r1, r5
    bcd4:	bd30      	pop	{r4, r5, pc}
    bcd6:	f094 0f00 	teq	r4, #0
    bcda:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    bcde:	bf06      	itte	eq
    bce0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    bce4:	3401      	addeq	r4, #1
    bce6:	3d01      	subne	r5, #1
    bce8:	e74e      	b.n	bb88 <__adddf3+0x8c>
    bcea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bcee:	bf18      	it	ne
    bcf0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bcf4:	d029      	beq.n	bd4a <__adddf3+0x24e>
    bcf6:	ea94 0f05 	teq	r4, r5
    bcfa:	bf08      	it	eq
    bcfc:	ea90 0f02 	teqeq	r0, r2
    bd00:	d005      	beq.n	bd0e <__adddf3+0x212>
    bd02:	ea54 0c00 	orrs.w	ip, r4, r0
    bd06:	bf04      	itt	eq
    bd08:	4619      	moveq	r1, r3
    bd0a:	4610      	moveq	r0, r2
    bd0c:	bd30      	pop	{r4, r5, pc}
    bd0e:	ea91 0f03 	teq	r1, r3
    bd12:	bf1e      	ittt	ne
    bd14:	2100      	movne	r1, #0
    bd16:	2000      	movne	r0, #0
    bd18:	bd30      	popne	{r4, r5, pc}
    bd1a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    bd1e:	d105      	bne.n	bd2c <__adddf3+0x230>
    bd20:	0040      	lsls	r0, r0, #1
    bd22:	4149      	adcs	r1, r1
    bd24:	bf28      	it	cs
    bd26:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bd2a:	bd30      	pop	{r4, r5, pc}
    bd2c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    bd30:	bf3c      	itt	cc
    bd32:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    bd36:	bd30      	popcc	{r4, r5, pc}
    bd38:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bd3c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    bd40:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bd44:	f04f 0000 	mov.w	r0, #0
    bd48:	bd30      	pop	{r4, r5, pc}
    bd4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bd4e:	bf1a      	itte	ne
    bd50:	4619      	movne	r1, r3
    bd52:	4610      	movne	r0, r2
    bd54:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    bd58:	bf1c      	itt	ne
    bd5a:	460b      	movne	r3, r1
    bd5c:	4602      	movne	r2, r0
    bd5e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bd62:	bf06      	itte	eq
    bd64:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    bd68:	ea91 0f03 	teqeq	r1, r3
    bd6c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    bd70:	bd30      	pop	{r4, r5, pc}
    bd72:	bf00      	nop

0000bd74 <__aeabi_ui2d>:
    bd74:	f090 0f00 	teq	r0, #0
    bd78:	bf04      	itt	eq
    bd7a:	2100      	moveq	r1, #0
    bd7c:	4770      	bxeq	lr
    bd7e:	b530      	push	{r4, r5, lr}
    bd80:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bd84:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bd88:	f04f 0500 	mov.w	r5, #0
    bd8c:	f04f 0100 	mov.w	r1, #0
    bd90:	e750      	b.n	bc34 <__adddf3+0x138>
    bd92:	bf00      	nop

0000bd94 <__aeabi_i2d>:
    bd94:	f090 0f00 	teq	r0, #0
    bd98:	bf04      	itt	eq
    bd9a:	2100      	moveq	r1, #0
    bd9c:	4770      	bxeq	lr
    bd9e:	b530      	push	{r4, r5, lr}
    bda0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bda4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bda8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bdac:	bf48      	it	mi
    bdae:	4240      	negmi	r0, r0
    bdb0:	f04f 0100 	mov.w	r1, #0
    bdb4:	e73e      	b.n	bc34 <__adddf3+0x138>
    bdb6:	bf00      	nop

0000bdb8 <__aeabi_f2d>:
    bdb8:	0042      	lsls	r2, r0, #1
    bdba:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bdbe:	ea4f 0131 	mov.w	r1, r1, rrx
    bdc2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    bdc6:	bf1f      	itttt	ne
    bdc8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bdcc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bdd0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    bdd4:	4770      	bxne	lr
    bdd6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    bdda:	bf08      	it	eq
    bddc:	4770      	bxeq	lr
    bdde:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    bde2:	bf04      	itt	eq
    bde4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    bde8:	4770      	bxeq	lr
    bdea:	b530      	push	{r4, r5, lr}
    bdec:	f44f 7460 	mov.w	r4, #896	; 0x380
    bdf0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bdf4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bdf8:	e71c      	b.n	bc34 <__adddf3+0x138>
    bdfa:	bf00      	nop

0000bdfc <__aeabi_ul2d>:
    bdfc:	ea50 0201 	orrs.w	r2, r0, r1
    be00:	bf08      	it	eq
    be02:	4770      	bxeq	lr
    be04:	b530      	push	{r4, r5, lr}
    be06:	f04f 0500 	mov.w	r5, #0
    be0a:	e00a      	b.n	be22 <__aeabi_l2d+0x16>

0000be0c <__aeabi_l2d>:
    be0c:	ea50 0201 	orrs.w	r2, r0, r1
    be10:	bf08      	it	eq
    be12:	4770      	bxeq	lr
    be14:	b530      	push	{r4, r5, lr}
    be16:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    be1a:	d502      	bpl.n	be22 <__aeabi_l2d+0x16>
    be1c:	4240      	negs	r0, r0
    be1e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    be22:	f44f 6480 	mov.w	r4, #1024	; 0x400
    be26:	f104 0432 	add.w	r4, r4, #50	; 0x32
    be2a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    be2e:	f43f aed8 	beq.w	bbe2 <__adddf3+0xe6>
    be32:	f04f 0203 	mov.w	r2, #3
    be36:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    be3a:	bf18      	it	ne
    be3c:	3203      	addne	r2, #3
    be3e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    be42:	bf18      	it	ne
    be44:	3203      	addne	r2, #3
    be46:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    be4a:	f1c2 0320 	rsb	r3, r2, #32
    be4e:	fa00 fc03 	lsl.w	ip, r0, r3
    be52:	fa20 f002 	lsr.w	r0, r0, r2
    be56:	fa01 fe03 	lsl.w	lr, r1, r3
    be5a:	ea40 000e 	orr.w	r0, r0, lr
    be5e:	fa21 f102 	lsr.w	r1, r1, r2
    be62:	4414      	add	r4, r2
    be64:	e6bd      	b.n	bbe2 <__adddf3+0xe6>
    be66:	bf00      	nop

0000be68 <__aeabi_uldivmod>:
    be68:	b953      	cbnz	r3, be80 <__aeabi_uldivmod+0x18>
    be6a:	b94a      	cbnz	r2, be80 <__aeabi_uldivmod+0x18>
    be6c:	2900      	cmp	r1, #0
    be6e:	bf08      	it	eq
    be70:	2800      	cmpeq	r0, #0
    be72:	bf1c      	itt	ne
    be74:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    be78:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    be7c:	f000 b80c 	b.w	be98 <__aeabi_idiv0>
    be80:	f1ad 0c08 	sub.w	ip, sp, #8
    be84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    be88:	f000 f80c 	bl	bea4 <__udivmoddi4>
    be8c:	f8dd e004 	ldr.w	lr, [sp, #4]
    be90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    be94:	b004      	add	sp, #16
    be96:	4770      	bx	lr

0000be98 <__aeabi_idiv0>:
    be98:	b502      	push	{r1, lr}
    be9a:	f04f 0008 	mov.w	r0, #8
    be9e:	f7ff ed8e 	blx	b9bc <raise>
    bea2:	bd02      	pop	{r1, pc}

0000bea4 <__udivmoddi4>:
    bea4:	4299      	cmp	r1, r3
    bea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    beaa:	bf08      	it	eq
    beac:	4290      	cmpeq	r0, r2
    beae:	4604      	mov	r4, r0
    beb0:	bf38      	it	cc
    beb2:	2000      	movcc	r0, #0
    beb4:	460d      	mov	r5, r1
    beb6:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    beba:	bf38      	it	cc
    bebc:	4601      	movcc	r1, r0
    bebe:	d368      	bcc.n	bf92 <__udivmoddi4+0xee>
    bec0:	4692      	mov	sl, r2
    bec2:	469b      	mov	fp, r3
    bec4:	fab3 fc83 	clz	ip, r3
    bec8:	2b00      	cmp	r3, #0
    beca:	d06d      	beq.n	bfa8 <__udivmoddi4+0x104>
    becc:	fab5 f185 	clz	r1, r5
    bed0:	2d00      	cmp	r5, #0
    bed2:	d065      	beq.n	bfa0 <__udivmoddi4+0xfc>
    bed4:	ebac 0c01 	sub.w	ip, ip, r1
    bed8:	f1ac 0820 	sub.w	r8, ip, #32
    bedc:	fa0b f70c 	lsl.w	r7, fp, ip
    bee0:	fa0a f108 	lsl.w	r1, sl, r8
    bee4:	f1cc 0920 	rsb	r9, ip, #32
    bee8:	fa2a f309 	lsr.w	r3, sl, r9
    beec:	fa0a f60c 	lsl.w	r6, sl, ip
    bef0:	430f      	orrs	r7, r1
    bef2:	431f      	orrs	r7, r3
    bef4:	42bd      	cmp	r5, r7
    bef6:	bf08      	it	eq
    bef8:	42b4      	cmpeq	r4, r6
    befa:	bf3c      	itt	cc
    befc:	2000      	movcc	r0, #0
    befe:	4601      	movcc	r1, r0
    bf00:	d30a      	bcc.n	bf18 <__udivmoddi4+0x74>
    bf02:	2001      	movs	r0, #1
    bf04:	1ba4      	subs	r4, r4, r6
    bf06:	fa00 f108 	lsl.w	r1, r0, r8
    bf0a:	fa20 f309 	lsr.w	r3, r0, r9
    bf0e:	fa00 f00c 	lsl.w	r0, r0, ip
    bf12:	eb65 0507 	sbc.w	r5, r5, r7
    bf16:	4319      	orrs	r1, r3
    bf18:	f1bc 0f00 	cmp.w	ip, #0
    bf1c:	d039      	beq.n	bf92 <__udivmoddi4+0xee>
    bf1e:	087f      	lsrs	r7, r7, #1
    bf20:	ea4f 0636 	mov.w	r6, r6, rrx
    bf24:	4662      	mov	r2, ip
    bf26:	e00a      	b.n	bf3e <__udivmoddi4+0x9a>
    bf28:	1ba3      	subs	r3, r4, r6
    bf2a:	eb65 0a07 	sbc.w	sl, r5, r7
    bf2e:	18db      	adds	r3, r3, r3
    bf30:	eb4a 0a0a 	adc.w	sl, sl, sl
    bf34:	1c5c      	adds	r4, r3, #1
    bf36:	f14a 0500 	adc.w	r5, sl, #0
    bf3a:	3a01      	subs	r2, #1
    bf3c:	d007      	beq.n	bf4e <__udivmoddi4+0xaa>
    bf3e:	42bd      	cmp	r5, r7
    bf40:	bf08      	it	eq
    bf42:	42b4      	cmpeq	r4, r6
    bf44:	d2f0      	bcs.n	bf28 <__udivmoddi4+0x84>
    bf46:	1924      	adds	r4, r4, r4
    bf48:	416d      	adcs	r5, r5
    bf4a:	3a01      	subs	r2, #1
    bf4c:	d1f7      	bne.n	bf3e <__udivmoddi4+0x9a>
    bf4e:	fa24 f30c 	lsr.w	r3, r4, ip
    bf52:	fa05 f909 	lsl.w	r9, r5, r9
    bf56:	fa25 f20c 	lsr.w	r2, r5, ip
    bf5a:	fa25 f808 	lsr.w	r8, r5, r8
    bf5e:	1900      	adds	r0, r0, r4
    bf60:	ea43 0309 	orr.w	r3, r3, r9
    bf64:	ea43 0408 	orr.w	r4, r3, r8
    bf68:	eb45 0101 	adc.w	r1, r5, r1
    bf6c:	4615      	mov	r5, r2
    bf6e:	f1ac 0220 	sub.w	r2, ip, #32
    bf72:	fa05 f30c 	lsl.w	r3, r5, ip
    bf76:	fa04 f60c 	lsl.w	r6, r4, ip
    bf7a:	fa04 f202 	lsl.w	r2, r4, r2
    bf7e:	f1cc 0c20 	rsb	ip, ip, #32
    bf82:	fa24 fc0c 	lsr.w	ip, r4, ip
    bf86:	4313      	orrs	r3, r2
    bf88:	1b80      	subs	r0, r0, r6
    bf8a:	ea43 030c 	orr.w	r3, r3, ip
    bf8e:	eb61 0103 	sbc.w	r1, r1, r3
    bf92:	f1be 0f00 	cmp.w	lr, #0
    bf96:	d001      	beq.n	bf9c <__udivmoddi4+0xf8>
    bf98:	e9ce 4500 	strd	r4, r5, [lr]
    bf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bfa0:	fab4 f184 	clz	r1, r4
    bfa4:	3120      	adds	r1, #32
    bfa6:	e795      	b.n	bed4 <__udivmoddi4+0x30>
    bfa8:	fab2 fc82 	clz	ip, r2
    bfac:	fab5 f185 	clz	r1, r5
    bfb0:	f10c 0c20 	add.w	ip, ip, #32
    bfb4:	2d00      	cmp	r5, #0
    bfb6:	d18d      	bne.n	bed4 <__udivmoddi4+0x30>
    bfb8:	e7f2      	b.n	bfa0 <__udivmoddi4+0xfc>
    bfba:	bf00      	nop
