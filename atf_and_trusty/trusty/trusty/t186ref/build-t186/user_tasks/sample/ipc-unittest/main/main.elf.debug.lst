
t186ref/build-t186/user_tasks/sample/ipc-unittest/main/main.syms.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <exit>:
/* HACK: needed temporarily until the syscalls file gets the
 * __NO_RETURN annotation */
__NO_RETURN long exit_group (void);

__NO_RETURN void exit(int status)
{
    8000:	e92d4010 	push	{r4, lr}
	__cxa_finalize();
    8004:	eb002197 	bl	10668 <__cxa_finalize>
	exit_group();
    8008:	eb002bef 	bl	12fcc <exit_group>

0000800c <main>:
{
	int         rc;
	char        path[MAX_PORT_PATH_LEN];
	uuid_t      peer_uuid;
	int         write_msg_len = 0;
	char        pass_buf[] = "PASSED";
    800c:	e59f1860 	ldr	r1, [pc, #2144]	; 8874 <main+0x868>
	uint        status_len = 0;
	int         prev_rc = -1;
	ipc_msg_t   status_msg;
	iovec_t     status_iov;

	TLOGI ("Welcome to IPC unittest!!!\n");
    8010:	e30035ef 	movw	r3, #1519	; 0x5ef
{
    8014:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char        pass_buf[] = "PASSED";
    8018:	e08f1001 	add	r1, pc, r1
{
    801c:	e59f2854 	ldr	r2, [pc, #2132]	; 8878 <main+0x86c>
    8020:	e24ddf87 	sub	sp, sp, #540	; 0x21c
	char        fail_buf[] = "FAILED";
    8024:	e59fc850 	ldr	ip, [pc, #2128]	; 887c <main+0x870>
	char        pass_buf[] = "PASSED";
    8028:	e28d40f8 	add	r4, sp, #248	; 0xf8
    802c:	e8910003 	ldm	r1, {r0, r1}
{
    8030:	e08f2002 	add	r2, pc, r2
    8034:	e59f5844 	ldr	r5, [pc, #2116]	; 8880 <main+0x874>
	char        fail_buf[] = "FAILED";
    8038:	e08fc00c 	add	ip, pc, ip
    803c:	e28dec01 	add	lr, sp, #256	; 0x100
{
    8040:	e7926005 	ldr	r6, [r2, r5]
	char        pass_buf[] = "PASSED";
    8044:	e1a05821 	lsr	r5, r1, #16
    8048:	e0c410b2 	strh	r1, [r4], #2
    804c:	e58d00f4 	str	r0, [sp, #244]	; 0xf4
	char        fail_buf[] = "FAILED";
    8050:	e89c0003 	ldm	ip, {r0, r1}
    8054:	e0ce10b2 	strh	r1, [lr], #2
	TLOGI ("Welcome to IPC unittest!!!\n");
    8058:	e59fc824 	ldr	ip, [pc, #2084]	; 8884 <main+0x878>
	char        pass_buf[] = "PASSED";
    805c:	e5c45000 	strb	r5, [r4]
{
    8060:	e5964000 	ldr	r4, [r6]
	char        fail_buf[] = "FAILED";
    8064:	e1a01821 	lsr	r1, r1, #16
{
    8068:	e58d6040 	str	r6, [sp, #64]	; 0x40

	/* create control port and just wait on it */
	sprintf(path, "%s.%s", SRV_PATH_BASE, "ctrl");
    806c:	e28d6f41 	add	r6, sp, #260	; 0x104
	char        fail_buf[] = "FAILED";
    8070:	e5ce1000 	strb	r1, [lr]
{
    8074:	e58d4214 	str	r4, [sp, #532]	; 0x214
	char        fail_buf[] = "FAILED";
    8078:	e58d00fc 	str	r0, [sp, #252]	; 0xfc
	TLOGI ("Welcome to IPC unittest!!!\n");
    807c:	e59f5804 	ldr	r5, [pc, #2052]	; 8888 <main+0x87c>
    8080:	e792b00c 	ldr	fp, [r2, ip]
    8084:	e59f1800 	ldr	r1, [pc, #2048]	; 888c <main+0x880>
    8088:	e08f5005 	add	r5, pc, r5
    808c:	e28b4028 	add	r4, fp, #40	; 0x28
    8090:	e1a02005 	mov	r2, r5
    8094:	e08f1001 	add	r1, pc, r1
    8098:	e1a00004 	mov	r0, r4
    809c:	eb00312d 	bl	14558 <fprintf>
	sprintf(path, "%s.%s", SRV_PATH_BASE, "ctrl");
    80a0:	e59f37e8 	ldr	r3, [pc, #2024]	; 8890 <main+0x884>
    80a4:	e59f27e8 	ldr	r2, [pc, #2024]	; 8894 <main+0x888>
    80a8:	e1a00006 	mov	r0, r6
    80ac:	e59f17e4 	ldr	r1, [pc, #2020]	; 8898 <main+0x88c>
    80b0:	e08f3003 	add	r3, pc, r3
    80b4:	e08f2002 	add	r2, pc, r2
    80b8:	e08f1001 	add	r1, pc, r1
    80bc:	eb0030fd 	bl	144b8 <sprintf>
	rc = port_create(path,  1, MAX_PORT_BUF_SIZE,
    80c0:	e3a03002 	mov	r3, #2
    80c4:	e1a00006 	mov	r0, r6
    80c8:	e3a02a01 	mov	r2, #4096	; 0x1000
    80cc:	e3a01001 	mov	r1, #1
    80d0:	eb002bc3 	bl	12fe4 <port_create>
	                 IPC_PORT_ALLOW_NS_CONNECT);
	if (rc < 0) {
    80d4:	e2503000 	subs	r3, r0, #0
    80d8:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    80dc:	ba000e15 	blt	b938 <main+0x392c>
			EXPECT_GE_ZERO (rc, "connect/close");
    80e0:	e59f37b4 	ldr	r3, [pc, #1972]	; 889c <main+0x890>
		TLOGI("failed (%d) to create ctrl port\n", rc );
		return rc;
	}

	/* and just wait forever for now */
	TLOGI("waiting forever\n");
    80e4:	e1a02005 	mov	r2, r5
    80e8:	e59f17b0 	ldr	r1, [pc, #1968]	; 88a0 <main+0x894>
    80ec:	e1a00004 	mov	r0, r4
			EXPECT_GE_ZERO (rc, "connect/close");
    80f0:	e08f3003 	add	r3, pc, r3
	int         prev_rc = -1;
    80f4:	e1a0a00b 	mov	sl, fp
			EXPECT_GE_ZERO (rc, "connect/close");
    80f8:	e58d301c 	str	r3, [sp, #28]
	TLOGI("waiting forever\n");
    80fc:	e08f1001 	add	r1, pc, r1
	rc = set_cookie(INVALID_IPC_HANDLE, (void *) 0x1BEEF);
    8100:	e30b3eef 	movw	r3, #48879	; 0xbeef
    8104:	e3403001 	movt	r3, #1
    8108:	e58d3044 	str	r3, [sp, #68]	; 0x44
	rc = set_cookie(MAX_USER_HANDLES, (void *) 0x2BEEF);
    810c:	e30b3eef 	movw	r3, #48879	; 0xbeef
    8110:	e3403002 	movt	r3, #2
    8114:	e58d3048 	str	r3, [sp, #72]	; 0x48
		rc = set_cookie(i, (void *) 0x3BEEF);
    8118:	e30b3eef 	movw	r3, #48879	; 0xbeef
    811c:	e3403003 	movt	r3, #3
    8120:	e58d304c 	str	r3, [sp, #76]	; 0x4c
	TLOGI("waiting forever\n");
    8124:	e30035fb 	movw	r3, #1531	; 0x5fb
    8128:	eb00310a 	bl	14558 <fprintf>
    812c:	e28d305c 	add	r3, sp, #92	; 0x5c
    8130:	e58d3034 	str	r3, [sp, #52]	; 0x34
	int         prev_rc = -1;
    8134:	e3e03000 	mvn	r3, #0
    8138:	e58d3038 	str	r3, [sp, #56]	; 0x38
	for (;;) {
		uevent_t uevt;
		int rc = wait_any(&uevt, -1);
    813c:	e3e01000 	mvn	r1, #0
    8140:	e59d0034 	ldr	r0, [sp, #52]	; 0x34
    8144:	eb002bb8 	bl	1302c <wait_any>
		TLOGI("got event (rc=%d): ev=%x handle=%d\n",
    8148:	e59f6754 	ldr	r6, [pc, #1876]	; 88a4 <main+0x898>
    814c:	e59d105c 	ldr	r1, [sp, #92]	; 0x5c
    8150:	e28a5028 	add	r5, sl, #40	; 0x28
    8154:	e58d1008 	str	r1, [sp, #8]
    8158:	e08f6006 	add	r6, pc, r6
    815c:	e59f1744 	ldr	r1, [pc, #1860]	; 88a8 <main+0x89c>
		int rc = wait_any(&uevt, -1);
    8160:	e1a04000 	mov	r4, r0
		TLOGI("got event (rc=%d): ev=%x handle=%d\n",
    8164:	e59d3060 	ldr	r3, [sp, #96]	; 0x60
    8168:	e1a02006 	mov	r2, r6
    816c:	e58d0000 	str	r0, [sp]
    8170:	e08f1001 	add	r1, pc, r1
    8174:	e58d3004 	str	r3, [sp, #4]
    8178:	e1a00005 	mov	r0, r5
    817c:	e3a03c06 	mov	r3, #1536	; 0x600
    8180:	eb0030f4 	bl	14558 <fprintf>
			rc, uevt.event, uevt.handle);
		if (rc == NO_ERROR) {
    8184:	e3540000 	cmp	r4, #0
    8188:	1a00000a 	bne	81b8 <main+0x1ac>
			if (uevt.event & IPC_HANDLE_POLL_READY) {
    818c:	e59d2060 	ldr	r2, [sp, #96]	; 0x60
    8190:	e3120001 	tst	r2, #1
    8194:	1a000010 	bne	81dc <main+0x1d0>
						TLOGI("IPC unittest status write failed");
					}
				}
			} else if (uevt.event & IPC_HANDLE_POLL_HUP) {
				/* and close it */
				if (prev_rc >= 0) {
    8198:	e59d3038 	ldr	r3, [sp, #56]	; 0x38
    819c:	e1e03003 	mvn	r3, r3
    81a0:	e1a03fa3 	lsr	r3, r3, #31
    81a4:	e0133122 	ands	r3, r3, r2, lsr #2
    81a8:	0affffe3 	beq	813c <main+0x130>
					close(prev_rc);
    81ac:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
    81b0:	eb002b94 	bl	13008 <close>
    81b4:	eaffffe0 	b	813c <main+0x130>
				}
			}

		}
		if (rc < 0)
    81b8:	aaffffdf 	bge	813c <main+0x130>
			break;
	}

	return rc;
}
    81bc:	e59d3040 	ldr	r3, [sp, #64]	; 0x40
    81c0:	e59d2214 	ldr	r2, [sp, #532]	; 0x214
    81c4:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
    81c8:	e5933000 	ldr	r3, [r3]
    81cc:	e1520003 	cmp	r2, r3
    81d0:	1a001177 	bne	c7b4 <main+0x47a8>
    81d4:	e28ddf87 	add	sp, sp, #540	; 0x21c
    81d8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				rc = accept(uevt.handle, &peer_uuid);
    81dc:	e28d1094 	add	r1, sp, #148	; 0x94
    81e0:	e59d005c 	ldr	r0, [sp, #92]	; 0x5c
    81e4:	eb002b84 	bl	12ffc <accept>
				if (rc >= 0) {
    81e8:	e2503000 	subs	r3, r0, #0
    81ec:	e58d3038 	str	r3, [sp, #56]	; 0x38
    81f0:	bafffff1 	blt	81bc <main+0x1b0>
	_tests_total  = 0;
    81f4:	e59f86b0 	ldr	r8, [pc, #1712]	; 88ac <main+0x8a0>
	TLOGI ("Run all unittest\n");
    81f8:	e1a02006 	mov	r2, r6
	_tests_failed = 0;
    81fc:	e59f96ac 	ldr	r9, [pc, #1708]	; 88b0 <main+0x8a4>
	TLOGI ("Run all unittest\n");
    8200:	e30035b2 	movw	r3, #1458	; 0x5b2
    8204:	e59f16a8 	ldr	r1, [pc, #1704]	; 88b4 <main+0x8a8>
	_tests_total  = 0;
    8208:	e08f8008 	add	r8, pc, r8
	_tests_failed = 0;
    820c:	e08f9009 	add	r9, pc, r9
	TLOGI ("Run all unittest\n");
    8210:	e1a00005 	mov	r0, r5
    8214:	e08f1001 	add	r1, pc, r1
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    8218:	e28d70b4 	add	r7, sp, #180	; 0xb4
    821c:	e58d702c 	str	r7, [sp, #44]	; 0x2c
	TLOGI ("Run all unittest\n");
    8220:	eb0030cc 	bl	14558 <fprintf>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "async");
    8224:	e59f368c 	ldr	r3, [pc, #1676]	; 88b8 <main+0x8ac>
    8228:	e28dbf71 	add	fp, sp, #452	; 0x1c4
	_tests_total  = 0;
    822c:	e5884000 	str	r4, [r8]
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "async");
    8230:	e08f3003 	add	r3, pc, r3
	_tests_failed = 0;
    8234:	e5894000 	str	r4, [r9]
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "async");
    8238:	e58d3014 	str	r3, [sp, #20]
	run_port_create_test();
    823c:	eb001254 	bl	cb94 <run_port_create_test>
	run_wait_on_port_test();
    8240:	eb0013cc 	bl	d178 <run_wait_on_port_test>
	TEST_BEGIN(__func__);
    8244:	e59f3670 	ldr	r3, [pc, #1648]	; 88bc <main+0x8b0>
    8248:	e59f1670 	ldr	r1, [pc, #1648]	; 88c0 <main+0x8b4>
    824c:	e1a02006 	mov	r2, r6
    8250:	e08f3003 	add	r3, pc, r3
    8254:	e1a00005 	mov	r0, r5
    8258:	e58d3000 	str	r3, [sp]
    825c:	e08f1001 	add	r1, pc, r1
    8260:	e3a03f8d 	mov	r3, #564	; 0x234
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    8264:	e5874004 	str	r4, [r7, #4]
    8268:	e5874008 	str	r4, [r7, #8]
    826c:	e587400c 	str	r4, [r7, #12]
    8270:	e58d40b4 	str	r4, [sp, #180]	; 0xb4
	TEST_BEGIN(__func__);
    8274:	eb0030b7 	bl	14558 <fprintf>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "async");
    8278:	e59f2644 	ldr	r2, [pc, #1604]	; 88c4 <main+0x8b8>
    827c:	e1a0000b 	mov	r0, fp
    8280:	e59f1640 	ldr	r1, [pc, #1600]	; 88c8 <main+0x8bc>
    8284:	e59d3014 	ldr	r3, [sp, #20]
    8288:	e08f2002 	add	r2, pc, r2
    828c:	e08f1001 	add	r1, pc, r1
    8290:	eb003088 	bl	144b8 <sprintf>
	rc = connect (path, 0);
    8294:	e1a01004 	mov	r1, r4
    8298:	e1a0000b 	mov	r0, fp
    829c:	eb002b53 	bl	12ff0 <connect>
	EXPECT_EQ (ERR_NOT_FOUND, rc, "async");
    82a0:	e5983000 	ldr	r3, [r8]
    82a4:	e3700002 	cmn	r0, #2
	rc = connect (path, 0);
    82a8:	e1a07000 	mov	r7, r0
	EXPECT_EQ (ERR_NOT_FOUND, rc, "async");
    82ac:	e2833001 	add	r3, r3, #1
	TEST_BEGIN(__func__);
    82b0:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_NOT_FOUND, rc, "async");
    82b4:	e5883000 	str	r3, [r8]
    82b8:	0a00000e 	beq	82f8 <main+0x2ec>
    82bc:	e3e01001 	mvn	r1, #1
    82c0:	e58d1004 	str	r1, [sp, #4]
    82c4:	e59f1600 	ldr	r1, [pc, #1536]	; 88cc <main+0x8c0>
    82c8:	e1a02006 	mov	r2, r6
    82cc:	e59d3014 	ldr	r3, [sp, #20]
    82d0:	e1a06004 	mov	r6, r4
    82d4:	e58d0008 	str	r0, [sp, #8]
    82d8:	e08f1001 	add	r1, pc, r1
    82dc:	e58d3000 	str	r3, [sp]
    82e0:	e1a00005 	mov	r0, r5
    82e4:	e300323a 	movw	r3, #570	; 0x23a
    82e8:	eb00309a 	bl	14558 <fprintf>
    82ec:	e5993000 	ldr	r3, [r9]
    82f0:	e2833001 	add	r3, r3, #1
    82f4:	e5893000 	str	r3, [r9]
	rc = close ((handle_t)rc);
    82f8:	e1a00007 	mov	r0, r7
    82fc:	eb002b41 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "async");
    8300:	e59f25c8 	ldr	r2, [pc, #1480]	; 88d0 <main+0x8c4>
    8304:	e370002a 	cmn	r0, #42	; 0x2a
    8308:	e08f2002 	add	r2, pc, r2
    830c:	e5923000 	ldr	r3, [r2]
    8310:	e2833001 	add	r3, r3, #1
    8314:	e5823000 	str	r3, [r2]
    8318:	0a000012 	beq	8368 <main+0x35c>
    831c:	e59f25b0 	ldr	r2, [pc, #1456]	; 88d4 <main+0x8c8>
    8320:	e3e01029 	mvn	r1, #41	; 0x29
    8324:	e58d1004 	str	r1, [sp, #4]
    8328:	e3a03f8f 	mov	r3, #572	; 0x23c
    832c:	e08f2002 	add	r2, pc, r2
    8330:	e59f15a0 	ldr	r1, [pc, #1440]	; 88d8 <main+0x8cc>
    8334:	e58d2000 	str	r2, [sp]
    8338:	e3a06000 	mov	r6, #0
    833c:	e59f2598 	ldr	r2, [pc, #1432]	; 88dc <main+0x8d0>
    8340:	e08f1001 	add	r1, pc, r1
    8344:	e58d0008 	str	r0, [sp, #8]
    8348:	e28a0028 	add	r0, sl, #40	; 0x28
    834c:	e08f2002 	add	r2, pc, r2
    8350:	eb003080 	bl	14558 <fprintf>
    8354:	e59f2584 	ldr	r2, [pc, #1412]	; 88e0 <main+0x8d4>
    8358:	e08f2002 	add	r2, pc, r2
    835c:	e5923000 	ldr	r3, [r2]
    8360:	e2833001 	add	r3, r3, #1
    8364:	e5823000 	str	r3, [r2]
	rc = connect (path, IPC_CONNECT_ASYNC);
    8368:	e3a01002 	mov	r1, #2
    836c:	e1a0000b 	mov	r0, fp
    8370:	eb002b1e 	bl	12ff0 <connect>
	EXPECT_EQ (ERR_NOT_FOUND, rc, "async");
    8374:	e59f2568 	ldr	r2, [pc, #1384]	; 88e4 <main+0x8d8>
	rc = connect (path, IPC_CONNECT_ASYNC);
    8378:	e1a04000 	mov	r4, r0
	EXPECT_EQ (ERR_NOT_FOUND, rc, "async");
    837c:	e3700002 	cmn	r0, #2
    8380:	e08f2002 	add	r2, pc, r2
    8384:	e5923000 	ldr	r3, [r2]
    8388:	e2833001 	add	r3, r3, #1
    838c:	e5823000 	str	r3, [r2]
    8390:	0a000012 	beq	83e0 <main+0x3d4>
    8394:	e59f254c 	ldr	r2, [pc, #1356]	; 88e8 <main+0x8dc>
    8398:	e3e01001 	mvn	r1, #1
    839c:	e58d1004 	str	r1, [sp, #4]
    83a0:	e3a03d09 	mov	r3, #576	; 0x240
    83a4:	e08f2002 	add	r2, pc, r2
    83a8:	e59f153c 	ldr	r1, [pc, #1340]	; 88ec <main+0x8e0>
    83ac:	e58d2000 	str	r2, [sp]
    83b0:	e3a06000 	mov	r6, #0
    83b4:	e59f2534 	ldr	r2, [pc, #1332]	; 88f0 <main+0x8e4>
    83b8:	e08f1001 	add	r1, pc, r1
    83bc:	e58d0008 	str	r0, [sp, #8]
    83c0:	e28a0028 	add	r0, sl, #40	; 0x28
    83c4:	e08f2002 	add	r2, pc, r2
    83c8:	eb003062 	bl	14558 <fprintf>
    83cc:	e59f2520 	ldr	r2, [pc, #1312]	; 88f4 <main+0x8e8>
    83d0:	e08f2002 	add	r2, pc, r2
    83d4:	e5923000 	ldr	r3, [r2]
    83d8:	e2833001 	add	r3, r3, #1
    83dc:	e5823000 	str	r3, [r2]
	rc = close ((handle_t)rc);
    83e0:	e1a00004 	mov	r0, r4
    83e4:	eb002b07 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "async");
    83e8:	e59f2508 	ldr	r2, [pc, #1288]	; 88f8 <main+0x8ec>
    83ec:	e370002a 	cmn	r0, #42	; 0x2a
    83f0:	e08f2002 	add	r2, pc, r2
    83f4:	e5923000 	ldr	r3, [r2]
    83f8:	e2833001 	add	r3, r3, #1
    83fc:	e5823000 	str	r3, [r2]
    8400:	0a000012 	beq	8450 <main+0x444>
    8404:	e59f24f0 	ldr	r2, [pc, #1264]	; 88fc <main+0x8f0>
    8408:	e3e01029 	mvn	r1, #41	; 0x29
    840c:	e58d1004 	str	r1, [sp, #4]
    8410:	e3003242 	movw	r3, #578	; 0x242
    8414:	e08f2002 	add	r2, pc, r2
    8418:	e59f14e0 	ldr	r1, [pc, #1248]	; 8900 <main+0x8f4>
    841c:	e58d2000 	str	r2, [sp]
    8420:	e3a06000 	mov	r6, #0
    8424:	e59f24d8 	ldr	r2, [pc, #1240]	; 8904 <main+0x8f8>
    8428:	e08f1001 	add	r1, pc, r1
    842c:	e58d0008 	str	r0, [sp, #8]
    8430:	e28a0028 	add	r0, sl, #40	; 0x28
    8434:	e08f2002 	add	r2, pc, r2
    8438:	eb003046 	bl	14558 <fprintf>
    843c:	e59f24c4 	ldr	r2, [pc, #1220]	; 8908 <main+0x8fc>
    8440:	e08f2002 	add	r2, pc, r2
    8444:	e5923000 	ldr	r3, [r2]
    8448:	e2833001 	add	r3, r3, #1
    844c:	e5823000 	str	r3, [r2]
	EXPECT_GE_ZERO(rc, "async");
    8450:	e59f54b4 	ldr	r5, [pc, #1204]	; 890c <main+0x900>
	rc = connect (path,  IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    8454:	e3a01003 	mov	r1, #3
    8458:	e1a0000b 	mov	r0, fp
	EXPECT_GE_ZERO(rc, "async");
    845c:	e08f5005 	add	r5, pc, r5
	rc = connect (path,  IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    8460:	eb002ae2 	bl	12ff0 <connect>
	EXPECT_GE_ZERO(rc, "async");
    8464:	e2504000 	subs	r4, r0, #0
    8468:	e5953000 	ldr	r3, [r5]
    846c:	e2833001 	add	r3, r3, #1
    8470:	e5853000 	str	r3, [r5]
    8474:	ba001095 	blt	c6d0 <main+0x46c4>
		rc = wait(chan, &event, 1000);
    8478:	e28d3084 	add	r3, sp, #132	; 0x84
    847c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8480:	e1a01003 	mov	r1, r3
    8484:	e58d3030 	str	r3, [sp, #48]	; 0x30
    8488:	eb002ae4 	bl	13020 <wait>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "async");
    848c:	e5953000 	ldr	r3, [r5]
    8490:	e370000d 	cmn	r0, #13
    8494:	e2833001 	add	r3, r3, #1
    8498:	e5853000 	str	r3, [r5]
    849c:	1a001077 	bne	c680 <main+0x4674>
		rc = close (chan);
    84a0:	e1a00004 	mov	r0, r4
    84a4:	eb002ad7 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "async");
    84a8:	e59f2460 	ldr	r2, [pc, #1120]	; 8910 <main+0x904>
    84ac:	e3500000 	cmp	r0, #0
    84b0:	e08f2002 	add	r2, pc, r2
    84b4:	e5923000 	ldr	r3, [r2]
    84b8:	e2833001 	add	r3, r3, #1
    84bc:	e5823000 	str	r3, [r2]
    84c0:	1a000d41 	bne	b9cc <main+0x39c0>
	EXPECT_GE_ZERO (rc, "async");
    84c4:	e59f4448 	ldr	r4, [pc, #1096]	; 8914 <main+0x908>
	rc = connect (path,  IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    84c8:	e3a01003 	mov	r1, #3
    84cc:	e1a0000b 	mov	r0, fp
	EXPECT_GE_ZERO (rc, "async");
    84d0:	e08f4004 	add	r4, pc, r4
	rc = connect (path,  IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    84d4:	eb002ac5 	bl	12ff0 <connect>
	EXPECT_GE_ZERO (rc, "async");
    84d8:	e2507000 	subs	r7, r0, #0
    84dc:	e5943000 	ldr	r3, [r4]
    84e0:	e2833001 	add	r3, r3, #1
    84e4:	e5843000 	str	r3, [r4]
    84e8:	ba0010a0 	blt	c770 <main+0x4764>
		rc = wait(chan, &event, 100);
    84ec:	e3a02064 	mov	r2, #100	; 0x64
    84f0:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    84f4:	eb002ac9 	bl	13020 <wait>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "async");
    84f8:	e5943000 	ldr	r3, [r4]
    84fc:	e370000d 	cmn	r0, #13
    8500:	e2833001 	add	r3, r3, #1
    8504:	e5843000 	str	r3, [r4]
    8508:	1a001084 	bne	c720 <main+0x4714>
		EXPECT_GE_ZERO (rc, "async");
    850c:	e59f4404 	ldr	r4, [pc, #1028]	; 8918 <main+0x90c>
		rc = port_create(path, 1, 64, IPC_PORT_ALLOW_TA_CONNECT);
    8510:	e3a03001 	mov	r3, #1
    8514:	e1a01003 	mov	r1, r3
    8518:	e3a02040 	mov	r2, #64	; 0x40
		EXPECT_GE_ZERO (rc, "async");
    851c:	e08f4004 	add	r4, pc, r4
		rc = port_create(path, 1, 64, IPC_PORT_ALLOW_TA_CONNECT);
    8520:	e1a0000b 	mov	r0, fp
    8524:	eb002aae 	bl	12fe4 <port_create>
		EXPECT_GE_ZERO (rc, "async");
    8528:	e2508000 	subs	r8, r0, #0
    852c:	e5943000 	ldr	r3, [r4]
    8530:	e2833001 	add	r3, r3, #1
    8534:	e5843000 	str	r3, [r4]
    8538:	ba000d06 	blt	b958 <main+0x394c>
			rc = wait(port, &event, 1000);
    853c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8540:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    8544:	eb002ab5 	bl	13020 <wait>
			EXPECT_EQ (NO_ERROR, rc, "async");
    8548:	e5943000 	ldr	r3, [r4]
    854c:	e2501000 	subs	r1, r0, #0
    8550:	e2832001 	add	r2, r3, #1
    8554:	e5842000 	str	r2, [r4]
    8558:	1a001158 	bne	cac0 <main+0x4ab4>
			EXPECT_EQ (exp_event, event.event, "async");
    855c:	e59d0088 	ldr	r0, [sp, #136]	; 0x88
    8560:	e2833002 	add	r3, r3, #2
    8564:	e5843000 	str	r3, [r4]
    8568:	e3500001 	cmp	r0, #1
    856c:	0a000012 	beq	85bc <main+0x5b0>
    8570:	e59f23a4 	ldr	r2, [pc, #932]	; 891c <main+0x910>
    8574:	e1a06001 	mov	r6, r1
    8578:	e59f13a0 	ldr	r1, [pc, #928]	; 8920 <main+0x914>
    857c:	e3a0c001 	mov	ip, #1
    8580:	e08f2002 	add	r2, pc, r2
    8584:	e58d2000 	str	r2, [sp]
    8588:	e59f2394 	ldr	r2, [pc, #916]	; 8924 <main+0x918>
    858c:	e300326a 	movw	r3, #618	; 0x26a
    8590:	e58d0008 	str	r0, [sp, #8]
    8594:	e08f1001 	add	r1, pc, r1
    8598:	e08f2002 	add	r2, pc, r2
    859c:	e28a0028 	add	r0, sl, #40	; 0x28
    85a0:	e58dc004 	str	ip, [sp, #4]
    85a4:	eb002feb 	bl	14558 <fprintf>
    85a8:	e59f2378 	ldr	r2, [pc, #888]	; 8928 <main+0x91c>
    85ac:	e08f2002 	add	r2, pc, r2
    85b0:	e5923000 	ldr	r3, [r2]
    85b4:	e2833001 	add	r3, r3, #1
    85b8:	e5823000 	str	r3, [r2]
				rc = accept(port, &peer_uuid);
    85bc:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    85c0:	e1a00008 	mov	r0, r8
    85c4:	eb002a8c 	bl	12ffc <accept>
				EXPECT_GE_ZERO (rc, "async");
    85c8:	e59f235c 	ldr	r2, [pc, #860]	; 892c <main+0x920>
    85cc:	e2504000 	subs	r4, r0, #0
    85d0:	e08f2002 	add	r2, pc, r2
    85d4:	e5923000 	ldr	r3, [r2]
    85d8:	e2833001 	add	r3, r3, #1
    85dc:	e5823000 	str	r3, [r2]
    85e0:	aa000010 	bge	8628 <main+0x61c>
    85e4:	e59f2344 	ldr	r2, [pc, #836]	; 8930 <main+0x924>
    85e8:	e3003271 	movw	r3, #625	; 0x271
    85ec:	e59f1340 	ldr	r1, [pc, #832]	; 8934 <main+0x928>
    85f0:	e28a0028 	add	r0, sl, #40	; 0x28
    85f4:	e08f2002 	add	r2, pc, r2
    85f8:	e58d2000 	str	r2, [sp]
    85fc:	e59f2334 	ldr	r2, [pc, #820]	; 8938 <main+0x92c>
    8600:	e08f1001 	add	r1, pc, r1
    8604:	e58d4004 	str	r4, [sp, #4]
    8608:	e3a06000 	mov	r6, #0
    860c:	e08f2002 	add	r2, pc, r2
    8610:	eb002fd0 	bl	14558 <fprintf>
    8614:	e59f2320 	ldr	r2, [pc, #800]	; 893c <main+0x930>
    8618:	e08f2002 	add	r2, pc, r2
    861c:	e5923000 	ldr	r3, [r2]
    8620:	e2833001 	add	r3, r3, #1
    8624:	e5823000 	str	r3, [r2]
				close (srv_chan);
    8628:	e1a00004 	mov	r0, r4
    862c:	eb002a75 	bl	13008 <close>
				rc = wait(chan, &event, 1000);
    8630:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8634:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    8638:	e1a00007 	mov	r0, r7
    863c:	eb002a77 	bl	13020 <wait>
				EXPECT_EQ (NO_ERROR, rc, "async");
    8640:	e59f22f8 	ldr	r2, [pc, #760]	; 8940 <main+0x934>
    8644:	e3500000 	cmp	r0, #0
    8648:	e08f2002 	add	r2, pc, r2
    864c:	e5923000 	ldr	r3, [r2]
    8650:	e2833001 	add	r3, r3, #1
    8654:	e5823000 	str	r3, [r2]
    8658:	0a000012 	beq	86a8 <main+0x69c>
    865c:	e59f22e0 	ldr	r2, [pc, #736]	; 8944 <main+0x938>
    8660:	e3a04000 	mov	r4, #0
    8664:	e59f12dc 	ldr	r1, [pc, #732]	; 8948 <main+0x93c>
    8668:	e300327d 	movw	r3, #637	; 0x27d
    866c:	e08f2002 	add	r2, pc, r2
    8670:	e58d2000 	str	r2, [sp]
    8674:	e59f22d0 	ldr	r2, [pc, #720]	; 894c <main+0x940>
    8678:	e08f1001 	add	r1, pc, r1
    867c:	e58d0008 	str	r0, [sp, #8]
    8680:	e28a0028 	add	r0, sl, #40	; 0x28
    8684:	e08f2002 	add	r2, pc, r2
    8688:	e58d4004 	str	r4, [sp, #4]
    868c:	eb002fb1 	bl	14558 <fprintf>
    8690:	e59f22b8 	ldr	r2, [pc, #696]	; 8950 <main+0x944>
    8694:	e1a06004 	mov	r6, r4
    8698:	e08f2002 	add	r2, pc, r2
    869c:	e5923000 	ldr	r3, [r2]
    86a0:	e2833001 	add	r3, r3, #1
    86a4:	e5823000 	str	r3, [r2]
				EXPECT_EQ (exp_event, event.event, "async");
    86a8:	e59f22a4 	ldr	r2, [pc, #676]	; 8954 <main+0x948>
    86ac:	e59d1088 	ldr	r1, [sp, #136]	; 0x88
    86b0:	e08f2002 	add	r2, pc, r2
    86b4:	e3510005 	cmp	r1, #5
    86b8:	e5923000 	ldr	r3, [r2]
    86bc:	e2833001 	add	r3, r3, #1
    86c0:	e5823000 	str	r3, [r2]
    86c4:	0a000012 	beq	8714 <main+0x708>
    86c8:	e59f2288 	ldr	r2, [pc, #648]	; 8958 <main+0x94c>
    86cc:	e3a0c005 	mov	ip, #5
    86d0:	e58d1008 	str	r1, [sp, #8]
    86d4:	e300327e 	movw	r3, #638	; 0x27e
    86d8:	e08f2002 	add	r2, pc, r2
    86dc:	e59f1278 	ldr	r1, [pc, #632]	; 895c <main+0x950>
    86e0:	e58d2000 	str	r2, [sp]
    86e4:	e28a0028 	add	r0, sl, #40	; 0x28
    86e8:	e59f2270 	ldr	r2, [pc, #624]	; 8960 <main+0x954>
    86ec:	e08f1001 	add	r1, pc, r1
    86f0:	e58dc004 	str	ip, [sp, #4]
    86f4:	e3a06000 	mov	r6, #0
    86f8:	e08f2002 	add	r2, pc, r2
    86fc:	eb002f95 	bl	14558 <fprintf>
    8700:	e59f225c 	ldr	r2, [pc, #604]	; 8964 <main+0x958>
    8704:	e08f2002 	add	r2, pc, r2
    8708:	e5923000 	ldr	r3, [r2]
    870c:	e2833001 	add	r3, r3, #1
    8710:	e5823000 	str	r3, [r2]
			close(port);
    8714:	e1a00008 	mov	r0, r8
    8718:	eb002a3a 	bl	13008 <close>
		close(chan);
    871c:	e1a00007 	mov	r0, r7
    8720:	eb002a38 	bl	13008 <close>
	TEST_END
    8724:	e3560000 	cmp	r6, #0
    8728:	0a000c9c 	beq	b9a0 <main+0x3994>
    872c:	e59f2234 	ldr	r2, [pc, #564]	; 8968 <main+0x95c>
    8730:	e3003285 	movw	r3, #645	; 0x285
    8734:	e59f1230 	ldr	r1, [pc, #560]	; 896c <main+0x960>
    8738:	e28a0028 	add	r0, sl, #40	; 0x28
    873c:	e08f2002 	add	r2, pc, r2
    8740:	e58d2000 	str	r2, [sp]
    8744:	e59f2224 	ldr	r2, [pc, #548]	; 8970 <main+0x964>
    8748:	e08f1001 	add	r1, pc, r1
    874c:	e08f2002 	add	r2, pc, r2
    8750:	eb002f80 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    8754:	e59f2218 	ldr	r2, [pc, #536]	; 8974 <main+0x968>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "datasink");
    8758:	e3a0107e 	mov	r1, #126	; 0x7e
    875c:	e58d1020 	str	r1, [sp, #32]
	TEST_BEGIN(__func__);
    8760:	e3a03f6f 	mov	r3, #444	; 0x1bc
    8764:	e08f2002 	add	r2, pc, r2
    8768:	e59f1208 	ldr	r1, [pc, #520]	; 8978 <main+0x96c>
    876c:	e58d2000 	str	r2, [sp]
    8770:	e28a0028 	add	r0, sl, #40	; 0x28
    8774:	e59f2200 	ldr	r2, [pc, #512]	; 897c <main+0x970>
    8778:	e08f1001 	add	r1, pc, r1
			EXPECT_GE_ZERO (rc, "connect/close");
    877c:	e59f71fc 	ldr	r7, [pc, #508]	; 8980 <main+0x974>
	TEST_BEGIN(__func__);
    8780:	e3a08001 	mov	r8, #1
    8784:	e08f2002 	add	r2, pc, r2
    8788:	e28d90f4 	add	r9, sp, #244	; 0xf4
    878c:	eb002f71 	bl	14558 <fprintf>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "datasink");
    8790:	e59f31ec 	ldr	r3, [pc, #492]	; 8984 <main+0x978>
    8794:	e59f21ec 	ldr	r2, [pc, #492]	; 8988 <main+0x97c>
    8798:	e1a0000b 	mov	r0, fp
    879c:	e59f11e8 	ldr	r1, [pc, #488]	; 898c <main+0x980>
    87a0:	e08f3003 	add	r3, pc, r3
    87a4:	e08f2002 	add	r2, pc, r2
			EXPECT_GE_ZERO (rc, "connect/close");
    87a8:	e08f7007 	add	r7, pc, r7
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "datasink");
    87ac:	e08f1001 	add	r1, pc, r1
    87b0:	eb002f40 	bl	144b8 <sprintf>
			EXPECT_GE_ZERO (rc, "connect/close");
    87b4:	e59f31d4 	ldr	r3, [pc, #468]	; 8990 <main+0x984>
    87b8:	e08f3003 	add	r3, pc, r3
    87bc:	e58d3014 	str	r3, [sp, #20]
    87c0:	e59f31cc 	ldr	r3, [pc, #460]	; 8994 <main+0x988>
    87c4:	e08f3003 	add	r3, pc, r3
    87c8:	e58d3018 	str	r3, [sp, #24]
    87cc:	e59d402c 	ldr	r4, [sp, #44]	; 0x2c
    87d0:	e1a05004 	mov	r5, r4
    87d4:	ea000002 	b	87e4 <main+0x7d8>
			chans[i] = (handle_t) rc;
    87d8:	e4846004 	str	r6, [r4], #4
		for (uint i = 0; i < countof(chans); i++) {
    87dc:	e1590004 	cmp	r9, r4
    87e0:	0a000018 	beq	8848 <main+0x83c>
			rc = sync_connect(path, 1000);
    87e4:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    87e8:	e1a0000b 	mov	r0, fp
    87ec:	eb0013ca 	bl	d71c <sync_connect>
			EXPECT_GE_ZERO (rc, "connect/close");
    87f0:	e5973000 	ldr	r3, [r7]
    87f4:	e2506000 	subs	r6, r0, #0
    87f8:	e2833001 	add	r3, r3, #1
    87fc:	e5873000 	str	r3, [r7]
    8800:	aafffff4 	bge	87d8 <main+0x7cc>
    8804:	e59d2018 	ldr	r2, [sp, #24]
    8808:	e30031c5 	movw	r3, #453	; 0x1c5
    880c:	e58d2000 	str	r2, [sp]
    8810:	e28a0028 	add	r0, sl, #40	; 0x28
    8814:	e59d201c 	ldr	r2, [sp, #28]
    8818:	e3a08000 	mov	r8, #0
    881c:	e58d6004 	str	r6, [sp, #4]
    8820:	e59d1014 	ldr	r1, [sp, #20]
    8824:	eb002f4b 	bl	14558 <fprintf>
    8828:	e59f2168 	ldr	r2, [pc, #360]	; 8998 <main+0x98c>
			chans[i] = (handle_t) rc;
    882c:	e4846004 	str	r6, [r4], #4
			EXPECT_GE_ZERO (rc, "connect/close");
    8830:	e08f2002 	add	r2, pc, r2
		for (uint i = 0; i < countof(chans); i++) {
    8834:	e1590004 	cmp	r9, r4
			EXPECT_GE_ZERO (rc, "connect/close");
    8838:	e5923000 	ldr	r3, [r2]
    883c:	e2833001 	add	r3, r3, #1
    8840:	e5823000 	str	r3, [r2]
		for (uint i = 0; i < countof(chans); i++) {
    8844:	1affffe6 	bne	87e4 <main+0x7d8>
			EXPECT_EQ (NO_ERROR, rc, "connect/close");
    8848:	e59f314c 	ldr	r3, [pc, #332]	; 899c <main+0x990>
    884c:	e59f214c 	ldr	r2, [pc, #332]	; 89a0 <main+0x994>
    8850:	e59f614c 	ldr	r6, [pc, #332]	; 89a4 <main+0x998>
    8854:	e08f3003 	add	r3, pc, r3
    8858:	e08f2002 	add	r2, pc, r2
    885c:	e58d7024 	str	r7, [sp, #36]	; 0x24
    8860:	e58d9028 	str	r9, [sp, #40]	; 0x28
    8864:	e08f6006 	add	r6, pc, r6
    8868:	e1a07003 	mov	r7, r3
    886c:	e1a09002 	mov	r9, r2
    8870:	ea0000f9 	b	8c5c <main+0xc50>
    8874:	0000d448 	.word	0x0000d448
    8878:	0000dfe4 	.word	0x0000dfe4
    887c:	0000d430 	.word	0x0000d430
    8880:	0000000c 	.word	0x0000000c
    8884:	00000010 	.word	0x00000010
    8888:	0000d7e4 	.word	0x0000d7e4
    888c:	0000cdd8 	.word	0x0000cdd8
    8890:	0000cde0 	.word	0x0000cde0
    8894:	0000d7dc 	.word	0x0000d7dc
    8898:	0000cde0 	.word	0x0000cde0
    889c:	0000d77c 	.word	0x0000d77c
    88a0:	0000cdd0 	.word	0x0000cdd0
    88a4:	0000d714 	.word	0x0000d714
    88a8:	0000cd78 	.word	0x0000cd78
    88ac:	0000deac 	.word	0x0000deac
    88b0:	0000dea4 	.word	0x0000dea4
    88b4:	0000cd00 	.word	0x0000cd00
    88b8:	0000cd00 	.word	0x0000cd00
    88bc:	0000cb0c 	.word	0x0000cb0c
    88c0:	0000d624 	.word	0x0000d624
    88c4:	0000d608 	.word	0x0000d608
    88c8:	0000d89c 	.word	0x0000d89c
    88cc:	0000d704 	.word	0x0000d704
    88d0:	0000ddac 	.word	0x0000ddac
    88d4:	0000cc04 	.word	0x0000cc04
    88d8:	0000d714 	.word	0x0000d714
    88dc:	0000d520 	.word	0x0000d520
    88e0:	0000dd58 	.word	0x0000dd58
    88e4:	0000dd34 	.word	0x0000dd34
    88e8:	0000cb8c 	.word	0x0000cb8c
    88ec:	0000d624 	.word	0x0000d624
    88f0:	0000d4a8 	.word	0x0000d4a8
    88f4:	0000dce0 	.word	0x0000dce0
    88f8:	0000dcc4 	.word	0x0000dcc4
    88fc:	0000cb1c 	.word	0x0000cb1c
    8900:	0000d62c 	.word	0x0000d62c
    8904:	0000d438 	.word	0x0000d438
    8908:	0000dc70 	.word	0x0000dc70
    890c:	0000dc58 	.word	0x0000dc58
    8910:	0000dc04 	.word	0x0000dc04
    8914:	0000dbe4 	.word	0x0000dbe4
    8918:	0000db98 	.word	0x0000db98
    891c:	0000c9b0 	.word	0x0000c9b0
    8920:	0000c9a4 	.word	0x0000c9a4
    8924:	0000d2d4 	.word	0x0000d2d4
    8928:	0000db04 	.word	0x0000db04
    892c:	0000dae4 	.word	0x0000dae4
    8930:	0000c93c 	.word	0x0000c93c
    8934:	0000d2bc 	.word	0x0000d2bc
    8938:	0000d260 	.word	0x0000d260
    893c:	0000da98 	.word	0x0000da98
    8940:	0000da6c 	.word	0x0000da6c
    8944:	0000c8c4 	.word	0x0000c8c4
    8948:	0000d320 	.word	0x0000d320
    894c:	0000d1e8 	.word	0x0000d1e8
    8950:	0000da18 	.word	0x0000da18
    8954:	0000da04 	.word	0x0000da04
    8958:	0000c858 	.word	0x0000c858
    895c:	0000c84c 	.word	0x0000c84c
    8960:	0000d174 	.word	0x0000d174
    8964:	0000d9ac 	.word	0x0000d9ac
    8968:	0000c620 	.word	0x0000c620
    896c:	0000d2e4 	.word	0x0000d2e4
    8970:	0000d120 	.word	0x0000d120
    8974:	0000c5c0 	.word	0x0000c5c0
    8978:	0000d108 	.word	0x0000d108
    897c:	0000d0e8 	.word	0x0000d0e8
    8980:	0000d90c 	.word	0x0000d90c
    8984:	0000d37c 	.word	0x0000d37c
    8988:	0000d0ec 	.word	0x0000d0ec
    898c:	0000cce0 	.word	0x0000cce0
    8990:	0000d104 	.word	0x0000d104
    8994:	0000c7b4 	.word	0x0000c7b4
    8998:	0000d880 	.word	0x0000d880
    899c:	0000d018 	.word	0x0000d018
    89a0:	0000d140 	.word	0x0000d140
    89a4:	0000d850 	.word	0x0000d850
    89a8:	0000c2f0 	.word	0x0000c2f0
    89ac:	0000d404 	.word	0x0000d404
    89b0:	0000c038 	.word	0x0000c038
    89b4:	0000cd48 	.word	0x0000cd48
    89b8:	0000cb70 	.word	0x0000cb70
    89bc:	0000c0f0 	.word	0x0000c0f0
    89c0:	0000cb50 	.word	0x0000cb50
    89c4:	0000cb50 	.word	0x0000cb50
    89c8:	0000cd90 	.word	0x0000cd90
    89cc:	0000cb00 	.word	0x0000cb00
    89d0:	0000c6f0 	.word	0x0000c6f0
    89d4:	0000d2d0 	.word	0x0000d2d0
    89d8:	0000d2ac 	.word	0x0000d2ac
    89dc:	0000d2a8 	.word	0x0000d2a8
    89e0:	0000d2a0 	.word	0x0000d2a0
    89e4:	0000c108 	.word	0x0000c108
    89e8:	0000c9dc 	.word	0x0000c9dc
    89ec:	0000c8b0 	.word	0x0000c8b0
    89f0:	0000d204 	.word	0x0000d204
    89f4:	0000bf28 	.word	0x0000bf28
    89f8:	0000c100 	.word	0x0000c100
    89fc:	0000c978 	.word	0x0000c978
    8a00:	0000d1a8 	.word	0x0000d1a8
    8a04:	0000bed8 	.word	0x0000bed8
    8a08:	0000cb04 	.word	0x0000cb04
    8a0c:	0000c92c 	.word	0x0000c92c
    8a10:	0000c0b8 	.word	0x0000c0b8
    8a14:	0000c904 	.word	0x0000c904
    8a18:	0000c0a8 	.word	0x0000c0a8
    8a1c:	0000d130 	.word	0x0000d130
    8a20:	0000c098 	.word	0x0000c098
    8a24:	0000bdd8 	.word	0x0000bdd8
    8a28:	0000c078 	.word	0x0000c078
    8a2c:	0000c8c4 	.word	0x0000c8c4
    8a30:	0000c89c 	.word	0x0000c89c
    8a34:	0000cb30 	.word	0x0000cb30
    8a38:	0000cc7c 	.word	0x0000cc7c
    8a3c:	0000d030 	.word	0x0000d030
    8a40:	0000d010 	.word	0x0000d010
    8a44:	0000bf60 	.word	0x0000bf60
    8a48:	0000cc08 	.word	0x0000cc08
    8a4c:	0000c784 	.word	0x0000c784
    8a50:	0000cfbc 	.word	0x0000cfbc
    8a54:	0000cf9c 	.word	0x0000cf9c
    8a58:	0000bef4 	.word	0x0000bef4
    8a5c:	0000c848 	.word	0x0000c848
    8a60:	0000c718 	.word	0x0000c718
    8a64:	0000cf4c 	.word	0x0000cf4c
    8a68:	0000cf38 	.word	0x0000cf38
    8a6c:	0000be8c 	.word	0x0000be8c
    8a70:	0000be88 	.word	0x0000be88
    8a74:	0000c6ac 	.word	0x0000c6ac
    8a78:	0000cee4 	.word	0x0000cee4
    8a7c:	0000ced0 	.word	0x0000ced0
    8a80:	0000be24 	.word	0x0000be24
    8a84:	0000bd18 	.word	0x0000bd18
    8a88:	0000c644 	.word	0x0000c644
    8a8c:	0000ce78 	.word	0x0000ce78
    8a90:	0000ce40 	.word	0x0000ce40
    8a94:	0000bd90 	.word	0x0000bd90
    8a98:	0000ca38 	.word	0x0000ca38
    8a9c:	0000c5b4 	.word	0x0000c5b4
    8aa0:	0000cdec 	.word	0x0000cdec
    8aa4:	0000cdd4 	.word	0x0000cdd4
    8aa8:	0000bd1c 	.word	0x0000bd1c
    8aac:	0000c9c8 	.word	0x0000c9c8
    8ab0:	0000c544 	.word	0x0000c544
    8ab4:	0000cd78 	.word	0x0000cd78
    8ab8:	0000ba04 	.word	0x0000ba04
    8abc:	0000c6c4 	.word	0x0000c6c4
    8ac0:	0000c4ec 	.word	0x0000c4ec
    8ac4:	0000c4d0 	.word	0x0000c4d0
    8ac8:	0000b9e8 	.word	0x0000b9e8
    8acc:	0000c4d0 	.word	0x0000c4d0
    8ad0:	0000c0d0 	.word	0x0000c0d0
    8ad4:	0000c4c8 	.word	0x0000c4c8
    8ad8:	0000ccdc 	.word	0x0000ccdc
    8adc:	0000bcec 	.word	0x0000bcec
    8ae0:	0000bcf0 	.word	0x0000bcf0
    8ae4:	0000bca0 	.word	0x0000bca0
    8ae8:	0000cc64 	.word	0x0000cc64
    8aec:	0000bfe0 	.word	0x0000bfe0
    8af0:	0000c414 	.word	0x0000c414
    8af4:	0000c00c 	.word	0x0000c00c
    8af8:	0000cc18 	.word	0x0000cc18
    8afc:	0000b8c8 	.word	0x0000b8c8
    8b00:	0000c570 	.word	0x0000c570
    8b04:	0000c398 	.word	0x0000c398
    8b08:	0000c37c 	.word	0x0000c37c
    8b0c:	0000b76c 	.word	0x0000b76c
    8b10:	0000c380 	.word	0x0000c380
    8b14:	0000cb90 	.word	0x0000cb90
    8b18:	0000bbf0 	.word	0x0000bbf0
    8b1c:	0000c4f4 	.word	0x0000c4f4
    8b20:	0000cb3c 	.word	0x0000cb3c
    8b24:	0000cb18 	.word	0x0000cb18
    8b28:	0000bb80 	.word	0x0000bb80
    8b2c:	0000c480 	.word	0x0000c480
    8b30:	0000c28c 	.word	0x0000c28c
    8b34:	0000cac4 	.word	0x0000cac4
    8b38:	0000caa8 	.word	0x0000caa8
    8b3c:	0000c258 	.word	0x0000c258
    8b40:	0000c3c0 	.word	0x0000c3c0
    8b44:	0000baec 	.word	0x0000baec
    8b48:	0000ca38 	.word	0x0000ca38
    8b4c:	0000b5b0 	.word	0x0000b5b0
    8b50:	0000c384 	.word	0x0000c384
    8b54:	0000c1ac 	.word	0x0000c1ac
    8b58:	0000c190 	.word	0x0000c190
    8b5c:	0000b594 	.word	0x0000b594
    8b60:	0000c198 	.word	0x0000c198
    8b64:	0000c9ac 	.word	0x0000c9ac
    8b68:	0000ba24 	.word	0x0000ba24
    8b6c:	0000c310 	.word	0x0000c310
    8b70:	0000c958 	.word	0x0000c958
    8b74:	0000c93c 	.word	0x0000c93c
    8b78:	0000b9bc 	.word	0x0000b9bc
    8b7c:	0000c2a4 	.word	0x0000c2a4
    8b80:	0000c0b0 	.word	0x0000c0b0
    8b84:	0000c8e8 	.word	0x0000c8e8
    8b88:	0000c8cc 	.word	0x0000c8cc
    8b8c:	0000c080 	.word	0x0000c080
    8b90:	0000c1ec 	.word	0x0000c1ec
    8b94:	0000b938 	.word	0x0000b938
    8b98:	0000c86c 	.word	0x0000c86c
    8b9c:	0000b400 	.word	0x0000b400
    8ba0:	0000c1bc 	.word	0x0000c1bc
    8ba4:	0000bfe4 	.word	0x0000bfe4
    8ba8:	0000bfc8 	.word	0x0000bfc8
    8bac:	0000b3ec 	.word	0x0000b3ec
    8bb0:	0000bfd0 	.word	0x0000bfd0
    8bb4:	0000c7e0 	.word	0x0000c7e0
    8bb8:	0000b870 	.word	0x0000b870
    8bbc:	0000c144 	.word	0x0000c144
    8bc0:	0000c78c 	.word	0x0000c78c
    8bc4:	0000c76c 	.word	0x0000c76c
    8bc8:	0000b804 	.word	0x0000b804
    8bcc:	0000c0d4 	.word	0x0000c0d4
    8bd0:	0000bee0 	.word	0x0000bee0
    8bd4:	0000c718 	.word	0x0000c718
    8bd8:	0000c6fc 	.word	0x0000c6fc
    8bdc:	0000beb0 	.word	0x0000beb0
    8be0:	0000b77c 	.word	0x0000b77c
    8be4:	0000bfd8 	.word	0x0000bfd8
    8be8:	0000c698 	.word	0x0000c698
    8bec:	0000b24c 	.word	0x0000b24c
    8bf0:	0000bfe8 	.word	0x0000bfe8
    8bf4:	0000be10 	.word	0x0000be10
    8bf8:	0000bdf4 	.word	0x0000bdf4
    8bfc:	0000b23c 	.word	0x0000b23c
    8c00:	0000bdf8 	.word	0x0000bdf8
    8c04:	0000c5fc 	.word	0x0000c5fc
    8c08:	0000b6ac 	.word	0x0000b6ac
    8c0c:	0000c058 	.word	0x0000c058
    8c10:	0000c5ac 	.word	0x0000c5ac
    8c14:	0000bd70 	.word	0x0000bd70
    8c18:	0000b67c 	.word	0x0000b67c
    8c1c:	0000c56c 	.word	0x0000c56c
    8c20:	0000b63c 	.word	0x0000b63c
    8c24:	0000bfcc 	.word	0x0000bfcc
    8c28:	0000bce0 	.word	0x0000bce0
    8c2c:	0000c518 	.word	0x0000c518
    8c30:	0000bcdc 	.word	0x0000bcdc
    8c34:	0000b5e8 	.word	0x0000b5e8
    8c38:	0000c4d8 	.word	0x0000c4d8
    8c3c:	0000b5b4 	.word	0x0000b5b4
    8c40:	0000bf38 	.word	0x0000bf38
    8c44:	0000bc4c 	.word	0x0000bc4c
    8c48:	0000c484 	.word	0x0000c484
    8c4c:	0000bc48 	.word	0x0000bc48
    8c50:	0000b554 	.word	0x0000b554
		for (uint i = 0; i < countof(chans); i++) {
    8c54:	e1550004 	cmp	r5, r4
    8c58:	0a000018 	beq	8cc0 <main+0xcb4>
			rc = close(chans[i]);
    8c5c:	e4950004 	ldr	r0, [r5], #4
    8c60:	eb0028e8 	bl	13008 <close>
			EXPECT_EQ (NO_ERROR, rc, "connect/close");
    8c64:	e5963000 	ldr	r3, [r6]
    8c68:	e3500000 	cmp	r0, #0
    8c6c:	e2833001 	add	r3, r3, #1
    8c70:	e5863000 	str	r3, [r6]
    8c74:	0afffff6 	beq	8c54 <main+0xc48>
    8c78:	e51f22d8 	ldr	r2, [pc, #-728]	; 89a8 <main+0x99c>
    8c7c:	e30031cb 	movw	r3, #459	; 0x1cb
    8c80:	e58d0008 	str	r0, [sp, #8]
    8c84:	e3a08000 	mov	r8, #0
    8c88:	e08f2002 	add	r2, pc, r2
    8c8c:	e58d8004 	str	r8, [sp, #4]
    8c90:	e58d2000 	str	r2, [sp]
    8c94:	e1a01009 	mov	r1, r9
    8c98:	e1a02007 	mov	r2, r7
    8c9c:	e28a0028 	add	r0, sl, #40	; 0x28
    8ca0:	eb002e2c 	bl	14558 <fprintf>
    8ca4:	e51f2300 	ldr	r2, [pc, #-768]	; 89ac <main+0x9a0>
		for (uint i = 0; i < countof(chans); i++) {
    8ca8:	e1550004 	cmp	r5, r4
			EXPECT_EQ (NO_ERROR, rc, "connect/close");
    8cac:	e08f2002 	add	r2, pc, r2
    8cb0:	e5923000 	ldr	r3, [r2]
    8cb4:	e2833001 	add	r3, r3, #1
    8cb8:	e5823000 	str	r3, [r2]
		for (uint i = 0; i < countof(chans); i++) {
    8cbc:	1affffe6 	bne	8c5c <main+0xc50>
	for (uint j = 2; j < MAX_USER_HANDLES; j++) {
    8cc0:	e28d3020 	add	r3, sp, #32
    8cc4:	e8930288 	ldm	r3, {r3, r7, r9}
    8cc8:	e2533001 	subs	r3, r3, #1
    8ccc:	e58d3020 	str	r3, [sp, #32]
    8cd0:	1afffebd 	bne	87cc <main+0x7c0>
	TEST_END
    8cd4:	e3580000 	cmp	r8, #0
    8cd8:	1a000c50 	bne	be20 <main+0x3e14>
    8cdc:	e51f2334 	ldr	r2, [pc, #-820]	; 89b0 <main+0x9a4>
    8ce0:	e30031cf 	movw	r3, #463	; 0x1cf
    8ce4:	e51f1338 	ldr	r1, [pc, #-824]	; 89b4 <main+0x9a8>
    8ce8:	e28a0028 	add	r0, sl, #40	; 0x28
    8cec:	e08f2002 	add	r2, pc, r2
    8cf0:	e58d2000 	str	r2, [sp]
    8cf4:	e51f2344 	ldr	r2, [pc, #-836]	; 89b8 <main+0x9ac>
    8cf8:	e08f1001 	add	r1, pc, r1
    8cfc:	e08f2002 	add	r2, pc, r2
    8d00:	eb002e14 	bl	14558 <fprintf>
	run_accept_test();
    8d04:	eb0012b0 	bl	d7cc <run_accept_test>
	TEST_BEGIN(__func__);
    8d08:	e51f3354 	ldr	r3, [pc, #-852]	; 89bc <main+0x9b0>
    8d0c:	e51f2354 	ldr	r2, [pc, #-852]	; 89c0 <main+0x9b4>
    8d10:	e28dcf61 	add	ip, sp, #388	; 0x184
    8d14:	e51f1358 	ldr	r1, [pc, #-856]	; 89c4 <main+0x9b8>
    8d18:	e08f3003 	add	r3, pc, r3
    8d1c:	e08f2002 	add	r2, pc, r2
    8d20:	e58d3000 	str	r3, [sp]
    8d24:	e1a0400c 	mov	r4, ip
    8d28:	e300340c 	movw	r3, #1036	; 0x40c
    8d2c:	e28a0028 	add	r0, sl, #40	; 0x28
    8d30:	e08f1001 	add	r1, pc, r1
    8d34:	e58dc020 	str	ip, [sp, #32]
    8d38:	eb002e06 	bl	14558 <fprintf>
    8d3c:	e1a02004 	mov	r2, r4
    8d40:	e3a03055 	mov	r3, #85	; 0x55
		*buf++ = seed++;
    8d44:	e4c23001 	strb	r3, [r2], #1
    8d48:	e2833001 	add	r3, r3, #1
	while (cnt--) {
    8d4c:	e152000b 	cmp	r2, fp
		*buf++ = seed++;
    8d50:	e6ef3073 	uxtb	r3, r3
	while (cnt--) {
    8d54:	1afffffa 	bne	8d44 <main+0xd38>
    8d58:	e1a0200b 	mov	r2, fp
    8d5c:	e3a03044 	mov	r3, #68	; 0x44
    8d60:	e28d1f81 	add	r1, sp, #516	; 0x204
		*buf++ = seed++;
    8d64:	e4c23001 	strb	r3, [r2], #1
    8d68:	e2833001 	add	r3, r3, #1
	while (cnt--) {
    8d6c:	e1520001 	cmp	r2, r1
		*buf++ = seed++;
    8d70:	e6ef3073 	uxtb	r3, r3
	while (cnt--) {
    8d74:	1afffffa 	bne	8d64 <main+0xd58>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "datasink");
    8d78:	e51f33b8 	ldr	r3, [pc, #-952]	; 89c8 <main+0x9bc>
    8d7c:	e28d4f51 	add	r4, sp, #324	; 0x144
    8d80:	e51f23bc 	ldr	r2, [pc, #-956]	; 89cc <main+0x9c0>
    8d84:	e1a00004 	mov	r0, r4
    8d88:	e51f13c0 	ldr	r1, [pc, #-960]	; 89d0 <main+0x9c4>
    8d8c:	e08f3003 	add	r3, pc, r3
    8d90:	e08f2002 	add	r2, pc, r2
	iov[0].base = buf0;
    8d94:	e59dc020 	ldr	ip, [sp, #32]
	msg.iov   = iov;
    8d98:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "datasink");
    8d9c:	e08f1001 	add	r1, pc, r1
	iov[0].len  = sizeof(buf0);
    8da0:	e3a0e040 	mov	lr, #64	; 0x40
	iov[0].base = buf0;
    8da4:	e58dc0b4 	str	ip, [sp, #180]	; 0xb4
	msg.iov   = iov;
    8da8:	e58d5088 	str	r5, [sp, #136]	; 0x88
	msg.num_handles = 0;
    8dac:	e3a0c000 	mov	ip, #0
	iov[0].len  = sizeof(buf0);
    8db0:	e58de0b8 	str	lr, [sp, #184]	; 0xb8
	iov[1].len =  sizeof(buf1);
    8db4:	e58de0c0 	str	lr, [sp, #192]	; 0xc0
	msg.num_iov = 2;
    8db8:	e3a0e002 	mov	lr, #2
	msg.num_handles = 0;
    8dbc:	e58dc08c 	str	ip, [sp, #140]	; 0x8c
	msg.handles = NULL;
    8dc0:	e58dc090 	str	ip, [sp, #144]	; 0x90
	msg.num_iov = 2;
    8dc4:	e58de084 	str	lr, [sp, #132]	; 0x84
	iov[1].base = buf1;
    8dc8:	e58db0bc 	str	fp, [sp, #188]	; 0xbc
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "datasink");
    8dcc:	eb002db9 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    8dd0:	e1a00004 	mov	r0, r4
    8dd4:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    8dd8:	eb00124f 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    8ddc:	e51f2410 	ldr	r2, [pc, #-1040]	; 89d4 <main+0x9c8>
    8de0:	e2505000 	subs	r5, r0, #0
    8de4:	e08f2002 	add	r2, pc, r2
    8de8:	e5923000 	ldr	r3, [r2]
    8dec:	e2833001 	add	r3, r3, #1
    8df0:	e5823000 	str	r3, [r2]
    8df4:	ba000dda 	blt	c564 <main+0x4558>
				EXPECT_EQ (NO_ERROR, rc, "waiting for space");
    8df8:	e51f7428 	ldr	r7, [pc, #-1064]	; 89d8 <main+0x9cc>
		chan = (handle_t) rc;
    8dfc:	e3028710 	movw	r8, #10000	; 0x2710
				EXPECT_EQ (chan, uevt.handle, "waiting for space");
    8e00:	e51f442c 	ldr	r4, [pc, #-1068]	; 89dc <main+0x9d0>
				EXPECT_EQ (64, rc, "send_msg bulk")
    8e04:	e51f342c 	ldr	r3, [pc, #-1068]	; 89e0 <main+0x9d4>
				EXPECT_EQ (NO_ERROR, rc, "waiting for space");
    8e08:	e08f7007 	add	r7, pc, r7
				EXPECT_EQ (chan, uevt.handle, "waiting for space");
    8e0c:	e08f4004 	add	r4, pc, r4
    8e10:	e58d9014 	str	r9, [sp, #20]
				EXPECT_EQ (64, rc, "send_msg bulk")
    8e14:	e08f3003 	add	r3, pc, r3
    8e18:	e58d3018 	str	r3, [sp, #24]
			rc = send_msg(chan, &msg);
    8e1c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    8e20:	e1a00005 	mov	r0, r5
    8e24:	eb00288c 	bl	1305c <send_msg>
    8e28:	e1a06000 	mov	r6, r0
			if (rc == ERR_NOT_ENOUGH_BUFFER) { /* wait for room */
    8e2c:	e3700009 	cmn	r0, #9
    8e30:	1a000b3f 	bne	bb34 <main+0x3b28>
				rc = wait(chan, &uevt, 1000);
    8e34:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    8e38:	e28d1068 	add	r1, sp, #104	; 0x68
    8e3c:	e1a00005 	mov	r0, r5
    8e40:	eb002876 	bl	13020 <wait>
				EXPECT_EQ (NO_ERROR, rc, "waiting for space");
    8e44:	e5973000 	ldr	r3, [r7]
    8e48:	e2506000 	subs	r6, r0, #0
    8e4c:	e2833001 	add	r3, r3, #1
    8e50:	03a09001 	moveq	r9, #1
    8e54:	e5873000 	str	r3, [r7]
    8e58:	1a000b08 	bne	ba80 <main+0x3a74>
				EXPECT_EQ (chan, uevt.handle, "waiting for space");
    8e5c:	e59d2068 	ldr	r2, [sp, #104]	; 0x68
    8e60:	e2831001 	add	r1, r3, #1
    8e64:	e5841000 	str	r1, [r4]
    8e68:	e1550002 	cmp	r5, r2
    8e6c:	0a000aea 	beq	ba1c <main+0x3a10>
    8e70:	e51f1494 	ldr	r1, [pc, #-1172]	; 89e4 <main+0x9d8>
    8e74:	e3003429 	movw	r3, #1065	; 0x429
    8e78:	e58d2008 	str	r2, [sp, #8]
    8e7c:	e28a0028 	add	r0, sl, #40	; 0x28
    8e80:	e08f1001 	add	r1, pc, r1
    8e84:	e51f24a4 	ldr	r2, [pc, #-1188]	; 89e8 <main+0x9dc>
    8e88:	e58d1000 	str	r1, [sp]
    8e8c:	e51f14a8 	ldr	r1, [pc, #-1192]	; 89ec <main+0x9e0>
    8e90:	e08f2002 	add	r2, pc, r2
    8e94:	e58d5004 	str	r5, [sp, #4]
    8e98:	e08f1001 	add	r1, pc, r1
    8e9c:	e59d9014 	ldr	r9, [sp, #20]
    8ea0:	eb002dac 	bl	14558 <fprintf>
    8ea4:	e51f14bc 	ldr	r1, [pc, #-1212]	; 89f0 <main+0x9e4>
				EXPECT_EQ (exp_event, uevt.event,  "waiting for space");
    8ea8:	e5943000 	ldr	r3, [r4]
				EXPECT_EQ (chan, uevt.handle, "waiting for space");
    8eac:	e08f1001 	add	r1, pc, r1
				EXPECT_EQ (exp_event, uevt.event,  "waiting for space");
    8eb0:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    8eb4:	e2833001 	add	r3, r3, #1
    8eb8:	e5843000 	str	r3, [r4]
    8ebc:	e3520010 	cmp	r2, #16
				EXPECT_EQ (chan, uevt.handle, "waiting for space");
    8ec0:	e5913000 	ldr	r3, [r1]
    8ec4:	e2833001 	add	r3, r3, #1
    8ec8:	e5813000 	str	r3, [r1]
				EXPECT_EQ (exp_event, uevt.event,  "waiting for space");
    8ecc:	1a000ad8 	bne	ba34 <main+0x3a28>
				TLOGI("%s: abort (rc = %d) test\n", __func__, rc);
    8ed0:	e51f24e4 	ldr	r2, [pc, #-1252]	; 89f4 <main+0x9e8>
    8ed4:	e300342f 	movw	r3, #1071	; 0x42f
    8ed8:	e51f14e8 	ldr	r1, [pc, #-1256]	; 89f8 <main+0x9ec>
    8edc:	e28a0028 	add	r0, sl, #40	; 0x28
    8ee0:	e08f2002 	add	r2, pc, r2
    8ee4:	e58d2000 	str	r2, [sp]
    8ee8:	e51f24f4 	ldr	r2, [pc, #-1268]	; 89fc <main+0x9f0>
    8eec:	e08f1001 	add	r1, pc, r1
    8ef0:	e58d6004 	str	r6, [sp, #4]
    8ef4:	e08f2002 	add	r2, pc, r2
    8ef8:	eb002d96 	bl	14558 <fprintf>
		rc = close (chan);
    8efc:	e1a00005 	mov	r0, r5
    8f00:	eb002840 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close channel");
    8f04:	e51f250c 	ldr	r2, [pc, #-1292]	; 8a00 <main+0x9f4>
    8f08:	e3500000 	cmp	r0, #0
    8f0c:	e08f2002 	add	r2, pc, r2
    8f10:	e5923000 	ldr	r3, [r2]
    8f14:	e2833001 	add	r3, r3, #1
    8f18:	e5823000 	str	r3, [r2]
    8f1c:	1a000d7d 	bne	c518 <main+0x450c>
	TEST_END
    8f20:	e51f2524 	ldr	r2, [pc, #-1316]	; 8a04 <main+0x9f8>
    8f24:	e3003437 	movw	r3, #1079	; 0x437
    8f28:	e51f1528 	ldr	r1, [pc, #-1320]	; 8a08 <main+0x9fc>
    8f2c:	e28a0028 	add	r0, sl, #40	; 0x28
    8f30:	e08f2002 	add	r2, pc, r2
    8f34:	e58d2000 	str	r2, [sp]
    8f38:	e51f2534 	ldr	r2, [pc, #-1332]	; 8a0c <main+0xa00>
    8f3c:	e08f1001 	add	r1, pc, r1
    8f40:	e08f2002 	add	r2, pc, r2
    8f44:	eb002d83 	bl	14558 <fprintf>
	run_end_to_end_msg_test();
    8f48:	eb0014b1 	bl	e214 <run_end_to_end_msg_test>
	run_connect_close_by_peer_test("closer1");
    8f4c:	e51f0544 	ldr	r0, [pc, #-1348]	; 8a10 <main+0xa04>
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    8f50:	e28d60a4 	add	r6, sp, #164	; 0xa4
	TEST_BEGIN(__func__);
    8f54:	e51f8548 	ldr	r8, [pc, #-1352]	; 8a14 <main+0xa08>
	run_connect_close_by_peer_test("closer1");
    8f58:	e08f0000 	add	r0, pc, r0
	TEST_BEGIN(__func__);
    8f5c:	e28a7028 	add	r7, sl, #40	; 0x28
	run_connect_close_by_peer_test("closer1");
    8f60:	eb00176c 	bl	ed18 <run_connect_close_by_peer_test>
	run_connect_close_by_peer_test("closer2");
    8f64:	e51f0554 	ldr	r0, [pc, #-1364]	; 8a18 <main+0xa0c>
	TEST_BEGIN(__func__);
    8f68:	e08f8008 	add	r8, pc, r8
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    8f6c:	e3a04000 	mov	r4, #0
	run_connect_close_by_peer_test("closer2");
    8f70:	e08f0000 	add	r0, pc, r0
	EXPECT_GE_ZERO (rc, "selfie");
    8f74:	e51f5560 	ldr	r5, [pc, #-1376]	; 8a1c <main+0xa10>
	run_connect_close_by_peer_test("closer2");
    8f78:	eb001766 	bl	ed18 <run_connect_close_by_peer_test>
	run_connect_close_by_peer_test("closer3");
    8f7c:	e51f0564 	ldr	r0, [pc, #-1380]	; 8a20 <main+0xa14>
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    8f80:	e58d6018 	str	r6, [sp, #24]
	EXPECT_GE_ZERO (rc, "selfie");
    8f84:	e08f5005 	add	r5, pc, r5
	run_connect_close_by_peer_test("closer3");
    8f88:	e08f0000 	add	r0, pc, r0
    8f8c:	eb001761 	bl	ed18 <run_connect_close_by_peer_test>
	TEST_BEGIN(__func__);
    8f90:	e51f1574 	ldr	r1, [pc, #-1396]	; 8a24 <main+0xa18>
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    8f94:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
	TEST_BEGIN(__func__);
    8f98:	e1a02008 	mov	r2, r8
    8f9c:	e08f1001 	add	r1, pc, r1
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "selfie");
    8fa0:	e51f3580 	ldr	r3, [pc, #-1408]	; 8a28 <main+0xa1c>
	TEST_BEGIN(__func__);
    8fa4:	e58d1000 	str	r1, [sp]
    8fa8:	e1a00007 	mov	r0, r7
    8fac:	e51f1588 	ldr	r1, [pc, #-1416]	; 8a2c <main+0xa20>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "selfie");
    8fb0:	e08f3003 	add	r3, pc, r3
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    8fb4:	e58c4000 	str	r4, [ip]
    8fb8:	e58c4004 	str	r4, [ip, #4]
	TEST_BEGIN(__func__);
    8fbc:	e08f1001 	add	r1, pc, r1
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    8fc0:	e58c4008 	str	r4, [ip, #8]
    8fc4:	e58c400c 	str	r4, [ip, #12]
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "selfie");
    8fc8:	e58d3014 	str	r3, [sp, #20]
	TEST_BEGIN(__func__);
    8fcc:	e3003291 	movw	r3, #657	; 0x291
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    8fd0:	e5864004 	str	r4, [r6, #4]
    8fd4:	e5864008 	str	r4, [r6, #8]
    8fd8:	e586400c 	str	r4, [r6, #12]
    8fdc:	e58d40a4 	str	r4, [sp, #164]	; 0xa4
	TEST_BEGIN(__func__);
    8fe0:	eb002d5c 	bl	14558 <fprintf>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE, "selfie");
    8fe4:	e51f25bc 	ldr	r2, [pc, #-1468]	; 8a30 <main+0xa24>
    8fe8:	e1a0000b 	mov	r0, fp
    8fec:	e51f15c0 	ldr	r1, [pc, #-1472]	; 8a34 <main+0xa28>
    8ff0:	e59d3014 	ldr	r3, [sp, #20]
    8ff4:	e08f2002 	add	r2, pc, r2
    8ff8:	e08f1001 	add	r1, pc, r1
    8ffc:	eb002d2d 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE,
    9000:	e3a03001 	mov	r3, #1
    9004:	e3a02a01 	mov	r2, #4096	; 0x1000
    9008:	e3a01002 	mov	r1, #2
    900c:	e1a0000b 	mov	r0, fp
    9010:	eb0027f3 	bl	12fe4 <port_create>
	EXPECT_GE_ZERO (rc, "selfie");
    9014:	e5953000 	ldr	r3, [r5]
    9018:	e2506000 	subs	r6, r0, #0
    901c:	e2833001 	add	r3, r3, #1
    9020:	e5853000 	str	r3, [r5]
    9024:	ba000d2c 	blt	c4dc <main+0x44d0>
		rc = sync_connect (path, connect_timeout);
    9028:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    902c:	e1a0000b 	mov	r0, fp
    9030:	eb0011b9 	bl	d71c <sync_connect>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    9034:	e5953000 	ldr	r3, [r5]
    9038:	e370000d 	cmn	r0, #13
    903c:	e2833001 	add	r3, r3, #1
    9040:	e5853000 	str	r3, [r5]
	TEST_BEGIN(__func__);
    9044:	03a05001 	moveq	r5, #1
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    9048:	0a000010 	beq	9090 <main+0x1084>
    904c:	e3e0100c 	mvn	r1, #12
    9050:	e58d1004 	str	r1, [sp, #4]
    9054:	e51f1624 	ldr	r1, [pc, #-1572]	; 8a38 <main+0xa2c>
    9058:	e1a02008 	mov	r2, r8
    905c:	e59d3014 	ldr	r3, [sp, #20]
    9060:	e1a05004 	mov	r5, r4
    9064:	e58d0008 	str	r0, [sp, #8]
    9068:	e08f1001 	add	r1, pc, r1
    906c:	e58d3000 	str	r3, [sp]
    9070:	e1a00007 	mov	r0, r7
    9074:	e3a03fa9 	mov	r3, #676	; 0x2a4
    9078:	eb002d36 	bl	14558 <fprintf>
    907c:	e51f2648 	ldr	r2, [pc, #-1608]	; 8a3c <main+0xa30>
    9080:	e08f2002 	add	r2, pc, r2
    9084:	e5923000 	ldr	r3, [r2]
    9088:	e2833001 	add	r3, r3, #1
    908c:	e5823000 	str	r3, [r2]
		rc = sync_connect (path, 0);
    9090:	e3a01000 	mov	r1, #0
    9094:	e1a0000b 	mov	r0, fp
    9098:	eb00119f 	bl	d71c <sync_connect>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    909c:	e51f2664 	ldr	r2, [pc, #-1636]	; 8a40 <main+0xa34>
    90a0:	e370000d 	cmn	r0, #13
    90a4:	e08f2002 	add	r2, pc, r2
    90a8:	e5923000 	ldr	r3, [r2]
    90ac:	e2833001 	add	r3, r3, #1
    90b0:	e5823000 	str	r3, [r2]
    90b4:	0a000012 	beq	9104 <main+0x10f8>
    90b8:	e51f267c 	ldr	r2, [pc, #-1660]	; 8a44 <main+0xa38>
    90bc:	e3e0100c 	mvn	r1, #12
    90c0:	e58d1004 	str	r1, [sp, #4]
    90c4:	e3a03faa 	mov	r3, #680	; 0x2a8
    90c8:	e08f2002 	add	r2, pc, r2
    90cc:	e51f168c 	ldr	r1, [pc, #-1676]	; 8a48 <main+0xa3c>
    90d0:	e58d2000 	str	r2, [sp]
    90d4:	e3a05000 	mov	r5, #0
    90d8:	e51f2694 	ldr	r2, [pc, #-1684]	; 8a4c <main+0xa40>
    90dc:	e08f1001 	add	r1, pc, r1
    90e0:	e58d0008 	str	r0, [sp, #8]
    90e4:	e28a0028 	add	r0, sl, #40	; 0x28
    90e8:	e08f2002 	add	r2, pc, r2
    90ec:	eb002d19 	bl	14558 <fprintf>
    90f0:	e51f26a8 	ldr	r2, [pc, #-1704]	; 8a50 <main+0xa44>
    90f4:	e08f2002 	add	r2, pc, r2
    90f8:	e5923000 	ldr	r3, [r2]
    90fc:	e2833001 	add	r3, r3, #1
    9100:	e5823000 	str	r3, [r2]
		int rc = wait_any(&event, -1);
    9104:	e3e01000 	mvn	r1, #0
    9108:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
    910c:	eb0027c6 	bl	1302c <wait_any>
		EXPECT_EQ (NO_ERROR, rc, "wait on port");
    9110:	e51f26c4 	ldr	r2, [pc, #-1732]	; 8a54 <main+0xa48>
    9114:	e2504000 	subs	r4, r0, #0
    9118:	e08f2002 	add	r2, pc, r2
    911c:	e5923000 	ldr	r3, [r2]
    9120:	e2833001 	add	r3, r3, #1
    9124:	e5823000 	str	r3, [r2]
    9128:	0a000011 	beq	9174 <main+0x1168>
    912c:	e51f26dc 	ldr	r2, [pc, #-1756]	; 8a58 <main+0xa4c>
    9130:	e30032b2 	movw	r3, #690	; 0x2b2
    9134:	e51f16e0 	ldr	r1, [pc, #-1760]	; 8a5c <main+0xa50>
    9138:	e3a05000 	mov	r5, #0
    913c:	e08f2002 	add	r2, pc, r2
    9140:	e58d2000 	str	r2, [sp]
    9144:	e51f26ec 	ldr	r2, [pc, #-1772]	; 8a60 <main+0xa54>
    9148:	e28a0028 	add	r0, sl, #40	; 0x28
    914c:	e58d4008 	str	r4, [sp, #8]
    9150:	e08f1001 	add	r1, pc, r1
    9154:	e08f2002 	add	r2, pc, r2
    9158:	e58d5004 	str	r5, [sp, #4]
    915c:	eb002cfd 	bl	14558 <fprintf>
    9160:	e51f2704 	ldr	r2, [pc, #-1796]	; 8a64 <main+0xa58>
    9164:	e08f2002 	add	r2, pc, r2
    9168:	e5923000 	ldr	r3, [r2]
    916c:	e2833001 	add	r3, r3, #1
    9170:	e5823000 	str	r3, [r2]
		EXPECT_EQ (test_port, event.handle, "wait on port");
    9174:	e51f2714 	ldr	r2, [pc, #-1812]	; 8a68 <main+0xa5c>
    9178:	e59d1084 	ldr	r1, [sp, #132]	; 0x84
    917c:	e08f2002 	add	r2, pc, r2
    9180:	e1560001 	cmp	r6, r1
    9184:	e5923000 	ldr	r3, [r2]
    9188:	e2833001 	add	r3, r3, #1
    918c:	e5823000 	str	r3, [r2]
    9190:	0a000011 	beq	91dc <main+0x11d0>
    9194:	e51f2730 	ldr	r2, [pc, #-1840]	; 8a6c <main+0xa60>
    9198:	e30032b3 	movw	r3, #691	; 0x2b3
    919c:	e58d1008 	str	r1, [sp, #8]
    91a0:	e28a0028 	add	r0, sl, #40	; 0x28
    91a4:	e08f2002 	add	r2, pc, r2
    91a8:	e51f1740 	ldr	r1, [pc, #-1856]	; 8a70 <main+0xa64>
    91ac:	e58d2000 	str	r2, [sp]
    91b0:	e3a05000 	mov	r5, #0
    91b4:	e51f2748 	ldr	r2, [pc, #-1864]	; 8a74 <main+0xa68>
    91b8:	e08f1001 	add	r1, pc, r1
    91bc:	e58d6004 	str	r6, [sp, #4]
    91c0:	e08f2002 	add	r2, pc, r2
    91c4:	eb002ce3 	bl	14558 <fprintf>
    91c8:	e51f2758 	ldr	r2, [pc, #-1880]	; 8a78 <main+0xa6c>
    91cc:	e08f2002 	add	r2, pc, r2
    91d0:	e5923000 	ldr	r3, [r2]
    91d4:	e2833001 	add	r3, r3, #1
    91d8:	e5823000 	str	r3, [r2]
		EXPECT_EQ (exp_event, event.event,  "wait on port");
    91dc:	e51f2768 	ldr	r2, [pc, #-1896]	; 8a7c <main+0xa70>
    91e0:	e59d1088 	ldr	r1, [sp, #136]	; 0x88
    91e4:	e08f2002 	add	r2, pc, r2
    91e8:	e3510001 	cmp	r1, #1
    91ec:	e5923000 	ldr	r3, [r2]
    91f0:	e2833001 	add	r3, r3, #1
    91f4:	e5823000 	str	r3, [r2]
    91f8:	0a000b3a 	beq	bee8 <main+0x3edc>
    91fc:	e51f2784 	ldr	r2, [pc, #-1924]	; 8a80 <main+0xa74>
    9200:	e3a0c001 	mov	ip, #1
    9204:	e58d1008 	str	r1, [sp, #8]
    9208:	e3a03fad 	mov	r3, #692	; 0x2b4
    920c:	e08f2002 	add	r2, pc, r2
    9210:	e51f1794 	ldr	r1, [pc, #-1940]	; 8a84 <main+0xa78>
    9214:	e58d2000 	str	r2, [sp]
    9218:	e28a0028 	add	r0, sl, #40	; 0x28
    921c:	e51f279c 	ldr	r2, [pc, #-1948]	; 8a88 <main+0xa7c>
    9220:	e08f1001 	add	r1, pc, r1
    9224:	e58dc004 	str	ip, [sp, #4]
    9228:	e08f2002 	add	r2, pc, r2
    922c:	eb002cc9 	bl	14558 <fprintf>
    9230:	e51f27ac 	ldr	r2, [pc, #-1964]	; 8a8c <main+0xa80>
		if (rc == NO_ERROR && (event.event & IPC_HANDLE_POLL_READY)) {
    9234:	e3540000 	cmp	r4, #0
		EXPECT_EQ (exp_event, event.event,  "wait on port");
    9238:	e08f2002 	add	r2, pc, r2
    923c:	13a05000 	movne	r5, #0
    9240:	e5923000 	ldr	r3, [r2]
    9244:	e2833001 	add	r3, r3, #1
    9248:	e5823000 	str	r3, [r2]
		if (rc == NO_ERROR && (event.event & IPC_HANDLE_POLL_READY)) {
    924c:	1a000003 	bne	9260 <main+0x1254>
    9250:	e59d3088 	ldr	r3, [sp, #136]	; 0x88
		EXPECT_EQ (exp_event, event.event,  "wait on port");
    9254:	e1a05004 	mov	r5, r4
		if (rc == NO_ERROR && (event.event & IPC_HANDLE_POLL_READY)) {
    9258:	e3130001 	tst	r3, #1
    925c:	1a000b23 	bne	bef0 <main+0x3ee4>
		rc = sync_connect (path, 0);
    9260:	e3a01000 	mov	r1, #0
    9264:	e1a0000b 	mov	r0, fp
    9268:	eb00112b 	bl	d71c <sync_connect>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    926c:	e51f27e4 	ldr	r2, [pc, #-2020]	; 8a90 <main+0xa84>
    9270:	e370000d 	cmn	r0, #13
    9274:	e08f2002 	add	r2, pc, r2
    9278:	e5923000 	ldr	r3, [r2]
    927c:	e2833001 	add	r3, r3, #1
    9280:	e5823000 	str	r3, [r2]
    9284:	0a000012 	beq	92d4 <main+0x12c8>
    9288:	e51f27fc 	ldr	r2, [pc, #-2044]	; 8a94 <main+0xa88>
    928c:	e3e0100c 	mvn	r1, #12
    9290:	e58d1004 	str	r1, [sp, #4]
    9294:	e30032d1 	movw	r3, #721	; 0x2d1
    9298:	e08f2002 	add	r2, pc, r2
    929c:	e51f180c 	ldr	r1, [pc, #-2060]	; 8a98 <main+0xa8c>
    92a0:	e58d2000 	str	r2, [sp]
    92a4:	e3a05000 	mov	r5, #0
    92a8:	e51f2814 	ldr	r2, [pc, #-2068]	; 8a9c <main+0xa90>
    92ac:	e08f1001 	add	r1, pc, r1
    92b0:	e58d0008 	str	r0, [sp, #8]
    92b4:	e28a0028 	add	r0, sl, #40	; 0x28
    92b8:	e08f2002 	add	r2, pc, r2
    92bc:	eb002ca5 	bl	14558 <fprintf>
    92c0:	e51f2828 	ldr	r2, [pc, #-2088]	; 8aa0 <main+0xa94>
    92c4:	e08f2002 	add	r2, pc, r2
    92c8:	e5923000 	ldr	r3, [r2]
    92cc:	e2833001 	add	r3, r3, #1
    92d0:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    92d4:	e51f4838 	ldr	r4, [pc, #-2104]	; 8aa4 <main+0xa98>
		rc = sync_connect (path, 0);
    92d8:	e3a01000 	mov	r1, #0
    92dc:	e1a0000b 	mov	r0, fp
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    92e0:	e08f4004 	add	r4, pc, r4
		rc = sync_connect (path, 0);
    92e4:	eb00110c 	bl	d71c <sync_connect>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    92e8:	e370000d 	cmn	r0, #13
    92ec:	e5943000 	ldr	r3, [r4]
    92f0:	e2833001 	add	r3, r3, #1
    92f4:	e5843000 	str	r3, [r4]
    92f8:	0a000ad3 	beq	be4c <main+0x3e40>
    92fc:	e51f285c 	ldr	r2, [pc, #-2140]	; 8aa8 <main+0xa9c>
    9300:	e3e0100c 	mvn	r1, #12
    9304:	e58d1004 	str	r1, [sp, #4]
    9308:	e3a03fb5 	mov	r3, #724	; 0x2d4
    930c:	e08f2002 	add	r2, pc, r2
    9310:	e51f186c 	ldr	r1, [pc, #-2156]	; 8aac <main+0xaa0>
    9314:	e58d2000 	str	r2, [sp]
    9318:	e51f2870 	ldr	r2, [pc, #-2160]	; 8ab0 <main+0xaa4>
    931c:	e08f1001 	add	r1, pc, r1
    9320:	e58d0008 	str	r0, [sp, #8]
    9324:	e28a0028 	add	r0, sl, #40	; 0x28
    9328:	e08f2002 	add	r2, pc, r2
    932c:	eb002c89 	bl	14558 <fprintf>
    9330:	e51f2884 	ldr	r2, [pc, #-2180]	; 8ab4 <main+0xaa8>
		rc = close (test_port);
    9334:	e1a00006 	mov	r0, r6
		EXPECT_EQ (ERR_TIMED_OUT, rc, "selfie");
    9338:	e08f2002 	add	r2, pc, r2
    933c:	e5923000 	ldr	r3, [r2]
    9340:	e2833001 	add	r3, r3, #1
    9344:	e5823000 	str	r3, [r2]
		rc = close (test_port);
    9348:	eb00272e 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close selfie");
    934c:	e5943000 	ldr	r3, [r4]
    9350:	e3500000 	cmp	r0, #0
    9354:	e2833001 	add	r3, r3, #1
    9358:	e5843000 	str	r3, [r4]
    935c:	1a000c91 	bne	c5a8 <main+0x459c>
	TEST_END
    9360:	e51f28b0 	ldr	r2, [pc, #-2224]	; 8ab8 <main+0xaac>
    9364:	e30032db 	movw	r3, #731	; 0x2db
    9368:	e51f18b4 	ldr	r1, [pc, #-2228]	; 8abc <main+0xab0>
    936c:	e28a0028 	add	r0, sl, #40	; 0x28
    9370:	e08f2002 	add	r2, pc, r2
    9374:	e58d2000 	str	r2, [sp]
    9378:	e51f28c0 	ldr	r2, [pc, #-2240]	; 8ac0 <main+0xab4>
    937c:	e08f1001 	add	r1, pc, r1
    9380:	e08f2002 	add	r2, pc, r2
    9384:	eb002c73 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    9388:	e51f78cc 	ldr	r7, [pc, #-2252]	; 8ac4 <main+0xab8>
    938c:	e28a6028 	add	r6, sl, #40	; 0x28
    9390:	e51fc8d0 	ldr	ip, [pc, #-2256]	; 8ac8 <main+0xabc>
    9394:	e30032e3 	movw	r3, #739	; 0x2e3
    9398:	e51f18d4 	ldr	r1, [pc, #-2260]	; 8acc <main+0xac0>
    939c:	e08f7007 	add	r7, pc, r7
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ns_only");
    93a0:	e51f58d8 	ldr	r5, [pc, #-2264]	; 8ad0 <main+0xac4>
	TEST_BEGIN(__func__);
    93a4:	e08fc00c 	add	ip, pc, ip
    93a8:	e1a02007 	mov	r2, r7
    93ac:	e58dc000 	str	ip, [sp]
    93b0:	e08f1001 	add	r1, pc, r1
    93b4:	e1a00006 	mov	r0, r6
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ns_only");
    93b8:	e51f88ec 	ldr	r8, [pc, #-2284]	; 8ad4 <main+0xac8>
    93bc:	e08f5005 	add	r5, pc, r5
	EXPECT_EQ(ERR_ACCESS_DENIED, rc, "connect to ns_only");
    93c0:	e51f48f0 	ldr	r4, [pc, #-2288]	; 8ad8 <main+0xacc>
	TEST_BEGIN(__func__);
    93c4:	e58dc014 	str	ip, [sp, #20]
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ns_only");
    93c8:	e08f8008 	add	r8, pc, r8
    93cc:	e58d5024 	str	r5, [sp, #36]	; 0x24
	TEST_BEGIN(__func__);
    93d0:	eb002c60 	bl	14558 <fprintf>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ns_only");
    93d4:	e51f3900 	ldr	r3, [pc, #-2304]	; 8adc <main+0xad0>
	EXPECT_EQ(ERR_ACCESS_DENIED, rc, "connect to ns_only");
    93d8:	e08f4004 	add	r4, pc, r4
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ns_only");
    93dc:	e1a01005 	mov	r1, r5
    93e0:	e1a02008 	mov	r2, r8
    93e4:	e08f3003 	add	r3, pc, r3
    93e8:	e1a0000b 	mov	r0, fp
    93ec:	eb002c31 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    93f0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    93f4:	e1a0000b 	mov	r0, fp
    93f8:	eb0010c7 	bl	d71c <sync_connect>
	EXPECT_EQ(ERR_ACCESS_DENIED, rc, "connect to ns_only");
    93fc:	e5943000 	ldr	r3, [r4]
	rc = sync_connect(path, 1000);
    9400:	e1a05000 	mov	r5, r0
	EXPECT_EQ(ERR_ACCESS_DENIED, rc, "connect to ns_only");
    9404:	e370002b 	cmn	r0, #43	; 0x2b
    9408:	e2833001 	add	r3, r3, #1
    940c:	e5843000 	str	r3, [r4]
    9410:	0a000a6a 	beq	bdc0 <main+0x3db4>
    9414:	e3e0102a 	mvn	r1, #42	; 0x2a
    9418:	e51f3940 	ldr	r3, [pc, #-2368]	; 8ae0 <main+0xad4>
    941c:	e58d1004 	str	r1, [sp, #4]
    9420:	e1a02007 	mov	r2, r7
    9424:	e51f1948 	ldr	r1, [pc, #-2376]	; 8ae4 <main+0xad8>
    9428:	e08f3003 	add	r3, pc, r3
    942c:	e58d0008 	str	r0, [sp, #8]
    9430:	e1a00006 	mov	r0, r6
    9434:	e58d3000 	str	r3, [sp]
    9438:	e08f1001 	add	r1, pc, r1
    943c:	e30032ea 	movw	r3, #746	; 0x2ea
    9440:	eb002c44 	bl	14558 <fprintf>
    9444:	e51f2964 	ldr	r2, [pc, #-2404]	; 8ae8 <main+0xadc>
	if (rc >= 0)
    9448:	e3550000 	cmp	r5, #0
	EXPECT_EQ(ERR_ACCESS_DENIED, rc, "connect to ns_only");
    944c:	e08f2002 	add	r2, pc, r2
    9450:	e5923000 	ldr	r3, [r2]
    9454:	e2833001 	add	r3, r3, #1
    9458:	e5823000 	str	r3, [r2]
	if (rc >= 0)
    945c:	ba000001 	blt	9468 <main+0x145c>
		close((handle_t)rc);
    9460:	e1a00005 	mov	r0, r5
    9464:	eb0026e7 	bl	13008 <close>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ta_only");
    9468:	e51f3984 	ldr	r3, [pc, #-2436]	; 8aec <main+0xae0>
    946c:	e1a0000b 	mov	r0, fp
    9470:	e51f2988 	ldr	r2, [pc, #-2440]	; 8af0 <main+0xae4>
    9474:	e51f1988 	ldr	r1, [pc, #-2440]	; 8af4 <main+0xae8>
    9478:	e08f3003 	add	r3, pc, r3
    947c:	e08f2002 	add	r2, pc, r2
    9480:	e08f1001 	add	r1, pc, r1
    9484:	eb002c0b 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    9488:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    948c:	e1a0000b 	mov	r0, fp
    9490:	eb0010a1 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO(rc, "connect to ta_only");
    9494:	e51f19a4 	ldr	r1, [pc, #-2468]	; 8af8 <main+0xaec>
    9498:	e2502000 	subs	r2, r0, #0
    949c:	e08f1001 	add	r1, pc, r1
    94a0:	e5913000 	ldr	r3, [r1]
    94a4:	e2833001 	add	r3, r3, #1
    94a8:	e5813000 	str	r3, [r1]
    94ac:	ba000c62 	blt	c63c <main+0x4630>
		close((handle_t)rc);
    94b0:	eb0026d4 	bl	13008 <close>
	TEST_END
    94b4:	e51f29c0 	ldr	r2, [pc, #-2496]	; 8afc <main+0xaf0>
    94b8:	e30032f9 	movw	r3, #761	; 0x2f9
    94bc:	e51f19c4 	ldr	r1, [pc, #-2500]	; 8b00 <main+0xaf4>
    94c0:	e28a0028 	add	r0, sl, #40	; 0x28
    94c4:	e08f2002 	add	r2, pc, r2
    94c8:	e58d2000 	str	r2, [sp]
    94cc:	e51f29d0 	ldr	r2, [pc, #-2512]	; 8b04 <main+0xaf8>
    94d0:	e08f1001 	add	r1, pc, r1
    94d4:	e08f2002 	add	r2, pc, r2
    94d8:	eb002c1e 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    94dc:	e51f49dc 	ldr	r4, [pc, #-2524]	; 8b08 <main+0xafc>
    94e0:	e28a5028 	add	r5, sl, #40	; 0x28
    94e4:	e51f39e0 	ldr	r3, [pc, #-2528]	; 8b0c <main+0xb00>
    94e8:	e1a00005 	mov	r0, r5
    94ec:	e51f19e4 	ldr	r1, [pc, #-2532]	; 8b10 <main+0xb04>
    94f0:	e08f4004 	add	r4, pc, r4
    94f4:	e08f3003 	add	r3, pc, r3
    94f8:	e1a02004 	mov	r2, r4
    94fc:	e58d3000 	str	r3, [sp]
    9500:	e08f1001 	add	r1, pc, r1
    9504:	e3a030a8 	mov	r3, #168	; 0xa8
    9508:	eb002c12 	bl	14558 <fprintf>
	rc = wait(INVALID_IPC_HANDLE, &event, timeout);
    950c:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    9510:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    9514:	e3e00000 	mvn	r0, #0
    9518:	eb0026c0 	bl	13020 <wait>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "wait on invalid handle");
    951c:	e51f2a10 	ldr	r2, [pc, #-2576]	; 8b14 <main+0xb08>
    9520:	e370002a 	cmn	r0, #42	; 0x2a
    9524:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    9528:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "wait on invalid handle");
    952c:	e5923000 	ldr	r3, [r2]
    9530:	e2833001 	add	r3, r3, #1
    9534:	e5823000 	str	r3, [r2]
    9538:	0a000011 	beq	9584 <main+0x1578>
    953c:	e3e01029 	mvn	r1, #41	; 0x29
    9540:	e51f3a30 	ldr	r3, [pc, #-2608]	; 8b18 <main+0xb0c>
    9544:	e58d1004 	str	r1, [sp, #4]
    9548:	e1a02004 	mov	r2, r4
    954c:	e51f1a38 	ldr	r1, [pc, #-2616]	; 8b1c <main+0xb10>
    9550:	e08f3003 	add	r3, pc, r3
    9554:	e58d0008 	str	r0, [sp, #8]
    9558:	e1a00005 	mov	r0, r5
    955c:	e58d3000 	str	r3, [sp]
    9560:	e08f1001 	add	r1, pc, r1
    9564:	e3a030ac 	mov	r3, #172	; 0xac
    9568:	e3a06000 	mov	r6, #0
    956c:	eb002bf9 	bl	14558 <fprintf>
    9570:	e51f2a58 	ldr	r2, [pc, #-2648]	; 8b20 <main+0xb14>
    9574:	e08f2002 	add	r2, pc, r2
    9578:	e5923000 	ldr	r3, [r2]
    957c:	e2833001 	add	r3, r3, #1
    9580:	e5823000 	str	r3, [r2]
	rc = wait(MAX_USER_HANDLES, &event, timeout);
    9584:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    9588:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    958c:	e3a00080 	mov	r0, #128	; 0x80
    9590:	eb0026a2 	bl	13020 <wait>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "wait on invalid handle");
    9594:	e51f2a78 	ldr	r2, [pc, #-2680]	; 8b24 <main+0xb18>
    9598:	e370002a 	cmn	r0, #42	; 0x2a
    959c:	e08f2002 	add	r2, pc, r2
    95a0:	e5923000 	ldr	r3, [r2]
    95a4:	e2833001 	add	r3, r3, #1
    95a8:	e5823000 	str	r3, [r2]
    95ac:	0a000012 	beq	95fc <main+0x15f0>
    95b0:	e51f2a90 	ldr	r2, [pc, #-2704]	; 8b28 <main+0xb1c>
    95b4:	e3e01029 	mvn	r1, #41	; 0x29
    95b8:	e58d1004 	str	r1, [sp, #4]
    95bc:	e3a030b0 	mov	r3, #176	; 0xb0
    95c0:	e08f2002 	add	r2, pc, r2
    95c4:	e51f1aa0 	ldr	r1, [pc, #-2720]	; 8b2c <main+0xb20>
    95c8:	e58d2000 	str	r2, [sp]
    95cc:	e3a06000 	mov	r6, #0
    95d0:	e51f2aa8 	ldr	r2, [pc, #-2728]	; 8b30 <main+0xb24>
    95d4:	e08f1001 	add	r1, pc, r1
    95d8:	e58d0008 	str	r0, [sp, #8]
    95dc:	e28a0028 	add	r0, sl, #40	; 0x28
    95e0:	e08f2002 	add	r2, pc, r2
    95e4:	eb002bdb 	bl	14558 <fprintf>
    95e8:	e51f2abc 	ldr	r2, [pc, #-2748]	; 8b34 <main+0xb28>
    95ec:	e08f2002 	add	r2, pc, r2
    95f0:	e5923000 	ldr	r3, [r2]
    95f4:	e2833001 	add	r3, r3, #1
    95f8:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "wait on invalid handle");
    95fc:	e51f5acc 	ldr	r5, [pc, #-2764]	; 8b38 <main+0xb2c>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "wait on invalid handle");
    9600:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "wait on invalid handle");
    9604:	e51f8ad0 	ldr	r8, [pc, #-2768]	; 8b3c <main+0xb30>
    9608:	e51f7ad0 	ldr	r7, [pc, #-2768]	; 8b40 <main+0xb34>
    960c:	e08f5005 	add	r5, pc, r5
    9610:	e58d9014 	str	r9, [sp, #20]
    9614:	e08f8008 	add	r8, pc, r8
    9618:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
    961c:	e08f7007 	add	r7, pc, r7
		rc = wait(i, &event, timeout);
    9620:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    9624:	e1a01009 	mov	r1, r9
    9628:	e1a00004 	mov	r0, r4
    962c:	eb00267b 	bl	13020 <wait>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "wait on invalid handle");
    9630:	e5953000 	ldr	r3, [r5]
    9634:	e3700002 	cmn	r0, #2
    9638:	e2833001 	add	r3, r3, #1
    963c:	e5853000 	str	r3, [r5]
    9640:	0a000010 	beq	9688 <main+0x167c>
    9644:	e51f2b08 	ldr	r2, [pc, #-2824]	; 8b44 <main+0xb38>
    9648:	e3e01001 	mvn	r1, #1
    964c:	e58d0008 	str	r0, [sp, #8]
    9650:	e3a030b5 	mov	r3, #181	; 0xb5
    9654:	e08f2002 	add	r2, pc, r2
    9658:	e58d1004 	str	r1, [sp, #4]
    965c:	e58d2000 	str	r2, [sp]
    9660:	e1a01007 	mov	r1, r7
    9664:	e1a02008 	mov	r2, r8
    9668:	e28a0028 	add	r0, sl, #40	; 0x28
    966c:	eb002bb9 	bl	14558 <fprintf>
    9670:	e51f2b30 	ldr	r2, [pc, #-2864]	; 8b48 <main+0xb3c>
    9674:	e3a06000 	mov	r6, #0
    9678:	e08f2002 	add	r2, pc, r2
    967c:	e5923000 	ldr	r3, [r2]
    9680:	e2833001 	add	r3, r3, #1
    9684:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    9688:	e2844001 	add	r4, r4, #1
    968c:	e3540080 	cmp	r4, #128	; 0x80
    9690:	1affffe2 	bne	9620 <main+0x1614>
    9694:	e59d9014 	ldr	r9, [sp, #20]
	TEST_END
    9698:	e3560000 	cmp	r6, #0
    969c:	1a0009bc 	bne	bd94 <main+0x3d88>
    96a0:	e51f2b5c 	ldr	r2, [pc, #-2908]	; 8b4c <main+0xb40>
    96a4:	e3a030b8 	mov	r3, #184	; 0xb8
    96a8:	e51f1b60 	ldr	r1, [pc, #-2912]	; 8b50 <main+0xb44>
    96ac:	e28a0028 	add	r0, sl, #40	; 0x28
    96b0:	e08f2002 	add	r2, pc, r2
    96b4:	e58d2000 	str	r2, [sp]
    96b8:	e51f2b6c 	ldr	r2, [pc, #-2924]	; 8b54 <main+0xb48>
    96bc:	e08f1001 	add	r1, pc, r1
    96c0:	e08f2002 	add	r2, pc, r2
    96c4:	eb002ba3 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    96c8:	e51f4b78 	ldr	r4, [pc, #-2936]	; 8b58 <main+0xb4c>
    96cc:	e28a5028 	add	r5, sl, #40	; 0x28
    96d0:	e51f3b7c 	ldr	r3, [pc, #-2940]	; 8b5c <main+0xb50>
    96d4:	e1a00005 	mov	r0, r5
    96d8:	e51f1b80 	ldr	r1, [pc, #-2944]	; 8b60 <main+0xb54>
    96dc:	e08f4004 	add	r4, pc, r4
    96e0:	e1a02004 	mov	r2, r4
    96e4:	e08f3003 	add	r3, pc, r3
    96e8:	e08f1001 	add	r1, pc, r1
    96ec:	e58d3000 	str	r3, [sp]
    96f0:	e3a030c2 	mov	r3, #194	; 0xc2
    96f4:	eb002b97 	bl	14558 <fprintf>
	rc = close(INVALID_IPC_HANDLE);
    96f8:	e3e00000 	mvn	r0, #0
    96fc:	eb002641 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "closing invalid handle");
    9700:	e51f2ba4 	ldr	r2, [pc, #-2980]	; 8b64 <main+0xb58>
    9704:	e370002a 	cmn	r0, #42	; 0x2a
    9708:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    970c:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "closing invalid handle");
    9710:	e5923000 	ldr	r3, [r2]
    9714:	e2833001 	add	r3, r3, #1
    9718:	e5823000 	str	r3, [r2]
    971c:	0a000011 	beq	9768 <main+0x175c>
    9720:	e3e01029 	mvn	r1, #41	; 0x29
    9724:	e51f3bc4 	ldr	r3, [pc, #-3012]	; 8b68 <main+0xb5c>
    9728:	e58d1004 	str	r1, [sp, #4]
    972c:	e1a02004 	mov	r2, r4
    9730:	e51f1bcc 	ldr	r1, [pc, #-3020]	; 8b6c <main+0xb60>
    9734:	e08f3003 	add	r3, pc, r3
    9738:	e58d0008 	str	r0, [sp, #8]
    973c:	e1a00005 	mov	r0, r5
    9740:	e58d3000 	str	r3, [sp]
    9744:	e08f1001 	add	r1, pc, r1
    9748:	e3a030c6 	mov	r3, #198	; 0xc6
    974c:	e3a06000 	mov	r6, #0
    9750:	eb002b80 	bl	14558 <fprintf>
    9754:	e51f2bec 	ldr	r2, [pc, #-3052]	; 8b70 <main+0xb64>
    9758:	e08f2002 	add	r2, pc, r2
    975c:	e5923000 	ldr	r3, [r2]
    9760:	e2833001 	add	r3, r3, #1
    9764:	e5823000 	str	r3, [r2]
	rc = close(MAX_USER_HANDLES);
    9768:	e3a00080 	mov	r0, #128	; 0x80
    976c:	eb002625 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "closing invalid handle");
    9770:	e51f2c04 	ldr	r2, [pc, #-3076]	; 8b74 <main+0xb68>
    9774:	e370002a 	cmn	r0, #42	; 0x2a
    9778:	e08f2002 	add	r2, pc, r2
    977c:	e5923000 	ldr	r3, [r2]
    9780:	e2833001 	add	r3, r3, #1
    9784:	e5823000 	str	r3, [r2]
    9788:	0a000012 	beq	97d8 <main+0x17cc>
    978c:	e51f2c1c 	ldr	r2, [pc, #-3100]	; 8b78 <main+0xb6c>
    9790:	e3e01029 	mvn	r1, #41	; 0x29
    9794:	e58d1004 	str	r1, [sp, #4]
    9798:	e3a030ca 	mov	r3, #202	; 0xca
    979c:	e08f2002 	add	r2, pc, r2
    97a0:	e51f1c2c 	ldr	r1, [pc, #-3116]	; 8b7c <main+0xb70>
    97a4:	e58d2000 	str	r2, [sp]
    97a8:	e3a06000 	mov	r6, #0
    97ac:	e51f2c34 	ldr	r2, [pc, #-3124]	; 8b80 <main+0xb74>
    97b0:	e08f1001 	add	r1, pc, r1
    97b4:	e58d0008 	str	r0, [sp, #8]
    97b8:	e28a0028 	add	r0, sl, #40	; 0x28
    97bc:	e08f2002 	add	r2, pc, r2
    97c0:	eb002b64 	bl	14558 <fprintf>
    97c4:	e51f2c48 	ldr	r2, [pc, #-3144]	; 8b84 <main+0xb78>
    97c8:	e08f2002 	add	r2, pc, r2
    97cc:	e5923000 	ldr	r3, [r2]
    97d0:	e2833001 	add	r3, r3, #1
    97d4:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "closing invalid handle");
    97d8:	e51f5c58 	ldr	r5, [pc, #-3160]	; 8b88 <main+0xb7c>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "closing invalid handle");
    97dc:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "closing invalid handle");
    97e0:	e51f8c5c 	ldr	r8, [pc, #-3164]	; 8b8c <main+0xb80>
    97e4:	e51f7c5c 	ldr	r7, [pc, #-3164]	; 8b90 <main+0xb84>
    97e8:	e08f5005 	add	r5, pc, r5
    97ec:	e08f8008 	add	r8, pc, r8
    97f0:	e08f7007 	add	r7, pc, r7
		rc = close(i);
    97f4:	e1a00004 	mov	r0, r4
    97f8:	eb002602 	bl	13008 <close>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "closing invalid handle");
    97fc:	e5953000 	ldr	r3, [r5]
    9800:	e3700002 	cmn	r0, #2
    9804:	e2833001 	add	r3, r3, #1
    9808:	e5853000 	str	r3, [r5]
    980c:	0a000010 	beq	9854 <main+0x1848>
    9810:	e51f2c84 	ldr	r2, [pc, #-3204]	; 8b94 <main+0xb88>
    9814:	e3e01001 	mvn	r1, #1
    9818:	e58d0008 	str	r0, [sp, #8]
    981c:	e3a030cf 	mov	r3, #207	; 0xcf
    9820:	e08f2002 	add	r2, pc, r2
    9824:	e58d1004 	str	r1, [sp, #4]
    9828:	e58d2000 	str	r2, [sp]
    982c:	e1a01007 	mov	r1, r7
    9830:	e1a02008 	mov	r2, r8
    9834:	e28a0028 	add	r0, sl, #40	; 0x28
    9838:	eb002b46 	bl	14558 <fprintf>
    983c:	e51f2cac 	ldr	r2, [pc, #-3244]	; 8b98 <main+0xb8c>
    9840:	e3a06000 	mov	r6, #0
    9844:	e08f2002 	add	r2, pc, r2
    9848:	e5923000 	ldr	r3, [r2]
    984c:	e2833001 	add	r3, r3, #1
    9850:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    9854:	e2844001 	add	r4, r4, #1
    9858:	e3540080 	cmp	r4, #128	; 0x80
    985c:	1affffe4 	bne	97f4 <main+0x17e8>
	TEST_END
    9860:	e3560000 	cmp	r6, #0
    9864:	1a00093f 	bne	bd68 <main+0x3d5c>
    9868:	e51f2cd4 	ldr	r2, [pc, #-3284]	; 8b9c <main+0xb90>
    986c:	e3a030d2 	mov	r3, #210	; 0xd2
    9870:	e51f1cd8 	ldr	r1, [pc, #-3288]	; 8ba0 <main+0xb94>
    9874:	e28a0028 	add	r0, sl, #40	; 0x28
    9878:	e08f2002 	add	r2, pc, r2
    987c:	e58d2000 	str	r2, [sp]
    9880:	e51f2ce4 	ldr	r2, [pc, #-3300]	; 8ba4 <main+0xb98>
    9884:	e08f1001 	add	r1, pc, r1
    9888:	e08f2002 	add	r2, pc, r2
    988c:	eb002b31 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    9890:	e51f4cf0 	ldr	r4, [pc, #-3312]	; 8ba8 <main+0xb9c>
    9894:	e28a5028 	add	r5, sl, #40	; 0x28
    9898:	e51f3cf4 	ldr	r3, [pc, #-3316]	; 8bac <main+0xba0>
    989c:	e1a00005 	mov	r0, r5
    98a0:	e51f1cf8 	ldr	r1, [pc, #-3320]	; 8bb0 <main+0xba4>
    98a4:	e08f4004 	add	r4, pc, r4
    98a8:	e1a02004 	mov	r2, r4
    98ac:	e08f3003 	add	r3, pc, r3
    98b0:	e08f1001 	add	r1, pc, r1
    98b4:	e58d3000 	str	r3, [sp]
    98b8:	e3a030dc 	mov	r3, #220	; 0xdc
    98bc:	eb002b25 	bl	14558 <fprintf>
	rc = set_cookie(INVALID_IPC_HANDLE, (void *) 0x1BEEF);
    98c0:	e59d1044 	ldr	r1, [sp, #68]	; 0x44
    98c4:	e3e00000 	mvn	r0, #0
    98c8:	eb0025d1 	bl	13014 <set_cookie>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "set cookie for invalid handle");
    98cc:	e51f2d20 	ldr	r2, [pc, #-3360]	; 8bb4 <main+0xba8>
    98d0:	e370002a 	cmn	r0, #42	; 0x2a
    98d4:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    98d8:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "set cookie for invalid handle");
    98dc:	e5923000 	ldr	r3, [r2]
    98e0:	e2833001 	add	r3, r3, #1
    98e4:	e5823000 	str	r3, [r2]
    98e8:	0a000011 	beq	9934 <main+0x1928>
    98ec:	e3e01029 	mvn	r1, #41	; 0x29
    98f0:	e51f3d40 	ldr	r3, [pc, #-3392]	; 8bb8 <main+0xbac>
    98f4:	e58d1004 	str	r1, [sp, #4]
    98f8:	e1a02004 	mov	r2, r4
    98fc:	e51f1d48 	ldr	r1, [pc, #-3400]	; 8bbc <main+0xbb0>
    9900:	e08f3003 	add	r3, pc, r3
    9904:	e58d0008 	str	r0, [sp, #8]
    9908:	e1a00005 	mov	r0, r5
    990c:	e58d3000 	str	r3, [sp]
    9910:	e08f1001 	add	r1, pc, r1
    9914:	e3a030e0 	mov	r3, #224	; 0xe0
    9918:	e3a06000 	mov	r6, #0
    991c:	eb002b0d 	bl	14558 <fprintf>
    9920:	e51f2d68 	ldr	r2, [pc, #-3432]	; 8bc0 <main+0xbb4>
    9924:	e08f2002 	add	r2, pc, r2
    9928:	e5923000 	ldr	r3, [r2]
    992c:	e2833001 	add	r3, r3, #1
    9930:	e5823000 	str	r3, [r2]
	rc = set_cookie(MAX_USER_HANDLES, (void *) 0x2BEEF);
    9934:	e59d1048 	ldr	r1, [sp, #72]	; 0x48
    9938:	e3a00080 	mov	r0, #128	; 0x80
    993c:	eb0025b4 	bl	13014 <set_cookie>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "set cookie for invalid handle");
    9940:	e51f2d84 	ldr	r2, [pc, #-3460]	; 8bc4 <main+0xbb8>
    9944:	e370002a 	cmn	r0, #42	; 0x2a
    9948:	e08f2002 	add	r2, pc, r2
    994c:	e5923000 	ldr	r3, [r2]
    9950:	e2833001 	add	r3, r3, #1
    9954:	e5823000 	str	r3, [r2]
    9958:	0a000012 	beq	99a8 <main+0x199c>
    995c:	e51f2d9c 	ldr	r2, [pc, #-3484]	; 8bc8 <main+0xbbc>
    9960:	e3e01029 	mvn	r1, #41	; 0x29
    9964:	e58d1004 	str	r1, [sp, #4]
    9968:	e3a030e4 	mov	r3, #228	; 0xe4
    996c:	e08f2002 	add	r2, pc, r2
    9970:	e51f1dac 	ldr	r1, [pc, #-3500]	; 8bcc <main+0xbc0>
    9974:	e58d2000 	str	r2, [sp]
    9978:	e3a06000 	mov	r6, #0
    997c:	e51f2db4 	ldr	r2, [pc, #-3508]	; 8bd0 <main+0xbc4>
    9980:	e08f1001 	add	r1, pc, r1
    9984:	e58d0008 	str	r0, [sp, #8]
    9988:	e28a0028 	add	r0, sl, #40	; 0x28
    998c:	e08f2002 	add	r2, pc, r2
    9990:	eb002af0 	bl	14558 <fprintf>
    9994:	e51f2dc8 	ldr	r2, [pc, #-3528]	; 8bd4 <main+0xbc8>
    9998:	e08f2002 	add	r2, pc, r2
    999c:	e5923000 	ldr	r3, [r2]
    99a0:	e2833001 	add	r3, r3, #1
    99a4:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "set cookie for invalid handle");
    99a8:	e51f5dd8 	ldr	r5, [pc, #-3544]	; 8bd8 <main+0xbcc>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "set cookie for invalid handle");
    99ac:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "set cookie for invalid handle");
    99b0:	e51f7ddc 	ldr	r7, [pc, #-3548]	; 8bdc <main+0xbd0>
    99b4:	e59d804c 	ldr	r8, [sp, #76]	; 0x4c
    99b8:	e08f5005 	add	r5, pc, r5
    99bc:	e08f7007 	add	r7, pc, r7
		rc = set_cookie(i, (void *) 0x3BEEF);
    99c0:	e1a01008 	mov	r1, r8
    99c4:	e1a00004 	mov	r0, r4
    99c8:	eb002591 	bl	13014 <set_cookie>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "set cookie for invalid handle");
    99cc:	e5953000 	ldr	r3, [r5]
    99d0:	e3700002 	cmn	r0, #2
    99d4:	e2833001 	add	r3, r3, #1
    99d8:	e5853000 	str	r3, [r5]
    99dc:	0a000011 	beq	9a28 <main+0x1a1c>
    99e0:	e3e01001 	mvn	r1, #1
    99e4:	e51f2e0c 	ldr	r2, [pc, #-3596]	; 8be0 <main+0xbd4>
    99e8:	e58d1004 	str	r1, [sp, #4]
    99ec:	e3a030e9 	mov	r3, #233	; 0xe9
    99f0:	e51f1e14 	ldr	r1, [pc, #-3604]	; 8be4 <main+0xbd8>
    99f4:	e08f2002 	add	r2, pc, r2
    99f8:	e58d0008 	str	r0, [sp, #8]
    99fc:	e28a0028 	add	r0, sl, #40	; 0x28
    9a00:	e58d2000 	str	r2, [sp]
    9a04:	e08f1001 	add	r1, pc, r1
    9a08:	e1a02007 	mov	r2, r7
    9a0c:	e3a06000 	mov	r6, #0
    9a10:	eb002ad0 	bl	14558 <fprintf>
    9a14:	e51f2e34 	ldr	r2, [pc, #-3636]	; 8be8 <main+0xbdc>
    9a18:	e08f2002 	add	r2, pc, r2
    9a1c:	e5923000 	ldr	r3, [r2]
    9a20:	e2833001 	add	r3, r3, #1
    9a24:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    9a28:	e2844001 	add	r4, r4, #1
    9a2c:	e3540080 	cmp	r4, #128	; 0x80
    9a30:	1affffe2 	bne	99c0 <main+0x19b4>
	TEST_END
    9a34:	e3560000 	cmp	r6, #0
    9a38:	1a0008bf 	bne	bd3c <main+0x3d30>
    9a3c:	e51f2e58 	ldr	r2, [pc, #-3672]	; 8bec <main+0xbe0>
    9a40:	e3a030ec 	mov	r3, #236	; 0xec
    9a44:	e51f1e5c 	ldr	r1, [pc, #-3676]	; 8bf0 <main+0xbe4>
    9a48:	e28a0028 	add	r0, sl, #40	; 0x28
    9a4c:	e08f2002 	add	r2, pc, r2
    9a50:	e58d2000 	str	r2, [sp]
    9a54:	e51f2e68 	ldr	r2, [pc, #-3688]	; 8bf4 <main+0xbe8>
    9a58:	e08f1001 	add	r1, pc, r1
    9a5c:	e08f2002 	add	r2, pc, r2
    9a60:	eb002abc 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    9a64:	e51f4e74 	ldr	r4, [pc, #-3700]	; 8bf8 <main+0xbec>
    9a68:	e28a5028 	add	r5, sl, #40	; 0x28
    9a6c:	e51f3e78 	ldr	r3, [pc, #-3704]	; 8bfc <main+0xbf0>
	path[0] = '\0';
    9a70:	e3a06000 	mov	r6, #0
	TEST_BEGIN(__func__);
    9a74:	e51f1e7c 	ldr	r1, [pc, #-3708]	; 8c00 <main+0xbf4>
    9a78:	e08f4004 	add	r4, pc, r4
    9a7c:	e08f3003 	add	r3, pc, r3
    9a80:	e1a02004 	mov	r2, r4
    9a84:	e58d3000 	str	r3, [sp]
    9a88:	e08f1001 	add	r1, pc, r1
    9a8c:	e3a030fa 	mov	r3, #250	; 0xfa
    9a90:	e1a00005 	mov	r0, r5
    9a94:	eb002aaf 	bl	14558 <fprintf>
	rc = port_create(path, 2, 64, 0);
    9a98:	e1a03006 	mov	r3, r6
    9a9c:	e3a02040 	mov	r2, #64	; 0x40
    9aa0:	e3a01002 	mov	r1, #2
    9aa4:	e1a0000b 	mov	r0, fp
	path[0] = '\0';
    9aa8:	e5cd61c4 	strb	r6, [sp, #452]	; 0x1c4
	rc = port_create(path, 2, 64, 0);
    9aac:	eb00254c 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "empty path srv");
    9ab0:	e51f2eb4 	ldr	r2, [pc, #-3764]	; 8c04 <main+0xbf8>
    9ab4:	e3700008 	cmn	r0, #8
    9ab8:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    9abc:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "empty path srv");
    9ac0:	e5923000 	ldr	r3, [r2]
    9ac4:	e2833001 	add	r3, r3, #1
    9ac8:	e5823000 	str	r3, [r2]
    9acc:	0a000010 	beq	9b14 <main+0x1b08>
    9ad0:	e3e01007 	mvn	r1, #7
    9ad4:	e51f3ed4 	ldr	r3, [pc, #-3796]	; 8c08 <main+0xbfc>
    9ad8:	e58d1004 	str	r1, [sp, #4]
    9adc:	e1a02004 	mov	r2, r4
    9ae0:	e51f1edc 	ldr	r1, [pc, #-3804]	; 8c0c <main+0xc00>
    9ae4:	e08f3003 	add	r3, pc, r3
    9ae8:	e58d0008 	str	r0, [sp, #8]
    9aec:	e1a00005 	mov	r0, r5
    9af0:	e58d3000 	str	r3, [sp]
    9af4:	e08f1001 	add	r1, pc, r1
    9af8:	e3a030ff 	mov	r3, #255	; 0xff
    9afc:	eb002a95 	bl	14558 <fprintf>
    9b00:	e51f2ef8 	ldr	r2, [pc, #-3832]	; 8c10 <main+0xc04>
    9b04:	e08f2002 	add	r2, pc, r2
    9b08:	e5923000 	ldr	r3, [r2]
    9b0c:	e2833001 	add	r3, r3, #1
    9b10:	e5823000 	str	r3, [r2]
        sprintf(path, "%s.port", SRV_PATH_BASE);
    9b14:	e51f2f08 	ldr	r2, [pc, #-3848]	; 8c14 <main+0xc08>
    9b18:	e1a0000b 	mov	r0, fp
    9b1c:	e51f1f0c 	ldr	r1, [pc, #-3852]	; 8c18 <main+0xc0c>
    9b20:	e08f2002 	add	r2, pc, r2
    9b24:	e08f1001 	add	r1, pc, r1
    9b28:	eb002a62 	bl	144b8 <sprintf>
	rc = port_create(path, 0, 64, 0);
    9b2c:	e3a03000 	mov	r3, #0
    9b30:	e1a01003 	mov	r1, r3
    9b34:	e3a02040 	mov	r2, #64	; 0x40
    9b38:	e1a0000b 	mov	r0, fp
    9b3c:	eb002528 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "no buffers");
    9b40:	e51f2f2c 	ldr	r2, [pc, #-3884]	; 8c1c <main+0xc10>
    9b44:	e3700008 	cmn	r0, #8
    9b48:	e08f2002 	add	r2, pc, r2
    9b4c:	e5923000 	ldr	r3, [r2]
    9b50:	e2833001 	add	r3, r3, #1
    9b54:	e5823000 	str	r3, [r2]
    9b58:	0a000012 	beq	9ba8 <main+0x1b9c>
    9b5c:	e51f2f44 	ldr	r2, [pc, #-3908]	; 8c20 <main+0xc14>
    9b60:	e3e01007 	mvn	r1, #7
    9b64:	e58d1004 	str	r1, [sp, #4]
    9b68:	e3a03f41 	mov	r3, #260	; 0x104
    9b6c:	e08f2002 	add	r2, pc, r2
    9b70:	e51f1f54 	ldr	r1, [pc, #-3924]	; 8c24 <main+0xc18>
    9b74:	e58d2000 	str	r2, [sp]
    9b78:	e3a06000 	mov	r6, #0
    9b7c:	e51f2f5c 	ldr	r2, [pc, #-3932]	; 8c28 <main+0xc1c>
    9b80:	e08f1001 	add	r1, pc, r1
    9b84:	e58d0008 	str	r0, [sp, #8]
    9b88:	e28a0028 	add	r0, sl, #40	; 0x28
    9b8c:	e08f2002 	add	r2, pc, r2
    9b90:	eb002a70 	bl	14558 <fprintf>
    9b94:	e51f2f70 	ldr	r2, [pc, #-3952]	; 8c2c <main+0xc20>
    9b98:	e08f2002 	add	r2, pc, r2
    9b9c:	e5923000 	ldr	r3, [r2]
    9ba0:	e2833001 	add	r3, r3, #1
    9ba4:	e5823000 	str	r3, [r2]
        sprintf(path, "%s.port", SRV_PATH_BASE);
    9ba8:	e51f2f80 	ldr	r2, [pc, #-3968]	; 8c30 <main+0xc24>
    9bac:	e1a0000b 	mov	r0, fp
    9bb0:	e51f1f84 	ldr	r1, [pc, #-3972]	; 8c34 <main+0xc28>
    9bb4:	e08f2002 	add	r2, pc, r2
    9bb8:	e08f1001 	add	r1, pc, r1
    9bbc:	eb002a3d 	bl	144b8 <sprintf>
	rc = port_create(path, 2, 0, 0);
    9bc0:	e3a03000 	mov	r3, #0
    9bc4:	e1a02003 	mov	r2, r3
    9bc8:	e3a01002 	mov	r1, #2
    9bcc:	e1a0000b 	mov	r0, fp
    9bd0:	eb002503 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "zero buf size");
    9bd4:	e51f2fa4 	ldr	r2, [pc, #-4004]	; 8c38 <main+0xc2c>
    9bd8:	e3700008 	cmn	r0, #8
    9bdc:	e08f2002 	add	r2, pc, r2
    9be0:	e5923000 	ldr	r3, [r2]
    9be4:	e2833001 	add	r3, r3, #1
    9be8:	e5823000 	str	r3, [r2]
    9bec:	0a000012 	beq	9c3c <main+0x1c30>
    9bf0:	e51f2fbc 	ldr	r2, [pc, #-4028]	; 8c3c <main+0xc30>
    9bf4:	e3e01007 	mvn	r1, #7
    9bf8:	e58d1004 	str	r1, [sp, #4]
    9bfc:	e3003109 	movw	r3, #265	; 0x109
    9c00:	e08f2002 	add	r2, pc, r2
    9c04:	e51f1fcc 	ldr	r1, [pc, #-4044]	; 8c40 <main+0xc34>
    9c08:	e58d2000 	str	r2, [sp]
    9c0c:	e3a06000 	mov	r6, #0
    9c10:	e51f2fd4 	ldr	r2, [pc, #-4052]	; 8c44 <main+0xc38>
    9c14:	e08f1001 	add	r1, pc, r1
    9c18:	e58d0008 	str	r0, [sp, #8]
    9c1c:	e28a0028 	add	r0, sl, #40	; 0x28
    9c20:	e08f2002 	add	r2, pc, r2
    9c24:	eb002a4b 	bl	14558 <fprintf>
    9c28:	e51f2fe8 	ldr	r2, [pc, #-4072]	; 8c48 <main+0xc3c>
    9c2c:	e08f2002 	add	r2, pc, r2
    9c30:	e5923000 	ldr	r3, [r2]
    9c34:	e2833001 	add	r3, r3, #1
    9c38:	e5823000 	str	r3, [r2]
        sprintf(path, "%s.port", SRV_PATH_BASE);
    9c3c:	e51f2ff8 	ldr	r2, [pc, #-4088]	; 8c4c <main+0xc40>
    9c40:	e1a0000b 	mov	r0, fp
    9c44:	e51f1ffc 	ldr	r1, [pc, #-4092]	; 8c50 <main+0xc44>
    9c48:	e08f2002 	add	r2, pc, r2
    9c4c:	e08f1001 	add	r1, pc, r1
    9c50:	eb002a18 	bl	144b8 <sprintf>
	rc = port_create(path, MAX_PORT_BUF_NUM * 100, 64, 0);
    9c54:	e3a03000 	mov	r3, #0
    9c58:	e3a02040 	mov	r2, #64	; 0x40
    9c5c:	e3a01d32 	mov	r1, #3200	; 0xc80
    9c60:	e1a0000b 	mov	r0, fp
    9c64:	eb0024de 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "large buf num");
    9c68:	e59f27b8 	ldr	r2, [pc, #1976]	; a428 <main+0x241c>
    9c6c:	e3700008 	cmn	r0, #8
    9c70:	e08f2002 	add	r2, pc, r2
    9c74:	e5923000 	ldr	r3, [r2]
    9c78:	e2833001 	add	r3, r3, #1
    9c7c:	e5823000 	str	r3, [r2]
    9c80:	0a000012 	beq	9cd0 <main+0x1cc4>
    9c84:	e59f27a0 	ldr	r2, [pc, #1952]	; a42c <main+0x2420>
    9c88:	e3e01007 	mvn	r1, #7
    9c8c:	e58d1004 	str	r1, [sp, #4]
    9c90:	e300310e 	movw	r3, #270	; 0x10e
    9c94:	e08f2002 	add	r2, pc, r2
    9c98:	e59f1790 	ldr	r1, [pc, #1936]	; a430 <main+0x2424>
    9c9c:	e58d2000 	str	r2, [sp]
    9ca0:	e3a06000 	mov	r6, #0
    9ca4:	e59f2788 	ldr	r2, [pc, #1928]	; a434 <main+0x2428>
    9ca8:	e08f1001 	add	r1, pc, r1
    9cac:	e58d0008 	str	r0, [sp, #8]
    9cb0:	e28a0028 	add	r0, sl, #40	; 0x28
    9cb4:	e08f2002 	add	r2, pc, r2
    9cb8:	eb002a26 	bl	14558 <fprintf>
    9cbc:	e59f2774 	ldr	r2, [pc, #1908]	; a438 <main+0x242c>
    9cc0:	e08f2002 	add	r2, pc, r2
    9cc4:	e5923000 	ldr	r3, [r2]
    9cc8:	e2833001 	add	r3, r3, #1
    9ccc:	e5823000 	str	r3, [r2]
        sprintf(path, "%s.port", SRV_PATH_BASE);
    9cd0:	e59f2764 	ldr	r2, [pc, #1892]	; a43c <main+0x2430>
    9cd4:	e1a0000b 	mov	r0, fp
    9cd8:	e59f1760 	ldr	r1, [pc, #1888]	; a440 <main+0x2434>
    9cdc:	e08f2002 	add	r2, pc, r2
    9ce0:	e08f1001 	add	r1, pc, r1
    9ce4:	eb0029f3 	bl	144b8 <sprintf>
	rc = port_create(path,  2, MAX_PORT_BUF_SIZE * 100, 0);
    9ce8:	e3a03000 	mov	r3, #0
    9cec:	e3a02919 	mov	r2, #409600	; 0x64000
    9cf0:	e3a01002 	mov	r1, #2
    9cf4:	e1a0000b 	mov	r0, fp
    9cf8:	eb0024b9 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "large buf size");
    9cfc:	e59f2740 	ldr	r2, [pc, #1856]	; a444 <main+0x2438>
    9d00:	e3700008 	cmn	r0, #8
    9d04:	e08f2002 	add	r2, pc, r2
    9d08:	e5923000 	ldr	r3, [r2]
    9d0c:	e2833001 	add	r3, r3, #1
    9d10:	e5823000 	str	r3, [r2]
    9d14:	0a000012 	beq	9d64 <main+0x1d58>
    9d18:	e59f2728 	ldr	r2, [pc, #1832]	; a448 <main+0x243c>
    9d1c:	e3e01007 	mvn	r1, #7
    9d20:	e58d1004 	str	r1, [sp, #4]
    9d24:	e3003113 	movw	r3, #275	; 0x113
    9d28:	e08f2002 	add	r2, pc, r2
    9d2c:	e59f1718 	ldr	r1, [pc, #1816]	; a44c <main+0x2440>
    9d30:	e58d2000 	str	r2, [sp]
    9d34:	e3a06000 	mov	r6, #0
    9d38:	e59f2710 	ldr	r2, [pc, #1808]	; a450 <main+0x2444>
    9d3c:	e08f1001 	add	r1, pc, r1
    9d40:	e58d0008 	str	r0, [sp, #8]
    9d44:	e28a0028 	add	r0, sl, #40	; 0x28
    9d48:	e08f2002 	add	r2, pc, r2
    9d4c:	eb002a01 	bl	14558 <fprintf>
    9d50:	e59f26fc 	ldr	r2, [pc, #1788]	; a454 <main+0x2448>
    9d54:	e08f2002 	add	r2, pc, r2
    9d58:	e5923000 	ldr	r3, [r2]
    9d5c:	e2833001 	add	r3, r3, #1
    9d60:	e5823000 	str	r3, [r2]
	int len = sprintf(path, "%s.port", SRV_PATH_BASE);
    9d64:	e59f26ec 	ldr	r2, [pc, #1772]	; a458 <main+0x244c>
    9d68:	e1a0000b 	mov	r0, fp
    9d6c:	e59f16e8 	ldr	r1, [pc, #1768]	; a45c <main+0x2450>
    9d70:	e08f2002 	add	r2, pc, r2
    9d74:	e08f1001 	add	r1, pc, r1
    9d78:	eb0029ce 	bl	144b8 <sprintf>
	for (uint i = len; i < sizeof(path); i++) path[i] = 'a';
    9d7c:	e350004f 	cmp	r0, #79	; 0x4f
    9d80:	8a000007 	bhi	9da4 <main+0x1d98>
    9d84:	e2403001 	sub	r3, r0, #1
    9d88:	e28d1e21 	add	r1, sp, #528	; 0x210
    9d8c:	e2811003 	add	r1, r1, #3
    9d90:	e08b3003 	add	r3, fp, r3
    9d94:	e3a02061 	mov	r2, #97	; 0x61
    9d98:	e5e32001 	strb	r2, [r3, #1]!
    9d9c:	e1530001 	cmp	r3, r1
    9da0:	1afffffc 	bne	9d98 <main+0x1d8c>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "path is too long");
    9da4:	e59f46b4 	ldr	r4, [pc, #1716]	; a460 <main+0x2454>
	path[sizeof(path)-1] = '\0';
    9da8:	e3a00000 	mov	r0, #0
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    9dac:	e1a03000 	mov	r3, r0
	path[sizeof(path)-1] = '\0';
    9db0:	e5cd0213 	strb	r0, [sp, #531]	; 0x213
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "path is too long");
    9db4:	e08f4004 	add	r4, pc, r4
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    9db8:	e3a02a01 	mov	r2, #4096	; 0x1000
    9dbc:	e3a01002 	mov	r1, #2
    9dc0:	e1a0000b 	mov	r0, fp
    9dc4:	eb002486 	bl	12fe4 <port_create>
    9dc8:	e1a05000 	mov	r5, r0
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "path is too long");
    9dcc:	e5943000 	ldr	r3, [r4]
    9dd0:	e3700008 	cmn	r0, #8
    9dd4:	e2833001 	add	r3, r3, #1
    9dd8:	e5843000 	str	r3, [r4]
    9ddc:	0a0007c3 	beq	bcf0 <main+0x3ce4>
    9de0:	e59f267c 	ldr	r2, [pc, #1660]	; a464 <main+0x2458>
    9de4:	e3e01007 	mvn	r1, #7
    9de8:	e58d1004 	str	r1, [sp, #4]
    9dec:	e300311a 	movw	r3, #282	; 0x11a
    9df0:	e08f2002 	add	r2, pc, r2
    9df4:	e59f166c 	ldr	r1, [pc, #1644]	; a468 <main+0x245c>
    9df8:	e58d2000 	str	r2, [sp]
    9dfc:	e59f2668 	ldr	r2, [pc, #1640]	; a46c <main+0x2460>
    9e00:	e08f1001 	add	r1, pc, r1
    9e04:	e58d0008 	str	r0, [sp, #8]
    9e08:	e28a0028 	add	r0, sl, #40	; 0x28
    9e0c:	e08f2002 	add	r2, pc, r2
    9e10:	eb0029d0 	bl	14558 <fprintf>
    9e14:	e59f2654 	ldr	r2, [pc, #1620]	; a470 <main+0x2464>
	rc = close (rc);
    9e18:	e1a00005 	mov	r0, r5
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "path is too long");
    9e1c:	e08f2002 	add	r2, pc, r2
    9e20:	e5923000 	ldr	r3, [r2]
    9e24:	e2833001 	add	r3, r3, #1
    9e28:	e5823000 	str	r3, [r2]
	rc = close (rc);
    9e2c:	eb002475 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "close port");
    9e30:	e5943000 	ldr	r3, [r4]
    9e34:	e370002a 	cmn	r0, #42	; 0x2a
    9e38:	e2833001 	add	r3, r3, #1
    9e3c:	e5843000 	str	r3, [r4]
    9e40:	0a000011 	beq	9e8c <main+0x1e80>
    9e44:	e59f2628 	ldr	r2, [pc, #1576]	; a474 <main+0x2468>
    9e48:	e3e01029 	mvn	r1, #41	; 0x29
    9e4c:	e58d1004 	str	r1, [sp, #4]
    9e50:	e3a03f47 	mov	r3, #284	; 0x11c
    9e54:	e08f2002 	add	r2, pc, r2
    9e58:	e59f1618 	ldr	r1, [pc, #1560]	; a478 <main+0x246c>
    9e5c:	e58d2000 	str	r2, [sp]
    9e60:	e59f2614 	ldr	r2, [pc, #1556]	; a47c <main+0x2470>
    9e64:	e08f1001 	add	r1, pc, r1
    9e68:	e58d0008 	str	r0, [sp, #8]
    9e6c:	e28a0028 	add	r0, sl, #40	; 0x28
    9e70:	e08f2002 	add	r2, pc, r2
    9e74:	eb0029b7 	bl	14558 <fprintf>
    9e78:	e59f2600 	ldr	r2, [pc, #1536]	; a480 <main+0x2474>
    9e7c:	e08f2002 	add	r2, pc, r2
    9e80:	e5923000 	ldr	r3, [r2]
    9e84:	e2833001 	add	r3, r3, #1
    9e88:	e5823000 	str	r3, [r2]
	TEST_END
    9e8c:	e59f25f0 	ldr	r2, [pc, #1520]	; a484 <main+0x2478>
    9e90:	e300311e 	movw	r3, #286	; 0x11e
    9e94:	e59f15ec 	ldr	r1, [pc, #1516]	; a488 <main+0x247c>
    9e98:	e28a0028 	add	r0, sl, #40	; 0x28
    9e9c:	e08f2002 	add	r2, pc, r2
    9ea0:	e58d2000 	str	r2, [sp]
    9ea4:	e59f25e0 	ldr	r2, [pc, #1504]	; a48c <main+0x2480>
    9ea8:	e08f1001 	add	r1, pc, r1
    9eac:	e08f2002 	add	r2, pc, r2
    9eb0:	eb0029a8 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    9eb4:	e59f45d4 	ldr	r4, [pc, #1492]	; a490 <main+0x2484>
    9eb8:	e28a5028 	add	r5, sl, #40	; 0x28
    9ebc:	e59f35d0 	ldr	r3, [pc, #1488]	; a494 <main+0x2488>
    9ec0:	e1a00005 	mov	r0, r5
    9ec4:	e59f15cc 	ldr	r1, [pc, #1484]	; a498 <main+0x248c>
    9ec8:	e08f4004 	add	r4, pc, r4
    9ecc:	e1a02004 	mov	r2, r4
    9ed0:	e08f3003 	add	r3, pc, r3
    9ed4:	e08f1001 	add	r1, pc, r1
    9ed8:	e58d3000 	str	r3, [sp]
    9edc:	e3a03f66 	mov	r3, #408	; 0x198
    9ee0:	eb00299c 	bl	14558 <fprintf>
	rc = sync_connect("", connect_timeout);
    9ee4:	e59f05b0 	ldr	r0, [pc, #1456]	; a49c <main+0x2490>
    9ee8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    9eec:	e08f0000 	add	r0, pc, r0
    9ef0:	eb000e09 	bl	d71c <sync_connect>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "empty path");
    9ef4:	e59f25a4 	ldr	r2, [pc, #1444]	; a4a0 <main+0x2494>
    9ef8:	e3700008 	cmn	r0, #8
    9efc:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    9f00:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "empty path");
    9f04:	e5923000 	ldr	r3, [r2]
    9f08:	e2833001 	add	r3, r3, #1
    9f0c:	e5823000 	str	r3, [r2]
    9f10:	0a000011 	beq	9f5c <main+0x1f50>
    9f14:	e3e01007 	mvn	r1, #7
    9f18:	e59f3584 	ldr	r3, [pc, #1412]	; a4a4 <main+0x2498>
    9f1c:	e58d1004 	str	r1, [sp, #4]
    9f20:	e1a02004 	mov	r2, r4
    9f24:	e59f157c 	ldr	r1, [pc, #1404]	; a4a8 <main+0x249c>
    9f28:	e08f3003 	add	r3, pc, r3
    9f2c:	e58d0008 	str	r0, [sp, #8]
    9f30:	e1a00005 	mov	r0, r5
    9f34:	e58d3000 	str	r3, [sp]
    9f38:	e08f1001 	add	r1, pc, r1
    9f3c:	e3a03f67 	mov	r3, #412	; 0x19c
    9f40:	e3a06000 	mov	r6, #0
    9f44:	eb002983 	bl	14558 <fprintf>
    9f48:	e59f255c 	ldr	r2, [pc, #1372]	; a4ac <main+0x24a0>
    9f4c:	e08f2002 	add	r2, pc, r2
    9f50:	e5923000 	ldr	r3, [r2]
    9f54:	e2833001 	add	r3, r3, #1
    9f58:	e5823000 	str	r3, [r2]
	sprintf(path, "%s.conn.%s", SRV_PATH_BASE, "blah-blah");
    9f5c:	e59f354c 	ldr	r3, [pc, #1356]	; a4b0 <main+0x24a4>
    9f60:	e1a0000b 	mov	r0, fp
    9f64:	e59f2548 	ldr	r2, [pc, #1352]	; a4b4 <main+0x24a8>
    9f68:	e59f1548 	ldr	r1, [pc, #1352]	; a4b8 <main+0x24ac>
    9f6c:	e08f3003 	add	r3, pc, r3
    9f70:	e08f2002 	add	r2, pc, r2
    9f74:	e08f1001 	add	r1, pc, r1
    9f78:	eb00294e 	bl	144b8 <sprintf>
	rc = connect(path, 0);
    9f7c:	e3a01000 	mov	r1, #0
    9f80:	e1a0000b 	mov	r0, fp
    9f84:	eb002419 	bl	12ff0 <connect>
	EXPECT_EQ (ERR_NOT_FOUND, rc, "non-existing path");
    9f88:	e59f252c 	ldr	r2, [pc, #1324]	; a4bc <main+0x24b0>
    9f8c:	e3700002 	cmn	r0, #2
    9f90:	e08f2002 	add	r2, pc, r2
    9f94:	e5923000 	ldr	r3, [r2]
    9f98:	e2833001 	add	r3, r3, #1
    9f9c:	e5823000 	str	r3, [r2]
    9fa0:	0a000012 	beq	9ff0 <main+0x1fe4>
    9fa4:	e59f2514 	ldr	r2, [pc, #1300]	; a4c0 <main+0x24b4>
    9fa8:	e3e01001 	mvn	r1, #1
    9fac:	e58d1004 	str	r1, [sp, #4]
    9fb0:	e30031a1 	movw	r3, #417	; 0x1a1
    9fb4:	e08f2002 	add	r2, pc, r2
    9fb8:	e59f1504 	ldr	r1, [pc, #1284]	; a4c4 <main+0x24b8>
    9fbc:	e58d2000 	str	r2, [sp]
    9fc0:	e3a06000 	mov	r6, #0
    9fc4:	e59f24fc 	ldr	r2, [pc, #1276]	; a4c8 <main+0x24bc>
    9fc8:	e08f1001 	add	r1, pc, r1
    9fcc:	e58d0008 	str	r0, [sp, #8]
    9fd0:	e28a0028 	add	r0, sl, #40	; 0x28
    9fd4:	e08f2002 	add	r2, pc, r2
    9fd8:	eb00295e 	bl	14558 <fprintf>
    9fdc:	e59f24e8 	ldr	r2, [pc, #1256]	; a4cc <main+0x24c0>
    9fe0:	e08f2002 	add	r2, pc, r2
    9fe4:	e5923000 	ldr	r3, [r2]
    9fe8:	e2833001 	add	r3, r3, #1
    9fec:	e5823000 	str	r3, [r2]
	sprintf(path, "%s.conn.%s", SRV_PATH_BASE, "blah-blah");
    9ff0:	e59f34d8 	ldr	r3, [pc, #1240]	; a4d0 <main+0x24c4>
    9ff4:	e1a0000b 	mov	r0, fp
    9ff8:	e59f24d4 	ldr	r2, [pc, #1236]	; a4d4 <main+0x24c8>
    9ffc:	e59f14d4 	ldr	r1, [pc, #1236]	; a4d8 <main+0x24cc>
    a000:	e08f3003 	add	r3, pc, r3
    a004:	e08f2002 	add	r2, pc, r2
    a008:	e08f1001 	add	r1, pc, r1
    a00c:	eb002929 	bl	144b8 <sprintf>
	rc = connect(path, IPC_CONNECT_ASYNC);
    a010:	e3a01002 	mov	r1, #2
    a014:	e1a0000b 	mov	r0, fp
    a018:	eb0023f4 	bl	12ff0 <connect>
	EXPECT_EQ (ERR_NOT_FOUND, rc, "non-existing path");
    a01c:	e59f24b8 	ldr	r2, [pc, #1208]	; a4dc <main+0x24d0>
    a020:	e3700002 	cmn	r0, #2
    a024:	e08f2002 	add	r2, pc, r2
    a028:	e5923000 	ldr	r3, [r2]
    a02c:	e2833001 	add	r3, r3, #1
    a030:	e5823000 	str	r3, [r2]
    a034:	0a000012 	beq	a084 <main+0x2078>
    a038:	e59f24a0 	ldr	r2, [pc, #1184]	; a4e0 <main+0x24d4>
    a03c:	e3e01001 	mvn	r1, #1
    a040:	e58d1004 	str	r1, [sp, #4]
    a044:	e30031a6 	movw	r3, #422	; 0x1a6
    a048:	e08f2002 	add	r2, pc, r2
    a04c:	e59f1490 	ldr	r1, [pc, #1168]	; a4e4 <main+0x24d8>
    a050:	e58d2000 	str	r2, [sp]
    a054:	e3a06000 	mov	r6, #0
    a058:	e59f2488 	ldr	r2, [pc, #1160]	; a4e8 <main+0x24dc>
    a05c:	e08f1001 	add	r1, pc, r1
    a060:	e58d0008 	str	r0, [sp, #8]
    a064:	e28a0028 	add	r0, sl, #40	; 0x28
    a068:	e08f2002 	add	r2, pc, r2
    a06c:	eb002939 	bl	14558 <fprintf>
    a070:	e59f2474 	ldr	r2, [pc, #1140]	; a4ec <main+0x24e0>
    a074:	e08f2002 	add	r2, pc, r2
    a078:	e5923000 	ldr	r3, [r2]
    a07c:	e2833001 	add	r3, r3, #1
    a080:	e5823000 	str	r3, [r2]
	int len = sprintf(path, "%s.conn.", SRV_PATH_BASE);
    a084:	e59f2464 	ldr	r2, [pc, #1124]	; a4f0 <main+0x24e4>
    a088:	e1a0000b 	mov	r0, fp
    a08c:	e59f1460 	ldr	r1, [pc, #1120]	; a4f4 <main+0x24e8>
    a090:	e08f2002 	add	r2, pc, r2
    a094:	e08f1001 	add	r1, pc, r1
    a098:	eb002906 	bl	144b8 <sprintf>
	for (uint i = len; i < sizeof(path); i++) path[i] = 'a';
    a09c:	e350004f 	cmp	r0, #79	; 0x4f
    a0a0:	8a000007 	bhi	a0c4 <main+0x20b8>
    a0a4:	e2403001 	sub	r3, r0, #1
    a0a8:	e28d1e21 	add	r1, sp, #528	; 0x210
    a0ac:	e2811003 	add	r1, r1, #3
    a0b0:	e08b3003 	add	r3, fp, r3
    a0b4:	e3a02061 	mov	r2, #97	; 0x61
    a0b8:	e5e32001 	strb	r2, [r3, #1]!
    a0bc:	e1510003 	cmp	r1, r3
    a0c0:	1afffffc 	bne	a0b8 <main+0x20ac>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "long path");
    a0c4:	e59f442c 	ldr	r4, [pc, #1068]	; a4f8 <main+0x24ec>
	rc = sync_connect (path, connect_timeout);
    a0c8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    a0cc:	e1a0000b 	mov	r0, fp
	path[sizeof(path)-1] = '\0';
    a0d0:	e3a03000 	mov	r3, #0
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "long path");
    a0d4:	e08f4004 	add	r4, pc, r4
	path[sizeof(path)-1] = '\0';
    a0d8:	e5cd3213 	strb	r3, [sp, #531]	; 0x213
	rc = sync_connect (path, connect_timeout);
    a0dc:	eb000d8e 	bl	d71c <sync_connect>
    a0e0:	e1a05000 	mov	r5, r0
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "long path");
    a0e4:	e3700008 	cmn	r0, #8
    a0e8:	e5943000 	ldr	r3, [r4]
    a0ec:	e2833001 	add	r3, r3, #1
    a0f0:	e5843000 	str	r3, [r4]
    a0f4:	0a0006ea 	beq	bca4 <main+0x3c98>
    a0f8:	e59f23fc 	ldr	r2, [pc, #1020]	; a4fc <main+0x24f0>
    a0fc:	e3e01007 	mvn	r1, #7
    a100:	e58d1004 	str	r1, [sp, #4]
    a104:	e30031ad 	movw	r3, #429	; 0x1ad
    a108:	e08f2002 	add	r2, pc, r2
    a10c:	e59f13ec 	ldr	r1, [pc, #1004]	; a500 <main+0x24f4>
    a110:	e58d2000 	str	r2, [sp]
    a114:	e59f23e8 	ldr	r2, [pc, #1000]	; a504 <main+0x24f8>
    a118:	e08f1001 	add	r1, pc, r1
    a11c:	e58d0008 	str	r0, [sp, #8]
    a120:	e28a0028 	add	r0, sl, #40	; 0x28
    a124:	e08f2002 	add	r2, pc, r2
    a128:	eb00290a 	bl	14558 <fprintf>
    a12c:	e59f23d4 	ldr	r2, [pc, #980]	; a508 <main+0x24fc>
	rc = close (rc);
    a130:	e1a00005 	mov	r0, r5
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "long path");
    a134:	e08f2002 	add	r2, pc, r2
    a138:	e5923000 	ldr	r3, [r2]
    a13c:	e2833001 	add	r3, r3, #1
    a140:	e5823000 	str	r3, [r2]
	rc = close (rc);
    a144:	eb0023af 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "close channel");
    a148:	e5943000 	ldr	r3, [r4]
    a14c:	e370002a 	cmn	r0, #42	; 0x2a
    a150:	e2833001 	add	r3, r3, #1
    a154:	e5843000 	str	r3, [r4]
    a158:	0a000011 	beq	a1a4 <main+0x2198>
    a15c:	e59f23a8 	ldr	r2, [pc, #936]	; a50c <main+0x2500>
    a160:	e3e01029 	mvn	r1, #41	; 0x29
    a164:	e58d1004 	str	r1, [sp, #4]
    a168:	e3a03e1b 	mov	r3, #432	; 0x1b0
    a16c:	e08f2002 	add	r2, pc, r2
    a170:	e59f1398 	ldr	r1, [pc, #920]	; a510 <main+0x2504>
    a174:	e58d2000 	str	r2, [sp]
    a178:	e59f2394 	ldr	r2, [pc, #916]	; a514 <main+0x2508>
    a17c:	e08f1001 	add	r1, pc, r1
    a180:	e58d0008 	str	r0, [sp, #8]
    a184:	e28a0028 	add	r0, sl, #40	; 0x28
    a188:	e08f2002 	add	r2, pc, r2
    a18c:	eb0028f1 	bl	14558 <fprintf>
    a190:	e59f2380 	ldr	r2, [pc, #896]	; a518 <main+0x250c>
    a194:	e08f2002 	add	r2, pc, r2
    a198:	e5923000 	ldr	r3, [r2]
    a19c:	e2833001 	add	r3, r3, #1
    a1a0:	e5823000 	str	r3, [r2]
	TEST_END
    a1a4:	e59f2370 	ldr	r2, [pc, #880]	; a51c <main+0x2510>
    a1a8:	e30031b2 	movw	r3, #434	; 0x1b2
    a1ac:	e59f136c 	ldr	r1, [pc, #876]	; a520 <main+0x2514>
    a1b0:	e28a0028 	add	r0, sl, #40	; 0x28
    a1b4:	e08f2002 	add	r2, pc, r2
    a1b8:	e58d2000 	str	r2, [sp]
    a1bc:	e59f2360 	ldr	r2, [pc, #864]	; a524 <main+0x2518>
    a1c0:	e08f1001 	add	r1, pc, r1
    a1c4:	e08f2002 	add	r2, pc, r2
    a1c8:	eb0028e2 	bl	14558 <fprintf>
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    a1cc:	e59d7018 	ldr	r7, [sp, #24]
	TEST_BEGIN(__func__);
    a1d0:	e28a5028 	add	r5, sl, #40	; 0x28
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    a1d4:	e59dc02c 	ldr	ip, [sp, #44]	; 0x2c
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    a1d8:	e3a06000 	mov	r6, #0
	TEST_BEGIN(__func__);
    a1dc:	e59f4344 	ldr	r4, [pc, #836]	; a528 <main+0x251c>
    a1e0:	e1a00005 	mov	r0, r5
    a1e4:	e59f3340 	ldr	r3, [pc, #832]	; a52c <main+0x2520>
    a1e8:	e59f1340 	ldr	r1, [pc, #832]	; a530 <main+0x2524>
    a1ec:	e08f4004 	add	r4, pc, r4
    a1f0:	e1a02004 	mov	r2, r4
    a1f4:	e08f3003 	add	r3, pc, r3
    a1f8:	e08f1001 	add	r1, pc, r1
    a1fc:	e58d3000 	str	r3, [sp]
    a200:	e3003309 	movw	r3, #777	; 0x309
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    a204:	e58c6000 	str	r6, [ip]
    a208:	e58c6004 	str	r6, [ip, #4]
    a20c:	e58c6008 	str	r6, [ip, #8]
    a210:	e58c600c 	str	r6, [ip, #12]
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    a214:	e5876000 	str	r6, [r7]
    a218:	e5876004 	str	r6, [r7, #4]
    a21c:	e5876008 	str	r6, [r7, #8]
    a220:	e587600c 	str	r6, [r7, #12]
	TEST_BEGIN(__func__);
    a224:	eb0028cb 	bl	14558 <fprintf>
	rc = accept(INVALID_IPC_HANDLE, &peer_uuid);
    a228:	e1a01007 	mov	r1, r7
    a22c:	e3e00000 	mvn	r0, #0
    a230:	eb002371 	bl	12ffc <accept>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "accept on invalid handle");
    a234:	e59f22f8 	ldr	r2, [pc, #760]	; a534 <main+0x2528>
    a238:	e370002a 	cmn	r0, #42	; 0x2a
    a23c:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    a240:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "accept on invalid handle");
    a244:	e5923000 	ldr	r3, [r2]
    a248:	e2833001 	add	r3, r3, #1
    a24c:	e5823000 	str	r3, [r2]
    a250:	0a000010 	beq	a298 <main+0x228c>
    a254:	e3e01029 	mvn	r1, #41	; 0x29
    a258:	e59f32d8 	ldr	r3, [pc, #728]	; a538 <main+0x252c>
    a25c:	e58d1004 	str	r1, [sp, #4]
    a260:	e1a02004 	mov	r2, r4
    a264:	e59f12d0 	ldr	r1, [pc, #720]	; a53c <main+0x2530>
    a268:	e08f3003 	add	r3, pc, r3
    a26c:	e58d0008 	str	r0, [sp, #8]
    a270:	e1a00005 	mov	r0, r5
    a274:	e58d3000 	str	r3, [sp]
    a278:	e08f1001 	add	r1, pc, r1
    a27c:	e300330d 	movw	r3, #781	; 0x30d
    a280:	eb0028b4 	bl	14558 <fprintf>
    a284:	e59f22b4 	ldr	r2, [pc, #692]	; a540 <main+0x2534>
    a288:	e08f2002 	add	r2, pc, r2
    a28c:	e5923000 	ldr	r3, [r2]
    a290:	e2833001 	add	r3, r3, #1
    a294:	e5823000 	str	r3, [r2]
	rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    a298:	e3a02010 	mov	r2, #16
    a29c:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    a2a0:	e59d0018 	ldr	r0, [sp, #24]
    a2a4:	eb0028d7 	bl	14608 <memcmp>
	EXPECT_EQ (0, rc1, "accept")
    a2a8:	e59f2294 	ldr	r2, [pc, #660]	; a544 <main+0x2538>
    a2ac:	e3500000 	cmp	r0, #0
    a2b0:	e08f2002 	add	r2, pc, r2
    a2b4:	e5923000 	ldr	r3, [r2]
    a2b8:	e2833001 	add	r3, r3, #1
    a2bc:	e5823000 	str	r3, [r2]
    a2c0:	0a000011 	beq	a30c <main+0x2300>
    a2c4:	e59f227c 	ldr	r2, [pc, #636]	; a548 <main+0x253c>
    a2c8:	e3a03e31 	mov	r3, #784	; 0x310
    a2cc:	e59f1278 	ldr	r1, [pc, #632]	; a54c <main+0x2540>
    a2d0:	e3a06000 	mov	r6, #0
    a2d4:	e08f2002 	add	r2, pc, r2
    a2d8:	e58d2000 	str	r2, [sp]
    a2dc:	e59f226c 	ldr	r2, [pc, #620]	; a550 <main+0x2544>
    a2e0:	e08f1001 	add	r1, pc, r1
    a2e4:	e58d0008 	str	r0, [sp, #8]
    a2e8:	e28a0028 	add	r0, sl, #40	; 0x28
    a2ec:	e08f2002 	add	r2, pc, r2
    a2f0:	e58d6004 	str	r6, [sp, #4]
    a2f4:	eb002897 	bl	14558 <fprintf>
    a2f8:	e59f2254 	ldr	r2, [pc, #596]	; a554 <main+0x2548>
    a2fc:	e08f2002 	add	r2, pc, r2
    a300:	e5923000 	ldr	r3, [r2]
    a304:	e2833001 	add	r3, r3, #1
    a308:	e5823000 	str	r3, [r2]
	rc = accept(MAX_USER_HANDLES, &peer_uuid);
    a30c:	e59d1018 	ldr	r1, [sp, #24]
    a310:	e3a00080 	mov	r0, #128	; 0x80
    a314:	eb002338 	bl	12ffc <accept>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "accept on invalid handle");
    a318:	e59f2238 	ldr	r2, [pc, #568]	; a558 <main+0x254c>
    a31c:	e370002a 	cmn	r0, #42	; 0x2a
    a320:	e08f2002 	add	r2, pc, r2
    a324:	e5923000 	ldr	r3, [r2]
    a328:	e2833001 	add	r3, r3, #1
    a32c:	e5823000 	str	r3, [r2]
    a330:	0a000012 	beq	a380 <main+0x2374>
    a334:	e59f2220 	ldr	r2, [pc, #544]	; a55c <main+0x2550>
    a338:	e3e01029 	mvn	r1, #41	; 0x29
    a33c:	e58d1004 	str	r1, [sp, #4]
    a340:	e3a03fc5 	mov	r3, #788	; 0x314
    a344:	e08f2002 	add	r2, pc, r2
    a348:	e59f1210 	ldr	r1, [pc, #528]	; a560 <main+0x2554>
    a34c:	e58d2000 	str	r2, [sp]
    a350:	e3a06000 	mov	r6, #0
    a354:	e59f2208 	ldr	r2, [pc, #520]	; a564 <main+0x2558>
    a358:	e08f1001 	add	r1, pc, r1
    a35c:	e58d0008 	str	r0, [sp, #8]
    a360:	e28a0028 	add	r0, sl, #40	; 0x28
    a364:	e08f2002 	add	r2, pc, r2
    a368:	eb00287a 	bl	14558 <fprintf>
    a36c:	e59f21f4 	ldr	r2, [pc, #500]	; a568 <main+0x255c>
    a370:	e08f2002 	add	r2, pc, r2
    a374:	e5923000 	ldr	r3, [r2]
    a378:	e2833001 	add	r3, r3, #1
    a37c:	e5823000 	str	r3, [r2]
	rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    a380:	e3a02010 	mov	r2, #16
    a384:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    a388:	e59d0018 	ldr	r0, [sp, #24]
    a38c:	eb00289d 	bl	14608 <memcmp>
	EXPECT_EQ (0, rc1, "accept")
    a390:	e59f21d4 	ldr	r2, [pc, #468]	; a56c <main+0x2560>
    a394:	e3500000 	cmp	r0, #0
    a398:	e08f2002 	add	r2, pc, r2
    a39c:	e5923000 	ldr	r3, [r2]
    a3a0:	e2833001 	add	r3, r3, #1
    a3a4:	e5823000 	str	r3, [r2]
    a3a8:	0a000011 	beq	a3f4 <main+0x23e8>
    a3ac:	e59f21bc 	ldr	r2, [pc, #444]	; a570 <main+0x2564>
    a3b0:	e3003317 	movw	r3, #791	; 0x317
    a3b4:	e59f11b8 	ldr	r1, [pc, #440]	; a574 <main+0x2568>
    a3b8:	e3a06000 	mov	r6, #0
    a3bc:	e08f2002 	add	r2, pc, r2
    a3c0:	e58d2000 	str	r2, [sp]
    a3c4:	e59f21ac 	ldr	r2, [pc, #428]	; a578 <main+0x256c>
    a3c8:	e08f1001 	add	r1, pc, r1
    a3cc:	e58d0008 	str	r0, [sp, #8]
    a3d0:	e28a0028 	add	r0, sl, #40	; 0x28
    a3d4:	e08f2002 	add	r2, pc, r2
    a3d8:	e58d6004 	str	r6, [sp, #4]
    a3dc:	eb00285d 	bl	14558 <fprintf>
    a3e0:	e59f2194 	ldr	r2, [pc, #404]	; a57c <main+0x2570>
    a3e4:	e08f2002 	add	r2, pc, r2
    a3e8:	e5923000 	ldr	r3, [r2]
    a3ec:	e2833001 	add	r3, r3, #1
    a3f0:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "accept on invalid handle");
    a3f4:	e59f5184 	ldr	r5, [pc, #388]	; a580 <main+0x2574>
	EXPECT_EQ (0, rc1, "accept")
    a3f8:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "accept on invalid handle");
    a3fc:	e59f8180 	ldr	r8, [pc, #384]	; a584 <main+0x2578>
    a400:	e59f3180 	ldr	r3, [pc, #384]	; a588 <main+0x257c>
    a404:	e08f5005 	add	r5, pc, r5
    a408:	e58d9024 	str	r9, [sp, #36]	; 0x24
    a40c:	e08f8008 	add	r8, pc, r8
    a410:	e08f3003 	add	r3, pc, r3
    a414:	e59d7018 	ldr	r7, [sp, #24]
    a418:	e58d3014 	str	r3, [sp, #20]
    a41c:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    a420:	e58db028 	str	fp, [sp, #40]	; 0x28
    a424:	ea000101 	b	a830 <main+0x2824>
    a428:	0000c444 	.word	0x0000c444
    a42c:	0000b530 	.word	0x0000b530
    a430:	0000bea4 	.word	0x0000bea4
    a434:	0000bbb8 	.word	0x0000bbb8
    a438:	0000c3f0 	.word	0x0000c3f0
    a43c:	0000bbb4 	.word	0x0000bbb4
    a440:	0000b4c0 	.word	0x0000b4c0
    a444:	0000c3b0 	.word	0x0000c3b0
    a448:	0000b4ac 	.word	0x0000b4ac
    a44c:	0000be10 	.word	0x0000be10
    a450:	0000bb24 	.word	0x0000bb24
    a454:	0000c35c 	.word	0x0000c35c
    a458:	0000bb20 	.word	0x0000bb20
    a45c:	0000b42c 	.word	0x0000b42c
    a460:	0000c300 	.word	0x0000c300
    a464:	0000b3f4 	.word	0x0000b3f4
    a468:	0000bd4c 	.word	0x0000bd4c
    a46c:	0000ba60 	.word	0x0000ba60
    a470:	0000c294 	.word	0x0000c294
    a474:	0000b73c 	.word	0x0000b73c
    a478:	0000bbf0 	.word	0x0000bbf0
    a47c:	0000b9fc 	.word	0x0000b9fc
    a480:	0000c234 	.word	0x0000c234
    a484:	0000ae1c 	.word	0x0000ae1c
    a488:	0000bb98 	.word	0x0000bb98
    a48c:	0000b9c0 	.word	0x0000b9c0
    a490:	0000b9a4 	.word	0x0000b9a4
    a494:	0000ae38 	.word	0x0000ae38
    a498:	0000b9ac 	.word	0x0000b9ac
    a49c:	0000b6a0 	.word	0x0000b6a0
    a4a0:	0000c1b8 	.word	0x0000c1b8
    a4a4:	0000b2d0 	.word	0x0000b2d0
    a4a8:	0000bc14 	.word	0x0000bc14
    a4ac:	0000c164 	.word	0x0000c164
    a4b0:	0000b298 	.word	0x0000b298
    a4b4:	0000b920 	.word	0x0000b920
    a4b8:	0000b29c 	.word	0x0000b29c
    a4bc:	0000c124 	.word	0x0000c124
    a4c0:	0000b268 	.word	0x0000b268
    a4c4:	0000ba14 	.word	0x0000ba14
    a4c8:	0000b898 	.word	0x0000b898
    a4cc:	0000c0d0 	.word	0x0000c0d0
    a4d0:	0000b204 	.word	0x0000b204
    a4d4:	0000b88c 	.word	0x0000b88c
    a4d8:	0000b208 	.word	0x0000b208
    a4dc:	0000c090 	.word	0x0000c090
    a4e0:	0000b1d4 	.word	0x0000b1d4
    a4e4:	0000b980 	.word	0x0000b980
    a4e8:	0000b804 	.word	0x0000b804
    a4ec:	0000c03c 	.word	0x0000c03c
    a4f0:	0000b800 	.word	0x0000b800
    a4f4:	0000b19c 	.word	0x0000b19c
    a4f8:	0000bfe0 	.word	0x0000bfe0
    a4fc:	0000b134 	.word	0x0000b134
    a500:	0000ba34 	.word	0x0000ba34
    a504:	0000b748 	.word	0x0000b748
    a508:	0000bf7c 	.word	0x0000bf7c
    a50c:	0000b6f0 	.word	0x0000b6f0
    a510:	0000b8d8 	.word	0x0000b8d8
    a514:	0000b6e4 	.word	0x0000b6e4
    a518:	0000bf1c 	.word	0x0000bf1c
    a51c:	0000ab54 	.word	0x0000ab54
    a520:	0000b880 	.word	0x0000b880
    a524:	0000b6a8 	.word	0x0000b6a8
    a528:	0000b680 	.word	0x0000b680
    a52c:	0000abb0 	.word	0x0000abb0
    a530:	0000b688 	.word	0x0000b688
    a534:	0000be78 	.word	0x0000be78
    a538:	0000afe0 	.word	0x0000afe0
    a53c:	0000b7dc 	.word	0x0000b7dc
    a540:	0000be28 	.word	0x0000be28
    a544:	0000be04 	.word	0x0000be04
    a548:	0000adac 	.word	0x0000adac
    a54c:	0000b250 	.word	0x0000b250
    a550:	0000b580 	.word	0x0000b580
    a554:	0000bdb4 	.word	0x0000bdb4
    a558:	0000bd94 	.word	0x0000bd94
    a55c:	0000af04 	.word	0x0000af04
    a560:	0000b6fc 	.word	0x0000b6fc
    a564:	0000b508 	.word	0x0000b508
    a568:	0000bd40 	.word	0x0000bd40
    a56c:	0000bd1c 	.word	0x0000bd1c
    a570:	0000acc4 	.word	0x0000acc4
    a574:	0000b168 	.word	0x0000b168
    a578:	0000b498 	.word	0x0000b498
    a57c:	0000bccc 	.word	0x0000bccc
    a580:	0000bcb0 	.word	0x0000bcb0
    a584:	0000b460 	.word	0x0000b460
    a588:	0000b5cc 	.word	0x0000b5cc
    a58c:	0000a9e8 	.word	0x0000a9e8
    a590:	0000b828 	.word	0x0000b828
    a594:	0000b800 	.word	0x0000b800
    a598:	0000a7b0 	.word	0x0000a7b0
    a59c:	0000ac54 	.word	0x0000ac54
    a5a0:	0000af84 	.word	0x0000af84
    a5a4:	0000b7b4 	.word	0x0000b7b4
    a5a8:	0000b1f4 	.word	0x0000b1f4
    a5ac:	0000af64 	.word	0x0000af64
    a5b0:	0000ab58 	.word	0x0000ab58
    a5b4:	0000b764 	.word	0x0000b764
    a5b8:	0000b73c 	.word	0x0000b73c
    a5bc:	0000a8c8 	.word	0x0000a8c8
    a5c0:	0000b19c 	.word	0x0000b19c
    a5c4:	0000aeb0 	.word	0x0000aeb0
    a5c8:	0000b6e8 	.word	0x0000b6e8
    a5cc:	0000b6d0 	.word	0x0000b6d0
    a5d0:	0000a36c 	.word	0x0000a36c
    a5d4:	0000affc 	.word	0x0000affc
    a5d8:	0000ae24 	.word	0x0000ae24
    a5dc:	0000ae08 	.word	0x0000ae08
    a5e0:	0000a364 	.word	0x0000a364
    a5e4:	0000ae10 	.word	0x0000ae10
    a5e8:	0000b620 	.word	0x0000b620
    a5ec:	0000a7c8 	.word	0x0000a7c8
    a5f0:	0000af84 	.word	0x0000af84
    a5f4:	0000b5cc 	.word	0x0000b5cc
    a5f8:	0000b5ac 	.word	0x0000b5ac
    a5fc:	0000a75c 	.word	0x0000a75c
    a600:	0000af14 	.word	0x0000af14
    a604:	0000ad20 	.word	0x0000ad20
    a608:	0000b558 	.word	0x0000b558
    a60c:	0000b53c 	.word	0x0000b53c
    a610:	0000acec 	.word	0x0000acec
    a614:	0000ae54 	.word	0x0000ae54
    a618:	0000a6cc 	.word	0x0000a6cc
    a61c:	0000b4d0 	.word	0x0000b4d0
    a620:	0000af10 	.word	0x0000af10
    a624:	0000ac80 	.word	0x0000ac80
    a628:	0000af10 	.word	0x0000af10
    a62c:	0000b478 	.word	0x0000b478
    a630:	0000b450 	.word	0x0000b450
    a634:	0000a61c 	.word	0x0000a61c
    a638:	0000aeb0 	.word	0x0000aeb0
    a63c:	0000abc4 	.word	0x0000abc4
    a640:	0000b3fc 	.word	0x0000b3fc
    a644:	0000ae40 	.word	0x0000ae40
    a648:	0000abb0 	.word	0x0000abb0
    a64c:	0000a7a8 	.word	0x0000a7a8
    a650:	0000b3b4 	.word	0x0000b3b4
    a654:	0000b394 	.word	0x0000b394
    a658:	0000a568 	.word	0x0000a568
    a65c:	0000a32c 	.word	0x0000a32c
    a660:	0000ab04 	.word	0x0000ab04
    a664:	0000b338 	.word	0x0000b338
    a668:	0000a020 	.word	0x0000a020
    a66c:	0000ac84 	.word	0x0000ac84
    a670:	0000aaac 	.word	0x0000aaac
    a674:	0000aa90 	.word	0x0000aa90
    a678:	0000a008 	.word	0x0000a008
    a67c:	0000aa98 	.word	0x0000aa98
    a680:	0000b2a8 	.word	0x0000b2a8
    a684:	0000a498 	.word	0x0000a498
    a688:	0000ac0c 	.word	0x0000ac0c
    a68c:	0000b254 	.word	0x0000b254
    a690:	0000b234 	.word	0x0000b234
    a694:	0000a42c 	.word	0x0000a42c
    a698:	0000ab9c 	.word	0x0000ab9c
    a69c:	0000a9a8 	.word	0x0000a9a8
    a6a0:	0000b1e0 	.word	0x0000b1e0
    a6a4:	0000b1c4 	.word	0x0000b1c4
    a6a8:	0000a978 	.word	0x0000a978
    a6ac:	0000aae4 	.word	0x0000aae4
    a6b0:	0000a3a4 	.word	0x0000a3a4
    a6b4:	0000b160 	.word	0x0000b160
    a6b8:	0000aba0 	.word	0x0000aba0
    a6bc:	0000a910 	.word	0x0000a910
    a6c0:	0000aba4 	.word	0x0000aba4
    a6c4:	0000b10c 	.word	0x0000b10c
    a6c8:	0000b0e4 	.word	0x0000b0e4
    a6cc:	0000a2f8 	.word	0x0000a2f8
    a6d0:	0000ab44 	.word	0x0000ab44
    a6d4:	0000a858 	.word	0x0000a858
    a6d8:	0000b090 	.word	0x0000b090
    a6dc:	0000b074 	.word	0x0000b074
    a6e0:	0000a52c 	.word	0x0000a52c
    a6e4:	0000a928 	.word	0x0000a928
    a6e8:	0000a7f0 	.word	0x0000a7f0
    a6ec:	0000b024 	.word	0x0000b024
    a6f0:	0000aa70 	.word	0x0000aa70
    a6f4:	0000a7e0 	.word	0x0000a7e0
    a6f8:	0000a3d8 	.word	0x0000a3d8
    a6fc:	0000afe4 	.word	0x0000afe4
    a700:	0000afc4 	.word	0x0000afc4
    a704:	0000a1e0 	.word	0x0000a1e0
    a708:	0000aa20 	.word	0x0000aa20
    a70c:	0000a734 	.word	0x0000a734
    a710:	0000af68 	.word	0x0000af68
    a714:	00009c6c 	.word	0x00009c6c
    a718:	0000a8b4 	.word	0x0000a8b4
    a71c:	0000a6dc 	.word	0x0000a6dc
    a720:	0000a6c0 	.word	0x0000a6c0
    a724:	00009c6c 	.word	0x00009c6c
    a728:	0000a6c4 	.word	0x0000a6c4
    a72c:	0000aec4 	.word	0x0000aec4
    a730:	0000a0fc 	.word	0x0000a0fc
    a734:	0000a828 	.word	0x0000a828
    a738:	0000ae70 	.word	0x0000ae70
    a73c:	0000ae50 	.word	0x0000ae50
    a740:	0000a0ac 	.word	0x0000a0ac
    a744:	0000a810 	.word	0x0000a810
    a748:	0000a5c4 	.word	0x0000a5c4
    a74c:	0000adfc 	.word	0x0000adfc
    a750:	0000addc 	.word	0x0000addc
    a754:	0000a01c 	.word	0x0000a01c
    a758:	0000a744 	.word	0x0000a744
    a75c:	0000a550 	.word	0x0000a550
    a760:	0000ad88 	.word	0x0000ad88
    a764:	0000ad68 	.word	0x0000ad68
    a768:	00009fc4 	.word	0x00009fc4
    a76c:	0000a728 	.word	0x0000a728
    a770:	0000a4dc 	.word	0x0000a4dc
    a774:	0000ad14 	.word	0x0000ad14
    a778:	0000acf8 	.word	0x0000acf8
    a77c:	0000a4a8 	.word	0x0000a4a8
    a780:	0000a610 	.word	0x0000a610
    a784:	00009f4c 	.word	0x00009f4c
    a788:	0000ac8c 	.word	0x0000ac8c
    a78c:	0000ac6c 	.word	0x0000ac6c
    a790:	00009ec8 	.word	0x00009ec8
    a794:	0000a62c 	.word	0x0000a62c
    a798:	0000a3e0 	.word	0x0000a3e0
    a79c:	0000ac18 	.word	0x0000ac18
    a7a0:	0000a654 	.word	0x0000a654
    a7a4:	0000a3c4 	.word	0x0000a3c4
    a7a8:	0000a654 	.word	0x0000a654
    a7ac:	0000abbc 	.word	0x0000abbc
    a7b0:	0000ab94 	.word	0x0000ab94
    a7b4:	00009e20 	.word	0x00009e20
    a7b8:	0000a5f4 	.word	0x0000a5f4
    a7bc:	0000a308 	.word	0x0000a308
    a7c0:	0000ab40 	.word	0x0000ab40
    a7c4:	0000a580 	.word	0x0000a580
    a7c8:	0000a2f0 	.word	0x0000a2f0
    a7cc:	00009ee8 	.word	0x00009ee8
    a7d0:	0000aaf4 	.word	0x0000aaf4
    a7d4:	0000aac4 	.word	0x0000aac4
    a7d8:	00009d64 	.word	0x00009d64
    a7dc:	0000a654 	.word	0x0000a654
    a7e0:	0000a238 	.word	0x0000a238
    a7e4:	0000aa70 	.word	0x0000aa70
    a7e8:	0000aa38 	.word	0x0000aa38
    a7ec:	00009ce8 	.word	0x00009ce8
    a7f0:	0000a3f8 	.word	0x0000a3f8
    a7f4:	0000a1ac 	.word	0x0000a1ac
    a7f8:	0000a9e4 	.word	0x0000a9e4
    a7fc:	0000a99c 	.word	0x0000a99c
    a800:	00009c64 	.word	0x00009c64
    a804:	0000a35c 	.word	0x0000a35c
    a808:	0000a110 	.word	0x0000a110
    a80c:	0000a948 	.word	0x0000a948
    a810:	0000a930 	.word	0x0000a930
    a814:	00009bc8 	.word	0x00009bc8
    a818:	0000a2c4 	.word	0x0000a2c4
    a81c:	0000a078 	.word	0x0000a078
    a820:	0000a8ac 	.word	0x0000a8ac
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    a824:	e2844001 	add	r4, r4, #1
    a828:	e3540080 	cmp	r4, #128	; 0x80
    a82c:	0a000038 	beq	a914 <main+0x2908>
		rc = accept(i, &peer_uuid);
    a830:	e1a01007 	mov	r1, r7
    a834:	e1a00004 	mov	r0, r4
    a838:	eb0021ef 	bl	12ffc <accept>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "accept on invalid handle");
    a83c:	e5953000 	ldr	r3, [r5]
    a840:	e3700002 	cmn	r0, #2
    a844:	e283b001 	add	fp, r3, #1
    a848:	e585b000 	str	fp, [r5]
    a84c:	0a000011 	beq	a898 <main+0x288c>
    a850:	e51f22cc 	ldr	r2, [pc, #-716]	; a58c <main+0x2580>
    a854:	e3e01001 	mvn	r1, #1
    a858:	e58d0008 	str	r0, [sp, #8]
    a85c:	e3a03fc7 	mov	r3, #796	; 0x31c
    a860:	e08f2002 	add	r2, pc, r2
    a864:	e58d1004 	str	r1, [sp, #4]
    a868:	e58d2000 	str	r2, [sp]
    a86c:	e28a0028 	add	r0, sl, #40	; 0x28
    a870:	e1a02008 	mov	r2, r8
    a874:	e59d1014 	ldr	r1, [sp, #20]
    a878:	eb002736 	bl	14558 <fprintf>
    a87c:	e51f12f4 	ldr	r1, [pc, #-756]	; a590 <main+0x2584>
    a880:	e595b000 	ldr	fp, [r5]
    a884:	e3a06000 	mov	r6, #0
    a888:	e08f1001 	add	r1, pc, r1
    a88c:	e5912000 	ldr	r2, [r1]
    a890:	e2822001 	add	r2, r2, #1
    a894:	e5812000 	str	r2, [r1]
		rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    a898:	e3a02010 	mov	r2, #16
    a89c:	e1a01009 	mov	r1, r9
    a8a0:	e1a00007 	mov	r0, r7
    a8a4:	eb002757 	bl	14608 <memcmp>
		EXPECT_EQ (0, rc1, "accept")
    a8a8:	e51f231c 	ldr	r2, [pc, #-796]	; a594 <main+0x2588>
    a8ac:	e28b3001 	add	r3, fp, #1
    a8b0:	e3500000 	cmp	r0, #0
    a8b4:	e08f2002 	add	r2, pc, r2
    a8b8:	e5823000 	str	r3, [r2]
    a8bc:	0affffd8 	beq	a824 <main+0x2818>
    a8c0:	e51f2330 	ldr	r2, [pc, #-816]	; a598 <main+0x258c>
    a8c4:	e300331f 	movw	r3, #799	; 0x31f
    a8c8:	e51f1334 	ldr	r1, [pc, #-820]	; a59c <main+0x2590>
    a8cc:	e3a06000 	mov	r6, #0
    a8d0:	e08f2002 	add	r2, pc, r2
    a8d4:	e58d2000 	str	r2, [sp]
    a8d8:	e51f2340 	ldr	r2, [pc, #-832]	; a5a0 <main+0x2594>
    a8dc:	e08f1001 	add	r1, pc, r1
    a8e0:	e58d0008 	str	r0, [sp, #8]
    a8e4:	e28a0028 	add	r0, sl, #40	; 0x28
    a8e8:	e08f2002 	add	r2, pc, r2
    a8ec:	e58d6004 	str	r6, [sp, #4]
    a8f0:	eb002718 	bl	14558 <fprintf>
    a8f4:	e51f2358 	ldr	r2, [pc, #-856]	; a5a4 <main+0x2598>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    a8f8:	e2844001 	add	r4, r4, #1
		EXPECT_EQ (0, rc1, "accept")
    a8fc:	e08f2002 	add	r2, pc, r2
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    a900:	e3540080 	cmp	r4, #128	; 0x80
		EXPECT_EQ (0, rc1, "accept")
    a904:	e5923000 	ldr	r3, [r2]
    a908:	e2833001 	add	r3, r3, #1
    a90c:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    a910:	1affffc6 	bne	a830 <main+0x2824>
    a914:	e59db028 	ldr	fp, [sp, #40]	; 0x28
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "datasink");
    a918:	e51f3378 	ldr	r3, [pc, #-888]	; a5a8 <main+0x259c>
    a91c:	e51f2378 	ldr	r2, [pc, #-888]	; a5ac <main+0x25a0>
    a920:	e1a0000b 	mov	r0, fp
    a924:	e51f137c 	ldr	r1, [pc, #-892]	; a5b0 <main+0x25a4>
    a928:	e08f3003 	add	r3, pc, r3
    a92c:	e08f2002 	add	r2, pc, r2
    a930:	e59d9024 	ldr	r9, [sp, #36]	; 0x24
    a934:	e08f1001 	add	r1, pc, r1
    a938:	eb0026de 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    a93c:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    a940:	e1a0000b 	mov	r0, fp
    a944:	eb000b74 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    a948:	e51f239c 	ldr	r2, [pc, #-924]	; a5b4 <main+0x25a8>
    a94c:	e2505000 	subs	r5, r0, #0
    a950:	e08f2002 	add	r2, pc, r2
    a954:	e5923000 	ldr	r3, [r2]
    a958:	e2833001 	add	r3, r3, #1
    a95c:	e5823000 	str	r3, [r2]
    a960:	ba000723 	blt	c5f4 <main+0x45e8>
	rc = accept(chan, &peer_uuid);
    a964:	e59d1018 	ldr	r1, [sp, #24]
    a968:	e1a00005 	mov	r0, r5
    a96c:	eb0021a2 	bl	12ffc <accept>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "accept on channel");
    a970:	e51f23c0 	ldr	r2, [pc, #-960]	; a5b8 <main+0x25ac>
    a974:	e3700008 	cmn	r0, #8
    a978:	e08f2002 	add	r2, pc, r2
    a97c:	e5923000 	ldr	r3, [r2]
    a980:	e2833001 	add	r3, r3, #1
    a984:	e5823000 	str	r3, [r2]
    a988:	0a000012 	beq	a9d8 <main+0x29cc>
    a98c:	e51f23d8 	ldr	r2, [pc, #-984]	; a5bc <main+0x25b0>
    a990:	e3e01007 	mvn	r1, #7
    a994:	e58d1004 	str	r1, [sp, #4]
    a998:	e300332a 	movw	r3, #810	; 0x32a
    a99c:	e08f2002 	add	r2, pc, r2
    a9a0:	e51f13e8 	ldr	r1, [pc, #-1000]	; a5c0 <main+0x25b4>
    a9a4:	e58d2000 	str	r2, [sp]
    a9a8:	e3a06000 	mov	r6, #0
    a9ac:	e51f23f0 	ldr	r2, [pc, #-1008]	; a5c4 <main+0x25b8>
    a9b0:	e08f1001 	add	r1, pc, r1
    a9b4:	e58d0008 	str	r0, [sp, #8]
    a9b8:	e28a0028 	add	r0, sl, #40	; 0x28
    a9bc:	e08f2002 	add	r2, pc, r2
    a9c0:	eb0026e4 	bl	14558 <fprintf>
    a9c4:	e51f2404 	ldr	r2, [pc, #-1028]	; a5c8 <main+0x25bc>
    a9c8:	e08f2002 	add	r2, pc, r2
    a9cc:	e5923000 	ldr	r3, [r2]
    a9d0:	e2833001 	add	r3, r3, #1
    a9d4:	e5823000 	str	r3, [r2]
	EXPECT_EQ (0, rc1, "accept")
    a9d8:	e51f4414 	ldr	r4, [pc, #-1044]	; a5cc <main+0x25c0>
	rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    a9dc:	e3a02010 	mov	r2, #16
    a9e0:	e59d0018 	ldr	r0, [sp, #24]
	EXPECT_EQ (0, rc1, "accept")
    a9e4:	e08f4004 	add	r4, pc, r4
	rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    a9e8:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    a9ec:	eb002705 	bl	14608 <memcmp>
	EXPECT_EQ (0, rc1, "accept")
    a9f0:	e3500000 	cmp	r0, #0
    a9f4:	e5943000 	ldr	r3, [r4]
    a9f8:	e2833001 	add	r3, r3, #1
    a9fc:	e5843000 	str	r3, [r4]
    aa00:	1a000612 	bne	c250 <main+0x4244>
	rc = close(chan);
    aa04:	e1a00005 	mov	r0, r5
    aa08:	eb00217e 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channnel")
    aa0c:	e5943000 	ldr	r3, [r4]
    aa10:	e3500000 	cmp	r0, #0
    aa14:	e2833001 	add	r3, r3, #1
    aa18:	e5843000 	str	r3, [r4]
    aa1c:	1a000624 	bne	c2b4 <main+0x42a8>
	TEST_END
    aa20:	e3560000 	cmp	r6, #0
    aa24:	1a000647 	bne	c348 <main+0x433c>
    aa28:	e51f2460 	ldr	r2, [pc, #-1120]	; a5d0 <main+0x25c4>
    aa2c:	e3003332 	movw	r3, #818	; 0x332
    aa30:	e51f1464 	ldr	r1, [pc, #-1124]	; a5d4 <main+0x25c8>
    aa34:	e28a0028 	add	r0, sl, #40	; 0x28
    aa38:	e08f2002 	add	r2, pc, r2
    aa3c:	e58d2000 	str	r2, [sp]
    aa40:	e51f2470 	ldr	r2, [pc, #-1136]	; a5d8 <main+0x25cc>
    aa44:	e08f1001 	add	r1, pc, r1
    aa48:	e08f2002 	add	r2, pc, r2
    aa4c:	eb0026c1 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    aa50:	e51f447c 	ldr	r4, [pc, #-1148]	; a5dc <main+0x25d0>
    aa54:	e28a5028 	add	r5, sl, #40	; 0x28
    aa58:	e51f3480 	ldr	r3, [pc, #-1152]	; a5e0 <main+0x25d4>
    aa5c:	e1a00005 	mov	r0, r5
    aa60:	e51f1484 	ldr	r1, [pc, #-1156]	; a5e4 <main+0x25d8>
    aa64:	e08f4004 	add	r4, pc, r4
    aa68:	e1a02004 	mov	r2, r4
    aa6c:	e08f3003 	add	r3, pc, r3
    aa70:	e08f1001 	add	r1, pc, r1
    aa74:	e58d3000 	str	r3, [sp]
    aa78:	e3a03e3a 	mov	r3, #928	; 0x3a0
    aa7c:	eb0026b5 	bl	14558 <fprintf>
	rc = get_msg(INVALID_IPC_HANDLE, &inf);
    aa80:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    aa84:	e3e00000 	mvn	r0, #0
    aa88:	eb00216a 	bl	13038 <get_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "get_msg on invalid handle");
    aa8c:	e51f24ac 	ldr	r2, [pc, #-1196]	; a5e8 <main+0x25dc>
    aa90:	e370002a 	cmn	r0, #42	; 0x2a
    aa94:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    aa98:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "get_msg on invalid handle");
    aa9c:	e5923000 	ldr	r3, [r2]
    aaa0:	e2833001 	add	r3, r3, #1
    aaa4:	e5823000 	str	r3, [r2]
    aaa8:	0a000011 	beq	aaf4 <main+0x2ae8>
    aaac:	e3e01029 	mvn	r1, #41	; 0x29
    aab0:	e51f34cc 	ldr	r3, [pc, #-1228]	; a5ec <main+0x25e0>
    aab4:	e58d1004 	str	r1, [sp, #4]
    aab8:	e1a02004 	mov	r2, r4
    aabc:	e51f14d4 	ldr	r1, [pc, #-1236]	; a5f0 <main+0x25e4>
    aac0:	e08f3003 	add	r3, pc, r3
    aac4:	e58d0008 	str	r0, [sp, #8]
    aac8:	e1a00005 	mov	r0, r5
    aacc:	e58d3000 	str	r3, [sp]
    aad0:	e08f1001 	add	r1, pc, r1
    aad4:	e3a03fe9 	mov	r3, #932	; 0x3a4
    aad8:	e3a06000 	mov	r6, #0
    aadc:	eb00269d 	bl	14558 <fprintf>
    aae0:	e51f24f4 	ldr	r2, [pc, #-1268]	; a5f4 <main+0x25e8>
    aae4:	e08f2002 	add	r2, pc, r2
    aae8:	e5923000 	ldr	r3, [r2]
    aaec:	e2833001 	add	r3, r3, #1
    aaf0:	e5823000 	str	r3, [r2]
	rc = get_msg(MAX_USER_HANDLES, &inf);
    aaf4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    aaf8:	e3a00080 	mov	r0, #128	; 0x80
    aafc:	eb00214d 	bl	13038 <get_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "get_msg on invalid handle");
    ab00:	e51f2510 	ldr	r2, [pc, #-1296]	; a5f8 <main+0x25ec>
    ab04:	e370002a 	cmn	r0, #42	; 0x2a
    ab08:	e08f2002 	add	r2, pc, r2
    ab0c:	e5923000 	ldr	r3, [r2]
    ab10:	e2833001 	add	r3, r3, #1
    ab14:	e5823000 	str	r3, [r2]
    ab18:	0a000012 	beq	ab68 <main+0x2b5c>
    ab1c:	e51f2528 	ldr	r2, [pc, #-1320]	; a5fc <main+0x25f0>
    ab20:	e3e01029 	mvn	r1, #41	; 0x29
    ab24:	e58d1004 	str	r1, [sp, #4]
    ab28:	e3a03fea 	mov	r3, #936	; 0x3a8
    ab2c:	e08f2002 	add	r2, pc, r2
    ab30:	e51f1538 	ldr	r1, [pc, #-1336]	; a600 <main+0x25f4>
    ab34:	e58d2000 	str	r2, [sp]
    ab38:	e3a06000 	mov	r6, #0
    ab3c:	e51f2540 	ldr	r2, [pc, #-1344]	; a604 <main+0x25f8>
    ab40:	e08f1001 	add	r1, pc, r1
    ab44:	e58d0008 	str	r0, [sp, #8]
    ab48:	e28a0028 	add	r0, sl, #40	; 0x28
    ab4c:	e08f2002 	add	r2, pc, r2
    ab50:	eb002680 	bl	14558 <fprintf>
    ab54:	e51f2554 	ldr	r2, [pc, #-1364]	; a608 <main+0x25fc>
    ab58:	e08f2002 	add	r2, pc, r2
    ab5c:	e5923000 	ldr	r3, [r2]
    ab60:	e2833001 	add	r3, r3, #1
    ab64:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "get_msg on invalid handle");
    ab68:	e51f5564 	ldr	r5, [pc, #-1380]	; a60c <main+0x2600>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "get_msg on invalid handle");
    ab6c:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "get_msg on invalid handle");
    ab70:	e51f8568 	ldr	r8, [pc, #-1384]	; a610 <main+0x2604>
    ab74:	e51f7568 	ldr	r7, [pc, #-1384]	; a614 <main+0x2608>
    ab78:	e08f5005 	add	r5, pc, r5
    ab7c:	e58d9014 	str	r9, [sp, #20]
    ab80:	e08f8008 	add	r8, pc, r8
    ab84:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
    ab88:	e08f7007 	add	r7, pc, r7
		rc = get_msg(i, &inf);
    ab8c:	e1a01009 	mov	r1, r9
    ab90:	e1a00004 	mov	r0, r4
    ab94:	eb002127 	bl	13038 <get_msg>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "get_msg on invalid handle");
    ab98:	e5953000 	ldr	r3, [r5]
    ab9c:	e3700002 	cmn	r0, #2
    aba0:	e2833001 	add	r3, r3, #1
    aba4:	e5853000 	str	r3, [r5]
    aba8:	0a000010 	beq	abf0 <main+0x2be4>
    abac:	e51f259c 	ldr	r2, [pc, #-1436]	; a618 <main+0x260c>
    abb0:	e3e01001 	mvn	r1, #1
    abb4:	e58d0008 	str	r0, [sp, #8]
    abb8:	e30033ad 	movw	r3, #941	; 0x3ad
    abbc:	e08f2002 	add	r2, pc, r2
    abc0:	e58d1004 	str	r1, [sp, #4]
    abc4:	e58d2000 	str	r2, [sp]
    abc8:	e1a01007 	mov	r1, r7
    abcc:	e1a02008 	mov	r2, r8
    abd0:	e28a0028 	add	r0, sl, #40	; 0x28
    abd4:	eb00265f 	bl	14558 <fprintf>
    abd8:	e51f25c4 	ldr	r2, [pc, #-1476]	; a61c <main+0x2610>
    abdc:	e3a06000 	mov	r6, #0
    abe0:	e08f2002 	add	r2, pc, r2
    abe4:	e5923000 	ldr	r3, [r2]
    abe8:	e2833001 	add	r3, r3, #1
    abec:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    abf0:	e2844001 	add	r4, r4, #1
    abf4:	e3540080 	cmp	r4, #128	; 0x80
    abf8:	1affffe3 	bne	ab8c <main+0x2b80>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE,  "datasink");
    abfc:	e51f35e4 	ldr	r3, [pc, #-1508]	; a620 <main+0x2614>
    ac00:	e1a0000b 	mov	r0, fp
    ac04:	e51f25e8 	ldr	r2, [pc, #-1512]	; a624 <main+0x2618>
    ac08:	e51f15e8 	ldr	r1, [pc, #-1512]	; a628 <main+0x261c>
    ac0c:	e08f3003 	add	r3, pc, r3
    ac10:	e08f2002 	add	r2, pc, r2
    ac14:	e59d9014 	ldr	r9, [sp, #20]
    ac18:	e08f1001 	add	r1, pc, r1
    ac1c:	eb002625 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE,
    ac20:	e3a03001 	mov	r3, #1
    ac24:	e3a02a01 	mov	r2, #4096	; 0x1000
    ac28:	e3a01002 	mov	r1, #2
    ac2c:	e1a0000b 	mov	r0, fp
    ac30:	eb0020eb 	bl	12fe4 <port_create>
	EXPECT_GE_ZERO (rc, "create datasink port");
    ac34:	e51f2610 	ldr	r2, [pc, #-1552]	; a62c <main+0x2620>
    ac38:	e2504000 	subs	r4, r0, #0
    ac3c:	e08f2002 	add	r2, pc, r2
    ac40:	e5923000 	ldr	r3, [r2]
    ac44:	e2833001 	add	r3, r3, #1
    ac48:	e5823000 	str	r3, [r2]
    ac4c:	ba0005ab 	blt	c300 <main+0x42f4>
	rc = get_msg(port, &inf);
    ac50:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    ac54:	e1a00004 	mov	r0, r4
    ac58:	eb0020f6 	bl	13038 <get_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "get_msg on port");
    ac5c:	e51f2634 	ldr	r2, [pc, #-1588]	; a630 <main+0x2624>
    ac60:	e3700008 	cmn	r0, #8
    ac64:	e08f2002 	add	r2, pc, r2
    ac68:	e5923000 	ldr	r3, [r2]
    ac6c:	e2833001 	add	r3, r3, #1
    ac70:	e5823000 	str	r3, [r2]
    ac74:	0a000012 	beq	acc4 <main+0x2cb8>
    ac78:	e51f264c 	ldr	r2, [pc, #-1612]	; a634 <main+0x2628>
    ac7c:	e3e01007 	mvn	r1, #7
    ac80:	e58d1004 	str	r1, [sp, #4]
    ac84:	e30033b9 	movw	r3, #953	; 0x3b9
    ac88:	e08f2002 	add	r2, pc, r2
    ac8c:	e51f165c 	ldr	r1, [pc, #-1628]	; a638 <main+0x262c>
    ac90:	e58d2000 	str	r2, [sp]
    ac94:	e3a06000 	mov	r6, #0
    ac98:	e51f2664 	ldr	r2, [pc, #-1636]	; a63c <main+0x2630>
    ac9c:	e08f1001 	add	r1, pc, r1
    aca0:	e58d0008 	str	r0, [sp, #8]
    aca4:	e28a0028 	add	r0, sl, #40	; 0x28
    aca8:	e08f2002 	add	r2, pc, r2
    acac:	eb002629 	bl	14558 <fprintf>
    acb0:	e51f2678 	ldr	r2, [pc, #-1656]	; a640 <main+0x2634>
    acb4:	e08f2002 	add	r2, pc, r2
    acb8:	e5923000 	ldr	r3, [r2]
    acbc:	e2833001 	add	r3, r3, #1
    acc0:	e5823000 	str	r3, [r2]
	close(port);
    acc4:	e1a00004 	mov	r0, r4
    acc8:	eb0020ce 	bl	13008 <close>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "datasink");
    accc:	e51f3690 	ldr	r3, [pc, #-1680]	; a644 <main+0x2638>
    acd0:	e51f2690 	ldr	r2, [pc, #-1680]	; a648 <main+0x263c>
    acd4:	e1a0000b 	mov	r0, fp
    acd8:	e51f1694 	ldr	r1, [pc, #-1684]	; a64c <main+0x2640>
    acdc:	e08f3003 	add	r3, pc, r3
    ace0:	e08f2002 	add	r2, pc, r2
    ace4:	e08f1001 	add	r1, pc, r1
    ace8:	eb0025f2 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    acec:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    acf0:	e1a0000b 	mov	r0, fp
    acf4:	eb000a88 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    acf8:	e51f26b0 	ldr	r2, [pc, #-1712]	; a650 <main+0x2644>
    acfc:	e2505000 	subs	r5, r0, #0
    ad00:	e08f2002 	add	r2, pc, r2
    ad04:	e5923000 	ldr	r3, [r2]
    ad08:	e2833001 	add	r3, r3, #1
    ad0c:	e5823000 	str	r3, [r2]
    ad10:	ba000597 	blt	c374 <main+0x4368>
	EXPECT_EQ (ERR_NO_MSG, rc, "get_msg on empty channel");
    ad14:	e51f46c8 	ldr	r4, [pc, #-1736]	; a654 <main+0x2648>
	rc = get_msg(chan, &inf);
    ad18:	e1a00005 	mov	r0, r5
    ad1c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
	EXPECT_EQ (ERR_NO_MSG, rc, "get_msg on empty channel");
    ad20:	e08f4004 	add	r4, pc, r4
	rc = get_msg(chan, &inf);
    ad24:	eb0020c3 	bl	13038 <get_msg>
	EXPECT_EQ (ERR_NO_MSG, rc, "get_msg on empty channel");
    ad28:	e3700004 	cmn	r0, #4
    ad2c:	e5943000 	ldr	r3, [r4]
    ad30:	e2833001 	add	r3, r3, #1
    ad34:	e5843000 	str	r3, [r4]
    ad38:	0a0003c5 	beq	bc54 <main+0x3c48>
    ad3c:	e51f26ec 	ldr	r2, [pc, #-1772]	; a658 <main+0x264c>
    ad40:	e3e01003 	mvn	r1, #3
    ad44:	e58d1004 	str	r1, [sp, #4]
    ad48:	e30033c3 	movw	r3, #963	; 0x3c3
    ad4c:	e08f2002 	add	r2, pc, r2
    ad50:	e51f16fc 	ldr	r1, [pc, #-1788]	; a65c <main+0x2650>
    ad54:	e58d2000 	str	r2, [sp]
    ad58:	e51f2700 	ldr	r2, [pc, #-1792]	; a660 <main+0x2654>
    ad5c:	e08f1001 	add	r1, pc, r1
    ad60:	e58d0008 	str	r0, [sp, #8]
    ad64:	e28a0028 	add	r0, sl, #40	; 0x28
    ad68:	e08f2002 	add	r2, pc, r2
    ad6c:	eb0025f9 	bl	14558 <fprintf>
    ad70:	e51f2714 	ldr	r2, [pc, #-1812]	; a664 <main+0x2658>
	rc = close(chan);
    ad74:	e1a00005 	mov	r0, r5
	EXPECT_EQ (ERR_NO_MSG, rc, "get_msg on empty channel");
    ad78:	e08f2002 	add	r2, pc, r2
    ad7c:	e5923000 	ldr	r3, [r2]
    ad80:	e2833001 	add	r3, r3, #1
    ad84:	e5823000 	str	r3, [r2]
	rc = close(chan);
    ad88:	eb00209e 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channnel");
    ad8c:	e5943000 	ldr	r3, [r4]
    ad90:	e3500000 	cmp	r0, #0
    ad94:	e2833001 	add	r3, r3, #1
    ad98:	e5843000 	str	r3, [r4]
    ad9c:	1a000518 	bne	c204 <main+0x41f8>
	TEST_END
    ada0:	e51f2740 	ldr	r2, [pc, #-1856]	; a668 <main+0x265c>
    ada4:	e3a03ff2 	mov	r3, #968	; 0x3c8
    ada8:	e51f1744 	ldr	r1, [pc, #-1860]	; a66c <main+0x2660>
    adac:	e28a0028 	add	r0, sl, #40	; 0x28
    adb0:	e08f2002 	add	r2, pc, r2
    adb4:	e58d2000 	str	r2, [sp]
    adb8:	e51f2750 	ldr	r2, [pc, #-1872]	; a670 <main+0x2664>
    adbc:	e08f1001 	add	r1, pc, r1
    adc0:	e08f2002 	add	r2, pc, r2
    adc4:	eb0025e3 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    adc8:	e51f475c 	ldr	r4, [pc, #-1884]	; a674 <main+0x2668>
    adcc:	e28a5028 	add	r5, sl, #40	; 0x28
    add0:	e51f3760 	ldr	r3, [pc, #-1888]	; a678 <main+0x266c>
    add4:	e1a00005 	mov	r0, r5
    add8:	e51f1764 	ldr	r1, [pc, #-1892]	; a67c <main+0x2670>
    addc:	e08f4004 	add	r4, pc, r4
    ade0:	e1a02004 	mov	r2, r4
    ade4:	e08f3003 	add	r3, pc, r3
    ade8:	e08f1001 	add	r1, pc, r1
    adec:	e58d3000 	str	r3, [sp]
    adf0:	e30033d3 	movw	r3, #979	; 0x3d3
    adf4:	eb0025d7 	bl	14558 <fprintf>
	rc = put_msg(INVALID_IPC_HANDLE, 0);
    adf8:	e3a01000 	mov	r1, #0
    adfc:	e3e00000 	mvn	r0, #0
    ae00:	eb002092 	bl	13050 <put_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "put_msg on invalid handle");
    ae04:	e51f278c 	ldr	r2, [pc, #-1932]	; a680 <main+0x2674>
    ae08:	e370002a 	cmn	r0, #42	; 0x2a
    ae0c:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    ae10:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "put_msg on invalid handle");
    ae14:	e5923000 	ldr	r3, [r2]
    ae18:	e2833001 	add	r3, r3, #1
    ae1c:	e5823000 	str	r3, [r2]
    ae20:	0a000011 	beq	ae6c <main+0x2e60>
    ae24:	e3e01029 	mvn	r1, #41	; 0x29
    ae28:	e51f37ac 	ldr	r3, [pc, #-1964]	; a684 <main+0x2678>
    ae2c:	e58d1004 	str	r1, [sp, #4]
    ae30:	e1a02004 	mov	r2, r4
    ae34:	e51f17b4 	ldr	r1, [pc, #-1972]	; a688 <main+0x267c>
    ae38:	e08f3003 	add	r3, pc, r3
    ae3c:	e58d0008 	str	r0, [sp, #8]
    ae40:	e1a00005 	mov	r0, r5
    ae44:	e58d3000 	str	r3, [sp]
    ae48:	e08f1001 	add	r1, pc, r1
    ae4c:	e30033d7 	movw	r3, #983	; 0x3d7
    ae50:	e3a06000 	mov	r6, #0
    ae54:	eb0025bf 	bl	14558 <fprintf>
    ae58:	e51f27d4 	ldr	r2, [pc, #-2004]	; a68c <main+0x2680>
    ae5c:	e08f2002 	add	r2, pc, r2
    ae60:	e5923000 	ldr	r3, [r2]
    ae64:	e2833001 	add	r3, r3, #1
    ae68:	e5823000 	str	r3, [r2]
	rc = put_msg(MAX_USER_HANDLES, 0);
    ae6c:	e3a01000 	mov	r1, #0
    ae70:	e3a00080 	mov	r0, #128	; 0x80
    ae74:	eb002075 	bl	13050 <put_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "put_msg on invalid handle");
    ae78:	e51f27f0 	ldr	r2, [pc, #-2032]	; a690 <main+0x2684>
    ae7c:	e370002a 	cmn	r0, #42	; 0x2a
    ae80:	e08f2002 	add	r2, pc, r2
    ae84:	e5923000 	ldr	r3, [r2]
    ae88:	e2833001 	add	r3, r3, #1
    ae8c:	e5823000 	str	r3, [r2]
    ae90:	0a000012 	beq	aee0 <main+0x2ed4>
    ae94:	e51f2808 	ldr	r2, [pc, #-2056]	; a694 <main+0x2688>
    ae98:	e3e01029 	mvn	r1, #41	; 0x29
    ae9c:	e58d1004 	str	r1, [sp, #4]
    aea0:	e30033db 	movw	r3, #987	; 0x3db
    aea4:	e08f2002 	add	r2, pc, r2
    aea8:	e51f1818 	ldr	r1, [pc, #-2072]	; a698 <main+0x268c>
    aeac:	e58d2000 	str	r2, [sp]
    aeb0:	e3a06000 	mov	r6, #0
    aeb4:	e51f2820 	ldr	r2, [pc, #-2080]	; a69c <main+0x2690>
    aeb8:	e08f1001 	add	r1, pc, r1
    aebc:	e58d0008 	str	r0, [sp, #8]
    aec0:	e28a0028 	add	r0, sl, #40	; 0x28
    aec4:	e08f2002 	add	r2, pc, r2
    aec8:	eb0025a2 	bl	14558 <fprintf>
    aecc:	e51f2834 	ldr	r2, [pc, #-2100]	; a6a0 <main+0x2694>
    aed0:	e08f2002 	add	r2, pc, r2
    aed4:	e5923000 	ldr	r3, [r2]
    aed8:	e2833001 	add	r3, r3, #1
    aedc:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "put_msg on invalid handle");
    aee0:	e51f5844 	ldr	r5, [pc, #-2116]	; a6a4 <main+0x2698>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "put_msg on invalid handle");
    aee4:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "put_msg on invalid handle");
    aee8:	e51f8848 	ldr	r8, [pc, #-2120]	; a6a8 <main+0x269c>
    aeec:	e51f7848 	ldr	r7, [pc, #-2120]	; a6ac <main+0x26a0>
    aef0:	e08f5005 	add	r5, pc, r5
    aef4:	e08f8008 	add	r8, pc, r8
    aef8:	e08f7007 	add	r7, pc, r7
		rc = put_msg (i, 0);
    aefc:	e3a01000 	mov	r1, #0
    af00:	e1a00004 	mov	r0, r4
    af04:	eb002051 	bl	13050 <put_msg>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "put_msg on invalid handle");
    af08:	e5953000 	ldr	r3, [r5]
    af0c:	e3700002 	cmn	r0, #2
    af10:	e2833001 	add	r3, r3, #1
    af14:	e5853000 	str	r3, [r5]
    af18:	0a000010 	beq	af60 <main+0x2f54>
    af1c:	e51f2874 	ldr	r2, [pc, #-2164]	; a6b0 <main+0x26a4>
    af20:	e3e01001 	mvn	r1, #1
    af24:	e58d0008 	str	r0, [sp, #8]
    af28:	e3a03e3e 	mov	r3, #992	; 0x3e0
    af2c:	e08f2002 	add	r2, pc, r2
    af30:	e58d1004 	str	r1, [sp, #4]
    af34:	e58d2000 	str	r2, [sp]
    af38:	e1a01007 	mov	r1, r7
    af3c:	e1a02008 	mov	r2, r8
    af40:	e28a0028 	add	r0, sl, #40	; 0x28
    af44:	eb002583 	bl	14558 <fprintf>
    af48:	e51f289c 	ldr	r2, [pc, #-2204]	; a6b4 <main+0x26a8>
    af4c:	e3a06000 	mov	r6, #0
    af50:	e08f2002 	add	r2, pc, r2
    af54:	e5923000 	ldr	r3, [r2]
    af58:	e2833001 	add	r3, r3, #1
    af5c:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    af60:	e2844001 	add	r4, r4, #1
    af64:	e3540080 	cmp	r4, #128	; 0x80
    af68:	1affffe3 	bne	aefc <main+0x2ef0>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE,  "datasink");
    af6c:	e51f38bc 	ldr	r3, [pc, #-2236]	; a6b8 <main+0x26ac>
    af70:	e1a0000b 	mov	r0, fp
    af74:	e51f28c0 	ldr	r2, [pc, #-2240]	; a6bc <main+0x26b0>
    af78:	e51f18c0 	ldr	r1, [pc, #-2240]	; a6c0 <main+0x26b4>
    af7c:	e08f3003 	add	r3, pc, r3
    af80:	e08f2002 	add	r2, pc, r2
    af84:	e08f1001 	add	r1, pc, r1
    af88:	eb00254a 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE,
    af8c:	e3a03001 	mov	r3, #1
    af90:	e3a02a01 	mov	r2, #4096	; 0x1000
    af94:	e3a01002 	mov	r1, #2
    af98:	e1a0000b 	mov	r0, fp
    af9c:	eb002010 	bl	12fe4 <port_create>
	EXPECT_GE_ZERO (rc, "create datasink port");
    afa0:	e51f28e4 	ldr	r2, [pc, #-2276]	; a6c4 <main+0x26b8>
    afa4:	e2504000 	subs	r4, r0, #0
    afa8:	e08f2002 	add	r2, pc, r2
    afac:	e5923000 	ldr	r3, [r2]
    afb0:	e2833001 	add	r3, r3, #1
    afb4:	e5823000 	str	r3, [r2]
    afb8:	ba0004ff 	blt	c3bc <main+0x43b0>
	rc = put_msg(port, 0);
    afbc:	e3a01000 	mov	r1, #0
    afc0:	e1a00004 	mov	r0, r4
    afc4:	eb002021 	bl	13050 <put_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "put_msg on port");
    afc8:	e51f2908 	ldr	r2, [pc, #-2312]	; a6c8 <main+0x26bc>
    afcc:	e3700008 	cmn	r0, #8
    afd0:	e08f2002 	add	r2, pc, r2
    afd4:	e5923000 	ldr	r3, [r2]
    afd8:	e2833001 	add	r3, r3, #1
    afdc:	e5823000 	str	r3, [r2]
    afe0:	0a000012 	beq	b030 <main+0x3024>
    afe4:	e51f2920 	ldr	r2, [pc, #-2336]	; a6cc <main+0x26c0>
    afe8:	e3e01007 	mvn	r1, #7
    afec:	e58d1004 	str	r1, [sp, #4]
    aff0:	e3a03ffb 	mov	r3, #1004	; 0x3ec
    aff4:	e08f2002 	add	r2, pc, r2
    aff8:	e51f1930 	ldr	r1, [pc, #-2352]	; a6d0 <main+0x26c4>
    affc:	e58d2000 	str	r2, [sp]
    b000:	e3a06000 	mov	r6, #0
    b004:	e51f2938 	ldr	r2, [pc, #-2360]	; a6d4 <main+0x26c8>
    b008:	e08f1001 	add	r1, pc, r1
    b00c:	e58d0008 	str	r0, [sp, #8]
    b010:	e28a0028 	add	r0, sl, #40	; 0x28
    b014:	e08f2002 	add	r2, pc, r2
    b018:	eb00254e 	bl	14558 <fprintf>
    b01c:	e51f294c 	ldr	r2, [pc, #-2380]	; a6d8 <main+0x26cc>
    b020:	e08f2002 	add	r2, pc, r2
    b024:	e5923000 	ldr	r3, [r2]
    b028:	e2833001 	add	r3, r3, #1
    b02c:	e5823000 	str	r3, [r2]
	rc = close(port);
    b030:	e1a00004 	mov	r0, r4
    b034:	eb001ff3 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close port");
    b038:	e51f2964 	ldr	r2, [pc, #-2404]	; a6dc <main+0x26d0>
    b03c:	e3500000 	cmp	r0, #0
    b040:	e08f2002 	add	r2, pc, r2
    b044:	e5923000 	ldr	r3, [r2]
    b048:	e2833001 	add	r3, r3, #1
    b04c:	e5823000 	str	r3, [r2]
    b050:	0a000011 	beq	b09c <main+0x3090>
    b054:	e51f297c 	ldr	r2, [pc, #-2428]	; a6e0 <main+0x26d4>
    b058:	e30033ee 	movw	r3, #1006	; 0x3ee
    b05c:	e51f1980 	ldr	r1, [pc, #-2432]	; a6e4 <main+0x26d8>
    b060:	e3a06000 	mov	r6, #0
    b064:	e08f2002 	add	r2, pc, r2
    b068:	e58d2000 	str	r2, [sp]
    b06c:	e51f298c 	ldr	r2, [pc, #-2444]	; a6e8 <main+0x26dc>
    b070:	e08f1001 	add	r1, pc, r1
    b074:	e58d0008 	str	r0, [sp, #8]
    b078:	e28a0028 	add	r0, sl, #40	; 0x28
    b07c:	e08f2002 	add	r2, pc, r2
    b080:	e58d6004 	str	r6, [sp, #4]
    b084:	eb002533 	bl	14558 <fprintf>
    b088:	e51f29a4 	ldr	r2, [pc, #-2468]	; a6ec <main+0x26e0>
    b08c:	e08f2002 	add	r2, pc, r2
    b090:	e5923000 	ldr	r3, [r2]
    b094:	e2833001 	add	r3, r3, #1
    b098:	e5823000 	str	r3, [r2]
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "datasink");
    b09c:	e51f39b4 	ldr	r3, [pc, #-2484]	; a6f0 <main+0x26e4>
    b0a0:	e1a0000b 	mov	r0, fp
    b0a4:	e51f29b8 	ldr	r2, [pc, #-2488]	; a6f4 <main+0x26e8>
    b0a8:	e51f19b8 	ldr	r1, [pc, #-2488]	; a6f8 <main+0x26ec>
    b0ac:	e08f3003 	add	r3, pc, r3
    b0b0:	e08f2002 	add	r2, pc, r2
    b0b4:	e08f1001 	add	r1, pc, r1
    b0b8:	eb0024fe 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    b0bc:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    b0c0:	e1a0000b 	mov	r0, fp
    b0c4:	eb000994 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    b0c8:	e51f29d4 	ldr	r2, [pc, #-2516]	; a6fc <main+0x26f0>
    b0cc:	e2505000 	subs	r5, r0, #0
    b0d0:	e08f2002 	add	r2, pc, r2
    b0d4:	e5923000 	ldr	r3, [r2]
    b0d8:	e2833001 	add	r3, r3, #1
    b0dc:	e5823000 	str	r3, [r2]
    b0e0:	ba0004d9 	blt	c44c <main+0x4440>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "put_msg on empty channel");
    b0e4:	e51f49ec 	ldr	r4, [pc, #-2540]	; a700 <main+0x26f4>
	rc = put_msg(chan, 0);
    b0e8:	e3a01000 	mov	r1, #0
    b0ec:	e1a00005 	mov	r0, r5
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "put_msg on empty channel");
    b0f0:	e08f4004 	add	r4, pc, r4
	rc = put_msg(chan, 0);
    b0f4:	eb001fd5 	bl	13050 <put_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "put_msg on empty channel");
    b0f8:	e3700008 	cmn	r0, #8
    b0fc:	e5943000 	ldr	r3, [r4]
    b100:	e2833001 	add	r3, r3, #1
    b104:	e5843000 	str	r3, [r4]
    b108:	0a0002a3 	beq	bb9c <main+0x3b90>
    b10c:	e51f2a10 	ldr	r2, [pc, #-2576]	; a704 <main+0x26f8>
    b110:	e3e01007 	mvn	r1, #7
    b114:	e58d1004 	str	r1, [sp, #4]
    b118:	e30033f7 	movw	r3, #1015	; 0x3f7
    b11c:	e08f2002 	add	r2, pc, r2
    b120:	e51f1a20 	ldr	r1, [pc, #-2592]	; a708 <main+0x26fc>
    b124:	e58d2000 	str	r2, [sp]
    b128:	e51f2a24 	ldr	r2, [pc, #-2596]	; a70c <main+0x2700>
    b12c:	e08f1001 	add	r1, pc, r1
    b130:	e58d0008 	str	r0, [sp, #8]
    b134:	e28a0028 	add	r0, sl, #40	; 0x28
    b138:	e08f2002 	add	r2, pc, r2
    b13c:	eb002505 	bl	14558 <fprintf>
    b140:	e51f2a38 	ldr	r2, [pc, #-2616]	; a710 <main+0x2704>
	rc = close(chan);
    b144:	e1a00005 	mov	r0, r5
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "put_msg on empty channel");
    b148:	e08f2002 	add	r2, pc, r2
    b14c:	e5923000 	ldr	r3, [r2]
    b150:	e2833001 	add	r3, r3, #1
    b154:	e5823000 	str	r3, [r2]
	rc = close(chan);
    b158:	eb001faa 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
    b15c:	e5943000 	ldr	r3, [r4]
    b160:	e3500000 	cmp	r0, #0
    b164:	e2833001 	add	r3, r3, #1
    b168:	e5843000 	str	r3, [r4]
    b16c:	1a00034a 	bne	be9c <main+0x3e90>
	TEST_END
    b170:	e51f2a64 	ldr	r2, [pc, #-2660]	; a714 <main+0x2708>
    b174:	e30033fb 	movw	r3, #1019	; 0x3fb
    b178:	e51f1a68 	ldr	r1, [pc, #-2664]	; a718 <main+0x270c>
    b17c:	e28a0028 	add	r0, sl, #40	; 0x28
    b180:	e08f2002 	add	r2, pc, r2
    b184:	e58d2000 	str	r2, [sp]
    b188:	e51f2a74 	ldr	r2, [pc, #-2676]	; a71c <main+0x2710>
    b18c:	e08f1001 	add	r1, pc, r1
    b190:	e08f2002 	add	r2, pc, r2
    b194:	eb0024ef 	bl	14558 <fprintf>
	TEST_BEGIN(__func__);
    b198:	e51f4a80 	ldr	r4, [pc, #-2688]	; a720 <main+0x2714>
    b19c:	e28a5028 	add	r5, sl, #40	; 0x28
    b1a0:	e51f3a84 	ldr	r3, [pc, #-2692]	; a724 <main+0x2718>
    b1a4:	e1a00005 	mov	r0, r5
    b1a8:	e51f1a88 	ldr	r1, [pc, #-2696]	; a728 <main+0x271c>
    b1ac:	e08f4004 	add	r4, pc, r4
    b1b0:	e08f3003 	add	r3, pc, r3
    b1b4:	e1a02004 	mov	r2, r4
    b1b8:	e58d3000 	str	r3, [sp]
    b1bc:	e08f1001 	add	r1, pc, r1
    b1c0:	e3003445 	movw	r3, #1093	; 0x445
    b1c4:	eb0024e3 	bl	14558 <fprintf>
	memset (&msg, 0, sizeof(msg));
    b1c8:	e59d6030 	ldr	r6, [sp, #48]	; 0x30
    b1cc:	e3a02010 	mov	r2, #16
    b1d0:	e3a01000 	mov	r1, #0
    b1d4:	e1a00006 	mov	r0, r6
    b1d8:	eb002523 	bl	1466c <memset>
	rc = send_msg(INVALID_IPC_HANDLE, &msg);
    b1dc:	e1a01006 	mov	r1, r6
    b1e0:	e3e00000 	mvn	r0, #0
    b1e4:	eb001f9c 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "send_msg on invalid handle");
    b1e8:	e51f2ac4 	ldr	r2, [pc, #-2756]	; a72c <main+0x2720>
    b1ec:	e370002a 	cmn	r0, #42	; 0x2a
    b1f0:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    b1f4:	03a06001 	moveq	r6, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "send_msg on invalid handle");
    b1f8:	e5923000 	ldr	r3, [r2]
    b1fc:	e2833001 	add	r3, r3, #1
    b200:	e5823000 	str	r3, [r2]
    b204:	0a000011 	beq	b250 <main+0x3244>
    b208:	e3e01029 	mvn	r1, #41	; 0x29
    b20c:	e51f3ae4 	ldr	r3, [pc, #-2788]	; a730 <main+0x2724>
    b210:	e58d1004 	str	r1, [sp, #4]
    b214:	e1a02004 	mov	r2, r4
    b218:	e51f1aec 	ldr	r1, [pc, #-2796]	; a734 <main+0x2728>
    b21c:	e08f3003 	add	r3, pc, r3
    b220:	e58d0008 	str	r0, [sp, #8]
    b224:	e1a00005 	mov	r0, r5
    b228:	e58d3000 	str	r3, [sp]
    b22c:	e08f1001 	add	r1, pc, r1
    b230:	e300344c 	movw	r3, #1100	; 0x44c
    b234:	e3a06000 	mov	r6, #0
    b238:	eb0024c6 	bl	14558 <fprintf>
    b23c:	e51f2b0c 	ldr	r2, [pc, #-2828]	; a738 <main+0x272c>
    b240:	e08f2002 	add	r2, pc, r2
    b244:	e5923000 	ldr	r3, [r2]
    b248:	e2833001 	add	r3, r3, #1
    b24c:	e5823000 	str	r3, [r2]
	rc = send_msg(INVALID_IPC_HANDLE, NULL);
    b250:	e3a01000 	mov	r1, #0
    b254:	e3e00000 	mvn	r0, #0
    b258:	eb001f7f 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_FAULT, rc, "send_msg on NULL msg");
    b25c:	e51f2b28 	ldr	r2, [pc, #-2856]	; a73c <main+0x2730>
    b260:	e3700028 	cmn	r0, #40	; 0x28
    b264:	e08f2002 	add	r2, pc, r2
    b268:	e5923000 	ldr	r3, [r2]
    b26c:	e2833001 	add	r3, r3, #1
    b270:	e5823000 	str	r3, [r2]
    b274:	0a000012 	beq	b2c4 <main+0x32b8>
    b278:	e51f2b40 	ldr	r2, [pc, #-2880]	; a740 <main+0x2734>
    b27c:	e3e01027 	mvn	r1, #39	; 0x27
    b280:	e58d1004 	str	r1, [sp, #4]
    b284:	e3a03e45 	mov	r3, #1104	; 0x450
    b288:	e08f2002 	add	r2, pc, r2
    b28c:	e51f1b50 	ldr	r1, [pc, #-2896]	; a744 <main+0x2738>
    b290:	e58d2000 	str	r2, [sp]
    b294:	e3a06000 	mov	r6, #0
    b298:	e51f2b58 	ldr	r2, [pc, #-2904]	; a748 <main+0x273c>
    b29c:	e08f1001 	add	r1, pc, r1
    b2a0:	e58d0008 	str	r0, [sp, #8]
    b2a4:	e28a0028 	add	r0, sl, #40	; 0x28
    b2a8:	e08f2002 	add	r2, pc, r2
    b2ac:	eb0024a9 	bl	14558 <fprintf>
    b2b0:	e51f2b6c 	ldr	r2, [pc, #-2924]	; a74c <main+0x2740>
    b2b4:	e08f2002 	add	r2, pc, r2
    b2b8:	e5923000 	ldr	r3, [r2]
    b2bc:	e2833001 	add	r3, r3, #1
    b2c0:	e5823000 	str	r3, [r2]
	rc = send_msg(MAX_USER_HANDLES, &msg);
    b2c4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    b2c8:	e3a00080 	mov	r0, #128	; 0x80
    b2cc:	eb001f62 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "send_msg on invalid handle");
    b2d0:	e51f2b88 	ldr	r2, [pc, #-2952]	; a750 <main+0x2744>
    b2d4:	e370002a 	cmn	r0, #42	; 0x2a
    b2d8:	e08f2002 	add	r2, pc, r2
    b2dc:	e5923000 	ldr	r3, [r2]
    b2e0:	e2833001 	add	r3, r3, #1
    b2e4:	e5823000 	str	r3, [r2]
    b2e8:	0a000012 	beq	b338 <main+0x332c>
    b2ec:	e51f2ba0 	ldr	r2, [pc, #-2976]	; a754 <main+0x2748>
    b2f0:	e3e01029 	mvn	r1, #41	; 0x29
    b2f4:	e58d1004 	str	r1, [sp, #4]
    b2f8:	e3003454 	movw	r3, #1108	; 0x454
    b2fc:	e08f2002 	add	r2, pc, r2
    b300:	e51f1bb0 	ldr	r1, [pc, #-2992]	; a758 <main+0x274c>
    b304:	e58d2000 	str	r2, [sp]
    b308:	e3a06000 	mov	r6, #0
    b30c:	e51f2bb8 	ldr	r2, [pc, #-3000]	; a75c <main+0x2750>
    b310:	e08f1001 	add	r1, pc, r1
    b314:	e58d0008 	str	r0, [sp, #8]
    b318:	e28a0028 	add	r0, sl, #40	; 0x28
    b31c:	e08f2002 	add	r2, pc, r2
    b320:	eb00248c 	bl	14558 <fprintf>
    b324:	e51f2bcc 	ldr	r2, [pc, #-3020]	; a760 <main+0x2754>
    b328:	e08f2002 	add	r2, pc, r2
    b32c:	e5923000 	ldr	r3, [r2]
    b330:	e2833001 	add	r3, r3, #1
    b334:	e5823000 	str	r3, [r2]
	rc = send_msg(MAX_USER_HANDLES, NULL);
    b338:	e3a01000 	mov	r1, #0
    b33c:	e3a00080 	mov	r0, #128	; 0x80
    b340:	eb001f45 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_FAULT, rc, "send_msg on NULL msg");
    b344:	e51f2be8 	ldr	r2, [pc, #-3048]	; a764 <main+0x2758>
    b348:	e3700028 	cmn	r0, #40	; 0x28
    b34c:	e08f2002 	add	r2, pc, r2
    b350:	e5923000 	ldr	r3, [r2]
    b354:	e2833001 	add	r3, r3, #1
    b358:	e5823000 	str	r3, [r2]
    b35c:	0a000012 	beq	b3ac <main+0x33a0>
    b360:	e51f2c00 	ldr	r2, [pc, #-3072]	; a768 <main+0x275c>
    b364:	e3e01027 	mvn	r1, #39	; 0x27
    b368:	e58d1004 	str	r1, [sp, #4]
    b36c:	e3003458 	movw	r3, #1112	; 0x458
    b370:	e08f2002 	add	r2, pc, r2
    b374:	e51f1c10 	ldr	r1, [pc, #-3088]	; a76c <main+0x2760>
    b378:	e58d2000 	str	r2, [sp]
    b37c:	e3a06000 	mov	r6, #0
    b380:	e51f2c18 	ldr	r2, [pc, #-3096]	; a770 <main+0x2764>
    b384:	e08f1001 	add	r1, pc, r1
    b388:	e58d0008 	str	r0, [sp, #8]
    b38c:	e28a0028 	add	r0, sl, #40	; 0x28
    b390:	e08f2002 	add	r2, pc, r2
    b394:	eb00246f 	bl	14558 <fprintf>
    b398:	e51f2c2c 	ldr	r2, [pc, #-3116]	; a774 <main+0x2768>
    b39c:	e08f2002 	add	r2, pc, r2
    b3a0:	e5923000 	ldr	r3, [r2]
    b3a4:	e2833001 	add	r3, r3, #1
    b3a8:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "send on invalid handle");
    b3ac:	e51f5c3c 	ldr	r5, [pc, #-3132]	; a778 <main+0x276c>
	EXPECT_EQ (ERR_FAULT, rc, "send_msg on NULL msg");
    b3b0:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "send on invalid handle");
    b3b4:	e51f8c40 	ldr	r8, [pc, #-3136]	; a77c <main+0x2770>
    b3b8:	e51f7c40 	ldr	r7, [pc, #-3136]	; a780 <main+0x2774>
    b3bc:	e08f5005 	add	r5, pc, r5
    b3c0:	e58d9014 	str	r9, [sp, #20]
    b3c4:	e08f8008 	add	r8, pc, r8
    b3c8:	e59d9030 	ldr	r9, [sp, #48]	; 0x30
    b3cc:	e08f7007 	add	r7, pc, r7
		rc = send_msg(i, &msg);
    b3d0:	e1a01009 	mov	r1, r9
    b3d4:	e1a00004 	mov	r0, r4
    b3d8:	eb001f1f 	bl	1305c <send_msg>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "send on invalid handle");
    b3dc:	e5953000 	ldr	r3, [r5]
    b3e0:	e3700002 	cmn	r0, #2
    b3e4:	e2833001 	add	r3, r3, #1
    b3e8:	e5853000 	str	r3, [r5]
    b3ec:	0a000010 	beq	b434 <main+0x3428>
    b3f0:	e51f2c74 	ldr	r2, [pc, #-3188]	; a784 <main+0x2778>
    b3f4:	e3e01001 	mvn	r1, #1
    b3f8:	e58d0008 	str	r0, [sp, #8]
    b3fc:	e300345d 	movw	r3, #1117	; 0x45d
    b400:	e08f2002 	add	r2, pc, r2
    b404:	e58d1004 	str	r1, [sp, #4]
    b408:	e58d2000 	str	r2, [sp]
    b40c:	e1a01007 	mov	r1, r7
    b410:	e1a02008 	mov	r2, r8
    b414:	e28a0028 	add	r0, sl, #40	; 0x28
    b418:	eb00244e 	bl	14558 <fprintf>
    b41c:	e51f2c9c 	ldr	r2, [pc, #-3228]	; a788 <main+0x277c>
    b420:	e3a06000 	mov	r6, #0
    b424:	e08f2002 	add	r2, pc, r2
    b428:	e5923000 	ldr	r3, [r2]
    b42c:	e2833001 	add	r3, r3, #1
    b430:	e5823000 	str	r3, [r2]
		rc = send_msg(i, NULL);
    b434:	e3a01000 	mov	r1, #0
    b438:	e1a00004 	mov	r0, r4
    b43c:	eb001f06 	bl	1305c <send_msg>
		EXPECT_EQ (ERR_FAULT, rc, "send_msg on NULL msg");
    b440:	e51f2cbc 	ldr	r2, [pc, #-3260]	; a78c <main+0x2780>
    b444:	e3700028 	cmn	r0, #40	; 0x28
    b448:	e08f2002 	add	r2, pc, r2
    b44c:	e5923000 	ldr	r3, [r2]
    b450:	e2833001 	add	r3, r3, #1
    b454:	e5823000 	str	r3, [r2]
    b458:	0a000012 	beq	b4a8 <main+0x349c>
    b45c:	e51f2cd4 	ldr	r2, [pc, #-3284]	; a790 <main+0x2784>
    b460:	e3e01027 	mvn	r1, #39	; 0x27
    b464:	e58d1004 	str	r1, [sp, #4]
    b468:	e3003461 	movw	r3, #1121	; 0x461
    b46c:	e08f2002 	add	r2, pc, r2
    b470:	e51f1ce4 	ldr	r1, [pc, #-3300]	; a794 <main+0x2788>
    b474:	e58d2000 	str	r2, [sp]
    b478:	e3a06000 	mov	r6, #0
    b47c:	e51f2cec 	ldr	r2, [pc, #-3308]	; a798 <main+0x278c>
    b480:	e08f1001 	add	r1, pc, r1
    b484:	e58d0008 	str	r0, [sp, #8]
    b488:	e28a0028 	add	r0, sl, #40	; 0x28
    b48c:	e08f2002 	add	r2, pc, r2
    b490:	eb002430 	bl	14558 <fprintf>
    b494:	e51f2d00 	ldr	r2, [pc, #-3328]	; a79c <main+0x2790>
    b498:	e08f2002 	add	r2, pc, r2
    b49c:	e5923000 	ldr	r3, [r2]
    b4a0:	e2833001 	add	r3, r3, #1
    b4a4:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    b4a8:	e2844001 	add	r4, r4, #1
    b4ac:	e3540080 	cmp	r4, #128	; 0x80
    b4b0:	1affffc6 	bne	b3d0 <main+0x33c4>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE,  "datasink");
    b4b4:	e59d4020 	ldr	r4, [sp, #32]
    b4b8:	e51f3d20 	ldr	r3, [pc, #-3360]	; a7a0 <main+0x2794>
    b4bc:	e51f2d20 	ldr	r2, [pc, #-3360]	; a7a4 <main+0x2798>
    b4c0:	e1a00004 	mov	r0, r4
    b4c4:	e51f1d24 	ldr	r1, [pc, #-3364]	; a7a8 <main+0x279c>
    b4c8:	e08f3003 	add	r3, pc, r3
    b4cc:	e08f2002 	add	r2, pc, r2
    b4d0:	e59d9014 	ldr	r9, [sp, #20]
    b4d4:	e08f1001 	add	r1, pc, r1
    b4d8:	eb0023f6 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE,
    b4dc:	e3a03001 	mov	r3, #1
    b4e0:	e3a02a01 	mov	r2, #4096	; 0x1000
    b4e4:	e1a00004 	mov	r0, r4
    b4e8:	e3a01002 	mov	r1, #2
    b4ec:	eb001ebc 	bl	12fe4 <port_create>
	EXPECT_GE_ZERO (rc, "create datasink port");
    b4f0:	e51f2d4c 	ldr	r2, [pc, #-3404]	; a7ac <main+0x27a0>
    b4f4:	e2504000 	subs	r4, r0, #0
    b4f8:	e08f2002 	add	r2, pc, r2
    b4fc:	e5923000 	ldr	r3, [r2]
    b500:	e2833001 	add	r3, r3, #1
    b504:	e5823000 	str	r3, [r2]
    b508:	ba0003e1 	blt	c494 <main+0x4488>
	rc = send_msg(port, &msg);
    b50c:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    b510:	e1a00004 	mov	r0, r4
    b514:	eb001ed0 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "send_msg on port");
    b518:	e51f2d70 	ldr	r2, [pc, #-3440]	; a7b0 <main+0x27a4>
    b51c:	e3700008 	cmn	r0, #8
    b520:	e08f2002 	add	r2, pc, r2
    b524:	e5923000 	ldr	r3, [r2]
    b528:	e2833001 	add	r3, r3, #1
    b52c:	e5823000 	str	r3, [r2]
    b530:	0a000012 	beq	b580 <main+0x3574>
    b534:	e51f2d88 	ldr	r2, [pc, #-3464]	; a7b4 <main+0x27a8>
    b538:	e3e01007 	mvn	r1, #7
    b53c:	e58d1004 	str	r1, [sp, #4]
    b540:	e300346d 	movw	r3, #1133	; 0x46d
    b544:	e08f2002 	add	r2, pc, r2
    b548:	e51f1d98 	ldr	r1, [pc, #-3480]	; a7b8 <main+0x27ac>
    b54c:	e58d2000 	str	r2, [sp]
    b550:	e3a06000 	mov	r6, #0
    b554:	e51f2da0 	ldr	r2, [pc, #-3488]	; a7bc <main+0x27b0>
    b558:	e08f1001 	add	r1, pc, r1
    b55c:	e58d0008 	str	r0, [sp, #8]
    b560:	e28a0028 	add	r0, sl, #40	; 0x28
    b564:	e08f2002 	add	r2, pc, r2
    b568:	eb0023fa 	bl	14558 <fprintf>
    b56c:	e51f2db4 	ldr	r2, [pc, #-3508]	; a7c0 <main+0x27b4>
    b570:	e08f2002 	add	r2, pc, r2
    b574:	e5923000 	ldr	r3, [r2]
    b578:	e2833001 	add	r3, r3, #1
    b57c:	e5823000 	str	r3, [r2]
	close(port);
    b580:	e1a00004 	mov	r0, r4
    b584:	eb001e9f 	bl	13008 <close>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "datasink");
    b588:	e59d4020 	ldr	r4, [sp, #32]
    b58c:	e51f3dd0 	ldr	r3, [pc, #-3536]	; a7c4 <main+0x27b8>
    b590:	e51f2dd0 	ldr	r2, [pc, #-3536]	; a7c8 <main+0x27bc>
    b594:	e1a00004 	mov	r0, r4
    b598:	e51f1dd4 	ldr	r1, [pc, #-3540]	; a7cc <main+0x27c0>
    b59c:	e08f3003 	add	r3, pc, r3
    b5a0:	e08f2002 	add	r2, pc, r2
    b5a4:	e08f1001 	add	r1, pc, r1
    b5a8:	eb0023c2 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    b5ac:	e1a00004 	mov	r0, r4
    b5b0:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    b5b4:	eb000858 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    b5b8:	e51f2df0 	ldr	r2, [pc, #-3568]	; a7d0 <main+0x27c4>
    b5bc:	e2505000 	subs	r5, r0, #0
    b5c0:	e08f2002 	add	r2, pc, r2
    b5c4:	e5923000 	ldr	r3, [r2]
    b5c8:	e2833001 	add	r3, r3, #1
    b5cc:	e5823000 	str	r3, [r2]
    b5d0:	ba00038b 	blt	c404 <main+0x43f8>
	rc = send_msg(chan, &msg);
    b5d4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    b5d8:	e1a00005 	mov	r0, r5
	msg.num_handles = 1;
    b5dc:	e3a03001 	mov	r3, #1
    b5e0:	e58d308c 	str	r3, [sp, #140]	; 0x8c
	rc = send_msg(chan, &msg);
    b5e4:	eb001e9c 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_NOT_SUPPORTED, rc, "sending handles");
    b5e8:	e51f2e1c 	ldr	r2, [pc, #-3612]	; a7d4 <main+0x27c8>
    b5ec:	e3700018 	cmn	r0, #24
    b5f0:	e08f2002 	add	r2, pc, r2
    b5f4:	e5923000 	ldr	r3, [r2]
    b5f8:	e2833001 	add	r3, r3, #1
    b5fc:	e5823000 	str	r3, [r2]
    b600:	0a000012 	beq	b650 <main+0x3644>
    b604:	e51f2e34 	ldr	r2, [pc, #-3636]	; a7d8 <main+0x27cc>
    b608:	e3e01017 	mvn	r1, #23
    b60c:	e58d1004 	str	r1, [sp, #4]
    b610:	e3003479 	movw	r3, #1145	; 0x479
    b614:	e08f2002 	add	r2, pc, r2
    b618:	e51f1e44 	ldr	r1, [pc, #-3652]	; a7dc <main+0x27d0>
    b61c:	e58d2000 	str	r2, [sp]
    b620:	e3a06000 	mov	r6, #0
    b624:	e51f2e4c 	ldr	r2, [pc, #-3660]	; a7e0 <main+0x27d4>
    b628:	e08f1001 	add	r1, pc, r1
    b62c:	e58d0008 	str	r0, [sp, #8]
    b630:	e28a0028 	add	r0, sl, #40	; 0x28
    b634:	e08f2002 	add	r2, pc, r2
    b638:	eb0023c6 	bl	14558 <fprintf>
    b63c:	e51f2e60 	ldr	r2, [pc, #-3680]	; a7e4 <main+0x27d8>
    b640:	e08f2002 	add	r2, pc, r2
    b644:	e5923000 	ldr	r3, [r2]
    b648:	e2833001 	add	r3, r3, #1
    b64c:	e5823000 	str	r3, [r2]
	rc = send_msg(chan, &msg);
    b650:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
    b654:	e1a00005 	mov	r0, r5
	msg.num_handles = 0;
    b658:	e3a04000 	mov	r4, #0
	msg.num_iov = 1;
    b65c:	e3a03001 	mov	r3, #1
	msg.num_handles = 0;
    b660:	e58d408c 	str	r4, [sp, #140]	; 0x8c
	msg.num_iov = 1;
    b664:	e58d3084 	str	r3, [sp, #132]	; 0x84
	msg.handles  = NULL;
    b668:	e58d4090 	str	r4, [sp, #144]	; 0x90
	msg.iov  = NULL;
    b66c:	e58d4088 	str	r4, [sp, #136]	; 0x88
	rc = send_msg(chan, &msg);
    b670:	eb001e79 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_FAULT, rc, "sending bad iovec array");
    b674:	e51f2e94 	ldr	r2, [pc, #-3732]	; a7e8 <main+0x27dc>
    b678:	e3700028 	cmn	r0, #40	; 0x28
    b67c:	e08f2002 	add	r2, pc, r2
    b680:	e5923000 	ldr	r3, [r2]
    b684:	e2833001 	add	r3, r3, #1
    b688:	e5823000 	str	r3, [r2]
    b68c:	0a000012 	beq	b6dc <main+0x36d0>
    b690:	e51f2eac 	ldr	r2, [pc, #-3756]	; a7ec <main+0x27e0>
    b694:	e3e01027 	mvn	r1, #39	; 0x27
    b698:	e58d1004 	str	r1, [sp, #4]
    b69c:	e3003481 	movw	r3, #1153	; 0x481
    b6a0:	e08f2002 	add	r2, pc, r2
    b6a4:	e51f1ebc 	ldr	r1, [pc, #-3772]	; a7f0 <main+0x27e4>
    b6a8:	e58d2000 	str	r2, [sp]
    b6ac:	e1a06004 	mov	r6, r4
    b6b0:	e51f2ec4 	ldr	r2, [pc, #-3780]	; a7f4 <main+0x27e8>
    b6b4:	e08f1001 	add	r1, pc, r1
    b6b8:	e58d0008 	str	r0, [sp, #8]
    b6bc:	e28a0028 	add	r0, sl, #40	; 0x28
    b6c0:	e08f2002 	add	r2, pc, r2
    b6c4:	eb0023a3 	bl	14558 <fprintf>
    b6c8:	e51f2ed8 	ldr	r2, [pc, #-3800]	; a7f8 <main+0x27ec>
    b6cc:	e08f2002 	add	r2, pc, r2
    b6d0:	e5923000 	ldr	r3, [r2]
    b6d4:	e2833001 	add	r3, r3, #1
    b6d8:	e5823000 	str	r3, [r2]
	msg.iov  = iov;
    b6dc:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
	rc = send_msg(chan, &msg);
    b6e0:	e1a00005 	mov	r0, r5
    b6e4:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
	iov[0].base = NULL;
    b6e8:	e3a04000 	mov	r4, #0
	msg.iov  = iov;
    b6ec:	e58d3088 	str	r3, [sp, #136]	; 0x88
	iov[0].len  = sizeof(buf) /  2;
    b6f0:	e3a03020 	mov	r3, #32
	iov[0].base = NULL;
    b6f4:	e58d40b4 	str	r4, [sp, #180]	; 0xb4
	iov[0].len  = sizeof(buf) /  2;
    b6f8:	e58d30b8 	str	r3, [sp, #184]	; 0xb8
	iov[1].len  = sizeof(buf) /  2;
    b6fc:	e58d30c0 	str	r3, [sp, #192]	; 0xc0
	msg.num_iov = 2;
    b700:	e3a03002 	mov	r3, #2
	iov[1].base = NULL;
    b704:	e58d40bc 	str	r4, [sp, #188]	; 0xbc
	msg.num_iov = 2;
    b708:	e58d3084 	str	r3, [sp, #132]	; 0x84
	rc = send_msg(chan, &msg);
    b70c:	eb001e52 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_FAULT, rc, "sending bad iovec");
    b710:	e51f2f1c 	ldr	r2, [pc, #-3868]	; a7fc <main+0x27f0>
    b714:	e3700028 	cmn	r0, #40	; 0x28
    b718:	e08f2002 	add	r2, pc, r2
    b71c:	e5923000 	ldr	r3, [r2]
    b720:	e2833001 	add	r3, r3, #1
    b724:	e5823000 	str	r3, [r2]
    b728:	0a000012 	beq	b778 <main+0x376c>
    b72c:	e51f2f34 	ldr	r2, [pc, #-3892]	; a800 <main+0x27f4>
    b730:	e3e01027 	mvn	r1, #39	; 0x27
    b734:	e58d1004 	str	r1, [sp, #4]
    b738:	e300348b 	movw	r3, #1163	; 0x48b
    b73c:	e08f2002 	add	r2, pc, r2
    b740:	e51f1f44 	ldr	r1, [pc, #-3908]	; a804 <main+0x27f8>
    b744:	e58d2000 	str	r2, [sp]
    b748:	e1a06004 	mov	r6, r4
    b74c:	e51f2f4c 	ldr	r2, [pc, #-3916]	; a808 <main+0x27fc>
    b750:	e08f1001 	add	r1, pc, r1
    b754:	e58d0008 	str	r0, [sp, #8]
    b758:	e28a0028 	add	r0, sl, #40	; 0x28
    b75c:	e08f2002 	add	r2, pc, r2
    b760:	eb00237c 	bl	14558 <fprintf>
    b764:	e51f2f60 	ldr	r2, [pc, #-3936]	; a80c <main+0x2800>
    b768:	e08f2002 	add	r2, pc, r2
    b76c:	e5923000 	ldr	r3, [r2]
    b770:	e2833001 	add	r3, r3, #1
    b774:	e5823000 	str	r3, [r2]
	EXPECT_EQ (ERR_FAULT, rc, "sending bad iovec");
    b778:	e51f4f70 	ldr	r4, [pc, #-3952]	; a810 <main+0x2804>
	rc = send_msg(chan, &msg);
    b77c:	e1a00005 	mov	r0, r5
	msg.iov  = iov;
    b780:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
	EXPECT_EQ (ERR_FAULT, rc, "sending bad iovec");
    b784:	e08f4004 	add	r4, pc, r4
	rc = send_msg(chan, &msg);
    b788:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
	msg.iov  = iov;
    b78c:	e58d3088 	str	r3, [sp, #136]	; 0x88
	iov[0].len  = sizeof(buf) /  2;
    b790:	e3a03020 	mov	r3, #32
	iov[0].base = buf;
    b794:	e58db0b4 	str	fp, [sp, #180]	; 0xb4
	iov[0].len  = sizeof(buf) /  2;
    b798:	e58d30b8 	str	r3, [sp, #184]	; 0xb8
	iov[1].len  = sizeof(buf) /  2;
    b79c:	e58d30c0 	str	r3, [sp, #192]	; 0xc0
	iov[1].base = NULL;
    b7a0:	e3a03000 	mov	r3, #0
    b7a4:	e58d30bc 	str	r3, [sp, #188]	; 0xbc
	msg.num_iov = 2;
    b7a8:	e3a03002 	mov	r3, #2
    b7ac:	e58d3084 	str	r3, [sp, #132]	; 0x84
	rc = send_msg(chan, &msg);
    b7b0:	eb001e29 	bl	1305c <send_msg>
	EXPECT_EQ (ERR_FAULT, rc, "sending bad iovec");
    b7b4:	e5943000 	ldr	r3, [r4]
    b7b8:	e3700028 	cmn	r0, #40	; 0x28
    b7bc:	e2833001 	add	r3, r3, #1
    b7c0:	e5843000 	str	r3, [r4]
    b7c4:	0a00010e 	beq	bc04 <main+0x3bf8>
    b7c8:	e51f2fbc 	ldr	r2, [pc, #-4028]	; a814 <main+0x2808>
    b7cc:	e3e01027 	mvn	r1, #39	; 0x27
    b7d0:	e58d1004 	str	r1, [sp, #4]
    b7d4:	e3003495 	movw	r3, #1173	; 0x495
    b7d8:	e08f2002 	add	r2, pc, r2
    b7dc:	e51f1fcc 	ldr	r1, [pc, #-4044]	; a818 <main+0x280c>
    b7e0:	e58d2000 	str	r2, [sp]
    b7e4:	e51f2fd0 	ldr	r2, [pc, #-4048]	; a81c <main+0x2810>
    b7e8:	e08f1001 	add	r1, pc, r1
    b7ec:	e58d0008 	str	r0, [sp, #8]
    b7f0:	e28a0028 	add	r0, sl, #40	; 0x28
    b7f4:	e08f2002 	add	r2, pc, r2
    b7f8:	eb002356 	bl	14558 <fprintf>
    b7fc:	e51f2fe4 	ldr	r2, [pc, #-4068]	; a820 <main+0x2814>
	rc = close(chan);
    b800:	e1a00005 	mov	r0, r5
	EXPECT_EQ (ERR_FAULT, rc, "sending bad iovec");
    b804:	e08f2002 	add	r2, pc, r2
    b808:	e5923000 	ldr	r3, [r2]
    b80c:	e2833001 	add	r3, r3, #1
    b810:	e5823000 	str	r3, [r2]
	rc = close(chan);
    b814:	eb001dfb 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
    b818:	e5943000 	ldr	r3, [r4]
    b81c:	e3500000 	cmp	r0, #0
    b820:	e2833001 	add	r3, r3, #1
    b824:	e5843000 	str	r3, [r4]
    b828:	1a000262 	bne	c1b8 <main+0x41ac>
	TEST_END
    b82c:	e59f2f8c 	ldr	r2, [pc, #3980]	; c7c0 <main+0x47b4>
    b830:	e300349a 	movw	r3, #1178	; 0x49a
    b834:	e59f1f88 	ldr	r1, [pc, #3976]	; c7c4 <main+0x47b8>
    b838:	e28a0028 	add	r0, sl, #40	; 0x28
    b83c:	e08f2002 	add	r2, pc, r2
    b840:	e58d2000 	str	r2, [sp]
    b844:	e59f2f7c 	ldr	r2, [pc, #3964]	; c7c8 <main+0x47bc>
    b848:	e08f1001 	add	r1, pc, r1
    b84c:	e08f2002 	add	r2, pc, r2
    b850:	eb002340 	bl	14558 <fprintf>
	run_read_msg_negative_test();
    b854:	eb000f4a 	bl	f584 <run_read_msg_negative_test>
	TLOGI("Conditions checked: %d\n", _tests_total);
    b858:	e59f2f6c 	ldr	r2, [pc, #3948]	; c7cc <main+0x47c0>
	TLOGI("Conditions failed:  %d\n", _tests_failed);
    b85c:	e59f6f6c 	ldr	r6, [pc, #3948]	; c7d0 <main+0x47c4>
	TLOGI("Conditions checked: %d\n", _tests_total);
    b860:	e28a4028 	add	r4, sl, #40	; 0x28
    b864:	e08f2002 	add	r2, pc, r2
    b868:	e59f5f64 	ldr	r5, [pc, #3940]	; c7d4 <main+0x47c8>
    b86c:	e59f1f64 	ldr	r1, [pc, #3940]	; c7d8 <main+0x47cc>
	TLOGI("Conditions failed:  %d\n", _tests_failed);
    b870:	e08f6006 	add	r6, pc, r6
	TLOGI("Conditions checked: %d\n", _tests_total);
    b874:	e08f5005 	add	r5, pc, r5
    b878:	e30035d3 	movw	r3, #1491	; 0x5d3
    b87c:	e592c000 	ldr	ip, [r2]
    b880:	e08f1001 	add	r1, pc, r1
    b884:	e1a02005 	mov	r2, r5
    b888:	e58dc000 	str	ip, [sp]
    b88c:	e1a00004 	mov	r0, r4
    b890:	eb002330 	bl	14558 <fprintf>
	TLOGI("Conditions failed:  %d\n", _tests_failed);
    b894:	e59f1f40 	ldr	r1, [pc, #3904]	; c7dc <main+0x47d0>
    b898:	e5963000 	ldr	r3, [r6]
    b89c:	e1a02005 	mov	r2, r5
    b8a0:	e58d3000 	str	r3, [sp]
    b8a4:	e1a00004 	mov	r0, r4
    b8a8:	e30035d4 	movw	r3, #1492	; 0x5d4
    b8ac:	e08f1001 	add	r1, pc, r1
    b8b0:	eb002328 	bl	14558 <fprintf>
	if (_tests_failed == 0) {
    b8b4:	e5963000 	ldr	r3, [r6]
		TLOGI("All tests PASSED\n");
    b8b8:	e1a02005 	mov	r2, r5
    b8bc:	e1a00004 	mov	r0, r4
	if (_tests_failed == 0) {
    b8c0:	e3530000 	cmp	r3, #0
    b8c4:	0a0000c8 	beq	bbec <main+0x3be0>
		TLOGI("Some tests FAILED\n");
    b8c8:	e59f1f10 	ldr	r1, [pc, #3856]	; c7e0 <main+0x47d4>
    b8cc:	e30035d9 	movw	r3, #1497	; 0x5d9
    b8d0:	e08f1001 	add	r1, pc, r1
    b8d4:	eb00231f 	bl	14558 <fprintf>
						status_buf = &fail_buf[0];
    b8d8:	e28d30fc 	add	r3, sp, #252	; 0xfc
					write_msg_len = send_msg(rc, &status_msg);
    b8dc:	e28d1074 	add	r1, sp, #116	; 0x74
    b8e0:	e59d0038 	ldr	r0, [sp, #56]	; 0x38
					status_iov.base = status_buf;
    b8e4:	e58d3054 	str	r3, [sp, #84]	; 0x54
					status_iov.len  = status_len;
    b8e8:	e3a03007 	mov	r3, #7
    b8ec:	e58d3058 	str	r3, [sp, #88]	; 0x58
					status_msg.num_iov = 1;
    b8f0:	e3a03001 	mov	r3, #1
    b8f4:	e58d3074 	str	r3, [sp, #116]	; 0x74
					status_msg.iov     = &status_iov;
    b8f8:	e28d3054 	add	r3, sp, #84	; 0x54
    b8fc:	e58d3078 	str	r3, [sp, #120]	; 0x78
					status_msg.num_handles = 0;
    b900:	e3a03000 	mov	r3, #0
    b904:	e58d307c 	str	r3, [sp, #124]	; 0x7c
					status_msg.handles = NULL;
    b908:	e58d3080 	str	r3, [sp, #128]	; 0x80
					write_msg_len = send_msg(rc, &status_msg);
    b90c:	eb001dd2 	bl	1305c <send_msg>
					if ((size_t)write_msg_len != status_len) {
    b910:	e3500007 	cmp	r0, #7
    b914:	0afff208 	beq	813c <main+0x130>
						TLOGI("IPC unittest status write failed");
    b918:	e59f2ec4 	ldr	r2, [pc, #3780]	; c7e4 <main+0x47d8>
    b91c:	e3003619 	movw	r3, #1561	; 0x619
    b920:	e59f1ec0 	ldr	r1, [pc, #3776]	; c7e8 <main+0x47dc>
    b924:	e28a0028 	add	r0, sl, #40	; 0x28
    b928:	e08f2002 	add	r2, pc, r2
    b92c:	e08f1001 	add	r1, pc, r1
    b930:	eb002308 	bl	14558 <fprintf>
    b934:	eafff200 	b	813c <main+0x130>
		TLOGI("failed (%d) to create ctrl port\n", rc );
    b938:	e59f1eac 	ldr	r1, [pc, #3756]	; c7ec <main+0x47e0>
    b93c:	e1a02005 	mov	r2, r5
    b940:	e58d3000 	str	r3, [sp]
    b944:	e1a00004 	mov	r0, r4
    b948:	e30035f6 	movw	r3, #1526	; 0x5f6
    b94c:	e08f1001 	add	r1, pc, r1
    b950:	eb002300 	bl	14558 <fprintf>
		return rc;
    b954:	eafff218 	b	81bc <main+0x1b0>
		EXPECT_GE_ZERO (rc, "async");
    b958:	e59f2e90 	ldr	r2, [pc, #3728]	; c7f0 <main+0x47e4>
    b95c:	e3003262 	movw	r3, #610	; 0x262
    b960:	e59f1e8c 	ldr	r1, [pc, #3724]	; c7f4 <main+0x47e8>
    b964:	e28a0028 	add	r0, sl, #40	; 0x28
    b968:	e08f2002 	add	r2, pc, r2
    b96c:	e58d2000 	str	r2, [sp]
    b970:	e59f2e80 	ldr	r2, [pc, #3712]	; c7f8 <main+0x47ec>
    b974:	e08f1001 	add	r1, pc, r1
    b978:	e58d8004 	str	r8, [sp, #4]
    b97c:	e08f2002 	add	r2, pc, r2
    b980:	eb0022f4 	bl	14558 <fprintf>
    b984:	e59f2e70 	ldr	r2, [pc, #3696]	; c7fc <main+0x47f0>
		close(chan);
    b988:	e1a00007 	mov	r0, r7
		EXPECT_GE_ZERO (rc, "async");
    b98c:	e08f2002 	add	r2, pc, r2
    b990:	e5923000 	ldr	r3, [r2]
    b994:	e2833001 	add	r3, r3, #1
    b998:	e5823000 	str	r3, [r2]
		close(chan);
    b99c:	eb001d99 	bl	13008 <close>
	TEST_END
    b9a0:	e59f2e58 	ldr	r2, [pc, #3672]	; c800 <main+0x47f4>
    b9a4:	e3003285 	movw	r3, #645	; 0x285
    b9a8:	e59f1e54 	ldr	r1, [pc, #3668]	; c804 <main+0x47f8>
    b9ac:	e28a0028 	add	r0, sl, #40	; 0x28
    b9b0:	e08f2002 	add	r2, pc, r2
    b9b4:	e58d2000 	str	r2, [sp]
    b9b8:	e59f2e48 	ldr	r2, [pc, #3656]	; c808 <main+0x47fc>
    b9bc:	e08f1001 	add	r1, pc, r1
    b9c0:	e08f2002 	add	r2, pc, r2
    b9c4:	eb0022e3 	bl	14558 <fprintf>
    b9c8:	eafff361 	b	8754 <main+0x748>
		EXPECT_EQ (NO_ERROR, rc, "async");
    b9cc:	e59f2e38 	ldr	r2, [pc, #3640]	; c80c <main+0x4800>
    b9d0:	e3a04000 	mov	r4, #0
    b9d4:	e59f1e34 	ldr	r1, [pc, #3636]	; c810 <main+0x4804>
    b9d8:	e3a03e25 	mov	r3, #592	; 0x250
    b9dc:	e08f2002 	add	r2, pc, r2
    b9e0:	e58d2000 	str	r2, [sp]
    b9e4:	e59f2e28 	ldr	r2, [pc, #3624]	; c814 <main+0x4808>
    b9e8:	e08f1001 	add	r1, pc, r1
    b9ec:	e58d0008 	str	r0, [sp, #8]
    b9f0:	e28a0028 	add	r0, sl, #40	; 0x28
    b9f4:	e08f2002 	add	r2, pc, r2
    b9f8:	e58d4004 	str	r4, [sp, #4]
    b9fc:	eb0022d5 	bl	14558 <fprintf>
    ba00:	e59f2e10 	ldr	r2, [pc, #3600]	; c818 <main+0x480c>
    ba04:	e1a06004 	mov	r6, r4
    ba08:	e08f2002 	add	r2, pc, r2
    ba0c:	e5923000 	ldr	r3, [r2]
    ba10:	e2833001 	add	r3, r3, #1
    ba14:	e5823000 	str	r3, [r2]
    ba18:	eafff2a9 	b	84c4 <main+0x4b8>
				EXPECT_EQ (exp_event, uevt.event,  "waiting for space");
    ba1c:	e59d206c 	ldr	r2, [sp, #108]	; 0x6c
    ba20:	e2833002 	add	r3, r3, #2
    ba24:	e5843000 	str	r3, [r4]
    ba28:	e3520010 	cmp	r2, #16
    ba2c:	0a000027 	beq	bad0 <main+0x3ac4>
    ba30:	e59d9014 	ldr	r9, [sp, #20]
    ba34:	e59f1de0 	ldr	r1, [pc, #3552]	; c81c <main+0x4810>
    ba38:	e3a0c010 	mov	ip, #16
    ba3c:	e58d2008 	str	r2, [sp, #8]
    ba40:	e300342a 	movw	r3, #1066	; 0x42a
    ba44:	e08f1001 	add	r1, pc, r1
    ba48:	e59f2dd0 	ldr	r2, [pc, #3536]	; c820 <main+0x4814>
    ba4c:	e58d1000 	str	r1, [sp]
    ba50:	e28a0028 	add	r0, sl, #40	; 0x28
    ba54:	e59f1dc8 	ldr	r1, [pc, #3528]	; c824 <main+0x4818>
    ba58:	e08f2002 	add	r2, pc, r2
    ba5c:	e58dc004 	str	ip, [sp, #4]
    ba60:	e08f1001 	add	r1, pc, r1
    ba64:	eb0022bb 	bl	14558 <fprintf>
    ba68:	e59f2db8 	ldr	r2, [pc, #3512]	; c828 <main+0x481c>
    ba6c:	e08f2002 	add	r2, pc, r2
    ba70:	e5923000 	ldr	r3, [r2]
    ba74:	e2833001 	add	r3, r3, #1
    ba78:	e5823000 	str	r3, [r2]
    ba7c:	eafff513 	b	8ed0 <main+0xec4>
				EXPECT_EQ (NO_ERROR, rc, "waiting for space");
    ba80:	e59f2da4 	ldr	r2, [pc, #3492]	; c82c <main+0x4820>
    ba84:	e3003428 	movw	r3, #1064	; 0x428
    ba88:	e59f1da0 	ldr	r1, [pc, #3488]	; c830 <main+0x4824>
    ba8c:	e3a09000 	mov	r9, #0
    ba90:	e08f2002 	add	r2, pc, r2
    ba94:	e58d2000 	str	r2, [sp]
    ba98:	e59f2d94 	ldr	r2, [pc, #3476]	; c834 <main+0x4828>
    ba9c:	e08f1001 	add	r1, pc, r1
    baa0:	e58d6008 	str	r6, [sp, #8]
    baa4:	e28a0028 	add	r0, sl, #40	; 0x28
    baa8:	e08f2002 	add	r2, pc, r2
    baac:	e58d9004 	str	r9, [sp, #4]
    bab0:	eb0022a8 	bl	14558 <fprintf>
    bab4:	e59f1d7c 	ldr	r1, [pc, #3452]	; c838 <main+0x482c>
    bab8:	e5973000 	ldr	r3, [r7]
    babc:	e08f1001 	add	r1, pc, r1
    bac0:	e5912000 	ldr	r2, [r1]
    bac4:	e2822001 	add	r2, r2, #1
    bac8:	e5812000 	str	r2, [r1]
    bacc:	eafff4e2 	b	8e5c <main+0xe50>
			if (!_all_ok) {
    bad0:	e3590000 	cmp	r9, #0
    bad4:	0a000337 	beq	c7b8 <main+0x47ac>
		for (uint i = 0; i < 10000; i++) {
    bad8:	e2588001 	subs	r8, r8, #1
    badc:	1afff4ce 	bne	8e1c <main+0xe10>
		rc = close (chan);
    bae0:	e1a00005 	mov	r0, r5
    bae4:	e59d9014 	ldr	r9, [sp, #20]
    bae8:	eb001d46 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close channel");
    baec:	e59f2d48 	ldr	r2, [pc, #3400]	; c83c <main+0x4830>
    baf0:	e3500000 	cmp	r0, #0
    baf4:	e08f2002 	add	r2, pc, r2
    baf8:	e5923000 	ldr	r3, [r2]
    bafc:	e2833001 	add	r3, r3, #1
    bb00:	e5823000 	str	r3, [r2]
    bb04:	1a000283 	bne	c518 <main+0x450c>
	TEST_END
    bb08:	e59f2d30 	ldr	r2, [pc, #3376]	; c840 <main+0x4834>
    bb0c:	e3003437 	movw	r3, #1079	; 0x437
    bb10:	e59f1d2c 	ldr	r1, [pc, #3372]	; c844 <main+0x4838>
    bb14:	e28a0028 	add	r0, sl, #40	; 0x28
    bb18:	e08f2002 	add	r2, pc, r2
    bb1c:	e58d2000 	str	r2, [sp]
    bb20:	e59f2d20 	ldr	r2, [pc, #3360]	; c848 <main+0x483c>
    bb24:	e08f1001 	add	r1, pc, r1
    bb28:	e08f2002 	add	r2, pc, r2
    bb2c:	eb002289 	bl	14558 <fprintf>
    bb30:	eafff504 	b	8f48 <main+0xf3c>
				EXPECT_EQ (64, rc, "send_msg bulk")
    bb34:	e59d2018 	ldr	r2, [sp, #24]
    bb38:	e3500040 	cmp	r0, #64	; 0x40
    bb3c:	e5923000 	ldr	r3, [r2]
    bb40:	e2833001 	add	r3, r3, #1
    bb44:	e5823000 	str	r3, [r2]
    bb48:	0affffe2 	beq	bad8 <main+0x3acc>
    bb4c:	e59f2cf8 	ldr	r2, [pc, #3320]	; c84c <main+0x4840>
    bb50:	e3a01040 	mov	r1, #64	; 0x40
    bb54:	e58d1004 	str	r1, [sp, #4]
    bb58:	e300342c 	movw	r3, #1068	; 0x42c
    bb5c:	e08f2002 	add	r2, pc, r2
    bb60:	e59f1ce8 	ldr	r1, [pc, #3304]	; c850 <main+0x4844>
    bb64:	e58d2000 	str	r2, [sp]
    bb68:	e59f2ce4 	ldr	r2, [pc, #3300]	; c854 <main+0x4848>
    bb6c:	e08f1001 	add	r1, pc, r1
    bb70:	e58d0008 	str	r0, [sp, #8]
    bb74:	e28a0028 	add	r0, sl, #40	; 0x28
    bb78:	e08f2002 	add	r2, pc, r2
    bb7c:	e59d9014 	ldr	r9, [sp, #20]
    bb80:	eb002274 	bl	14558 <fprintf>
    bb84:	e59f2ccc 	ldr	r2, [pc, #3276]	; c858 <main+0x484c>
    bb88:	e08f2002 	add	r2, pc, r2
    bb8c:	e5923000 	ldr	r3, [r2]
    bb90:	e2833001 	add	r3, r3, #1
    bb94:	e5823000 	str	r3, [r2]
    bb98:	eafff4cc 	b	8ed0 <main+0xec4>
	rc = close(chan);
    bb9c:	e1a00005 	mov	r0, r5
    bba0:	eb001d18 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
    bba4:	e5943000 	ldr	r3, [r4]
    bba8:	e3500000 	cmp	r0, #0
    bbac:	e2833001 	add	r3, r3, #1
    bbb0:	e5843000 	str	r3, [r4]
    bbb4:	1a0000b8 	bne	be9c <main+0x3e90>
	TEST_END
    bbb8:	e3560000 	cmp	r6, #0
    bbbc:	0afffd6b 	beq	b170 <main+0x3164>
    bbc0:	e59f2c94 	ldr	r2, [pc, #3220]	; c85c <main+0x4850>
    bbc4:	e30033fb 	movw	r3, #1019	; 0x3fb
    bbc8:	e59f1c90 	ldr	r1, [pc, #3216]	; c860 <main+0x4854>
    bbcc:	e28a0028 	add	r0, sl, #40	; 0x28
    bbd0:	e08f2002 	add	r2, pc, r2
    bbd4:	e58d2000 	str	r2, [sp]
    bbd8:	e59f2c84 	ldr	r2, [pc, #3204]	; c864 <main+0x4858>
    bbdc:	e08f1001 	add	r1, pc, r1
    bbe0:	e08f2002 	add	r2, pc, r2
    bbe4:	eb00225b 	bl	14558 <fprintf>
    bbe8:	eafffd6a 	b	b198 <main+0x318c>
		TLOGI("All tests PASSED\n");
    bbec:	e59f1c74 	ldr	r1, [pc, #3188]	; c868 <main+0x485c>
    bbf0:	e30035d6 	movw	r3, #1494	; 0x5d6
    bbf4:	e08f1001 	add	r1, pc, r1
    bbf8:	eb002256 	bl	14558 <fprintf>
						status_buf = &pass_buf[0];
    bbfc:	e1a03009 	mov	r3, r9
    bc00:	eaffff35 	b	b8dc <main+0x38d0>
	rc = close(chan);
    bc04:	e1a00005 	mov	r0, r5
    bc08:	eb001cfe 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
    bc0c:	e5943000 	ldr	r3, [r4]
    bc10:	e3500000 	cmp	r0, #0
    bc14:	e2833001 	add	r3, r3, #1
    bc18:	e5843000 	str	r3, [r4]
    bc1c:	1a000165 	bne	c1b8 <main+0x41ac>
	TEST_END
    bc20:	e3560000 	cmp	r6, #0
    bc24:	0affff00 	beq	b82c <main+0x3820>
    bc28:	e59f2c3c 	ldr	r2, [pc, #3132]	; c86c <main+0x4860>
    bc2c:	e300349a 	movw	r3, #1178	; 0x49a
    bc30:	e59f1c38 	ldr	r1, [pc, #3128]	; c870 <main+0x4864>
    bc34:	e28a0028 	add	r0, sl, #40	; 0x28
    bc38:	e08f2002 	add	r2, pc, r2
    bc3c:	e58d2000 	str	r2, [sp]
    bc40:	e59f2c2c 	ldr	r2, [pc, #3116]	; c874 <main+0x4868>
    bc44:	e08f1001 	add	r1, pc, r1
    bc48:	e08f2002 	add	r2, pc, r2
    bc4c:	eb002241 	bl	14558 <fprintf>
    bc50:	eafffeff 	b	b854 <main+0x3848>
	rc = close(chan);
    bc54:	e1a00005 	mov	r0, r5
    bc58:	eb001cea 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channnel");
    bc5c:	e5943000 	ldr	r3, [r4]
    bc60:	e3500000 	cmp	r0, #0
    bc64:	e2833001 	add	r3, r3, #1
    bc68:	e5843000 	str	r3, [r4]
    bc6c:	1a000164 	bne	c204 <main+0x41f8>
	TEST_END
    bc70:	e3560000 	cmp	r6, #0
    bc74:	0afffc49 	beq	ada0 <main+0x2d94>
    bc78:	e59f2bf8 	ldr	r2, [pc, #3064]	; c878 <main+0x486c>
    bc7c:	e3a03ff2 	mov	r3, #968	; 0x3c8
    bc80:	e59f1bf4 	ldr	r1, [pc, #3060]	; c87c <main+0x4870>
    bc84:	e28a0028 	add	r0, sl, #40	; 0x28
    bc88:	e08f2002 	add	r2, pc, r2
    bc8c:	e58d2000 	str	r2, [sp]
    bc90:	e59f2be8 	ldr	r2, [pc, #3048]	; c880 <main+0x4874>
    bc94:	e08f1001 	add	r1, pc, r1
    bc98:	e08f2002 	add	r2, pc, r2
    bc9c:	eb00222d 	bl	14558 <fprintf>
    bca0:	eafffc48 	b	adc8 <main+0x2dbc>
	rc = close (rc);
    bca4:	eb001cd7 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "close channel");
    bca8:	e5943000 	ldr	r3, [r4]
    bcac:	e370002a 	cmn	r0, #42	; 0x2a
    bcb0:	e2833001 	add	r3, r3, #1
    bcb4:	e5843000 	str	r3, [r4]
    bcb8:	1afff927 	bne	a15c <main+0x2150>
	TEST_END
    bcbc:	e3560000 	cmp	r6, #0
    bcc0:	0afff937 	beq	a1a4 <main+0x2198>
    bcc4:	e59f2bb8 	ldr	r2, [pc, #3000]	; c884 <main+0x4878>
    bcc8:	e30031b2 	movw	r3, #434	; 0x1b2
    bccc:	e59f1bb4 	ldr	r1, [pc, #2996]	; c888 <main+0x487c>
    bcd0:	e28a0028 	add	r0, sl, #40	; 0x28
    bcd4:	e08f2002 	add	r2, pc, r2
    bcd8:	e58d2000 	str	r2, [sp]
    bcdc:	e59f2ba8 	ldr	r2, [pc, #2984]	; c88c <main+0x4880>
    bce0:	e08f1001 	add	r1, pc, r1
    bce4:	e08f2002 	add	r2, pc, r2
    bce8:	eb00221a 	bl	14558 <fprintf>
    bcec:	eafff936 	b	a1cc <main+0x21c0>
	rc = close (rc);
    bcf0:	eb001cc4 	bl	13008 <close>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "close port");
    bcf4:	e5943000 	ldr	r3, [r4]
    bcf8:	e370002a 	cmn	r0, #42	; 0x2a
    bcfc:	e2833001 	add	r3, r3, #1
    bd00:	e5843000 	str	r3, [r4]
    bd04:	1afff84e 	bne	9e44 <main+0x1e38>
	TEST_END
    bd08:	e3560000 	cmp	r6, #0
    bd0c:	0afff85e 	beq	9e8c <main+0x1e80>
    bd10:	e59f2b78 	ldr	r2, [pc, #2936]	; c890 <main+0x4884>
    bd14:	e300311e 	movw	r3, #286	; 0x11e
    bd18:	e59f1b74 	ldr	r1, [pc, #2932]	; c894 <main+0x4888>
    bd1c:	e28a0028 	add	r0, sl, #40	; 0x28
    bd20:	e08f2002 	add	r2, pc, r2
    bd24:	e58d2000 	str	r2, [sp]
    bd28:	e59f2b68 	ldr	r2, [pc, #2920]	; c898 <main+0x488c>
    bd2c:	e08f1001 	add	r1, pc, r1
    bd30:	e08f2002 	add	r2, pc, r2
    bd34:	eb002207 	bl	14558 <fprintf>
    bd38:	eafff85d 	b	9eb4 <main+0x1ea8>
	TEST_END
    bd3c:	e59f2b58 	ldr	r2, [pc, #2904]	; c89c <main+0x4890>
    bd40:	e3a030ec 	mov	r3, #236	; 0xec
    bd44:	e59f1b54 	ldr	r1, [pc, #2900]	; c8a0 <main+0x4894>
    bd48:	e28a0028 	add	r0, sl, #40	; 0x28
    bd4c:	e08f2002 	add	r2, pc, r2
    bd50:	e58d2000 	str	r2, [sp]
    bd54:	e59f2b48 	ldr	r2, [pc, #2888]	; c8a4 <main+0x4898>
    bd58:	e08f1001 	add	r1, pc, r1
    bd5c:	e08f2002 	add	r2, pc, r2
    bd60:	eb0021fc 	bl	14558 <fprintf>
    bd64:	eafff73e 	b	9a64 <main+0x1a58>
	TEST_END
    bd68:	e59f2b38 	ldr	r2, [pc, #2872]	; c8a8 <main+0x489c>
    bd6c:	e3a030d2 	mov	r3, #210	; 0xd2
    bd70:	e59f1b34 	ldr	r1, [pc, #2868]	; c8ac <main+0x48a0>
    bd74:	e28a0028 	add	r0, sl, #40	; 0x28
    bd78:	e08f2002 	add	r2, pc, r2
    bd7c:	e58d2000 	str	r2, [sp]
    bd80:	e59f2b28 	ldr	r2, [pc, #2856]	; c8b0 <main+0x48a4>
    bd84:	e08f1001 	add	r1, pc, r1
    bd88:	e08f2002 	add	r2, pc, r2
    bd8c:	eb0021f1 	bl	14558 <fprintf>
    bd90:	eafff6be 	b	9890 <main+0x1884>
	TEST_END
    bd94:	e59f2b18 	ldr	r2, [pc, #2840]	; c8b4 <main+0x48a8>
    bd98:	e3a030b8 	mov	r3, #184	; 0xb8
    bd9c:	e59f1b14 	ldr	r1, [pc, #2836]	; c8b8 <main+0x48ac>
    bda0:	e28a0028 	add	r0, sl, #40	; 0x28
    bda4:	e08f2002 	add	r2, pc, r2
    bda8:	e58d2000 	str	r2, [sp]
    bdac:	e59f2b08 	ldr	r2, [pc, #2824]	; c8bc <main+0x48b0>
    bdb0:	e08f1001 	add	r1, pc, r1
    bdb4:	e08f2002 	add	r2, pc, r2
    bdb8:	eb0021e6 	bl	14558 <fprintf>
    bdbc:	eafff641 	b	96c8 <main+0x16bc>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "ta_only");
    bdc0:	e59f3af8 	ldr	r3, [pc, #2808]	; c8c0 <main+0x48b4>
    bdc4:	e1a02008 	mov	r2, r8
    bdc8:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    bdcc:	e1a0000b 	mov	r0, fp
    bdd0:	e08f3003 	add	r3, pc, r3
    bdd4:	eb0021b7 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    bdd8:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    bddc:	e1a0000b 	mov	r0, fp
    bde0:	eb00064d 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO(rc, "connect to ta_only");
    bde4:	e5943000 	ldr	r3, [r4]
    bde8:	e2502000 	subs	r2, r0, #0
    bdec:	e2833001 	add	r3, r3, #1
    bdf0:	e5843000 	str	r3, [r4]
    bdf4:	ba000210 	blt	c63c <main+0x4630>
		close((handle_t)rc);
    bdf8:	eb001c82 	bl	13008 <close>
	TEST_END
    bdfc:	e59f1ac0 	ldr	r1, [pc, #2752]	; c8c4 <main+0x48b8>
    be00:	e59d3014 	ldr	r3, [sp, #20]
    be04:	e1a02007 	mov	r2, r7
    be08:	e58d3000 	str	r3, [sp]
    be0c:	e1a00006 	mov	r0, r6
    be10:	e30032f9 	movw	r3, #761	; 0x2f9
    be14:	e08f1001 	add	r1, pc, r1
    be18:	eb0021ce 	bl	14558 <fprintf>
    be1c:	eafff5ae 	b	94dc <main+0x14d0>
	TEST_END
    be20:	e59f2aa0 	ldr	r2, [pc, #2720]	; c8c8 <main+0x48bc>
    be24:	e30031cf 	movw	r3, #463	; 0x1cf
    be28:	e59f1a9c 	ldr	r1, [pc, #2716]	; c8cc <main+0x48c0>
    be2c:	e28a0028 	add	r0, sl, #40	; 0x28
    be30:	e08f2002 	add	r2, pc, r2
    be34:	e58d2000 	str	r2, [sp]
    be38:	e59f2a90 	ldr	r2, [pc, #2704]	; c8d0 <main+0x48c4>
    be3c:	e08f1001 	add	r1, pc, r1
    be40:	e08f2002 	add	r2, pc, r2
    be44:	eb0021c3 	bl	14558 <fprintf>
    be48:	eafff3ad 	b	8d04 <main+0xcf8>
		rc = close (test_port);
    be4c:	e1a00006 	mov	r0, r6
    be50:	eb001c6c 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close selfie");
    be54:	e5943000 	ldr	r3, [r4]
    be58:	e3500000 	cmp	r0, #0
    be5c:	e2833001 	add	r3, r3, #1
    be60:	e5843000 	str	r3, [r4]
    be64:	1a0001cf 	bne	c5a8 <main+0x459c>
	TEST_END
    be68:	e3550000 	cmp	r5, #0
    be6c:	0afff53b 	beq	9360 <main+0x1354>
    be70:	e59f2a5c 	ldr	r2, [pc, #2652]	; c8d4 <main+0x48c8>
    be74:	e30032db 	movw	r3, #731	; 0x2db
    be78:	e59f1a58 	ldr	r1, [pc, #2648]	; c8d8 <main+0x48cc>
    be7c:	e28a0028 	add	r0, sl, #40	; 0x28
    be80:	e08f2002 	add	r2, pc, r2
    be84:	e58d2000 	str	r2, [sp]
    be88:	e59f2a4c 	ldr	r2, [pc, #2636]	; c8dc <main+0x48d0>
    be8c:	e08f1001 	add	r1, pc, r1
    be90:	e08f2002 	add	r2, pc, r2
    be94:	eb0021af 	bl	14558 <fprintf>
    be98:	eafff53a 	b	9388 <main+0x137c>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
    be9c:	e59f2a3c 	ldr	r2, [pc, #2620]	; c8e0 <main+0x48d4>
    bea0:	e3a01000 	mov	r1, #0
    bea4:	e58d1004 	str	r1, [sp, #4]
    bea8:	e30033f9 	movw	r3, #1017	; 0x3f9
    beac:	e08f2002 	add	r2, pc, r2
    beb0:	e59f1a2c 	ldr	r1, [pc, #2604]	; c8e4 <main+0x48d8>
    beb4:	e58d2000 	str	r2, [sp]
    beb8:	e59f2a28 	ldr	r2, [pc, #2600]	; c8e8 <main+0x48dc>
    bebc:	e08f1001 	add	r1, pc, r1
    bec0:	e58d0008 	str	r0, [sp, #8]
    bec4:	e28a0028 	add	r0, sl, #40	; 0x28
    bec8:	e08f2002 	add	r2, pc, r2
    becc:	eb0021a1 	bl	14558 <fprintf>
    bed0:	e59f2a14 	ldr	r2, [pc, #2580]	; c8ec <main+0x48e0>
    bed4:	e08f2002 	add	r2, pc, r2
    bed8:	e5923000 	ldr	r3, [r2]
    bedc:	e2833001 	add	r3, r3, #1
    bee0:	e5823000 	str	r3, [r2]
    bee4:	eafffca1 	b	b170 <main+0x3164>
		if (rc == NO_ERROR && (event.event & IPC_HANDLE_POLL_READY)) {
    bee8:	e3540000 	cmp	r4, #0
    beec:	1afff4db 	bne	9260 <main+0x1254>
			rc = accept (test_port, &peer_uuid);
    bef0:	e59d1018 	ldr	r1, [sp, #24]
    bef4:	e1a00006 	mov	r0, r6
    bef8:	eb001c3f 	bl	12ffc <accept>
			EXPECT_EQ (ERR_CHANNEL_CLOSED, rc, "accept");
    befc:	e59f29ec 	ldr	r2, [pc, #2540]	; c8f0 <main+0x48e4>
    bf00:	e370000f 	cmn	r0, #15
    bf04:	e08f2002 	add	r2, pc, r2
    bf08:	e5923000 	ldr	r3, [r2]
    bf0c:	e2833001 	add	r3, r3, #1
    bf10:	e5823000 	str	r3, [r2]
    bf14:	0a000012 	beq	bf64 <main+0x3f58>
    bf18:	e59f29d4 	ldr	r2, [pc, #2516]	; c8f4 <main+0x48e8>
    bf1c:	e3e0100e 	mvn	r1, #14
    bf20:	e58d1004 	str	r1, [sp, #4]
    bf24:	e30032ba 	movw	r3, #698	; 0x2ba
    bf28:	e08f2002 	add	r2, pc, r2
    bf2c:	e59f19c4 	ldr	r1, [pc, #2500]	; c8f8 <main+0x48ec>
    bf30:	e58d2000 	str	r2, [sp]
    bf34:	e3a05000 	mov	r5, #0
    bf38:	e59f29bc 	ldr	r2, [pc, #2492]	; c8fc <main+0x48f0>
    bf3c:	e08f1001 	add	r1, pc, r1
    bf40:	e58d0008 	str	r0, [sp, #8]
    bf44:	e28a0028 	add	r0, sl, #40	; 0x28
    bf48:	e08f2002 	add	r2, pc, r2
    bf4c:	eb002181 	bl	14558 <fprintf>
    bf50:	e59f29a8 	ldr	r2, [pc, #2472]	; c900 <main+0x48f4>
    bf54:	e08f2002 	add	r2, pc, r2
    bf58:	e5923000 	ldr	r3, [r2]
    bf5c:	e2833001 	add	r3, r3, #1
    bf60:	e5823000 	str	r3, [r2]
			rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    bf64:	e3a02010 	mov	r2, #16
    bf68:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    bf6c:	e59d0018 	ldr	r0, [sp, #24]
    bf70:	eb0021a4 	bl	14608 <memcmp>
			EXPECT_EQ (0, rc1, "accept")
    bf74:	e59f2988 	ldr	r2, [pc, #2440]	; c904 <main+0x48f8>
    bf78:	e3500000 	cmp	r0, #0
    bf7c:	e08f2002 	add	r2, pc, r2
    bf80:	e5923000 	ldr	r3, [r2]
    bf84:	e2833001 	add	r3, r3, #1
    bf88:	e5823000 	str	r3, [r2]
    bf8c:	0a000012 	beq	bfdc <main+0x3fd0>
    bf90:	e59f2970 	ldr	r2, [pc, #2416]	; c908 <main+0x48fc>
    bf94:	e3a04000 	mov	r4, #0
    bf98:	e59f196c 	ldr	r1, [pc, #2412]	; c90c <main+0x4900>
    bf9c:	e30032bd 	movw	r3, #701	; 0x2bd
    bfa0:	e08f2002 	add	r2, pc, r2
    bfa4:	e58d2000 	str	r2, [sp]
    bfa8:	e59f2960 	ldr	r2, [pc, #2400]	; c910 <main+0x4904>
    bfac:	e08f1001 	add	r1, pc, r1
    bfb0:	e58d0008 	str	r0, [sp, #8]
    bfb4:	e28a0028 	add	r0, sl, #40	; 0x28
    bfb8:	e08f2002 	add	r2, pc, r2
    bfbc:	e58d4004 	str	r4, [sp, #4]
    bfc0:	eb002164 	bl	14558 <fprintf>
    bfc4:	e59f2948 	ldr	r2, [pc, #2376]	; c914 <main+0x4908>
    bfc8:	e1a05004 	mov	r5, r4
    bfcc:	e08f2002 	add	r2, pc, r2
    bfd0:	e5923000 	ldr	r3, [r2]
    bfd4:	e2833001 	add	r3, r3, #1
    bfd8:	e5823000 	str	r3, [r2]
			rc = accept (test_port, &peer_uuid);
    bfdc:	e59d1018 	ldr	r1, [sp, #24]
    bfe0:	e1a00006 	mov	r0, r6
    bfe4:	eb001c04 	bl	12ffc <accept>
			EXPECT_EQ (ERR_CHANNEL_CLOSED, rc, "accept");
    bfe8:	e59f2928 	ldr	r2, [pc, #2344]	; c918 <main+0x490c>
    bfec:	e370000f 	cmn	r0, #15
    bff0:	e08f2002 	add	r2, pc, r2
    bff4:	e5923000 	ldr	r3, [r2]
    bff8:	e2833001 	add	r3, r3, #1
    bffc:	e5823000 	str	r3, [r2]
    c000:	0a000012 	beq	c050 <main+0x4044>
    c004:	e59f2910 	ldr	r2, [pc, #2320]	; c91c <main+0x4910>
    c008:	e3e0100e 	mvn	r1, #14
    c00c:	e58d1004 	str	r1, [sp, #4]
    c010:	e30032c1 	movw	r3, #705	; 0x2c1
    c014:	e08f2002 	add	r2, pc, r2
    c018:	e59f1900 	ldr	r1, [pc, #2304]	; c920 <main+0x4914>
    c01c:	e58d2000 	str	r2, [sp]
    c020:	e3a05000 	mov	r5, #0
    c024:	e59f28f8 	ldr	r2, [pc, #2296]	; c924 <main+0x4918>
    c028:	e08f1001 	add	r1, pc, r1
    c02c:	e58d0008 	str	r0, [sp, #8]
    c030:	e28a0028 	add	r0, sl, #40	; 0x28
    c034:	e08f2002 	add	r2, pc, r2
    c038:	eb002146 	bl	14558 <fprintf>
    c03c:	e59f28e4 	ldr	r2, [pc, #2276]	; c928 <main+0x491c>
    c040:	e08f2002 	add	r2, pc, r2
    c044:	e5923000 	ldr	r3, [r2]
    c048:	e2833001 	add	r3, r3, #1
    c04c:	e5823000 	str	r3, [r2]
			rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    c050:	e3a02010 	mov	r2, #16
    c054:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    c058:	e59d0018 	ldr	r0, [sp, #24]
    c05c:	eb002169 	bl	14608 <memcmp>
			EXPECT_EQ (0, rc1, "accept")
    c060:	e59f28c4 	ldr	r2, [pc, #2244]	; c92c <main+0x4920>
    c064:	e3500000 	cmp	r0, #0
    c068:	e08f2002 	add	r2, pc, r2
    c06c:	e5923000 	ldr	r3, [r2]
    c070:	e2833001 	add	r3, r3, #1
    c074:	e5823000 	str	r3, [r2]
    c078:	0a000012 	beq	c0c8 <main+0x40bc>
    c07c:	e59f28ac 	ldr	r2, [pc, #2220]	; c930 <main+0x4924>
    c080:	e3a04000 	mov	r4, #0
    c084:	e59f18a8 	ldr	r1, [pc, #2216]	; c934 <main+0x4928>
    c088:	e3a03fb1 	mov	r3, #708	; 0x2c4
    c08c:	e08f2002 	add	r2, pc, r2
    c090:	e58d2000 	str	r2, [sp]
    c094:	e59f289c 	ldr	r2, [pc, #2204]	; c938 <main+0x492c>
    c098:	e08f1001 	add	r1, pc, r1
    c09c:	e58d0008 	str	r0, [sp, #8]
    c0a0:	e28a0028 	add	r0, sl, #40	; 0x28
    c0a4:	e08f2002 	add	r2, pc, r2
    c0a8:	e58d4004 	str	r4, [sp, #4]
    c0ac:	eb002129 	bl	14558 <fprintf>
    c0b0:	e59f2884 	ldr	r2, [pc, #2180]	; c93c <main+0x4930>
    c0b4:	e1a05004 	mov	r5, r4
    c0b8:	e08f2002 	add	r2, pc, r2
    c0bc:	e5923000 	ldr	r3, [r2]
    c0c0:	e2833001 	add	r3, r3, #1
    c0c4:	e5823000 	str	r3, [r2]
			rc = accept (test_port, &peer_uuid);
    c0c8:	e59d1018 	ldr	r1, [sp, #24]
    c0cc:	e1a00006 	mov	r0, r6
    c0d0:	eb001bc9 	bl	12ffc <accept>
			EXPECT_EQ (ERR_NO_MSG, rc, "accept");
    c0d4:	e59f2864 	ldr	r2, [pc, #2148]	; c940 <main+0x4934>
    c0d8:	e3700004 	cmn	r0, #4
    c0dc:	e08f2002 	add	r2, pc, r2
    c0e0:	e5923000 	ldr	r3, [r2]
    c0e4:	e2833001 	add	r3, r3, #1
    c0e8:	e5823000 	str	r3, [r2]
    c0ec:	0a000012 	beq	c13c <main+0x4130>
    c0f0:	e59f284c 	ldr	r2, [pc, #2124]	; c944 <main+0x4938>
    c0f4:	e3e01003 	mvn	r1, #3
    c0f8:	e58d1004 	str	r1, [sp, #4]
    c0fc:	e30032c9 	movw	r3, #713	; 0x2c9
    c100:	e08f2002 	add	r2, pc, r2
    c104:	e59f183c 	ldr	r1, [pc, #2108]	; c948 <main+0x493c>
    c108:	e58d2000 	str	r2, [sp]
    c10c:	e3a05000 	mov	r5, #0
    c110:	e59f2834 	ldr	r2, [pc, #2100]	; c94c <main+0x4940>
    c114:	e08f1001 	add	r1, pc, r1
    c118:	e58d0008 	str	r0, [sp, #8]
    c11c:	e28a0028 	add	r0, sl, #40	; 0x28
    c120:	e08f2002 	add	r2, pc, r2
    c124:	eb00210b 	bl	14558 <fprintf>
    c128:	e59f2820 	ldr	r2, [pc, #2080]	; c950 <main+0x4944>
    c12c:	e08f2002 	add	r2, pc, r2
    c130:	e5923000 	ldr	r3, [r2]
    c134:	e2833001 	add	r3, r3, #1
    c138:	e5823000 	str	r3, [r2]
			rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    c13c:	e3a02010 	mov	r2, #16
    c140:	e59d102c 	ldr	r1, [sp, #44]	; 0x2c
    c144:	e59d0018 	ldr	r0, [sp, #24]
    c148:	eb00212e 	bl	14608 <memcmp>
			EXPECT_EQ (0, rc1, "accept")
    c14c:	e59f2800 	ldr	r2, [pc, #2048]	; c954 <main+0x4948>
    c150:	e3500000 	cmp	r0, #0
    c154:	e08f2002 	add	r2, pc, r2
    c158:	e5923000 	ldr	r3, [r2]
    c15c:	e2833001 	add	r3, r3, #1
    c160:	e5823000 	str	r3, [r2]
    c164:	0afff43d 	beq	9260 <main+0x1254>
    c168:	e59f27e8 	ldr	r2, [pc, #2024]	; c958 <main+0x494c>
    c16c:	e3a04000 	mov	r4, #0
    c170:	e59f17e4 	ldr	r1, [pc, #2020]	; c95c <main+0x4950>
    c174:	e3a03fb3 	mov	r3, #716	; 0x2cc
    c178:	e08f2002 	add	r2, pc, r2
    c17c:	e58d2000 	str	r2, [sp]
    c180:	e59f27d8 	ldr	r2, [pc, #2008]	; c960 <main+0x4954>
    c184:	e08f1001 	add	r1, pc, r1
    c188:	e58d0008 	str	r0, [sp, #8]
    c18c:	e28a0028 	add	r0, sl, #40	; 0x28
    c190:	e08f2002 	add	r2, pc, r2
    c194:	e58d4004 	str	r4, [sp, #4]
    c198:	eb0020ee 	bl	14558 <fprintf>
    c19c:	e59f27c0 	ldr	r2, [pc, #1984]	; c964 <main+0x4958>
    c1a0:	e1a05004 	mov	r5, r4
    c1a4:	e08f2002 	add	r2, pc, r2
    c1a8:	e5923000 	ldr	r3, [r2]
    c1ac:	e2833001 	add	r3, r3, #1
    c1b0:	e5823000 	str	r3, [r2]
    c1b4:	eafff429 	b	9260 <main+0x1254>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
    c1b8:	e59f27a8 	ldr	r2, [pc, #1960]	; c968 <main+0x495c>
    c1bc:	e3a01000 	mov	r1, #0
    c1c0:	e58d1004 	str	r1, [sp, #4]
    c1c4:	e3003498 	movw	r3, #1176	; 0x498
    c1c8:	e08f2002 	add	r2, pc, r2
    c1cc:	e59f1798 	ldr	r1, [pc, #1944]	; c96c <main+0x4960>
    c1d0:	e58d2000 	str	r2, [sp]
    c1d4:	e59f2794 	ldr	r2, [pc, #1940]	; c970 <main+0x4964>
    c1d8:	e08f1001 	add	r1, pc, r1
    c1dc:	e58d0008 	str	r0, [sp, #8]
    c1e0:	e28a0028 	add	r0, sl, #40	; 0x28
    c1e4:	e08f2002 	add	r2, pc, r2
    c1e8:	eb0020da 	bl	14558 <fprintf>
    c1ec:	e59f2780 	ldr	r2, [pc, #1920]	; c974 <main+0x4968>
    c1f0:	e08f2002 	add	r2, pc, r2
    c1f4:	e5923000 	ldr	r3, [r2]
    c1f8:	e2833001 	add	r3, r3, #1
    c1fc:	e5823000 	str	r3, [r2]
    c200:	eafffd89 	b	b82c <main+0x3820>
	EXPECT_EQ (NO_ERROR, rc, "close channnel");
    c204:	e59f276c 	ldr	r2, [pc, #1900]	; c978 <main+0x496c>
    c208:	e3a01000 	mov	r1, #0
    c20c:	e58d1004 	str	r1, [sp, #4]
    c210:	e30033c6 	movw	r3, #966	; 0x3c6
    c214:	e08f2002 	add	r2, pc, r2
    c218:	e59f175c 	ldr	r1, [pc, #1884]	; c97c <main+0x4970>
    c21c:	e58d2000 	str	r2, [sp]
    c220:	e59f2758 	ldr	r2, [pc, #1880]	; c980 <main+0x4974>
    c224:	e08f1001 	add	r1, pc, r1
    c228:	e58d0008 	str	r0, [sp, #8]
    c22c:	e28a0028 	add	r0, sl, #40	; 0x28
    c230:	e08f2002 	add	r2, pc, r2
    c234:	eb0020c7 	bl	14558 <fprintf>
    c238:	e59f2744 	ldr	r2, [pc, #1860]	; c984 <main+0x4978>
    c23c:	e08f2002 	add	r2, pc, r2
    c240:	e5923000 	ldr	r3, [r2]
    c244:	e2833001 	add	r3, r3, #1
    c248:	e5823000 	str	r3, [r2]
    c24c:	eafffad3 	b	ada0 <main+0x2d94>
	EXPECT_EQ (0, rc1, "accept")
    c250:	e59f2730 	ldr	r2, [pc, #1840]	; c988 <main+0x497c>
    c254:	e3a01000 	mov	r1, #0
    c258:	e58d1004 	str	r1, [sp, #4]
    c25c:	e300332d 	movw	r3, #813	; 0x32d
    c260:	e08f2002 	add	r2, pc, r2
    c264:	e59f1720 	ldr	r1, [pc, #1824]	; c98c <main+0x4980>
    c268:	e58d2000 	str	r2, [sp]
    c26c:	e59f271c 	ldr	r2, [pc, #1820]	; c990 <main+0x4984>
    c270:	e08f1001 	add	r1, pc, r1
    c274:	e58d0008 	str	r0, [sp, #8]
    c278:	e28a0028 	add	r0, sl, #40	; 0x28
    c27c:	e08f2002 	add	r2, pc, r2
    c280:	eb0020b4 	bl	14558 <fprintf>
    c284:	e59f2708 	ldr	r2, [pc, #1800]	; c994 <main+0x4988>
	rc = close(chan);
    c288:	e1a00005 	mov	r0, r5
	EXPECT_EQ (0, rc1, "accept")
    c28c:	e08f2002 	add	r2, pc, r2
    c290:	e5923000 	ldr	r3, [r2]
    c294:	e2833001 	add	r3, r3, #1
    c298:	e5823000 	str	r3, [r2]
	rc = close(chan);
    c29c:	eb001b59 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channnel")
    c2a0:	e5943000 	ldr	r3, [r4]
    c2a4:	e3500000 	cmp	r0, #0
    c2a8:	e2833001 	add	r3, r3, #1
    c2ac:	e5843000 	str	r3, [r4]
    c2b0:	0afff9dc 	beq	aa28 <main+0x2a1c>
    c2b4:	e59f26dc 	ldr	r2, [pc, #1756]	; c998 <main+0x498c>
    c2b8:	e3a01000 	mov	r1, #0
    c2bc:	e58d1004 	str	r1, [sp, #4]
    c2c0:	e3a03e33 	mov	r3, #816	; 0x330
    c2c4:	e08f2002 	add	r2, pc, r2
    c2c8:	e59f16cc 	ldr	r1, [pc, #1740]	; c99c <main+0x4990>
    c2cc:	e58d2000 	str	r2, [sp]
    c2d0:	e59f26c8 	ldr	r2, [pc, #1736]	; c9a0 <main+0x4994>
    c2d4:	e08f1001 	add	r1, pc, r1
    c2d8:	e58d0008 	str	r0, [sp, #8]
    c2dc:	e28a0028 	add	r0, sl, #40	; 0x28
    c2e0:	e08f2002 	add	r2, pc, r2
    c2e4:	eb00209b 	bl	14558 <fprintf>
    c2e8:	e59f26b4 	ldr	r2, [pc, #1716]	; c9a4 <main+0x4998>
    c2ec:	e08f2002 	add	r2, pc, r2
    c2f0:	e5923000 	ldr	r3, [r2]
    c2f4:	e2833001 	add	r3, r3, #1
    c2f8:	e5823000 	str	r3, [r2]
    c2fc:	eafff9c9 	b	aa28 <main+0x2a1c>
	EXPECT_GE_ZERO (rc, "create datasink port");
    c300:	e59f26a0 	ldr	r2, [pc, #1696]	; c9a8 <main+0x499c>
    c304:	e30033b5 	movw	r3, #949	; 0x3b5
    c308:	e59f169c 	ldr	r1, [pc, #1692]	; c9ac <main+0x49a0>
    c30c:	e28a0028 	add	r0, sl, #40	; 0x28
    c310:	e08f2002 	add	r2, pc, r2
    c314:	e58d2000 	str	r2, [sp]
    c318:	e59f2690 	ldr	r2, [pc, #1680]	; c9b0 <main+0x49a4>
    c31c:	e08f1001 	add	r1, pc, r1
    c320:	e58d4004 	str	r4, [sp, #4]
    c324:	e3a06000 	mov	r6, #0
    c328:	e08f2002 	add	r2, pc, r2
    c32c:	eb002089 	bl	14558 <fprintf>
    c330:	e59f267c 	ldr	r2, [pc, #1660]	; c9b4 <main+0x49a8>
    c334:	e08f2002 	add	r2, pc, r2
    c338:	e5923000 	ldr	r3, [r2]
    c33c:	e2833001 	add	r3, r3, #1
    c340:	e5823000 	str	r3, [r2]
    c344:	eafffa41 	b	ac50 <main+0x2c44>
	TEST_END
    c348:	e59f2668 	ldr	r2, [pc, #1640]	; c9b8 <main+0x49ac>
    c34c:	e3003332 	movw	r3, #818	; 0x332
    c350:	e59f1664 	ldr	r1, [pc, #1636]	; c9bc <main+0x49b0>
    c354:	e28a0028 	add	r0, sl, #40	; 0x28
    c358:	e08f2002 	add	r2, pc, r2
    c35c:	e58d2000 	str	r2, [sp]
    c360:	e59f2658 	ldr	r2, [pc, #1624]	; c9c0 <main+0x49b4>
    c364:	e08f1001 	add	r1, pc, r1
    c368:	e08f2002 	add	r2, pc, r2
    c36c:	eb002079 	bl	14558 <fprintf>
    c370:	eafff9b6 	b	aa50 <main+0x2a44>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    c374:	e59f2648 	ldr	r2, [pc, #1608]	; c9c4 <main+0x49b8>
    c378:	e30033bf 	movw	r3, #959	; 0x3bf
    c37c:	e59f1644 	ldr	r1, [pc, #1604]	; c9c8 <main+0x49bc>
    c380:	e28a0028 	add	r0, sl, #40	; 0x28
    c384:	e08f2002 	add	r2, pc, r2
    c388:	e58d2000 	str	r2, [sp]
    c38c:	e59f2638 	ldr	r2, [pc, #1592]	; c9cc <main+0x49c0>
    c390:	e08f1001 	add	r1, pc, r1
    c394:	e58d5004 	str	r5, [sp, #4]
    c398:	e3a06000 	mov	r6, #0
    c39c:	e08f2002 	add	r2, pc, r2
    c3a0:	eb00206c 	bl	14558 <fprintf>
    c3a4:	e59f2624 	ldr	r2, [pc, #1572]	; c9d0 <main+0x49c4>
    c3a8:	e08f2002 	add	r2, pc, r2
    c3ac:	e5923000 	ldr	r3, [r2]
    c3b0:	e2833001 	add	r3, r3, #1
    c3b4:	e5823000 	str	r3, [r2]
    c3b8:	eafffa55 	b	ad14 <main+0x2d08>
	EXPECT_GE_ZERO (rc, "create datasink port");
    c3bc:	e59f2610 	ldr	r2, [pc, #1552]	; c9d4 <main+0x49c8>
    c3c0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    c3c4:	e59f160c 	ldr	r1, [pc, #1548]	; c9d8 <main+0x49cc>
    c3c8:	e28a0028 	add	r0, sl, #40	; 0x28
    c3cc:	e08f2002 	add	r2, pc, r2
    c3d0:	e58d2000 	str	r2, [sp]
    c3d4:	e59f2600 	ldr	r2, [pc, #1536]	; c9dc <main+0x49d0>
    c3d8:	e08f1001 	add	r1, pc, r1
    c3dc:	e58d4004 	str	r4, [sp, #4]
    c3e0:	e3a06000 	mov	r6, #0
    c3e4:	e08f2002 	add	r2, pc, r2
    c3e8:	eb00205a 	bl	14558 <fprintf>
    c3ec:	e59f25ec 	ldr	r2, [pc, #1516]	; c9e0 <main+0x49d4>
    c3f0:	e08f2002 	add	r2, pc, r2
    c3f4:	e5923000 	ldr	r3, [r2]
    c3f8:	e2833001 	add	r3, r3, #1
    c3fc:	e5823000 	str	r3, [r2]
    c400:	eafffaed 	b	afbc <main+0x2fb0>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    c404:	e59f25d8 	ldr	r2, [pc, #1496]	; c9e4 <main+0x49d8>
    c408:	e3003473 	movw	r3, #1139	; 0x473
    c40c:	e59f15d4 	ldr	r1, [pc, #1492]	; c9e8 <main+0x49dc>
    c410:	e28a0028 	add	r0, sl, #40	; 0x28
    c414:	e08f2002 	add	r2, pc, r2
    c418:	e58d2000 	str	r2, [sp]
    c41c:	e59f25c8 	ldr	r2, [pc, #1480]	; c9ec <main+0x49e0>
    c420:	e08f1001 	add	r1, pc, r1
    c424:	e58d5004 	str	r5, [sp, #4]
    c428:	e3a06000 	mov	r6, #0
    c42c:	e08f2002 	add	r2, pc, r2
    c430:	eb002048 	bl	14558 <fprintf>
    c434:	e59f25b4 	ldr	r2, [pc, #1460]	; c9f0 <main+0x49e4>
    c438:	e08f2002 	add	r2, pc, r2
    c43c:	e5923000 	ldr	r3, [r2]
    c440:	e2833001 	add	r3, r3, #1
    c444:	e5823000 	str	r3, [r2]
    c448:	eafffc61 	b	b5d4 <main+0x35c8>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    c44c:	e59f25a0 	ldr	r2, [pc, #1440]	; c9f4 <main+0x49e8>
    c450:	e30033f3 	movw	r3, #1011	; 0x3f3
    c454:	e59f159c 	ldr	r1, [pc, #1436]	; c9f8 <main+0x49ec>
    c458:	e28a0028 	add	r0, sl, #40	; 0x28
    c45c:	e08f2002 	add	r2, pc, r2
    c460:	e58d2000 	str	r2, [sp]
    c464:	e59f2590 	ldr	r2, [pc, #1424]	; c9fc <main+0x49f0>
    c468:	e08f1001 	add	r1, pc, r1
    c46c:	e58d5004 	str	r5, [sp, #4]
    c470:	e3a06000 	mov	r6, #0
    c474:	e08f2002 	add	r2, pc, r2
    c478:	eb002036 	bl	14558 <fprintf>
    c47c:	e59f257c 	ldr	r2, [pc, #1404]	; ca00 <main+0x49f4>
    c480:	e08f2002 	add	r2, pc, r2
    c484:	e5923000 	ldr	r3, [r2]
    c488:	e2833001 	add	r3, r3, #1
    c48c:	e5823000 	str	r3, [r2]
    c490:	eafffb13 	b	b0e4 <main+0x30d8>
	EXPECT_GE_ZERO (rc, "create datasink port");
    c494:	e59f2568 	ldr	r2, [pc, #1384]	; ca04 <main+0x49f8>
    c498:	e3003469 	movw	r3, #1129	; 0x469
    c49c:	e59f1564 	ldr	r1, [pc, #1380]	; ca08 <main+0x49fc>
    c4a0:	e28a0028 	add	r0, sl, #40	; 0x28
    c4a4:	e08f2002 	add	r2, pc, r2
    c4a8:	e58d2000 	str	r2, [sp]
    c4ac:	e59f2558 	ldr	r2, [pc, #1368]	; ca0c <main+0x4a00>
    c4b0:	e08f1001 	add	r1, pc, r1
    c4b4:	e58d4004 	str	r4, [sp, #4]
    c4b8:	e3a06000 	mov	r6, #0
    c4bc:	e08f2002 	add	r2, pc, r2
    c4c0:	eb002024 	bl	14558 <fprintf>
    c4c4:	e59f2544 	ldr	r2, [pc, #1348]	; ca10 <main+0x4a04>
    c4c8:	e08f2002 	add	r2, pc, r2
    c4cc:	e5923000 	ldr	r3, [r2]
    c4d0:	e2833001 	add	r3, r3, #1
    c4d4:	e5823000 	str	r3, [r2]
    c4d8:	eafffc0b 	b	b50c <main+0x3500>
	EXPECT_GE_ZERO (rc, "selfie");
    c4dc:	e59f1530 	ldr	r1, [pc, #1328]	; ca14 <main+0x4a08>
    c4e0:	e1a02008 	mov	r2, r8
    c4e4:	e59d3014 	ldr	r3, [sp, #20]
    c4e8:	e1a00007 	mov	r0, r7
    c4ec:	e58d3000 	str	r3, [sp]
    c4f0:	e08f1001 	add	r1, pc, r1
    c4f4:	e3003299 	movw	r3, #665	; 0x299
    c4f8:	e58d6004 	str	r6, [sp, #4]
    c4fc:	eb002015 	bl	14558 <fprintf>
    c500:	e59f2510 	ldr	r2, [pc, #1296]	; ca18 <main+0x4a0c>
    c504:	e08f2002 	add	r2, pc, r2
    c508:	e5923000 	ldr	r3, [r2]
    c50c:	e2833001 	add	r3, r3, #1
    c510:	e5823000 	str	r3, [r2]
    c514:	eafff391 	b	9360 <main+0x1354>
		EXPECT_EQ (NO_ERROR, rc, "close channel");
    c518:	e59f24fc 	ldr	r2, [pc, #1276]	; ca1c <main+0x4a10>
    c51c:	e3a01000 	mov	r1, #0
    c520:	e58d1004 	str	r1, [sp, #4]
    c524:	e3003434 	movw	r3, #1076	; 0x434
    c528:	e08f2002 	add	r2, pc, r2
    c52c:	e59f14ec 	ldr	r1, [pc, #1260]	; ca20 <main+0x4a14>
    c530:	e58d2000 	str	r2, [sp]
    c534:	e59f24e8 	ldr	r2, [pc, #1256]	; ca24 <main+0x4a18>
    c538:	e08f1001 	add	r1, pc, r1
    c53c:	e58d0008 	str	r0, [sp, #8]
    c540:	e28a0028 	add	r0, sl, #40	; 0x28
    c544:	e08f2002 	add	r2, pc, r2
    c548:	eb002002 	bl	14558 <fprintf>
    c54c:	e59f24d4 	ldr	r2, [pc, #1236]	; ca28 <main+0x4a1c>
    c550:	e08f2002 	add	r2, pc, r2
    c554:	e5923000 	ldr	r3, [r2]
    c558:	e2833001 	add	r3, r3, #1
    c55c:	e5823000 	str	r3, [r2]
    c560:	eafff26e 	b	8f20 <main+0xf14>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    c564:	e59f24c0 	ldr	r2, [pc, #1216]	; ca2c <main+0x4a20>
    c568:	e300341e 	movw	r3, #1054	; 0x41e
    c56c:	e59f14bc 	ldr	r1, [pc, #1212]	; ca30 <main+0x4a24>
    c570:	e28a0028 	add	r0, sl, #40	; 0x28
    c574:	e08f2002 	add	r2, pc, r2
    c578:	e58d2000 	str	r2, [sp]
    c57c:	e59f24b0 	ldr	r2, [pc, #1200]	; ca34 <main+0x4a28>
    c580:	e08f1001 	add	r1, pc, r1
    c584:	e58d5004 	str	r5, [sp, #4]
    c588:	e08f2002 	add	r2, pc, r2
    c58c:	eb001ff1 	bl	14558 <fprintf>
    c590:	e59f24a0 	ldr	r2, [pc, #1184]	; ca38 <main+0x4a2c>
    c594:	e08f2002 	add	r2, pc, r2
    c598:	e5923000 	ldr	r3, [r2]
    c59c:	e2833001 	add	r3, r3, #1
    c5a0:	e5823000 	str	r3, [r2]
    c5a4:	eafff25d 	b	8f20 <main+0xf14>
		EXPECT_EQ (NO_ERROR, rc, "close selfie");
    c5a8:	e59f248c 	ldr	r2, [pc, #1164]	; ca3c <main+0x4a30>
    c5ac:	e3a01000 	mov	r1, #0
    c5b0:	e58d1004 	str	r1, [sp, #4]
    c5b4:	e3a03fb6 	mov	r3, #728	; 0x2d8
    c5b8:	e08f2002 	add	r2, pc, r2
    c5bc:	e59f147c 	ldr	r1, [pc, #1148]	; ca40 <main+0x4a34>
    c5c0:	e58d2000 	str	r2, [sp]
    c5c4:	e59f2478 	ldr	r2, [pc, #1144]	; ca44 <main+0x4a38>
    c5c8:	e08f1001 	add	r1, pc, r1
    c5cc:	e58d0008 	str	r0, [sp, #8]
    c5d0:	e28a0028 	add	r0, sl, #40	; 0x28
    c5d4:	e08f2002 	add	r2, pc, r2
    c5d8:	eb001fde 	bl	14558 <fprintf>
    c5dc:	e59f2464 	ldr	r2, [pc, #1124]	; ca48 <main+0x4a3c>
    c5e0:	e08f2002 	add	r2, pc, r2
    c5e4:	e5923000 	ldr	r3, [r2]
    c5e8:	e2833001 	add	r3, r3, #1
    c5ec:	e5823000 	str	r3, [r2]
    c5f0:	eafff35a 	b	9360 <main+0x1354>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    c5f4:	e59f2450 	ldr	r2, [pc, #1104]	; ca4c <main+0x4a40>
    c5f8:	e3003325 	movw	r3, #805	; 0x325
    c5fc:	e59f144c 	ldr	r1, [pc, #1100]	; ca50 <main+0x4a44>
    c600:	e28a0028 	add	r0, sl, #40	; 0x28
    c604:	e08f2002 	add	r2, pc, r2
    c608:	e58d2000 	str	r2, [sp]
    c60c:	e59f2440 	ldr	r2, [pc, #1088]	; ca54 <main+0x4a48>
    c610:	e08f1001 	add	r1, pc, r1
    c614:	e58d5004 	str	r5, [sp, #4]
    c618:	e3a06000 	mov	r6, #0
    c61c:	e08f2002 	add	r2, pc, r2
    c620:	eb001fcc 	bl	14558 <fprintf>
    c624:	e59f242c 	ldr	r2, [pc, #1068]	; ca58 <main+0x4a4c>
    c628:	e08f2002 	add	r2, pc, r2
    c62c:	e5923000 	ldr	r3, [r2]
    c630:	e2833001 	add	r3, r3, #1
    c634:	e5823000 	str	r3, [r2]
    c638:	eafff8c9 	b	a964 <main+0x2958>
	EXPECT_GE_ZERO(rc, "connect to ta_only");
    c63c:	e59f1418 	ldr	r1, [pc, #1048]	; ca5c <main+0x4a50>
    c640:	e3a03fbd 	mov	r3, #756	; 0x2f4
    c644:	e58d2004 	str	r2, [sp, #4]
    c648:	e28a0028 	add	r0, sl, #40	; 0x28
    c64c:	e08f1001 	add	r1, pc, r1
    c650:	e59f2408 	ldr	r2, [pc, #1032]	; ca60 <main+0x4a54>
    c654:	e58d1000 	str	r1, [sp]
    c658:	e59f1404 	ldr	r1, [pc, #1028]	; ca64 <main+0x4a58>
    c65c:	e08f2002 	add	r2, pc, r2
    c660:	e08f1001 	add	r1, pc, r1
    c664:	eb001fbb 	bl	14558 <fprintf>
    c668:	e59f23f8 	ldr	r2, [pc, #1016]	; ca68 <main+0x4a5c>
    c66c:	e08f2002 	add	r2, pc, r2
    c670:	e5923000 	ldr	r3, [r2]
    c674:	e2833001 	add	r3, r3, #1
    c678:	e5823000 	str	r3, [r2]
    c67c:	eafff38c 	b	94b4 <main+0x14a8>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "async");
    c680:	e59f23e4 	ldr	r2, [pc, #996]	; ca6c <main+0x4a60>
    c684:	e3e0100c 	mvn	r1, #12
    c688:	e58d1004 	str	r1, [sp, #4]
    c68c:	e3a03f93 	mov	r3, #588	; 0x24c
    c690:	e08f2002 	add	r2, pc, r2
    c694:	e59f13d4 	ldr	r1, [pc, #980]	; ca70 <main+0x4a64>
    c698:	e58d2000 	str	r2, [sp]
    c69c:	e3a06000 	mov	r6, #0
    c6a0:	e59f23cc 	ldr	r2, [pc, #972]	; ca74 <main+0x4a68>
    c6a4:	e08f1001 	add	r1, pc, r1
    c6a8:	e58d0008 	str	r0, [sp, #8]
    c6ac:	e28a0028 	add	r0, sl, #40	; 0x28
    c6b0:	e08f2002 	add	r2, pc, r2
    c6b4:	eb001fa7 	bl	14558 <fprintf>
    c6b8:	e59f23b8 	ldr	r2, [pc, #952]	; ca78 <main+0x4a6c>
    c6bc:	e08f2002 	add	r2, pc, r2
    c6c0:	e5923000 	ldr	r3, [r2]
    c6c4:	e2833001 	add	r3, r3, #1
    c6c8:	e5823000 	str	r3, [r2]
    c6cc:	eaffef73 	b	84a0 <main+0x494>
	EXPECT_GE_ZERO(rc, "async");
    c6d0:	e59f23a4 	ldr	r2, [pc, #932]	; ca7c <main+0x4a70>
    c6d4:	e3003246 	movw	r3, #582	; 0x246
    c6d8:	e59f13a0 	ldr	r1, [pc, #928]	; ca80 <main+0x4a74>
    c6dc:	e28a0028 	add	r0, sl, #40	; 0x28
    c6e0:	e08f2002 	add	r2, pc, r2
    c6e4:	e58d2000 	str	r2, [sp]
    c6e8:	e59f2394 	ldr	r2, [pc, #916]	; ca84 <main+0x4a78>
    c6ec:	e08f1001 	add	r1, pc, r1
    c6f0:	e58d4004 	str	r4, [sp, #4]
    c6f4:	e3a06000 	mov	r6, #0
    c6f8:	e08f2002 	add	r2, pc, r2
    c6fc:	eb001f95 	bl	14558 <fprintf>
    c700:	e59f2380 	ldr	r2, [pc, #896]	; ca88 <main+0x4a7c>
    c704:	e28d3084 	add	r3, sp, #132	; 0x84
    c708:	e58d3030 	str	r3, [sp, #48]	; 0x30
    c70c:	e08f2002 	add	r2, pc, r2
    c710:	e5923000 	ldr	r3, [r2]
    c714:	e2833001 	add	r3, r3, #1
    c718:	e5823000 	str	r3, [r2]
    c71c:	eaffef68 	b	84c4 <main+0x4b8>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "async");
    c720:	e59f2364 	ldr	r2, [pc, #868]	; ca8c <main+0x4a80>
    c724:	e3e0100c 	mvn	r1, #12
    c728:	e58d1004 	str	r1, [sp, #4]
    c72c:	e300325e 	movw	r3, #606	; 0x25e
    c730:	e08f2002 	add	r2, pc, r2
    c734:	e59f1354 	ldr	r1, [pc, #852]	; ca90 <main+0x4a84>
    c738:	e58d2000 	str	r2, [sp]
    c73c:	e3a06000 	mov	r6, #0
    c740:	e59f234c 	ldr	r2, [pc, #844]	; ca94 <main+0x4a88>
    c744:	e08f1001 	add	r1, pc, r1
    c748:	e58d0008 	str	r0, [sp, #8]
    c74c:	e28a0028 	add	r0, sl, #40	; 0x28
    c750:	e08f2002 	add	r2, pc, r2
    c754:	eb001f7f 	bl	14558 <fprintf>
    c758:	e59f2338 	ldr	r2, [pc, #824]	; ca98 <main+0x4a8c>
    c75c:	e08f2002 	add	r2, pc, r2
    c760:	e5923000 	ldr	r3, [r2]
    c764:	e2833001 	add	r3, r3, #1
    c768:	e5823000 	str	r3, [r2]
    c76c:	eaffef66 	b	850c <main+0x500>
	EXPECT_GE_ZERO (rc, "async");
    c770:	e59f2324 	ldr	r2, [pc, #804]	; ca9c <main+0x4a90>
    c774:	e3003255 	movw	r3, #597	; 0x255
    c778:	e59f1320 	ldr	r1, [pc, #800]	; caa0 <main+0x4a94>
    c77c:	e28a0028 	add	r0, sl, #40	; 0x28
    c780:	e08f2002 	add	r2, pc, r2
    c784:	e58d2000 	str	r2, [sp]
    c788:	e59f2314 	ldr	r2, [pc, #788]	; caa4 <main+0x4a98>
    c78c:	e08f1001 	add	r1, pc, r1
    c790:	e58d7004 	str	r7, [sp, #4]
    c794:	e08f2002 	add	r2, pc, r2
    c798:	eb001f6e 	bl	14558 <fprintf>
    c79c:	e59f2304 	ldr	r2, [pc, #772]	; caa8 <main+0x4a9c>
    c7a0:	e08f2002 	add	r2, pc, r2
    c7a4:	e5923000 	ldr	r3, [r2]
    c7a8:	e2833001 	add	r3, r3, #1
    c7ac:	e5823000 	str	r3, [r2]
    c7b0:	eafffc7a 	b	b9a0 <main+0x3994>
}
    c7b4:	eb001f83 	bl	145c8 <__stack_chk_fail>
    c7b8:	e59d9014 	ldr	r9, [sp, #20]
    c7bc:	eafff1c3 	b	8ed0 <main+0xec4>
    c7c0:	000095e0 	.word	0x000095e0
    c7c4:	0000a1f8 	.word	0x0000a1f8
    c7c8:	0000a020 	.word	0x0000a020
    c7cc:	0000a850 	.word	0x0000a850
    c7d0:	0000a840 	.word	0x0000a840
    c7d4:	00009ff8 	.word	0x00009ff8
    c7d8:	00009b34 	.word	0x00009b34
    c7dc:	00009b28 	.word	0x00009b28
    c7e0:	00009b40 	.word	0x00009b40
    c7e4:	00009f44 	.word	0x00009f44
    c7e8:	00009b00 	.word	0x00009b00
    c7ec:	00009554 	.word	0x00009554
    c7f0:	000095c8 	.word	0x000095c8
    c7f4:	00009f48 	.word	0x00009f48
    c7f8:	00009ef0 	.word	0x00009ef0
    c7fc:	0000a724 	.word	0x0000a724
    c800:	000093ac 	.word	0x000093ac
    c804:	0000a084 	.word	0x0000a084
    c808:	00009eac 	.word	0x00009eac
    c80c:	00009554 	.word	0x00009554
    c810:	00009fb0 	.word	0x00009fb0
    c814:	00009e78 	.word	0x00009e78
    c818:	0000a6a8 	.word	0x0000a6a8
    c81c:	00009544 	.word	0x00009544
    c820:	00009e14 	.word	0x00009e14
    c824:	0000953c 	.word	0x0000953c
    c828:	0000a644 	.word	0x0000a644
    c82c:	000094f8 	.word	0x000094f8
    c830:	00009efc 	.word	0x00009efc
    c834:	00009dc4 	.word	0x00009dc4
    c838:	0000a5f4 	.word	0x0000a5f4
    c83c:	0000a5c0 	.word	0x0000a5c0
    c840:	000092f0 	.word	0x000092f0
    c844:	00009f08 	.word	0x00009f08
    c848:	00009d44 	.word	0x00009d44
    c84c:	00009480 	.word	0x00009480
    c850:	00009b7c 	.word	0x00009b7c
    c854:	00009cf4 	.word	0x00009cf4
    c858:	0000a528 	.word	0x0000a528
    c85c:	0000921c 	.word	0x0000921c
    c860:	00009e50 	.word	0x00009e50
    c864:	00009c8c 	.word	0x00009c8c
    c868:	00009800 	.word	0x00009800
    c86c:	000091e4 	.word	0x000091e4
    c870:	00009de8 	.word	0x00009de8
    c874:	00009c24 	.word	0x00009c24
    c878:	00009148 	.word	0x00009148
    c87c:	00009d98 	.word	0x00009d98
    c880:	00009bd4 	.word	0x00009bd4
    c884:	00009034 	.word	0x00009034
    c888:	00009d4c 	.word	0x00009d4c
    c88c:	00009b88 	.word	0x00009b88
    c890:	00008f98 	.word	0x00008f98
    c894:	00009d00 	.word	0x00009d00
    c898:	00009b3c 	.word	0x00009b3c
    c89c:	00008f4c 	.word	0x00008f4c
    c8a0:	00009cd4 	.word	0x00009cd4
    c8a4:	00009b10 	.word	0x00009b10
    c8a8:	00008f00 	.word	0x00008f00
    c8ac:	00009ca8 	.word	0x00009ca8
    c8b0:	00009ae4 	.word	0x00009ae4
    c8b4:	00008ebc 	.word	0x00008ebc
    c8b8:	00009c7c 	.word	0x00009c7c
    c8bc:	00009ab8 	.word	0x00009ab8
    c8c0:	00009688 	.word	0x00009688
    c8c4:	00009c18 	.word	0x00009c18
    c8c8:	00008ef4 	.word	0x00008ef4
    c8cc:	00009bf0 	.word	0x00009bf0
    c8d0:	00009a2c 	.word	0x00009a2c
    c8d4:	00008ef4 	.word	0x00008ef4
    c8d8:	00009ba0 	.word	0x00009ba0
    c8dc:	000099dc 	.word	0x000099dc
    c8e0:	000099b0 	.word	0x000099b0
    c8e4:	00009adc 	.word	0x00009adc
    c8e8:	000099a4 	.word	0x000099a4
    c8ec:	0000a1dc 	.word	0x0000a1dc
    c8f0:	0000a1b0 	.word	0x0000a1b0
    c8f4:	00009158 	.word	0x00009158
    c8f8:	00009660 	.word	0x00009660
    c8fc:	00009924 	.word	0x00009924
    c900:	0000a15c 	.word	0x0000a15c
    c904:	0000a138 	.word	0x0000a138
    c908:	000090e0 	.word	0x000090e0
    c90c:	00009584 	.word	0x00009584
    c910:	000098b4 	.word	0x000098b4
    c914:	0000a0e4 	.word	0x0000a0e4
    c918:	0000a0c4 	.word	0x0000a0c4
    c91c:	0000906c 	.word	0x0000906c
    c920:	00009574 	.word	0x00009574
    c924:	00009838 	.word	0x00009838
    c928:	0000a070 	.word	0x0000a070
    c92c:	0000a04c 	.word	0x0000a04c
    c930:	00008ff4 	.word	0x00008ff4
    c934:	00009498 	.word	0x00009498
    c938:	000097c8 	.word	0x000097c8
    c93c:	00009ff8 	.word	0x00009ff8
    c940:	00009fd8 	.word	0x00009fd8
    c944:	00008f80 	.word	0x00008f80
    c948:	00008f74 	.word	0x00008f74
    c94c:	0000974c 	.word	0x0000974c
    c950:	00009f84 	.word	0x00009f84
    c954:	00009f60 	.word	0x00009f60
    c958:	00008f08 	.word	0x00008f08
    c95c:	000093ac 	.word	0x000093ac
    c960:	000096dc 	.word	0x000096dc
    c964:	00009f0c 	.word	0x00009f0c
    c968:	00009694 	.word	0x00009694
    c96c:	000097c0 	.word	0x000097c0
    c970:	00009688 	.word	0x00009688
    c974:	00009ec0 	.word	0x00009ec0
    c978:	00009064 	.word	0x00009064
    c97c:	00009774 	.word	0x00009774
    c980:	0000963c 	.word	0x0000963c
    c984:	00009e74 	.word	0x00009e74
    c988:	00008e20 	.word	0x00008e20
    c98c:	000092c0 	.word	0x000092c0
    c990:	000095f0 	.word	0x000095f0
    c994:	00009e24 	.word	0x00009e24
    c998:	00008fb4 	.word	0x00008fb4
    c99c:	000096c4 	.word	0x000096c4
    c9a0:	0000958c 	.word	0x0000958c
    c9a4:	00009dc4 	.word	0x00009dc4
    c9a8:	00009824 	.word	0x00009824
    c9ac:	000095a0 	.word	0x000095a0
    c9b0:	00009544 	.word	0x00009544
    c9b4:	00009d7c 	.word	0x00009d7c
    c9b8:	00008a4c 	.word	0x00008a4c
    c9bc:	000096c8 	.word	0x000096c8
    c9c0:	00009504 	.word	0x00009504
    c9c4:	00009818 	.word	0x00009818
    c9c8:	0000952c 	.word	0x0000952c
    c9cc:	000094d0 	.word	0x000094d0
    c9d0:	00009d08 	.word	0x00009d08
    c9d4:	00009768 	.word	0x00009768
    c9d8:	000094e4 	.word	0x000094e4
    c9dc:	00009488 	.word	0x00009488
    c9e0:	00009cc0 	.word	0x00009cc0
    c9e4:	00009788 	.word	0x00009788
    c9e8:	0000949c 	.word	0x0000949c
    c9ec:	00009440 	.word	0x00009440
    c9f0:	00009c78 	.word	0x00009c78
    c9f4:	00009740 	.word	0x00009740
    c9f8:	00009454 	.word	0x00009454
    c9fc:	000093f8 	.word	0x000093f8
    ca00:	00009c30 	.word	0x00009c30
    ca04:	00009690 	.word	0x00009690
    ca08:	0000940c 	.word	0x0000940c
    ca0c:	000093b0 	.word	0x000093b0
    ca10:	00009be8 	.word	0x00009be8
    ca14:	000093cc 	.word	0x000093cc
    ca18:	00009bac 	.word	0x00009bac
    ca1c:	00009334 	.word	0x00009334
    ca20:	00009460 	.word	0x00009460
    ca24:	00009328 	.word	0x00009328
    ca28:	00009b60 	.word	0x00009b60
    ca2c:	00009628 	.word	0x00009628
    ca30:	0000933c 	.word	0x0000933c
    ca34:	000092e4 	.word	0x000092e4
    ca38:	00009b1c 	.word	0x00009b1c
    ca3c:	00008b08 	.word	0x00008b08
    ca40:	000093d0 	.word	0x000093d0
    ca44:	00009298 	.word	0x00009298
    ca48:	00009ad0 	.word	0x00009ad0
    ca4c:	00009598 	.word	0x00009598
    ca50:	000092ac 	.word	0x000092ac
    ca54:	00009250 	.word	0x00009250
    ca58:	00009a88 	.word	0x00009a88
    ca5c:	00008ae0 	.word	0x00008ae0
    ca60:	00009210 	.word	0x00009210
    ca64:	0000925c 	.word	0x0000925c
    ca68:	00009a44 	.word	0x00009a44
    ca6c:	000088a0 	.word	0x000088a0
    ca70:	00009640 	.word	0x00009640
    ca74:	000091bc 	.word	0x000091bc
    ca78:	000099f4 	.word	0x000099f4
    ca7c:	00008850 	.word	0x00008850
    ca80:	000091d0 	.word	0x000091d0
    ca84:	00009174 	.word	0x00009174
    ca88:	000099a4 	.word	0x000099a4
    ca8c:	00008800 	.word	0x00008800
    ca90:	000095a0 	.word	0x000095a0
    ca94:	0000911c 	.word	0x0000911c
    ca98:	00009954 	.word	0x00009954
    ca9c:	000087b0 	.word	0x000087b0
    caa0:	00009130 	.word	0x00009130
    caa4:	000090d8 	.word	0x000090d8
    caa8:	00009910 	.word	0x00009910
    caac:	000095e0 	.word	0x000095e0
    cab0:	00008d90 	.word	0x00008d90
    cab4:	00008440 	.word	0x00008440
    cab8:	00008e9c 	.word	0x00008e9c
    cabc:	000083ec 	.word	0x000083ec
			EXPECT_EQ (NO_ERROR, rc, "async");
    cac0:	e51f501c 	ldr	r5, [pc, #-28]	; caac <main+0x4aa0>
    cac4:	e28a3028 	add	r3, sl, #40	; 0x28
    cac8:	e51f9020 	ldr	r9, [pc, #-32]	; cab0 <main+0x4aa4>
    cacc:	e1a00003 	mov	r0, r3
    cad0:	e08f5005 	add	r5, pc, r5
    cad4:	e58d3014 	str	r3, [sp, #20]
    cad8:	e58d1008 	str	r1, [sp, #8]
    cadc:	e08f9009 	add	r9, pc, r9
    cae0:	e51f3034 	ldr	r3, [pc, #-52]	; cab4 <main+0x4aa8>
    cae4:	e1a02009 	mov	r2, r9
    cae8:	e51f1038 	ldr	r1, [pc, #-56]	; cab8 <main+0x4aac>
    caec:	e3a06000 	mov	r6, #0
    caf0:	e08f3003 	add	r3, pc, r3
    caf4:	e58d6004 	str	r6, [sp, #4]
    caf8:	e58d3018 	str	r3, [sp, #24]
    cafc:	e08f1001 	add	r1, pc, r1
    cb00:	e58d3000 	str	r3, [sp]
    cb04:	e3003269 	movw	r3, #617	; 0x269
    cb08:	eb001e92 	bl	14558 <fprintf>
    cb0c:	e5952000 	ldr	r2, [r5]
			EXPECT_EQ (exp_event, event.event, "async");
    cb10:	e5943000 	ldr	r3, [r4]
    cb14:	e59d1088 	ldr	r1, [sp, #136]	; 0x88
			EXPECT_EQ (NO_ERROR, rc, "async");
    cb18:	e2822001 	add	r2, r2, #1
			EXPECT_EQ (exp_event, event.event, "async");
    cb1c:	e2833001 	add	r3, r3, #1
			EXPECT_EQ (NO_ERROR, rc, "async");
    cb20:	e5852000 	str	r2, [r5]
			EXPECT_EQ (exp_event, event.event, "async");
    cb24:	e5843000 	str	r3, [r4]
    cb28:	e3510001 	cmp	r1, #1
    cb2c:	0affeef8 	beq	8714 <main+0x708>
    cb30:	e58d1008 	str	r1, [sp, #8]
    cb34:	e3a01001 	mov	r1, #1
    cb38:	e58d1004 	str	r1, [sp, #4]
    cb3c:	e1a02009 	mov	r2, r9
    cb40:	e51f108c 	ldr	r1, [pc, #-140]	; cabc <main+0x4ab0>
    cb44:	e59d3018 	ldr	r3, [sp, #24]
    cb48:	e58d3000 	str	r3, [sp]
    cb4c:	e08f1001 	add	r1, pc, r1
    cb50:	e300326a 	movw	r3, #618	; 0x26a
    cb54:	e59d0014 	ldr	r0, [sp, #20]
    cb58:	eb001e7e 	bl	14558 <fprintf>
    cb5c:	e5953000 	ldr	r3, [r5]
    cb60:	e2833001 	add	r3, r3, #1
    cb64:	e5853000 	str	r3, [r5]
    cb68:	eaffeee9 	b	8714 <main+0x708>

0000cb6c <__guard_setup>:

#include <rand.h>

unsigned int __stack_chk_guard = 0xaff;

static void __attribute__((constructor)) __guard_setup (void){
    cb6c:	e92d4010 	push	{r4, lr}
        /* 
         * included for future use. rand.h must be seeded and -fstack_protector must be disabled in
         * stack contexts preceeding this call.
         */
  	if ( __stack_chk_guard == 0U )
    cb70:	e59f4018 	ldr	r4, [pc, #24]	; cb90 <__guard_setup+0x24>
    cb74:	e08f4004 	add	r4, pc, r4
    cb78:	e5943000 	ldr	r3, [r4]
    cb7c:	e3530000 	cmp	r3, #0
    cb80:	18bd8010 	popne	{r4, pc}
  		__stack_chk_guard = rand();
    cb84:	eb001e65 	bl	14520 <rand>
    cb88:	e5840000 	str	r0, [r4]
}
    cb8c:	e8bd8010 	pop	{r4, pc}
    cb90:	00009518 	.word	0x00009518

0000cb94 <run_port_create_test>:
{
    cb94:	e59f14fc 	ldr	r1, [pc, #1276]	; d098 <run_port_create_test+0x504>
	TEST_BEGIN(__func__);
    cb98:	e3a03f4a 	mov	r3, #296	; 0x128
{
    cb9c:	e59f24f8 	ldr	r2, [pc, #1272]	; d09c <run_port_create_test+0x508>
    cba0:	e08f1001 	add	r1, pc, r1
    cba4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TEST_BEGIN(__func__);
    cba8:	e59fc4f0 	ldr	ip, [pc, #1264]	; d0a0 <run_port_create_test+0x50c>
{
    cbac:	e24ddf9b 	sub	sp, sp, #620	; 0x26c
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cbb0:	e59f84ec 	ldr	r8, [pc, #1260]	; d0a4 <run_port_create_test+0x510>
{
    cbb4:	e7912002 	ldr	r2, [r1, r2]
    cbb8:	e28d4028 	add	r4, sp, #40	; 0x28
	TEST_BEGIN(__func__);
    cbbc:	e59f04e4 	ldr	r0, [pc, #1252]	; d0a8 <run_port_create_test+0x514>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cbc0:	e08f8008 	add	r8, pc, r8
{
    cbc4:	e58d2018 	str	r2, [sp, #24]
	TEST_BEGIN(__func__);
    cbc8:	e3a07001 	mov	r7, #1
{
    cbcc:	e5922000 	ldr	r2, [r2]
	TEST_BEGIN(__func__);
    cbd0:	e08f0000 	add	r0, pc, r0
{
    cbd4:	e58d2264 	str	r2, [sp, #612]	; 0x264
	TEST_BEGIN(__func__);
    cbd8:	e1a09004 	mov	r9, r4
    cbdc:	e59f24c8 	ldr	r2, [pc, #1224]	; d0ac <run_port_create_test+0x518>
	for (i = 2; i < MAX_USER_HANDLES-1; i++) {
    cbe0:	e3a05002 	mov	r5, #2
	TEST_BEGIN(__func__);
    cbe4:	e791a00c 	ldr	sl, [r1, ip]
    cbe8:	e28d6f89 	add	r6, sp, #548	; 0x224
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cbec:	e59f14bc 	ldr	r1, [pc, #1212]	; d0b0 <run_port_create_test+0x51c>
	TEST_BEGIN(__func__);
    cbf0:	e08f2002 	add	r2, pc, r2
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cbf4:	e59fb4b8 	ldr	fp, [pc, #1208]	; d0b4 <run_port_create_test+0x520>
    cbf8:	e08f1001 	add	r1, pc, r1
    cbfc:	e58d1014 	str	r1, [sp, #20]
	TEST_BEGIN(__func__);
    cc00:	e59f14b0 	ldr	r1, [pc, #1200]	; d0b8 <run_port_create_test+0x524>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cc04:	e08fb00b 	add	fp, pc, fp
	TEST_BEGIN(__func__);
    cc08:	e58d0000 	str	r0, [sp]
    cc0c:	e28a0028 	add	r0, sl, #40	; 0x28
    cc10:	e08f1001 	add	r1, pc, r1
    cc14:	eb001e4f 	bl	14558 <fprintf>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cc18:	e58d7010 	str	r7, [sp, #16]
    cc1c:	e58d401c 	str	r4, [sp, #28]
    cc20:	e1a07008 	mov	r7, r8
    cc24:	e59d8014 	ldr	r8, [sp, #20]
    cc28:	ea000023 	b	ccbc <run_port_create_test+0x128>
		rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    cc2c:	e3a03000 	mov	r3, #0
    cc30:	e3a02a01 	mov	r2, #4096	; 0x1000
    cc34:	e3a01002 	mov	r1, #2
    cc38:	e1a00006 	mov	r0, r6
		ports[i] = (handle_t) rc;
    cc3c:	e5a94004 	str	r4, [r9, #4]!
		rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    cc40:	eb0018e7 	bl	12fe4 <port_create>
		EXPECT_EQ (ERR_ALREADY_EXISTS, rc, "create existing port");
    cc44:	e59f2470 	ldr	r2, [pc, #1136]	; d0bc <run_port_create_test+0x528>
    cc48:	e370000e 	cmn	r0, #14
    cc4c:	e08f2002 	add	r2, pc, r2
    cc50:	e5923000 	ldr	r3, [r2]
    cc54:	e2833001 	add	r3, r3, #1
    cc58:	e5823000 	str	r3, [r2]
    cc5c:	0a000013 	beq	ccb0 <run_port_create_test+0x11c>
    cc60:	e59f2458 	ldr	r2, [pc, #1112]	; d0c0 <run_port_create_test+0x52c>
    cc64:	e3e0100d 	mvn	r1, #13
    cc68:	e58d1004 	str	r1, [sp, #4]
    cc6c:	e3003133 	movw	r3, #307	; 0x133
    cc70:	e08f2002 	add	r2, pc, r2
    cc74:	e59f1448 	ldr	r1, [pc, #1096]	; d0c4 <run_port_create_test+0x530>
    cc78:	e58d2000 	str	r2, [sp]
    cc7c:	e3a02000 	mov	r2, #0
    cc80:	e58d2010 	str	r2, [sp, #16]
    cc84:	e08f1001 	add	r1, pc, r1
    cc88:	e59f2438 	ldr	r2, [pc, #1080]	; d0c8 <run_port_create_test+0x534>
    cc8c:	e58d0008 	str	r0, [sp, #8]
    cc90:	e28a0028 	add	r0, sl, #40	; 0x28
    cc94:	e08f2002 	add	r2, pc, r2
    cc98:	eb001e2e 	bl	14558 <fprintf>
    cc9c:	e59f2428 	ldr	r2, [pc, #1064]	; d0cc <run_port_create_test+0x538>
    cca0:	e08f2002 	add	r2, pc, r2
    cca4:	e5923000 	ldr	r3, [r2]
    cca8:	e2833001 	add	r3, r3, #1
    ccac:	e5823000 	str	r3, [r2]
	for (i = 2; i < MAX_USER_HANDLES-1; i++) {
    ccb0:	e2855001 	add	r5, r5, #1
    ccb4:	e355007f 	cmp	r5, #127	; 0x7f
    ccb8:	0a000024 	beq	cd50 <run_port_create_test+0x1bc>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    ccbc:	e1a03007 	mov	r3, r7
    ccc0:	e1a02008 	mov	r2, r8
    ccc4:	e1a0100b 	mov	r1, fp
    ccc8:	e58d5000 	str	r5, [sp]
    cccc:	e1a00006 	mov	r0, r6
    ccd0:	eb001df8 	bl	144b8 <sprintf>
		rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    ccd4:	e3a03000 	mov	r3, #0
    ccd8:	e3a02a01 	mov	r2, #4096	; 0x1000
    ccdc:	e3a01002 	mov	r1, #2
    cce0:	e1a00006 	mov	r0, r6
    cce4:	eb0018be 	bl	12fe4 <port_create>
		EXPECT_GE_ZERO (rc, "create ports");
    cce8:	e59f23e0 	ldr	r2, [pc, #992]	; d0d0 <run_port_create_test+0x53c>
    ccec:	e2504000 	subs	r4, r0, #0
    ccf0:	e08f2002 	add	r2, pc, r2
    ccf4:	e5923000 	ldr	r3, [r2]
    ccf8:	e2833001 	add	r3, r3, #1
    ccfc:	e5823000 	str	r3, [r2]
    cd00:	aaffffc9 	bge	cc2c <run_port_create_test+0x98>
    cd04:	e59f23c8 	ldr	r2, [pc, #968]	; d0d4 <run_port_create_test+0x540>
    cd08:	e300312e 	movw	r3, #302	; 0x12e
    cd0c:	e59f13c4 	ldr	r1, [pc, #964]	; d0d8 <run_port_create_test+0x544>
    cd10:	e28a0028 	add	r0, sl, #40	; 0x28
    cd14:	e08f2002 	add	r2, pc, r2
    cd18:	e58d2000 	str	r2, [sp]
    cd1c:	e3a02000 	mov	r2, #0
    cd20:	e58d2010 	str	r2, [sp, #16]
    cd24:	e59f23b0 	ldr	r2, [pc, #944]	; d0dc <run_port_create_test+0x548>
    cd28:	e08f1001 	add	r1, pc, r1
    cd2c:	e58d4004 	str	r4, [sp, #4]
    cd30:	e08f2002 	add	r2, pc, r2
    cd34:	eb001e07 	bl	14558 <fprintf>
    cd38:	e59f23a0 	ldr	r2, [pc, #928]	; d0e0 <run_port_create_test+0x54c>
    cd3c:	e08f2002 	add	r2, pc, r2
    cd40:	e5923000 	ldr	r3, [r2]
    cd44:	e2833001 	add	r3, r3, #1
    cd48:	e5823000 	str	r3, [r2]
    cd4c:	eaffffb6 	b	cc2c <run_port_create_test+0x98>
	sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    cd50:	e59f338c 	ldr	r3, [pc, #908]	; d0e4 <run_port_create_test+0x550>
    cd54:	e1a00006 	mov	r0, r6
    cd58:	e59f2388 	ldr	r2, [pc, #904]	; d0e8 <run_port_create_test+0x554>
    cd5c:	e59f1388 	ldr	r1, [pc, #904]	; d0ec <run_port_create_test+0x558>
    cd60:	e08f3003 	add	r3, pc, r3
    cd64:	e58d5000 	str	r5, [sp]
    cd68:	e08f2002 	add	r2, pc, r2
    cd6c:	e08f1001 	add	r1, pc, r1
    cd70:	e59d401c 	ldr	r4, [sp, #28]
    cd74:	e59d7010 	ldr	r7, [sp, #16]
    cd78:	eb001dce 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    cd7c:	e3a03000 	mov	r3, #0
    cd80:	e3a02a01 	mov	r2, #4096	; 0x1000
    cd84:	e3a01002 	mov	r1, #2
    cd88:	e1a00006 	mov	r0, r6
    cd8c:	eb001894 	bl	12fe4 <port_create>
	EXPECT_GE_ZERO (rc, "create ports");
    cd90:	e59f2358 	ldr	r2, [pc, #856]	; d0f0 <run_port_create_test+0x55c>
    cd94:	e2505000 	subs	r5, r0, #0
    cd98:	e08f2002 	add	r2, pc, r2
    cd9c:	e5923000 	ldr	r3, [r2]
    cda0:	e2833001 	add	r3, r3, #1
    cda4:	e5823000 	str	r3, [r2]
    cda8:	ba0000a7 	blt	d04c <run_port_create_test+0x4b8>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    cdac:	e3a03000 	mov	r3, #0
    cdb0:	e3a02a01 	mov	r2, #4096	; 0x1000
    cdb4:	e3a01002 	mov	r1, #2
    cdb8:	e1a00006 	mov	r0, r6
	ports[i] = (handle_t) rc;
    cdbc:	e58d5220 	str	r5, [sp, #544]	; 0x220
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    cdc0:	eb001887 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_NO_RESOURCES, rc, "create existing port");
    cdc4:	e59f2328 	ldr	r2, [pc, #808]	; d0f4 <run_port_create_test+0x560>
    cdc8:	e3700029 	cmn	r0, #41	; 0x29
    cdcc:	e08f2002 	add	r2, pc, r2
    cdd0:	e5923000 	ldr	r3, [r2]
    cdd4:	e2833001 	add	r3, r3, #1
    cdd8:	e5823000 	str	r3, [r2]
    cddc:	0a000012 	beq	ce2c <run_port_create_test+0x298>
    cde0:	e59f2310 	ldr	r2, [pc, #784]	; d0f8 <run_port_create_test+0x564>
    cde4:	e3e01028 	mvn	r1, #40	; 0x28
    cde8:	e58d1004 	str	r1, [sp, #4]
    cdec:	e3a03d05 	mov	r3, #320	; 0x140
    cdf0:	e08f2002 	add	r2, pc, r2
    cdf4:	e59f1300 	ldr	r1, [pc, #768]	; d0fc <run_port_create_test+0x568>
    cdf8:	e58d2000 	str	r2, [sp]
    cdfc:	e3a07000 	mov	r7, #0
    ce00:	e59f22f8 	ldr	r2, [pc, #760]	; d100 <run_port_create_test+0x56c>
    ce04:	e08f1001 	add	r1, pc, r1
    ce08:	e58d0008 	str	r0, [sp, #8]
    ce0c:	e28a0028 	add	r0, sl, #40	; 0x28
    ce10:	e08f2002 	add	r2, pc, r2
    ce14:	eb001dcf 	bl	14558 <fprintf>
    ce18:	e59f22e4 	ldr	r2, [pc, #740]	; d104 <run_port_create_test+0x570>
    ce1c:	e08f2002 	add	r2, pc, r2
    ce20:	e5923000 	ldr	r3, [r2]
    ce24:	e2833001 	add	r3, r3, #1
    ce28:	e5823000 	str	r3, [r2]
	sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", MAX_USER_HANDLES);
    ce2c:	e3a02080 	mov	r2, #128	; 0x80
    ce30:	e59f32d0 	ldr	r3, [pc, #720]	; d108 <run_port_create_test+0x574>
    ce34:	e58d2000 	str	r2, [sp]
    ce38:	e1a00006 	mov	r0, r6
    ce3c:	e59f22c8 	ldr	r2, [pc, #712]	; d10c <run_port_create_test+0x578>
    ce40:	e08f3003 	add	r3, pc, r3
    ce44:	e59f12c4 	ldr	r1, [pc, #708]	; d110 <run_port_create_test+0x57c>
    ce48:	e08f2002 	add	r2, pc, r2
    ce4c:	e08f1001 	add	r1, pc, r1
    ce50:	eb001d98 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    ce54:	e3a03000 	mov	r3, #0
    ce58:	e3a02a01 	mov	r2, #4096	; 0x1000
    ce5c:	e1a00006 	mov	r0, r6
    ce60:	e3a01002 	mov	r1, #2
    ce64:	eb00185e 	bl	12fe4 <port_create>
	EXPECT_EQ (ERR_NO_RESOURCES, rc, "max ports");
    ce68:	e59f22a4 	ldr	r2, [pc, #676]	; d114 <run_port_create_test+0x580>
    ce6c:	e3700029 	cmn	r0, #41	; 0x29
    ce70:	e08f2002 	add	r2, pc, r2
    ce74:	e5923000 	ldr	r3, [r2]
    ce78:	e2833001 	add	r3, r3, #1
    ce7c:	e5823000 	str	r3, [r2]
    ce80:	0a000012 	beq	ced0 <run_port_create_test+0x33c>
    ce84:	e59f228c 	ldr	r2, [pc, #652]	; d118 <run_port_create_test+0x584>
    ce88:	e3e01028 	mvn	r1, #40	; 0x28
    ce8c:	e58d1004 	str	r1, [sp, #4]
    ce90:	e3a03f51 	mov	r3, #324	; 0x144
    ce94:	e08f2002 	add	r2, pc, r2
    ce98:	e59f127c 	ldr	r1, [pc, #636]	; d11c <run_port_create_test+0x588>
    ce9c:	e58d2000 	str	r2, [sp]
    cea0:	e3a07000 	mov	r7, #0
    cea4:	e59f2274 	ldr	r2, [pc, #628]	; d120 <run_port_create_test+0x58c>
    cea8:	e08f1001 	add	r1, pc, r1
    ceac:	e58d0008 	str	r0, [sp, #8]
    ceb0:	e28a0028 	add	r0, sl, #40	; 0x28
    ceb4:	e08f2002 	add	r2, pc, r2
    ceb8:	eb001da6 	bl	14558 <fprintf>
    cebc:	e59f2260 	ldr	r2, [pc, #608]	; d124 <run_port_create_test+0x590>
    cec0:	e08f2002 	add	r2, pc, r2
    cec4:	e5923000 	ldr	r3, [r2]
    cec8:	e2833001 	add	r3, r3, #1
    cecc:	e5823000 	str	r3, [r2]
		EXPECT_EQ (NO_ERROR, rc, "closing port");
    ced0:	e59f6250 	ldr	r6, [pc, #592]	; d128 <run_port_create_test+0x594>
    ced4:	e28d8e22 	add	r8, sp, #544	; 0x220
    ced8:	e59fb24c 	ldr	fp, [pc, #588]	; d12c <run_port_create_test+0x598>
    cedc:	e59f924c 	ldr	r9, [pc, #588]	; d130 <run_port_create_test+0x59c>
    cee0:	e08f6006 	add	r6, pc, r6
    cee4:	e08fb00b 	add	fp, pc, fp
    cee8:	e08f9009 	add	r9, pc, r9
    ceec:	ea00001f 	b	cf70 <run_port_create_test+0x3dc>
		rc = close(ports[i]);
    cef0:	e1a00005 	mov	r0, r5
    cef4:	eb001843 	bl	13008 <close>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "closing closed port");
    cef8:	e59f2234 	ldr	r2, [pc, #564]	; d134 <run_port_create_test+0x5a0>
    cefc:	e3700002 	cmn	r0, #2
    cf00:	e08f2002 	add	r2, pc, r2
    cf04:	e5923000 	ldr	r3, [r2]
    cf08:	e2833001 	add	r3, r3, #1
    cf0c:	e5823000 	str	r3, [r2]
    cf10:	0a000012 	beq	cf60 <run_port_create_test+0x3cc>
    cf14:	e59f221c 	ldr	r2, [pc, #540]	; d138 <run_port_create_test+0x5a4>
    cf18:	e3e01001 	mvn	r1, #1
    cf1c:	e58d1004 	str	r1, [sp, #4]
    cf20:	e300314e 	movw	r3, #334	; 0x14e
    cf24:	e08f2002 	add	r2, pc, r2
    cf28:	e59f120c 	ldr	r1, [pc, #524]	; d13c <run_port_create_test+0x5a8>
    cf2c:	e58d2000 	str	r2, [sp]
    cf30:	e3a07000 	mov	r7, #0
    cf34:	e59f2204 	ldr	r2, [pc, #516]	; d140 <run_port_create_test+0x5ac>
    cf38:	e08f1001 	add	r1, pc, r1
    cf3c:	e58d0008 	str	r0, [sp, #8]
    cf40:	e28a0028 	add	r0, sl, #40	; 0x28
    cf44:	e08f2002 	add	r2, pc, r2
    cf48:	eb001d82 	bl	14558 <fprintf>
    cf4c:	e59f21f0 	ldr	r2, [pc, #496]	; d144 <run_port_create_test+0x5b0>
    cf50:	e08f2002 	add	r2, pc, r2
    cf54:	e5923000 	ldr	r3, [r2]
    cf58:	e2833001 	add	r3, r3, #1
    cf5c:	e5823000 	str	r3, [r2]
		ports[i] = INVALID_IPC_HANDLE;
    cf60:	e3e03000 	mvn	r3, #0
	for (i = 2; i < MAX_USER_HANDLES; i++) {
    cf64:	e1540008 	cmp	r4, r8
		ports[i] = INVALID_IPC_HANDLE;
    cf68:	e5843000 	str	r3, [r4]
	for (i = 2; i < MAX_USER_HANDLES; i++) {
    cf6c:	0a000018 	beq	cfd4 <run_port_create_test+0x440>
		rc = close(ports[i]);
    cf70:	e5b45004 	ldr	r5, [r4, #4]!
    cf74:	e1a00005 	mov	r0, r5
    cf78:	eb001822 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "closing port");
    cf7c:	e5963000 	ldr	r3, [r6]
    cf80:	e3500000 	cmp	r0, #0
    cf84:	e2833001 	add	r3, r3, #1
    cf88:	e5863000 	str	r3, [r6]
    cf8c:	0affffd7 	beq	cef0 <run_port_create_test+0x35c>
    cf90:	e59f21b0 	ldr	r2, [pc, #432]	; d148 <run_port_create_test+0x5b4>
    cf94:	e300314a 	movw	r3, #330	; 0x14a
    cf98:	e58d0008 	str	r0, [sp, #8]
    cf9c:	e3a07000 	mov	r7, #0
    cfa0:	e08f2002 	add	r2, pc, r2
    cfa4:	e58d7004 	str	r7, [sp, #4]
    cfa8:	e58d2000 	str	r2, [sp]
    cfac:	e1a01009 	mov	r1, r9
    cfb0:	e1a0200b 	mov	r2, fp
    cfb4:	e28a0028 	add	r0, sl, #40	; 0x28
    cfb8:	eb001d66 	bl	14558 <fprintf>
    cfbc:	e59f2188 	ldr	r2, [pc, #392]	; d14c <run_port_create_test+0x5b8>
    cfc0:	e08f2002 	add	r2, pc, r2
    cfc4:	e5923000 	ldr	r3, [r2]
    cfc8:	e2833001 	add	r3, r3, #1
    cfcc:	e5823000 	str	r3, [r2]
    cfd0:	eaffffc6 	b	cef0 <run_port_create_test+0x35c>
	TEST_END
    cfd4:	e3570000 	cmp	r7, #0
    cfd8:	1a000010 	bne	d020 <run_port_create_test+0x48c>
    cfdc:	e59f316c 	ldr	r3, [pc, #364]	; d150 <run_port_create_test+0x5bc>
    cfe0:	e28a0028 	add	r0, sl, #40	; 0x28
    cfe4:	e59f2168 	ldr	r2, [pc, #360]	; d154 <run_port_create_test+0x5c0>
    cfe8:	e59f1168 	ldr	r1, [pc, #360]	; d158 <run_port_create_test+0x5c4>
    cfec:	e08f3003 	add	r3, pc, r3
    cff0:	e08f2002 	add	r2, pc, r2
    cff4:	e58d3000 	str	r3, [sp]
    cff8:	e08f1001 	add	r1, pc, r1
    cffc:	e3003153 	movw	r3, #339	; 0x153
    d000:	eb001d54 	bl	14558 <fprintf>
}
    d004:	e59d3018 	ldr	r3, [sp, #24]
    d008:	e59d2264 	ldr	r2, [sp, #612]	; 0x264
    d00c:	e5933000 	ldr	r3, [r3]
    d010:	e1520003 	cmp	r2, r3
    d014:	1a00001e 	bne	d094 <run_port_create_test+0x500>
    d018:	e28ddf9b 	add	sp, sp, #620	; 0x26c
    d01c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	TEST_END
    d020:	e59f3134 	ldr	r3, [pc, #308]	; d15c <run_port_create_test+0x5c8>
    d024:	e28a0028 	add	r0, sl, #40	; 0x28
    d028:	e59f2130 	ldr	r2, [pc, #304]	; d160 <run_port_create_test+0x5cc>
    d02c:	e59f1130 	ldr	r1, [pc, #304]	; d164 <run_port_create_test+0x5d0>
    d030:	e08f3003 	add	r3, pc, r3
    d034:	e08f2002 	add	r2, pc, r2
    d038:	e58d3000 	str	r3, [sp]
    d03c:	e08f1001 	add	r1, pc, r1
    d040:	e3003153 	movw	r3, #339	; 0x153
    d044:	eb001d43 	bl	14558 <fprintf>
    d048:	eaffffed 	b	d004 <run_port_create_test+0x470>
	EXPECT_GE_ZERO (rc, "create ports");
    d04c:	e59f2114 	ldr	r2, [pc, #276]	; d168 <run_port_create_test+0x5d4>
    d050:	e3003139 	movw	r3, #313	; 0x139
    d054:	e59f1110 	ldr	r1, [pc, #272]	; d16c <run_port_create_test+0x5d8>
    d058:	e28a0028 	add	r0, sl, #40	; 0x28
    d05c:	e08f2002 	add	r2, pc, r2
    d060:	e58d2000 	str	r2, [sp]
    d064:	e59f2104 	ldr	r2, [pc, #260]	; d170 <run_port_create_test+0x5dc>
    d068:	e08f1001 	add	r1, pc, r1
    d06c:	e58d5004 	str	r5, [sp, #4]
    d070:	e3a07000 	mov	r7, #0
    d074:	e08f2002 	add	r2, pc, r2
    d078:	eb001d36 	bl	14558 <fprintf>
    d07c:	e59f20f0 	ldr	r2, [pc, #240]	; d174 <run_port_create_test+0x5e0>
    d080:	e08f2002 	add	r2, pc, r2
    d084:	e5923000 	ldr	r3, [r2]
    d088:	e2833001 	add	r3, r3, #1
    d08c:	e5823000 	str	r3, [r2]
    d090:	eaffff45 	b	cdac <run_port_create_test+0x218>
}
    d094:	eb001d4b 	bl	145c8 <__stack_chk_fail>
    d098:	00009474 	.word	0x00009474
    d09c:	0000000c 	.word	0x0000000c
    d0a0:	00000010 	.word	0x00000010
    d0a4:	00008ce4 	.word	0x00008ce4
    d0a8:	00008108 	.word	0x00008108
    d0ac:	00008c7c 	.word	0x00008c7c
    d0b0:	00008c98 	.word	0x00008c98
    d0b4:	00008ca8 	.word	0x00008ca8
    d0b8:	00008c70 	.word	0x00008c70
    d0bc:	00009468 	.word	0x00009468
    d0c0:	00008cc8 	.word	0x00008cc8
    d0c4:	00008c74 	.word	0x00008c74
    d0c8:	00008bd8 	.word	0x00008bd8
    d0cc:	00009410 	.word	0x00009410
    d0d0:	000093c4 	.word	0x000093c4
    d0d4:	00008bd4 	.word	0x00008bd4
    d0d8:	00008b94 	.word	0x00008b94
    d0dc:	00008b3c 	.word	0x00008b3c
    d0e0:	00009374 	.word	0x00009374
    d0e4:	00008b44 	.word	0x00008b44
    d0e8:	00008b28 	.word	0x00008b28
    d0ec:	00008b40 	.word	0x00008b40
    d0f0:	0000931c 	.word	0x0000931c
    d0f4:	000092e8 	.word	0x000092e8
    d0f8:	00008b48 	.word	0x00008b48
    d0fc:	00008b4c 	.word	0x00008b4c
    d100:	00008a5c 	.word	0x00008a5c
    d104:	00009294 	.word	0x00009294
    d108:	00008a64 	.word	0x00008a64
    d10c:	00008a48 	.word	0x00008a48
    d110:	00008a60 	.word	0x00008a60
    d114:	00009244 	.word	0x00009244
    d118:	00008af8 	.word	0x00008af8
    d11c:	00008aa8 	.word	0x00008aa8
    d120:	000089b8 	.word	0x000089b8
    d124:	000091f0 	.word	0x000091f0
    d128:	000091d4 	.word	0x000091d4
    d12c:	00008988 	.word	0x00008988
    d130:	00008ab0 	.word	0x00008ab0
    d134:	000091b4 	.word	0x000091b4
    d138:	00008af4 	.word	0x00008af4
    d13c:	00008aa4 	.word	0x00008aa4
    d140:	00008928 	.word	0x00008928
    d144:	00009160 	.word	0x00009160
    d148:	00008a2c 	.word	0x00008a2c
    d14c:	000090f0 	.word	0x000090f0
    d150:	00007cec 	.word	0x00007cec
    d154:	0000887c 	.word	0x0000887c
    d158:	00008a48 	.word	0x00008a48
    d15c:	00007ca8 	.word	0x00007ca8
    d160:	00008838 	.word	0x00008838
    d164:	000089f0 	.word	0x000089f0
    d168:	0000888c 	.word	0x0000888c
    d16c:	00008854 	.word	0x00008854
    d170:	000087f8 	.word	0x000087f8
    d174:	00009030 	.word	0x00009030

0000d178 <run_wait_on_port_test>:
{
    d178:	e59f14d4 	ldr	r1, [pc, #1236]	; d654 <run_wait_on_port_test+0x4dc>
	TEST_BEGIN(__func__);
    d17c:	e3a03e16 	mov	r3, #352	; 0x160
{
    d180:	e59f24d0 	ldr	r2, [pc, #1232]	; d658 <run_wait_on_port_test+0x4e0>
    d184:	e08f1001 	add	r1, pc, r1
    d188:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TEST_BEGIN(__func__);
    d18c:	e59fc4c8 	ldr	ip, [pc, #1224]	; d65c <run_wait_on_port_test+0x4e4>
{
    d190:	e24ddf9d 	sub	sp, sp, #628	; 0x274
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d194:	e59f74c4 	ldr	r7, [pc, #1220]	; d660 <run_wait_on_port_test+0x4e8>
{
    d198:	e7912002 	ldr	r2, [r1, r2]
    d19c:	e28d5030 	add	r5, sp, #48	; 0x30
	TEST_BEGIN(__func__);
    d1a0:	e59f04bc 	ldr	r0, [pc, #1212]	; d664 <run_wait_on_port_test+0x4ec>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d1a4:	e08f7007 	add	r7, pc, r7
{
    d1a8:	e58d2018 	str	r2, [sp, #24]
	TEST_BEGIN(__func__);
    d1ac:	e3a06001 	mov	r6, #1
{
    d1b0:	e5922000 	ldr	r2, [r2]
	TEST_BEGIN(__func__);
    d1b4:	e08f0000 	add	r0, pc, r0
{
    d1b8:	e58d226c 	str	r2, [sp, #620]	; 0x26c
	TEST_BEGIN(__func__);
    d1bc:	e1a09005 	mov	r9, r5
    d1c0:	e59f24a0 	ldr	r2, [pc, #1184]	; d668 <run_wait_on_port_test+0x4f0>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d1c4:	e3a04002 	mov	r4, #2
	TEST_BEGIN(__func__);
    d1c8:	e791a00c 	ldr	sl, [r1, ip]
    d1cc:	e28d8f8b 	add	r8, sp, #556	; 0x22c
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d1d0:	e59f1494 	ldr	r1, [pc, #1172]	; d66c <run_wait_on_port_test+0x4f4>
	TEST_BEGIN(__func__);
    d1d4:	e08f2002 	add	r2, pc, r2
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d1d8:	e59fb490 	ldr	fp, [pc, #1168]	; d670 <run_wait_on_port_test+0x4f8>
    d1dc:	e08f1001 	add	r1, pc, r1
    d1e0:	e58d1014 	str	r1, [sp, #20]
	TEST_BEGIN(__func__);
    d1e4:	e59f1488 	ldr	r1, [pc, #1160]	; d674 <run_wait_on_port_test+0x4fc>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d1e8:	e08fb00b 	add	fp, pc, fp
	TEST_BEGIN(__func__);
    d1ec:	e58d0000 	str	r0, [sp]
    d1f0:	e28a0028 	add	r0, sl, #40	; 0x28
    d1f4:	e08f1001 	add	r1, pc, r1
    d1f8:	eb001cd6 	bl	14558 <fprintf>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d1fc:	e58d6010 	str	r6, [sp, #16]
    d200:	e58d501c 	str	r5, [sp, #28]
    d204:	e1a06007 	mov	r6, r7
    d208:	e59d7014 	ldr	r7, [sp, #20]
    d20c:	ea000002 	b	d21c <run_wait_on_port_test+0xa4>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d210:	e2844001 	add	r4, r4, #1
    d214:	e3540080 	cmp	r4, #128	; 0x80
    d218:	0a000032 	beq	d2e8 <run_wait_on_port_test+0x170>
		sprintf(path, "%s.port.%s%d", SRV_PATH_BASE, "test", i);
    d21c:	e1a03006 	mov	r3, r6
    d220:	e1a02007 	mov	r2, r7
    d224:	e1a0100b 	mov	r1, fp
    d228:	e58d4000 	str	r4, [sp]
    d22c:	e1a00008 	mov	r0, r8
    d230:	eb001ca0 	bl	144b8 <sprintf>
		rc = port_create(path, 2, MAX_PORT_BUF_SIZE, 0);
    d234:	e3a03000 	mov	r3, #0
    d238:	e3a02a01 	mov	r2, #4096	; 0x1000
    d23c:	e3a01002 	mov	r1, #2
    d240:	e1a00008 	mov	r0, r8
    d244:	eb001766 	bl	12fe4 <port_create>
		EXPECT_GE_ZERO (rc, "max ports");
    d248:	e59f2428 	ldr	r2, [pc, #1064]	; d678 <run_wait_on_port_test+0x500>
    d24c:	e2505000 	subs	r5, r0, #0
    d250:	e08f2002 	add	r2, pc, r2
    d254:	e5923000 	ldr	r3, [r2]
    d258:	e2833001 	add	r3, r3, #1
    d25c:	e5823000 	str	r3, [r2]
    d260:	ba0000dc 	blt	d5d8 <run_wait_on_port_test+0x460>
		rc = set_cookie(ports[i], (void *) (COOKIE_BASE + i));
    d264:	e1a00005 	mov	r0, r5
    d268:	e2841064 	add	r1, r4, #100	; 0x64
		ports[i] = (handle_t) rc;
    d26c:	e5a95004 	str	r5, [r9, #4]!
		rc = set_cookie(ports[i], (void *) (COOKIE_BASE + i));
    d270:	eb001767 	bl	13014 <set_cookie>
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d274:	e59f2400 	ldr	r2, [pc, #1024]	; d67c <run_wait_on_port_test+0x504>
    d278:	e3500000 	cmp	r0, #0
    d27c:	e08f2002 	add	r2, pc, r2
    d280:	e5923000 	ldr	r3, [r2]
    d284:	e2833001 	add	r3, r3, #1
    d288:	e5823000 	str	r3, [r2]
    d28c:	0affffdf 	beq	d210 <run_wait_on_port_test+0x98>
    d290:	e59f23e8 	ldr	r2, [pc, #1000]	; d680 <run_wait_on_port_test+0x508>
    d294:	e3a01000 	mov	r1, #0
    d298:	e58d1004 	str	r1, [sp, #4]
    d29c:	e3a03f5b 	mov	r3, #364	; 0x16c
    d2a0:	e08f2002 	add	r2, pc, r2
    d2a4:	e58d1010 	str	r1, [sp, #16]
    d2a8:	e58d2000 	str	r2, [sp]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d2ac:	e2844001 	add	r4, r4, #1
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d2b0:	e59f23cc 	ldr	r2, [pc, #972]	; d684 <run_wait_on_port_test+0x50c>
    d2b4:	e59f13cc 	ldr	r1, [pc, #972]	; d688 <run_wait_on_port_test+0x510>
    d2b8:	e58d0008 	str	r0, [sp, #8]
    d2bc:	e08f2002 	add	r2, pc, r2
    d2c0:	e28a0028 	add	r0, sl, #40	; 0x28
    d2c4:	e08f1001 	add	r1, pc, r1
    d2c8:	eb001ca2 	bl	14558 <fprintf>
    d2cc:	e59f23b8 	ldr	r2, [pc, #952]	; d68c <run_wait_on_port_test+0x514>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d2d0:	e3540080 	cmp	r4, #128	; 0x80
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d2d4:	e08f2002 	add	r2, pc, r2
    d2d8:	e5923000 	ldr	r3, [r2]
    d2dc:	e2833001 	add	r3, r3, #1
    d2e0:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d2e4:	1affffcc 	bne	d21c <run_wait_on_port_test+0xa4>
    d2e8:	e59d501c 	ldr	r5, [sp, #28]
    d2ec:	e28dbf8a 	add	fp, sp, #552	; 0x228
		EXPECT_EQ (ERR_TIMED_OUT, rc, "zero timeout");
    d2f0:	e59f9398 	ldr	r9, [pc, #920]	; d690 <run_wait_on_port_test+0x518>
    d2f4:	e28d8020 	add	r8, sp, #32
    d2f8:	e59f7394 	ldr	r7, [pc, #916]	; d694 <run_wait_on_port_test+0x51c>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d2fc:	e1a04005 	mov	r4, r5
		EXPECT_EQ (ERR_TIMED_OUT, rc, "zero timeout");
    d300:	e59f3390 	ldr	r3, [pc, #912]	; d698 <run_wait_on_port_test+0x520>
    d304:	e08f9009 	add	r9, pc, r9
    d308:	e08f7007 	add	r7, pc, r7
    d30c:	e59d6010 	ldr	r6, [sp, #16]
    d310:	e08f3003 	add	r3, pc, r3
    d314:	e58d5014 	str	r5, [sp, #20]
    d318:	e58d3010 	str	r3, [sp, #16]
		rc = wait(ports[i], &event, 0);
    d31c:	e5b45004 	ldr	r5, [r4, #4]!
    d320:	e3a02000 	mov	r2, #0
    d324:	e1a01008 	mov	r1, r8
    d328:	e1a00005 	mov	r0, r5
    d32c:	eb00173b 	bl	13020 <wait>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "zero timeout");
    d330:	e5993000 	ldr	r3, [r9]
    d334:	e370000d 	cmn	r0, #13
    d338:	e2833001 	add	r3, r3, #1
    d33c:	e5893000 	str	r3, [r9]
    d340:	0a000010 	beq	d388 <run_wait_on_port_test+0x210>
    d344:	e59f2350 	ldr	r2, [pc, #848]	; d69c <run_wait_on_port_test+0x524>
    d348:	e3e0100c 	mvn	r1, #12
    d34c:	e58d0008 	str	r0, [sp, #8]
    d350:	e3003173 	movw	r3, #371	; 0x173
    d354:	e08f2002 	add	r2, pc, r2
    d358:	e58d1004 	str	r1, [sp, #4]
    d35c:	e58d2000 	str	r2, [sp]
    d360:	e1a01007 	mov	r1, r7
    d364:	e59d2010 	ldr	r2, [sp, #16]
    d368:	e28a0028 	add	r0, sl, #40	; 0x28
    d36c:	eb001c79 	bl	14558 <fprintf>
    d370:	e59f2328 	ldr	r2, [pc, #808]	; d6a0 <run_wait_on_port_test+0x528>
    d374:	e3a06000 	mov	r6, #0
    d378:	e08f2002 	add	r2, pc, r2
    d37c:	e5923000 	ldr	r3, [r2]
    d380:	e2833001 	add	r3, r3, #1
    d384:	e5823000 	str	r3, [r2]
		rc = wait(ports[i], &event, 100);
    d388:	e3a02064 	mov	r2, #100	; 0x64
    d38c:	e1a00005 	mov	r0, r5
    d390:	e1a01008 	mov	r1, r8
    d394:	eb001721 	bl	13020 <wait>
		EXPECT_EQ (ERR_TIMED_OUT, rc, "non-zero timeout");
    d398:	e59f2304 	ldr	r2, [pc, #772]	; d6a4 <run_wait_on_port_test+0x52c>
    d39c:	e370000d 	cmn	r0, #13
    d3a0:	e08f2002 	add	r2, pc, r2
    d3a4:	e5923000 	ldr	r3, [r2]
    d3a8:	e2833001 	add	r3, r3, #1
    d3ac:	e5823000 	str	r3, [r2]
    d3b0:	0a000012 	beq	d400 <run_wait_on_port_test+0x288>
    d3b4:	e59f22ec 	ldr	r2, [pc, #748]	; d6a8 <run_wait_on_port_test+0x530>
    d3b8:	e3e0100c 	mvn	r1, #12
    d3bc:	e58d1004 	str	r1, [sp, #4]
    d3c0:	e3003177 	movw	r3, #375	; 0x177
    d3c4:	e08f2002 	add	r2, pc, r2
    d3c8:	e59f12dc 	ldr	r1, [pc, #732]	; d6ac <run_wait_on_port_test+0x534>
    d3cc:	e58d2000 	str	r2, [sp]
    d3d0:	e3a06000 	mov	r6, #0
    d3d4:	e59f22d4 	ldr	r2, [pc, #724]	; d6b0 <run_wait_on_port_test+0x538>
    d3d8:	e08f1001 	add	r1, pc, r1
    d3dc:	e58d0008 	str	r0, [sp, #8]
    d3e0:	e28a0028 	add	r0, sl, #40	; 0x28
    d3e4:	e08f2002 	add	r2, pc, r2
    d3e8:	eb001c5a 	bl	14558 <fprintf>
    d3ec:	e59f22c0 	ldr	r2, [pc, #704]	; d6b4 <run_wait_on_port_test+0x53c>
    d3f0:	e08f2002 	add	r2, pc, r2
    d3f4:	e5923000 	ldr	r3, [r2]
    d3f8:	e2833001 	add	r3, r3, #1
    d3fc:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d400:	e154000b 	cmp	r4, fp
    d404:	1affffc4 	bne	d31c <run_wait_on_port_test+0x1a4>
	rc = wait_any(&event, 0);
    d408:	e3a01000 	mov	r1, #0
    d40c:	e1a00008 	mov	r0, r8
    d410:	e59d5014 	ldr	r5, [sp, #20]
    d414:	eb001704 	bl	1302c <wait_any>
	EXPECT_EQ (ERR_TIMED_OUT, rc, "zero timeout");
    d418:	e59f2298 	ldr	r2, [pc, #664]	; d6b8 <run_wait_on_port_test+0x540>
    d41c:	e370000d 	cmn	r0, #13
    d420:	e08f2002 	add	r2, pc, r2
    d424:	e5923000 	ldr	r3, [r2]
    d428:	e2833001 	add	r3, r3, #1
    d42c:	e5823000 	str	r3, [r2]
    d430:	0a000012 	beq	d480 <run_wait_on_port_test+0x308>
    d434:	e59f2280 	ldr	r2, [pc, #640]	; d6bc <run_wait_on_port_test+0x544>
    d438:	e3e0100c 	mvn	r1, #12
    d43c:	e58d1004 	str	r1, [sp, #4]
    d440:	e3a03f5f 	mov	r3, #380	; 0x17c
    d444:	e08f2002 	add	r2, pc, r2
    d448:	e59f1270 	ldr	r1, [pc, #624]	; d6c0 <run_wait_on_port_test+0x548>
    d44c:	e58d2000 	str	r2, [sp]
    d450:	e3a06000 	mov	r6, #0
    d454:	e59f2268 	ldr	r2, [pc, #616]	; d6c4 <run_wait_on_port_test+0x54c>
    d458:	e08f1001 	add	r1, pc, r1
    d45c:	e58d0008 	str	r0, [sp, #8]
    d460:	e28a0028 	add	r0, sl, #40	; 0x28
    d464:	e08f2002 	add	r2, pc, r2
    d468:	eb001c3a 	bl	14558 <fprintf>
    d46c:	e59f2254 	ldr	r2, [pc, #596]	; d6c8 <run_wait_on_port_test+0x550>
    d470:	e08f2002 	add	r2, pc, r2
    d474:	e5923000 	ldr	r3, [r2]
    d478:	e2833001 	add	r3, r3, #1
    d47c:	e5823000 	str	r3, [r2]
	rc = wait_any(&event, 100);
    d480:	e1a00008 	mov	r0, r8
    d484:	e3a01064 	mov	r1, #100	; 0x64
    d488:	eb0016e7 	bl	1302c <wait_any>
	EXPECT_EQ (ERR_TIMED_OUT, rc, "non-zero timeout");
    d48c:	e59f2238 	ldr	r2, [pc, #568]	; d6cc <run_wait_on_port_test+0x554>
    d490:	e370000d 	cmn	r0, #13
    d494:	e08f2002 	add	r2, pc, r2
    d498:	e5923000 	ldr	r3, [r2]
    d49c:	e2833001 	add	r3, r3, #1
    d4a0:	e5823000 	str	r3, [r2]
    d4a4:	0a000012 	beq	d4f4 <run_wait_on_port_test+0x37c>
    d4a8:	e59f2220 	ldr	r2, [pc, #544]	; d6d0 <run_wait_on_port_test+0x558>
    d4ac:	e3e0100c 	mvn	r1, #12
    d4b0:	e58d1004 	str	r1, [sp, #4]
    d4b4:	e3a03d06 	mov	r3, #384	; 0x180
    d4b8:	e08f2002 	add	r2, pc, r2
    d4bc:	e59f1210 	ldr	r1, [pc, #528]	; d6d4 <run_wait_on_port_test+0x55c>
    d4c0:	e58d2000 	str	r2, [sp]
    d4c4:	e3a06000 	mov	r6, #0
    d4c8:	e59f2208 	ldr	r2, [pc, #520]	; d6d8 <run_wait_on_port_test+0x560>
    d4cc:	e08f1001 	add	r1, pc, r1
    d4d0:	e58d0008 	str	r0, [sp, #8]
    d4d4:	e28a0028 	add	r0, sl, #40	; 0x28
    d4d8:	e08f2002 	add	r2, pc, r2
    d4dc:	eb001c1d 	bl	14558 <fprintf>
    d4e0:	e59f21f4 	ldr	r2, [pc, #500]	; d6dc <run_wait_on_port_test+0x564>
    d4e4:	e08f2002 	add	r2, pc, r2
    d4e8:	e5923000 	ldr	r3, [r2]
    d4ec:	e2833001 	add	r3, r3, #1
    d4f0:	e5823000 	str	r3, [r2]
		EXPECT_EQ (NO_ERROR, rc, "closing closed port");
    d4f4:	e59f71e4 	ldr	r7, [pc, #484]	; d6e0 <run_wait_on_port_test+0x568>
    d4f8:	e59f91e4 	ldr	r9, [pc, #484]	; d6e4 <run_wait_on_port_test+0x56c>
    d4fc:	e59f81e4 	ldr	r8, [pc, #484]	; d6e8 <run_wait_on_port_test+0x570>
    d500:	e08f7007 	add	r7, pc, r7
    d504:	e08f9009 	add	r9, pc, r9
    d508:	e08f8008 	add	r8, pc, r8
    d50c:	ea000003 	b	d520 <run_wait_on_port_test+0x3a8>
		ports[i] = INVALID_IPC_HANDLE;
    d510:	e3e03000 	mvn	r3, #0
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d514:	e1540005 	cmp	r4, r5
		ports[i] = INVALID_IPC_HANDLE;
    d518:	e5853000 	str	r3, [r5]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d51c:	0a00001a 	beq	d58c <run_wait_on_port_test+0x414>
		rc = close(ports[i]);
    d520:	e5b50004 	ldr	r0, [r5, #4]!
    d524:	eb0016b7 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "closing closed port");
    d528:	e5973000 	ldr	r3, [r7]
    d52c:	e3500000 	cmp	r0, #0
    d530:	e2833001 	add	r3, r3, #1
    d534:	e5873000 	str	r3, [r7]
    d538:	0afffff4 	beq	d510 <run_wait_on_port_test+0x398>
    d53c:	e59f21a8 	ldr	r2, [pc, #424]	; d6ec <run_wait_on_port_test+0x574>
    d540:	e3003186 	movw	r3, #390	; 0x186
    d544:	e58d0008 	str	r0, [sp, #8]
    d548:	e3a06000 	mov	r6, #0
    d54c:	e08f2002 	add	r2, pc, r2
    d550:	e58d6004 	str	r6, [sp, #4]
    d554:	e58d2000 	str	r2, [sp]
    d558:	e1a01008 	mov	r1, r8
    d55c:	e1a02009 	mov	r2, r9
    d560:	e28a0028 	add	r0, sl, #40	; 0x28
    d564:	eb001bfb 	bl	14558 <fprintf>
    d568:	e59f2180 	ldr	r2, [pc, #384]	; d6f0 <run_wait_on_port_test+0x578>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d56c:	e1540005 	cmp	r4, r5
		EXPECT_EQ (NO_ERROR, rc, "closing closed port");
    d570:	e08f2002 	add	r2, pc, r2
    d574:	e5923000 	ldr	r3, [r2]
    d578:	e2833001 	add	r3, r3, #1
    d57c:	e5823000 	str	r3, [r2]
		ports[i] = INVALID_IPC_HANDLE;
    d580:	e3e03000 	mvn	r3, #0
    d584:	e5853000 	str	r3, [r5]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d588:	1affffe4 	bne	d520 <run_wait_on_port_test+0x3a8>
	TEST_END
    d58c:	e3560000 	cmp	r6, #0
    d590:	1a000023 	bne	d624 <run_wait_on_port_test+0x4ac>
    d594:	e59f3158 	ldr	r3, [pc, #344]	; d6f4 <run_wait_on_port_test+0x57c>
    d598:	e28a0028 	add	r0, sl, #40	; 0x28
    d59c:	e59f2154 	ldr	r2, [pc, #340]	; d6f8 <run_wait_on_port_test+0x580>
    d5a0:	e59f1154 	ldr	r1, [pc, #340]	; d6fc <run_wait_on_port_test+0x584>
    d5a4:	e08f3003 	add	r3, pc, r3
    d5a8:	e08f2002 	add	r2, pc, r2
    d5ac:	e58d3000 	str	r3, [sp]
    d5b0:	e08f1001 	add	r1, pc, r1
    d5b4:	e300318a 	movw	r3, #394	; 0x18a
    d5b8:	eb001be6 	bl	14558 <fprintf>
}
    d5bc:	e59d3018 	ldr	r3, [sp, #24]
    d5c0:	e59d226c 	ldr	r2, [sp, #620]	; 0x26c
    d5c4:	e5933000 	ldr	r3, [r3]
    d5c8:	e1520003 	cmp	r2, r3
    d5cc:	1a00001f 	bne	d650 <run_wait_on_port_test+0x4d8>
    d5d0:	e28ddf9d 	add	sp, sp, #628	; 0x274
    d5d4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		EXPECT_GE_ZERO (rc, "max ports");
    d5d8:	e59f2120 	ldr	r2, [pc, #288]	; d700 <run_wait_on_port_test+0x588>
    d5dc:	e3a03f5a 	mov	r3, #360	; 0x168
    d5e0:	e59f111c 	ldr	r1, [pc, #284]	; d704 <run_wait_on_port_test+0x58c>
    d5e4:	e28a0028 	add	r0, sl, #40	; 0x28
    d5e8:	e08f2002 	add	r2, pc, r2
    d5ec:	e58d2000 	str	r2, [sp]
    d5f0:	e3a02000 	mov	r2, #0
    d5f4:	e58d2010 	str	r2, [sp, #16]
    d5f8:	e59f2108 	ldr	r2, [pc, #264]	; d708 <run_wait_on_port_test+0x590>
    d5fc:	e08f1001 	add	r1, pc, r1
    d600:	e58d5004 	str	r5, [sp, #4]
    d604:	e08f2002 	add	r2, pc, r2
    d608:	eb001bd2 	bl	14558 <fprintf>
    d60c:	e59f20f8 	ldr	r2, [pc, #248]	; d70c <run_wait_on_port_test+0x594>
    d610:	e08f2002 	add	r2, pc, r2
    d614:	e5923000 	ldr	r3, [r2]
    d618:	e2833001 	add	r3, r3, #1
    d61c:	e5823000 	str	r3, [r2]
    d620:	eaffff0f 	b	d264 <run_wait_on_port_test+0xec>
	TEST_END
    d624:	e59f30e4 	ldr	r3, [pc, #228]	; d710 <run_wait_on_port_test+0x598>
    d628:	e28a0028 	add	r0, sl, #40	; 0x28
    d62c:	e59f20e0 	ldr	r2, [pc, #224]	; d714 <run_wait_on_port_test+0x59c>
    d630:	e59f10e0 	ldr	r1, [pc, #224]	; d718 <run_wait_on_port_test+0x5a0>
    d634:	e08f3003 	add	r3, pc, r3
    d638:	e08f2002 	add	r2, pc, r2
    d63c:	e58d3000 	str	r3, [sp]
    d640:	e08f1001 	add	r1, pc, r1
    d644:	e300318a 	movw	r3, #394	; 0x18a
    d648:	eb001bc2 	bl	14558 <fprintf>
    d64c:	eaffffda 	b	d5bc <run_wait_on_port_test+0x444>
}
    d650:	eb001bdc 	bl	145c8 <__stack_chk_fail>
    d654:	00008e90 	.word	0x00008e90
    d658:	0000000c 	.word	0x0000000c
    d65c:	00000010 	.word	0x00000010
    d660:	00008700 	.word	0x00008700
    d664:	00007b3c 	.word	0x00007b3c
    d668:	00008698 	.word	0x00008698
    d66c:	000086b4 	.word	0x000086b4
    d670:	000086c4 	.word	0x000086c4
    d674:	0000868c 	.word	0x0000868c
    d678:	00008e64 	.word	0x00008e64
    d67c:	00008e38 	.word	0x00008e38
    d680:	00008a30 	.word	0x00008a30
    d684:	000085b0 	.word	0x000085b0
    d688:	000086d4 	.word	0x000086d4
    d68c:	00008ddc 	.word	0x00008ddc
    d690:	00008db0 	.word	0x00008db0
    d694:	000089dc 	.word	0x000089dc
    d698:	0000855c 	.word	0x0000855c
    d69c:	000089d0 	.word	0x000089d0
    d6a0:	00008d38 	.word	0x00008d38
    d6a4:	00008d14 	.word	0x00008d14
    d6a8:	0000895c 	.word	0x0000895c
    d6ac:	0000890c 	.word	0x0000890c
    d6b0:	00008488 	.word	0x00008488
    d6b4:	00008cc0 	.word	0x00008cc0
    d6b8:	00008c94 	.word	0x00008c94
    d6bc:	000088e0 	.word	0x000088e0
    d6c0:	0000888c 	.word	0x0000888c
    d6c4:	00008408 	.word	0x00008408
    d6c8:	00008c40 	.word	0x00008c40
    d6cc:	00008c20 	.word	0x00008c20
    d6d0:	00008868 	.word	0x00008868
    d6d4:	00008818 	.word	0x00008818
    d6d8:	00008394 	.word	0x00008394
    d6dc:	00008bcc 	.word	0x00008bcc
    d6e0:	00008bb4 	.word	0x00008bb4
    d6e4:	00008368 	.word	0x00008368
    d6e8:	00008490 	.word	0x00008490
    d6ec:	000084cc 	.word	0x000084cc
    d6f0:	00008b40 	.word	0x00008b40
    d6f4:	0000774c 	.word	0x0000774c
    d6f8:	000082c4 	.word	0x000082c4
    d6fc:	00008490 	.word	0x00008490
    d700:	000083a4 	.word	0x000083a4
    d704:	000082c0 	.word	0x000082c0
    d708:	00008268 	.word	0x00008268
    d70c:	00008aa0 	.word	0x00008aa0
    d710:	000076bc 	.word	0x000076bc
    d714:	00008234 	.word	0x00008234
    d718:	000083ec 	.word	0x000083ec

0000d71c <sync_connect>:
{
    d71c:	e59f30a0 	ldr	r3, [pc, #160]	; d7c4 <sync_connect+0xa8>
    d720:	e59f20a0 	ldr	r2, [pc, #160]	; d7c8 <sync_connect+0xac>
    d724:	e08f3003 	add	r3, pc, r3
    d728:	e92d4070 	push	{r4, r5, r6, lr}
    d72c:	e1a06001 	mov	r6, r1
    d730:	e24dd010 	sub	sp, sp, #16
	rc = connect(path, IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    d734:	e3a01003 	mov	r1, #3
{
    d738:	e7935002 	ldr	r5, [r3, r2]
    d73c:	e5953000 	ldr	r3, [r5]
    d740:	e58d300c 	str	r3, [sp, #12]
	rc = connect(path, IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    d744:	eb001629 	bl	12ff0 <connect>
	if (rc >= 0) {
    d748:	e2504000 	subs	r4, r0, #0
    d74c:	ba00000b 	blt	d780 <sync_connect+0x64>
		rc = wait(chan, &evt, timeout);
    d750:	e1a02006 	mov	r2, r6
    d754:	e1a0100d 	mov	r1, sp
    d758:	eb001630 	bl	13020 <wait>
		chan = (handle_t) rc;
    d75c:	e1a03004 	mov	r3, r4
		if (rc == 0) {
    d760:	e3500000 	cmp	r0, #0
    d764:	1a00000c 	bne	d79c <sync_connect+0x80>
			if (evt.handle == chan) {
    d768:	e59d2000 	ldr	r2, [sp]
    d76c:	e1520004 	cmp	r2, r4
			rc = ERR_BAD_STATE;
    d770:	13e0401e 	mvnne	r4, #30
			if (evt.handle == chan) {
    d774:	0a00000a 	beq	d7a4 <sync_connect+0x88>
		close(chan);
    d778:	e1a00003 	mov	r0, r3
    d77c:	eb001621 	bl	13008 <close>
}
    d780:	e59d200c 	ldr	r2, [sp, #12]
    d784:	e1a00004 	mov	r0, r4
    d788:	e5953000 	ldr	r3, [r5]
    d78c:	e1520003 	cmp	r2, r3
    d790:	1a00000a 	bne	d7c0 <sync_connect+0xa4>
    d794:	e28dd010 	add	sp, sp, #16
    d798:	e8bd8070 	pop	{r4, r5, r6, pc}
    d79c:	e1a04000 	mov	r4, r0
    d7a0:	eafffff4 	b	d778 <sync_connect+0x5c>
				if (evt.event & IPC_HANDLE_POLL_READY)
    d7a4:	e59d2004 	ldr	r2, [sp, #4]
    d7a8:	e3120001 	tst	r2, #1
    d7ac:	1afffff3 	bne	d780 <sync_connect+0x64>
				if (evt.event & IPC_HANDLE_POLL_HUP)
    d7b0:	e3120004 	tst	r2, #4
					rc = ERR_CHANNEL_CLOSED;
    d7b4:	03e0401e 	mvneq	r4, #30
    d7b8:	13e0400e 	mvnne	r4, #14
    d7bc:	eaffffed 	b	d778 <sync_connect+0x5c>
}
    d7c0:	eb001b80 	bl	145c8 <__stack_chk_fail>
    d7c4:	000088f0 	.word	0x000088f0
    d7c8:	0000000c 	.word	0x0000000c

0000d7cc <run_accept_test>:
{
    d7cc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    d7d0:	e3a02000 	mov	r2, #0
{
    d7d4:	e59f18c8 	ldr	r1, [pc, #2248]	; e0a4 <run_accept_test+0x8d8>
    d7d8:	e24ddfa7 	sub	sp, sp, #668	; 0x29c
    d7dc:	e59fc8c4 	ldr	ip, [pc, #2244]	; e0a8 <run_accept_test+0x8dc>
		sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    d7e0:	e59f38c4 	ldr	r3, [pc, #2244]	; e0ac <run_accept_test+0x8e0>
{
    d7e4:	e08f1001 	add	r1, pc, r1
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    d7e8:	e28de044 	add	lr, sp, #68	; 0x44
	TEST_BEGIN(__func__);
    d7ec:	e59f08bc 	ldr	r0, [pc, #2236]	; e0b0 <run_accept_test+0x8e4>
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    d7f0:	e58de014 	str	lr, [sp, #20]
		sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    d7f4:	e08f3003 	add	r3, pc, r3
    d7f8:	e58d301c 	str	r3, [sp, #28]
	TEST_BEGIN(__func__);
    d7fc:	e300333e 	movw	r3, #830	; 0x33e
		sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    d800:	e59f68ac 	ldr	r6, [pc, #2220]	; e0b4 <run_accept_test+0x8e8>
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    d804:	e28d7034 	add	r7, sp, #52	; 0x34
{
    d808:	e791c00c 	ldr	ip, [r1, ip]
	TEST_BEGIN(__func__);
    d80c:	e3a04001 	mov	r4, #1
{
    d810:	e58dc020 	str	ip, [sp, #32]
		sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    d814:	e08f6006 	add	r6, pc, r6
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    d818:	e58d2038 	str	r2, [sp, #56]	; 0x38
    d81c:	e28da058 	add	sl, sp, #88	; 0x58
{
    d820:	e59cc000 	ldr	ip, [ip]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d824:	e3a08002 	mov	r8, #2
	uuid_t peer_uuid = UUID_INITIAL_VALUE(peer_uuid);
    d828:	e58d2034 	str	r2, [sp, #52]	; 0x34
    d82c:	e28dbf95 	add	fp, sp, #596	; 0x254
    d830:	e58d203c 	str	r2, [sp, #60]	; 0x3c
    d834:	e58d2040 	str	r2, [sp, #64]	; 0x40
	uuid_t zero_uuid = UUID_INITIAL_VALUE(zero_uuid);
    d838:	e58d2044 	str	r2, [sp, #68]	; 0x44
    d83c:	e58d2048 	str	r2, [sp, #72]	; 0x48
    d840:	e58d204c 	str	r2, [sp, #76]	; 0x4c
    d844:	e58d2050 	str	r2, [sp, #80]	; 0x50
{
    d848:	e58dc294 	str	ip, [sp, #660]	; 0x294
	TEST_BEGIN(__func__);
    d84c:	e59f2864 	ldr	r2, [pc, #2148]	; e0b8 <run_accept_test+0x8ec>
    d850:	e7915000 	ldr	r5, [r1, r0]
    d854:	e08f2002 	add	r2, pc, r2
    d858:	e59f185c 	ldr	r1, [pc, #2140]	; e0bc <run_accept_test+0x8f0>
    d85c:	e58d2000 	str	r2, [sp]
    d860:	e2850028 	add	r0, r5, #40	; 0x28
    d864:	e59f2854 	ldr	r2, [pc, #2132]	; e0c0 <run_accept_test+0x8f4>
    d868:	e08f1001 	add	r1, pc, r1
		EXPECT_GE_ZERO (rc, "max ports");
    d86c:	e59f9850 	ldr	r9, [pc, #2128]	; e0c4 <run_accept_test+0x8f8>
	TEST_BEGIN(__func__);
    d870:	e08f2002 	add	r2, pc, r2
    d874:	eb001b37 	bl	14558 <fprintf>
		EXPECT_GE_ZERO (rc, "max ports");
    d878:	e08f9009 	add	r9, pc, r9
    d87c:	e58d7024 	str	r7, [sp, #36]	; 0x24
    d880:	e58d4018 	str	r4, [sp, #24]
    d884:	e59d701c 	ldr	r7, [sp, #28]
    d888:	ea000002 	b	d898 <run_accept_test+0xcc>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d88c:	e2888001 	add	r8, r8, #1
    d890:	e3580080 	cmp	r8, #128	; 0x80
    d894:	0a00002f 	beq	d958 <run_accept_test+0x18c>
		sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    d898:	e1a03008 	mov	r3, r8
    d89c:	e1a02006 	mov	r2, r6
    d8a0:	e1a01007 	mov	r1, r7
    d8a4:	e1a0000b 	mov	r0, fp
    d8a8:	eb001b02 	bl	144b8 <sprintf>
		rc = port_create(path, 2, MAX_PORT_BUF_SIZE,
    d8ac:	e3a03001 	mov	r3, #1
    d8b0:	e3a02a01 	mov	r2, #4096	; 0x1000
    d8b4:	e3a01002 	mov	r1, #2
    d8b8:	e1a0000b 	mov	r0, fp
    d8bc:	eb0015c8 	bl	12fe4 <port_create>
		EXPECT_GE_ZERO (rc, "max ports");
    d8c0:	e5993000 	ldr	r3, [r9]
    d8c4:	e2504000 	subs	r4, r0, #0
    d8c8:	e2833001 	add	r3, r3, #1
    d8cc:	e5893000 	str	r3, [r9]
    d8d0:	ba0000b6 	blt	dbb0 <run_accept_test+0x3e4>
		rc = set_cookie(ports[i], (void *) (COOKIE_BASE + ports[i]));
    d8d4:	e2841064 	add	r1, r4, #100	; 0x64
    d8d8:	e1a00004 	mov	r0, r4
		ports[i] = (handle_t) rc;
    d8dc:	e5aa4004 	str	r4, [sl, #4]!
		rc = set_cookie(ports[i], (void *) (COOKIE_BASE + ports[i]));
    d8e0:	eb0015cb 	bl	13014 <set_cookie>
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d8e4:	e59f27dc 	ldr	r2, [pc, #2012]	; e0c8 <run_accept_test+0x8fc>
    d8e8:	e3500000 	cmp	r0, #0
    d8ec:	e08f2002 	add	r2, pc, r2
    d8f0:	e5923000 	ldr	r3, [r2]
    d8f4:	e2833001 	add	r3, r3, #1
    d8f8:	e5823000 	str	r3, [r2]
    d8fc:	0affffe2 	beq	d88c <run_accept_test+0xc0>
    d900:	e59f27c4 	ldr	r2, [pc, #1988]	; e0cc <run_accept_test+0x900>
    d904:	e3a01000 	mov	r1, #0
    d908:	e58d1004 	str	r1, [sp, #4]
    d90c:	e300334b 	movw	r3, #843	; 0x34b
    d910:	e08f2002 	add	r2, pc, r2
    d914:	e58d1018 	str	r1, [sp, #24]
    d918:	e58d2000 	str	r2, [sp]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d91c:	e2888001 	add	r8, r8, #1
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d920:	e59f27a8 	ldr	r2, [pc, #1960]	; e0d0 <run_accept_test+0x904>
    d924:	e59f17a8 	ldr	r1, [pc, #1960]	; e0d4 <run_accept_test+0x908>
    d928:	e58d0008 	str	r0, [sp, #8]
    d92c:	e08f2002 	add	r2, pc, r2
    d930:	e2850028 	add	r0, r5, #40	; 0x28
    d934:	e08f1001 	add	r1, pc, r1
    d938:	eb001b06 	bl	14558 <fprintf>
    d93c:	e59f2794 	ldr	r2, [pc, #1940]	; e0d8 <run_accept_test+0x90c>
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d940:	e3580080 	cmp	r8, #128	; 0x80
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d944:	e08f2002 	add	r2, pc, r2
    d948:	e5923000 	ldr	r3, [r2]
    d94c:	e2833001 	add	r3, r3, #1
    d950:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    d954:	1affffcf 	bne	d898 <run_accept_test+0xcc>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "connect");
    d958:	e59f377c 	ldr	r3, [pc, #1916]	; e0dc <run_accept_test+0x910>
    d95c:	e1a0000b 	mov	r0, fp
    d960:	e59f2778 	ldr	r2, [pc, #1912]	; e0e0 <run_accept_test+0x914>
    d964:	e59f1778 	ldr	r1, [pc, #1912]	; e0e4 <run_accept_test+0x918>
    d968:	e08f3003 	add	r3, pc, r3
    d96c:	e08f2002 	add	r2, pc, r2
    d970:	e59d4018 	ldr	r4, [sp, #24]
    d974:	e08f1001 	add	r1, pc, r1
    d978:	e59d7024 	ldr	r7, [sp, #36]	; 0x24
    d97c:	eb001acd 	bl	144b8 <sprintf>
	rc = sync_connect (path, 1000);
    d980:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    d984:	e1a0000b 	mov	r0, fp
    d988:	ebffff63 	bl	d71c <sync_connect>
	if (rc >= 0)
    d98c:	e3500000 	cmp	r0, #0
    d990:	ba000000 	blt	d998 <run_accept_test+0x1cc>
		close((handle_t)rc);
    d994:	eb00159b 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    d998:	e59f3748 	ldr	r3, [pc, #1864]	; e0e8 <run_accept_test+0x91c>
		EXPECT_EQ (NO_ERROR, rc, "set cookie on port");
    d99c:	e3a0807e 	mov	r8, #126	; 0x7e
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    d9a0:	e59f9744 	ldr	r9, [pc, #1860]	; e0ec <run_accept_test+0x920>
    d9a4:	e28da028 	add	sl, sp, #40	; 0x28
    d9a8:	e08f3003 	add	r3, pc, r3
    d9ac:	e58d3018 	str	r3, [sp, #24]
    d9b0:	e59f3738 	ldr	r3, [pc, #1848]	; e0f0 <run_accept_test+0x924>
    d9b4:	e08f9009 	add	r9, pc, r9
    d9b8:	e58db024 	str	fp, [sp, #36]	; 0x24
    d9bc:	e08f3003 	add	r3, pc, r3
    d9c0:	e58d301c 	str	r3, [sp, #28]
    d9c4:	ea00005f 	b	db48 <run_accept_test+0x37c>
		EXPECT_EQ (IPC_HANDLE_POLL_READY, event.event, "accept test");
    d9c8:	e59f6724 	ldr	r6, [pc, #1828]	; e0f4 <run_accept_test+0x928>
    d9cc:	e2833001 	add	r3, r3, #1
    d9d0:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    d9d4:	e08f6006 	add	r6, pc, r6
    d9d8:	e3520001 	cmp	r2, #1
    d9dc:	e5863000 	str	r3, [r6]
    d9e0:	0a000013 	beq	da34 <run_accept_test+0x268>
    d9e4:	e59f170c 	ldr	r1, [pc, #1804]	; e0f8 <run_accept_test+0x92c>
    d9e8:	e3a0c001 	mov	ip, #1
    d9ec:	e58d2008 	str	r2, [sp, #8]
    d9f0:	e3003359 	movw	r3, #857	; 0x359
    d9f4:	e08f1001 	add	r1, pc, r1
    d9f8:	e59f26fc 	ldr	r2, [pc, #1788]	; e0fc <run_accept_test+0x930>
    d9fc:	e58d1000 	str	r1, [sp]
    da00:	e2850028 	add	r0, r5, #40	; 0x28
    da04:	e59f16f4 	ldr	r1, [pc, #1780]	; e100 <run_accept_test+0x934>
    da08:	e08f2002 	add	r2, pc, r2
    da0c:	e58dc004 	str	ip, [sp, #4]
    da10:	e3a04000 	mov	r4, #0
    da14:	e08f1001 	add	r1, pc, r1
    da18:	eb001ace 	bl	14558 <fprintf>
    da1c:	e59f16e0 	ldr	r1, [pc, #1760]	; e104 <run_accept_test+0x938>
    da20:	e5963000 	ldr	r3, [r6]
    da24:	e08f1001 	add	r1, pc, r1
    da28:	e5912000 	ldr	r2, [r1]
    da2c:	e2822001 	add	r2, r2, #1
    da30:	e5812000 	str	r2, [r1]
		EXPECT_EQ (exp_cookie, event.cookie, "accept test");
    da34:	e59fc6cc 	ldr	ip, [pc, #1740]	; e108 <run_accept_test+0x93c>
    da38:	e2833001 	add	r3, r3, #1
		void *exp_cookie = (void *)(COOKIE_BASE + event.handle);
    da3c:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
		EXPECT_EQ (exp_cookie, event.cookie, "accept test");
    da40:	e08fc00c 	add	ip, pc, ip
    da44:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
		void *exp_cookie = (void *)(COOKIE_BASE + event.handle);
    da48:	e2802064 	add	r2, r0, #100	; 0x64
		EXPECT_EQ (exp_cookie, event.cookie, "accept test");
    da4c:	e1510002 	cmp	r1, r2
    da50:	e58c3000 	str	r3, [ip]
    da54:	0a000012 	beq	daa4 <run_accept_test+0x2d8>
    da58:	e58d1008 	str	r1, [sp, #8]
    da5c:	e300335d 	movw	r3, #861	; 0x35d
    da60:	e58d2004 	str	r2, [sp, #4]
    da64:	e2850028 	add	r0, r5, #40	; 0x28
    da68:	e59fc69c 	ldr	ip, [pc, #1692]	; e10c <run_accept_test+0x940>
    da6c:	e3a04000 	mov	r4, #0
    da70:	e59f2698 	ldr	r2, [pc, #1688]	; e110 <run_accept_test+0x944>
    da74:	e59f1698 	ldr	r1, [pc, #1688]	; e114 <run_accept_test+0x948>
    da78:	e08fc00c 	add	ip, pc, ip
    da7c:	e08f2002 	add	r2, pc, r2
    da80:	e58dc000 	str	ip, [sp]
    da84:	e08f1001 	add	r1, pc, r1
    da88:	eb001ab2 	bl	14558 <fprintf>
    da8c:	e59f2684 	ldr	r2, [pc, #1668]	; e118 <run_accept_test+0x94c>
    da90:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    da94:	e08f2002 	add	r2, pc, r2
    da98:	e5923000 	ldr	r3, [r2]
    da9c:	e2833001 	add	r3, r3, #1
    daa0:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NO_RESOURCES, rc, "accept test");
    daa4:	e59f6670 	ldr	r6, [pc, #1648]	; e11c <run_accept_test+0x950>
		rc = accept (event.handle, &peer_uuid);
    daa8:	e1a01007 	mov	r1, r7
    daac:	eb001552 	bl	12ffc <accept>
		EXPECT_EQ (ERR_NO_RESOURCES, rc, "accept test");
    dab0:	e3700029 	cmn	r0, #41	; 0x29
    dab4:	e08f6006 	add	r6, pc, r6
    dab8:	e5963000 	ldr	r3, [r6]
    dabc:	e283b001 	add	fp, r3, #1
    dac0:	e586b000 	str	fp, [r6]
    dac4:	0a000013 	beq	db18 <run_accept_test+0x34c>
    dac8:	e59f2650 	ldr	r2, [pc, #1616]	; e120 <run_accept_test+0x954>
    dacc:	e3e01028 	mvn	r1, #40	; 0x28
    dad0:	e58d1004 	str	r1, [sp, #4]
    dad4:	e3003362 	movw	r3, #866	; 0x362
    dad8:	e08f2002 	add	r2, pc, r2
    dadc:	e59f1640 	ldr	r1, [pc, #1600]	; e124 <run_accept_test+0x958>
    dae0:	e58d2000 	str	r2, [sp]
    dae4:	e3a04000 	mov	r4, #0
    dae8:	e59f2638 	ldr	r2, [pc, #1592]	; e128 <run_accept_test+0x95c>
    daec:	e08f1001 	add	r1, pc, r1
    daf0:	e58d0008 	str	r0, [sp, #8]
    daf4:	e2850028 	add	r0, r5, #40	; 0x28
    daf8:	e08f2002 	add	r2, pc, r2
    dafc:	eb001a95 	bl	14558 <fprintf>
    db00:	e59f1624 	ldr	r1, [pc, #1572]	; e12c <run_accept_test+0x960>
    db04:	e596b000 	ldr	fp, [r6]
    db08:	e08f1001 	add	r1, pc, r1
    db0c:	e5912000 	ldr	r2, [r1]
    db10:	e2822001 	add	r2, r2, #1
    db14:	e5812000 	str	r2, [r1]
		rc1 = memcmp(&peer_uuid, &zero_uuid, sizeof(zero_uuid));
    db18:	e3a02010 	mov	r2, #16
    db1c:	e59d1014 	ldr	r1, [sp, #20]
    db20:	e1a00007 	mov	r0, r7
    db24:	eb001ab7 	bl	14608 <memcmp>
		EXPECT_EQ (0, rc1, "accept test")
    db28:	e59f2600 	ldr	r2, [pc, #1536]	; e130 <run_accept_test+0x964>
    db2c:	e28b3001 	add	r3, fp, #1
    db30:	e3500000 	cmp	r0, #0
    db34:	e08f2002 	add	r2, pc, r2
    db38:	e5823000 	str	r3, [r2]
    db3c:	1a00002e 	bne	dbfc <run_accept_test+0x430>
	for (uint i = 2; i < MAX_USER_HANDLES; i++ ) {
    db40:	e2588001 	subs	r8, r8, #1
    db44:	0a000040 	beq	dc4c <run_accept_test+0x480>
		rc = wait_any(&event, 1000);
    db48:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    db4c:	e1a0000a 	mov	r0, sl
    db50:	eb001535 	bl	1302c <wait_any>
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    db54:	e5993000 	ldr	r3, [r9]
    db58:	e3500000 	cmp	r0, #0
    db5c:	e2833001 	add	r3, r3, #1
    db60:	e5893000 	str	r3, [r9]
    db64:	0affff97 	beq	d9c8 <run_accept_test+0x1fc>
    db68:	e59f25c4 	ldr	r2, [pc, #1476]	; e134 <run_accept_test+0x968>
    db6c:	e3a03fd6 	mov	r3, #856	; 0x358
    db70:	e58d0008 	str	r0, [sp, #8]
    db74:	e3a04000 	mov	r4, #0
    db78:	e08f2002 	add	r2, pc, r2
    db7c:	e59d101c 	ldr	r1, [sp, #28]
    db80:	e58d2000 	str	r2, [sp]
    db84:	e2850028 	add	r0, r5, #40	; 0x28
    db88:	e59d2018 	ldr	r2, [sp, #24]
    db8c:	e58d4004 	str	r4, [sp, #4]
    db90:	eb001a70 	bl	14558 <fprintf>
    db94:	e59f159c 	ldr	r1, [pc, #1436]	; e138 <run_accept_test+0x96c>
    db98:	e5993000 	ldr	r3, [r9]
    db9c:	e08f1001 	add	r1, pc, r1
    dba0:	e5912000 	ldr	r2, [r1]
    dba4:	e2822001 	add	r2, r2, #1
    dba8:	e5812000 	str	r2, [r1]
    dbac:	eaffff85 	b	d9c8 <run_accept_test+0x1fc>
		EXPECT_GE_ZERO (rc, "max ports");
    dbb0:	e59f2584 	ldr	r2, [pc, #1412]	; e13c <run_accept_test+0x970>
    dbb4:	e3003347 	movw	r3, #839	; 0x347
    dbb8:	e59f1580 	ldr	r1, [pc, #1408]	; e140 <run_accept_test+0x974>
    dbbc:	e2850028 	add	r0, r5, #40	; 0x28
    dbc0:	e08f2002 	add	r2, pc, r2
    dbc4:	e58d2000 	str	r2, [sp]
    dbc8:	e3a02000 	mov	r2, #0
    dbcc:	e58d2018 	str	r2, [sp, #24]
    dbd0:	e59f256c 	ldr	r2, [pc, #1388]	; e144 <run_accept_test+0x978>
    dbd4:	e08f1001 	add	r1, pc, r1
    dbd8:	e58d4004 	str	r4, [sp, #4]
    dbdc:	e08f2002 	add	r2, pc, r2
    dbe0:	eb001a5c 	bl	14558 <fprintf>
    dbe4:	e59f255c 	ldr	r2, [pc, #1372]	; e148 <run_accept_test+0x97c>
    dbe8:	e08f2002 	add	r2, pc, r2
    dbec:	e5923000 	ldr	r3, [r2]
    dbf0:	e2833001 	add	r3, r3, #1
    dbf4:	e5823000 	str	r3, [r2]
    dbf8:	eaffff35 	b	d8d4 <run_accept_test+0x108>
		EXPECT_EQ (0, rc1, "accept test")
    dbfc:	e59f2548 	ldr	r2, [pc, #1352]	; e14c <run_accept_test+0x980>
    dc00:	e3003366 	movw	r3, #870	; 0x366
    dc04:	e59f1544 	ldr	r1, [pc, #1348]	; e150 <run_accept_test+0x984>
    dc08:	e3a04000 	mov	r4, #0
    dc0c:	e08f2002 	add	r2, pc, r2
    dc10:	e58d2000 	str	r2, [sp]
    dc14:	e59f2538 	ldr	r2, [pc, #1336]	; e154 <run_accept_test+0x988>
    dc18:	e08f1001 	add	r1, pc, r1
    dc1c:	e58d0008 	str	r0, [sp, #8]
    dc20:	e2850028 	add	r0, r5, #40	; 0x28
    dc24:	e08f2002 	add	r2, pc, r2
    dc28:	e58d4004 	str	r4, [sp, #4]
    dc2c:	eb001a49 	bl	14558 <fprintf>
    dc30:	e59f2520 	ldr	r2, [pc, #1312]	; e158 <run_accept_test+0x98c>
	for (uint i = 2; i < MAX_USER_HANDLES; i++ ) {
    dc34:	e2588001 	subs	r8, r8, #1
		EXPECT_EQ (0, rc1, "accept test")
    dc38:	e08f2002 	add	r2, pc, r2
    dc3c:	e5923000 	ldr	r3, [r2]
    dc40:	e2833001 	add	r3, r3, #1
    dc44:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++ ) {
    dc48:	1affffbe 	bne	db48 <run_accept_test+0x37c>
	rc = close(ports[2]);
    dc4c:	e59d005c 	ldr	r0, [sp, #92]	; 0x5c
    dc50:	e59db024 	ldr	fp, [sp, #36]	; 0x24
    dc54:	eb0014eb 	bl	13008 <close>
	EXPECT_EQ(NO_ERROR, 0, "close accept test");
    dc58:	e59fe4fc 	ldr	lr, [pc, #1276]	; e15c <run_accept_test+0x990>
	ports[2] = INVALID_IPC_HANDLE;
    dc5c:	e3e01000 	mvn	r1, #0
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "connect");
    dc60:	e59f34f8 	ldr	r3, [pc, #1272]	; e160 <run_accept_test+0x994>
    dc64:	e1a0000b 	mov	r0, fp
	EXPECT_EQ(NO_ERROR, 0, "close accept test");
    dc68:	e08fe00e 	add	lr, pc, lr
	ports[2] = INVALID_IPC_HANDLE;
    dc6c:	e58d105c 	str	r1, [sp, #92]	; 0x5c
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "connect");
    dc70:	e59f24ec 	ldr	r2, [pc, #1260]	; e164 <run_accept_test+0x998>
    dc74:	e08f3003 	add	r3, pc, r3
    dc78:	e59f14e8 	ldr	r1, [pc, #1256]	; e168 <run_accept_test+0x99c>
	EXPECT_EQ(NO_ERROR, 0, "close accept test");
    dc7c:	e59ec000 	ldr	ip, [lr]
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "connect");
    dc80:	e08f2002 	add	r2, pc, r2
    dc84:	e08f1001 	add	r1, pc, r1
	EXPECT_EQ(NO_ERROR, 0, "close accept test");
    dc88:	e28cc001 	add	ip, ip, #1
    dc8c:	e58ec000 	str	ip, [lr]
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, "connect");
    dc90:	eb001a08 	bl	144b8 <sprintf>
	rc = sync_connect (path, 1000);
    dc94:	e1a0000b 	mov	r0, fp
    dc98:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    dc9c:	ebfffe9e 	bl	d71c <sync_connect>
	if (rc >= 0)
    dca0:	e3500000 	cmp	r0, #0
    dca4:	ba000000 	blt	dcac <run_accept_test+0x4e0>
		close((handle_t)rc);
    dca8:	eb0014d6 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    dcac:	e59f34b8 	ldr	r3, [pc, #1208]	; e16c <run_accept_test+0x9a0>
		EXPECT_EQ (0, rc1, "accept test")
    dcb0:	e3a0907d 	mov	r9, #125	; 0x7d
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    dcb4:	e59fb4b4 	ldr	fp, [pc, #1204]	; e170 <run_accept_test+0x9a4>
    dcb8:	e08f3003 	add	r3, pc, r3
    dcbc:	e58d3018 	str	r3, [sp, #24]
    dcc0:	e59f34ac 	ldr	r3, [pc, #1196]	; e174 <run_accept_test+0x9a8>
    dcc4:	e08fb00b 	add	fp, pc, fp
    dcc8:	e58da014 	str	sl, [sp, #20]
    dccc:	e08f3003 	add	r3, pc, r3
    dcd0:	e58d301c 	str	r3, [sp, #28]
    dcd4:	ea00006a 	b	de84 <run_accept_test+0x6b8>
		EXPECT_EQ (IPC_HANDLE_POLL_READY, event.event, "accept test");
    dcd8:	e59f6498 	ldr	r6, [pc, #1176]	; e178 <run_accept_test+0x9ac>
    dcdc:	e2833001 	add	r3, r3, #1
    dce0:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    dce4:	e08f6006 	add	r6, pc, r6
    dce8:	e3520001 	cmp	r2, #1
    dcec:	e5863000 	str	r3, [r6]
    dcf0:	0a000013 	beq	dd44 <run_accept_test+0x578>
    dcf4:	e59f1480 	ldr	r1, [pc, #1152]	; e17c <run_accept_test+0x9b0>
    dcf8:	e3a0c001 	mov	ip, #1
    dcfc:	e58d2008 	str	r2, [sp, #8]
    dd00:	e300337a 	movw	r3, #890	; 0x37a
    dd04:	e08f1001 	add	r1, pc, r1
    dd08:	e59f2470 	ldr	r2, [pc, #1136]	; e180 <run_accept_test+0x9b4>
    dd0c:	e58d1000 	str	r1, [sp]
    dd10:	e2850028 	add	r0, r5, #40	; 0x28
    dd14:	e59f1468 	ldr	r1, [pc, #1128]	; e184 <run_accept_test+0x9b8>
    dd18:	e08f2002 	add	r2, pc, r2
    dd1c:	e58dc004 	str	ip, [sp, #4]
    dd20:	e3a04000 	mov	r4, #0
    dd24:	e08f1001 	add	r1, pc, r1
    dd28:	eb001a0a 	bl	14558 <fprintf>
    dd2c:	e59f1454 	ldr	r1, [pc, #1108]	; e188 <run_accept_test+0x9bc>
    dd30:	e5963000 	ldr	r3, [r6]
    dd34:	e08f1001 	add	r1, pc, r1
    dd38:	e5912000 	ldr	r2, [r1]
    dd3c:	e2822001 	add	r2, r2, #1
    dd40:	e5812000 	str	r2, [r1]
		EXPECT_EQ (exp_cookie, event.cookie, "accept test");
    dd44:	e59fc440 	ldr	ip, [pc, #1088]	; e18c <run_accept_test+0x9c0>
    dd48:	e2833001 	add	r3, r3, #1
		void *exp_cookie = (void *)(COOKIE_BASE + event.handle);
    dd4c:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
		EXPECT_EQ (exp_cookie, event.cookie, "accept test");
    dd50:	e08fc00c 	add	ip, pc, ip
    dd54:	e59d1030 	ldr	r1, [sp, #48]	; 0x30
		void *exp_cookie = (void *)(COOKIE_BASE + event.handle);
    dd58:	e2802064 	add	r2, r0, #100	; 0x64
		EXPECT_EQ (exp_cookie, event.cookie, "accept test");
    dd5c:	e1510002 	cmp	r1, r2
    dd60:	e58c3000 	str	r3, [ip]
    dd64:	0a000012 	beq	ddb4 <run_accept_test+0x5e8>
    dd68:	e58d1008 	str	r1, [sp, #8]
    dd6c:	e300337e 	movw	r3, #894	; 0x37e
    dd70:	e58d2004 	str	r2, [sp, #4]
    dd74:	e2850028 	add	r0, r5, #40	; 0x28
    dd78:	e59fc410 	ldr	ip, [pc, #1040]	; e190 <run_accept_test+0x9c4>
    dd7c:	e3a04000 	mov	r4, #0
    dd80:	e59f240c 	ldr	r2, [pc, #1036]	; e194 <run_accept_test+0x9c8>
    dd84:	e59f140c 	ldr	r1, [pc, #1036]	; e198 <run_accept_test+0x9cc>
    dd88:	e08fc00c 	add	ip, pc, ip
    dd8c:	e08f2002 	add	r2, pc, r2
    dd90:	e58dc000 	str	ip, [sp]
    dd94:	e08f1001 	add	r1, pc, r1
    dd98:	eb0019ee 	bl	14558 <fprintf>
    dd9c:	e59f23f8 	ldr	r2, [pc, #1016]	; e19c <run_accept_test+0x9d0>
    dda0:	e59d0028 	ldr	r0, [sp, #40]	; 0x28
    dda4:	e08f2002 	add	r2, pc, r2
    dda8:	e5923000 	ldr	r3, [r2]
    ddac:	e2833001 	add	r3, r3, #1
    ddb0:	e5823000 	str	r3, [r2]
		EXPECT_EQ (2, rc, "accept test");
    ddb4:	e59f83e4 	ldr	r8, [pc, #996]	; e1a0 <run_accept_test+0x9d4>
		rc = accept (event.handle, &peer_uuid);
    ddb8:	e1a01007 	mov	r1, r7
    ddbc:	eb00148e 	bl	12ffc <accept>
    ddc0:	e1a06000 	mov	r6, r0
		EXPECT_EQ (2, rc, "accept test");
    ddc4:	e08f8008 	add	r8, pc, r8
    ddc8:	e3500002 	cmp	r0, #2
    ddcc:	e5983000 	ldr	r3, [r8]
    ddd0:	e283a001 	add	sl, r3, #1
    ddd4:	e588a000 	str	sl, [r8]
    ddd8:	0a000013 	beq	de2c <run_accept_test+0x660>
    dddc:	e59f23c0 	ldr	r2, [pc, #960]	; e1a4 <run_accept_test+0x9d8>
    dde0:	e3a01002 	mov	r1, #2
    dde4:	e58d1004 	str	r1, [sp, #4]
    dde8:	e3003381 	movw	r3, #897	; 0x381
    ddec:	e08f2002 	add	r2, pc, r2
    ddf0:	e59f13b0 	ldr	r1, [pc, #944]	; e1a8 <run_accept_test+0x9dc>
    ddf4:	e58d2000 	str	r2, [sp]
    ddf8:	e3a04000 	mov	r4, #0
    ddfc:	e59f23a8 	ldr	r2, [pc, #936]	; e1ac <run_accept_test+0x9e0>
    de00:	e08f1001 	add	r1, pc, r1
    de04:	e58d0008 	str	r0, [sp, #8]
    de08:	e2850028 	add	r0, r5, #40	; 0x28
    de0c:	e08f2002 	add	r2, pc, r2
    de10:	eb0019d0 	bl	14558 <fprintf>
    de14:	e59f1394 	ldr	r1, [pc, #916]	; e1b0 <run_accept_test+0x9e4>
    de18:	e598a000 	ldr	sl, [r8]
    de1c:	e08f1001 	add	r1, pc, r1
    de20:	e5912000 	ldr	r2, [r1]
    de24:	e2822001 	add	r2, r2, #1
    de28:	e5812000 	str	r2, [r1]
		rc1 = memcmp(&peer_uuid, &srv_app_uuid, sizeof(srv_app_uuid));
    de2c:	e59f1380 	ldr	r1, [pc, #896]	; e1b4 <run_accept_test+0x9e8>
    de30:	e3a02010 	mov	r2, #16
    de34:	e1a00007 	mov	r0, r7
    de38:	e08f1001 	add	r1, pc, r1
    de3c:	eb0019f1 	bl	14608 <memcmp>
		EXPECT_EQ (0, rc1, "accept test")
    de40:	e59f2370 	ldr	r2, [pc, #880]	; e1b8 <run_accept_test+0x9ec>
    de44:	e28a3001 	add	r3, sl, #1
    de48:	e3500000 	cmp	r0, #0
    de4c:	e08f2002 	add	r2, pc, r2
    de50:	e5823000 	str	r3, [r2]
    de54:	1a000073 	bne	e028 <run_accept_test+0x85c>
		rc = close (rc);
    de58:	e1a00006 	mov	r0, r6
    de5c:	eb001469 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    de60:	e59f2354 	ldr	r2, [pc, #852]	; e1bc <run_accept_test+0x9f0>
    de64:	e3500000 	cmp	r0, #0
    de68:	e08f2002 	add	r2, pc, r2
    de6c:	e5923000 	ldr	r3, [r2]
    de70:	e2833001 	add	r3, r3, #1
    de74:	e5823000 	str	r3, [r2]
    de78:	1a00001b 	bne	deec <run_accept_test+0x720>
	for (uint i = 2; i < MAX_USER_HANDLES-1; i++ ) {
    de7c:	e2599001 	subs	r9, r9, #1
    de80:	0a00002d 	beq	df3c <run_accept_test+0x770>
		rc = wait_any(&event, 3000);
    de84:	e3001bb8 	movw	r1, #3000	; 0xbb8
    de88:	e59d0014 	ldr	r0, [sp, #20]
    de8c:	eb001466 	bl	1302c <wait_any>
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    de90:	e59b3000 	ldr	r3, [fp]
    de94:	e3500000 	cmp	r0, #0
    de98:	e2833001 	add	r3, r3, #1
    de9c:	e58b3000 	str	r3, [fp]
    dea0:	0affff8c 	beq	dcd8 <run_accept_test+0x50c>
    dea4:	e59f2314 	ldr	r2, [pc, #788]	; e1c0 <run_accept_test+0x9f4>
    dea8:	e3003379 	movw	r3, #889	; 0x379
    deac:	e58d0008 	str	r0, [sp, #8]
    deb0:	e3a04000 	mov	r4, #0
    deb4:	e08f2002 	add	r2, pc, r2
    deb8:	e59d101c 	ldr	r1, [sp, #28]
    debc:	e58d2000 	str	r2, [sp]
    dec0:	e2850028 	add	r0, r5, #40	; 0x28
    dec4:	e59d2018 	ldr	r2, [sp, #24]
    dec8:	e58d4004 	str	r4, [sp, #4]
    decc:	eb0019a1 	bl	14558 <fprintf>
    ded0:	e59f12ec 	ldr	r1, [pc, #748]	; e1c4 <run_accept_test+0x9f8>
    ded4:	e59b3000 	ldr	r3, [fp]
    ded8:	e08f1001 	add	r1, pc, r1
    dedc:	e5912000 	ldr	r2, [r1]
    dee0:	e2822001 	add	r2, r2, #1
    dee4:	e5812000 	str	r2, [r1]
    dee8:	eaffff7a 	b	dcd8 <run_accept_test+0x50c>
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    deec:	e59f22d4 	ldr	r2, [pc, #724]	; e1c8 <run_accept_test+0x9fc>
    def0:	e3a03fe2 	mov	r3, #904	; 0x388
    def4:	e59f12d0 	ldr	r1, [pc, #720]	; e1cc <run_accept_test+0xa00>
    def8:	e3a04000 	mov	r4, #0
    defc:	e08f2002 	add	r2, pc, r2
    df00:	e58d2000 	str	r2, [sp]
    df04:	e59f22c4 	ldr	r2, [pc, #708]	; e1d0 <run_accept_test+0xa04>
    df08:	e08f1001 	add	r1, pc, r1
    df0c:	e58d0008 	str	r0, [sp, #8]
    df10:	e2850028 	add	r0, r5, #40	; 0x28
    df14:	e08f2002 	add	r2, pc, r2
    df18:	e58d4004 	str	r4, [sp, #4]
    df1c:	eb00198d 	bl	14558 <fprintf>
    df20:	e59f22ac 	ldr	r2, [pc, #684]	; e1d4 <run_accept_test+0xa08>
	for (uint i = 2; i < MAX_USER_HANDLES-1; i++ ) {
    df24:	e2599001 	subs	r9, r9, #1
		EXPECT_EQ (NO_ERROR, rc, "accept test");
    df28:	e08f2002 	add	r2, pc, r2
    df2c:	e5923000 	ldr	r3, [r2]
    df30:	e2833001 	add	r3, r3, #1
    df34:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES-1; i++ ) {
    df38:	1affffd1 	bne	de84 <run_accept_test+0x6b8>
		EXPECT_EQ (NO_ERROR, rc, "close port");
    df3c:	e59f7294 	ldr	r7, [pc, #660]	; e1d8 <run_accept_test+0xa0c>
    df40:	e28d605c 	add	r6, sp, #92	; 0x5c
    df44:	e59fa290 	ldr	sl, [pc, #656]	; e1dc <run_accept_test+0xa10>
    df48:	e28d8e25 	add	r8, sp, #592	; 0x250
    df4c:	e59f928c 	ldr	r9, [pc, #652]	; e1e0 <run_accept_test+0xa14>
    df50:	e08f7007 	add	r7, pc, r7
    df54:	e08fa00a 	add	sl, pc, sl
    df58:	e08f9009 	add	r9, pc, r9
    df5c:	ea000003 	b	df70 <run_accept_test+0x7a4>
		ports[i] = INVALID_IPC_HANDLE;
    df60:	e3e03000 	mvn	r3, #0
	for (uint i = 3; i < MAX_USER_HANDLES; i++) {
    df64:	e1560008 	cmp	r6, r8
		ports[i] = INVALID_IPC_HANDLE;
    df68:	e5863000 	str	r3, [r6]
	for (uint i = 3; i < MAX_USER_HANDLES; i++) {
    df6c:	0a00001a 	beq	dfdc <run_accept_test+0x810>
		rc = close(ports[i]);
    df70:	e5b60004 	ldr	r0, [r6, #4]!
    df74:	eb001423 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close port");
    df78:	e5973000 	ldr	r3, [r7]
    df7c:	e3500000 	cmp	r0, #0
    df80:	e2833001 	add	r3, r3, #1
    df84:	e5873000 	str	r3, [r7]
    df88:	0afffff4 	beq	df60 <run_accept_test+0x794>
    df8c:	e59f2250 	ldr	r2, [pc, #592]	; e1e4 <run_accept_test+0xa18>
    df90:	e300338f 	movw	r3, #911	; 0x38f
    df94:	e58d0008 	str	r0, [sp, #8]
    df98:	e3a04000 	mov	r4, #0
    df9c:	e08f2002 	add	r2, pc, r2
    dfa0:	e58d4004 	str	r4, [sp, #4]
    dfa4:	e58d2000 	str	r2, [sp]
    dfa8:	e1a01009 	mov	r1, r9
    dfac:	e1a0200a 	mov	r2, sl
    dfb0:	e2850028 	add	r0, r5, #40	; 0x28
    dfb4:	eb001967 	bl	14558 <fprintf>
    dfb8:	e59f2228 	ldr	r2, [pc, #552]	; e1e8 <run_accept_test+0xa1c>
	for (uint i = 3; i < MAX_USER_HANDLES; i++) {
    dfbc:	e1560008 	cmp	r6, r8
		EXPECT_EQ (NO_ERROR, rc, "close port");
    dfc0:	e08f2002 	add	r2, pc, r2
    dfc4:	e5923000 	ldr	r3, [r2]
    dfc8:	e2833001 	add	r3, r3, #1
    dfcc:	e5823000 	str	r3, [r2]
		ports[i] = INVALID_IPC_HANDLE;
    dfd0:	e3e03000 	mvn	r3, #0
    dfd4:	e5863000 	str	r3, [r6]
	for (uint i = 3; i < MAX_USER_HANDLES; i++) {
    dfd8:	1affffe4 	bne	df70 <run_accept_test+0x7a4>
	TEST_END
    dfdc:	e3540000 	cmp	r4, #0
    dfe0:	1a000023 	bne	e074 <run_accept_test+0x8a8>
    dfe4:	e59f3200 	ldr	r3, [pc, #512]	; e1ec <run_accept_test+0xa20>
    dfe8:	e2850028 	add	r0, r5, #40	; 0x28
    dfec:	e59f21fc 	ldr	r2, [pc, #508]	; e1f0 <run_accept_test+0xa24>
    dff0:	e59f11fc 	ldr	r1, [pc, #508]	; e1f4 <run_accept_test+0xa28>
    dff4:	e08f3003 	add	r3, pc, r3
    dff8:	e08f2002 	add	r2, pc, r2
    dffc:	e58d3000 	str	r3, [sp]
    e000:	e08f1001 	add	r1, pc, r1
    e004:	e3003393 	movw	r3, #915	; 0x393
    e008:	eb001952 	bl	14558 <fprintf>
}
    e00c:	e59d3020 	ldr	r3, [sp, #32]
    e010:	e59d2294 	ldr	r2, [sp, #660]	; 0x294
    e014:	e5933000 	ldr	r3, [r3]
    e018:	e1520003 	cmp	r2, r3
    e01c:	1a00001f 	bne	e0a0 <run_accept_test+0x8d4>
    e020:	e28ddfa7 	add	sp, sp, #668	; 0x29c
    e024:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		EXPECT_EQ (0, rc1, "accept test")
    e028:	e59f21c8 	ldr	r2, [pc, #456]	; e1f8 <run_accept_test+0xa2c>
    e02c:	e3003385 	movw	r3, #901	; 0x385
    e030:	e59f11c4 	ldr	r1, [pc, #452]	; e1fc <run_accept_test+0xa30>
    e034:	e3a04000 	mov	r4, #0
    e038:	e08f2002 	add	r2, pc, r2
    e03c:	e58d2000 	str	r2, [sp]
    e040:	e59f21b8 	ldr	r2, [pc, #440]	; e200 <run_accept_test+0xa34>
    e044:	e08f1001 	add	r1, pc, r1
    e048:	e58d0008 	str	r0, [sp, #8]
    e04c:	e2850028 	add	r0, r5, #40	; 0x28
    e050:	e08f2002 	add	r2, pc, r2
    e054:	e58d4004 	str	r4, [sp, #4]
    e058:	eb00193e 	bl	14558 <fprintf>
    e05c:	e59f21a0 	ldr	r2, [pc, #416]	; e204 <run_accept_test+0xa38>
    e060:	e08f2002 	add	r2, pc, r2
    e064:	e5923000 	ldr	r3, [r2]
    e068:	e2833001 	add	r3, r3, #1
    e06c:	e5823000 	str	r3, [r2]
    e070:	eaffff78 	b	de58 <run_accept_test+0x68c>
	TEST_END
    e074:	e59f318c 	ldr	r3, [pc, #396]	; e208 <run_accept_test+0xa3c>
    e078:	e2850028 	add	r0, r5, #40	; 0x28
    e07c:	e59f2188 	ldr	r2, [pc, #392]	; e20c <run_accept_test+0xa40>
    e080:	e59f1188 	ldr	r1, [pc, #392]	; e210 <run_accept_test+0xa44>
    e084:	e08f3003 	add	r3, pc, r3
    e088:	e08f2002 	add	r2, pc, r2
    e08c:	e58d3000 	str	r3, [sp]
    e090:	e08f1001 	add	r1, pc, r1
    e094:	e3003393 	movw	r3, #915	; 0x393
    e098:	eb00192e 	bl	14558 <fprintf>
    e09c:	eaffffda 	b	e00c <run_accept_test+0x840>
}
    e0a0:	eb001948 	bl	145c8 <__stack_chk_fail>
    e0a4:	00008830 	.word	0x00008830
    e0a8:	0000000c 	.word	0x0000000c
    e0ac:	00007c7c 	.word	0x00007c7c
    e0b0:	00000010 	.word	0x00000010
    e0b4:	0000807c 	.word	0x0000807c
    e0b8:	0000756c 	.word	0x0000756c
    e0bc:	00008018 	.word	0x00008018
    e0c0:	00007ffc 	.word	0x00007ffc
    e0c4:	0000883c 	.word	0x0000883c
    e0c8:	000087c8 	.word	0x000087c8
    e0cc:	000083c0 	.word	0x000083c0
    e0d0:	00007f40 	.word	0x00007f40
    e0d4:	00008064 	.word	0x00008064
    e0d8:	0000876c 	.word	0x0000876c
    e0dc:	00007b1c 	.word	0x00007b1c
    e0e0:	00007f24 	.word	0x00007f24
    e0e4:	00007b18 	.word	0x00007b18
    e0e8:	00007ec4 	.word	0x00007ec4
    e0ec:	00008700 	.word	0x00008700
    e0f0:	00007fdc 	.word	0x00007fdc
    e0f4:	000086e0 	.word	0x000086e0
    e0f8:	00007aa4 	.word	0x00007aa4
    e0fc:	00007e64 	.word	0x00007e64
    e100:	00007a90 	.word	0x00007a90
    e104:	0000868c 	.word	0x0000868c
    e108:	00008674 	.word	0x00008674
    e10c:	00007a20 	.word	0x00007a20
    e110:	00007df0 	.word	0x00007df0
    e114:	00007a6c 	.word	0x00007a6c
    e118:	0000861c 	.word	0x0000861c
    e11c:	00008600 	.word	0x00008600
    e120:	000079c0 	.word	0x000079c0
    e124:	00007e64 	.word	0x00007e64
    e128:	00007d74 	.word	0x00007d74
    e12c:	000085a8 	.word	0x000085a8
    e130:	00008580 	.word	0x00008580
    e134:	00007920 	.word	0x00007920
    e138:	00008514 	.word	0x00008514
    e13c:	00007dcc 	.word	0x00007dcc
    e140:	00007ce8 	.word	0x00007ce8
    e144:	00007c90 	.word	0x00007c90
    e148:	000084c8 	.word	0x000084c8
    e14c:	0000788c 	.word	0x0000788c
    e150:	00007918 	.word	0x00007918
    e154:	00007c48 	.word	0x00007c48
    e158:	00008478 	.word	0x00008478
    e15c:	0000844c 	.word	0x0000844c
    e160:	00007810 	.word	0x00007810
    e164:	00007c10 	.word	0x00007c10
    e168:	00007808 	.word	0x00007808
    e16c:	00007bb4 	.word	0x00007bb4
    e170:	000083f0 	.word	0x000083f0
    e174:	00007ccc 	.word	0x00007ccc
    e178:	000083d0 	.word	0x000083d0
    e17c:	00007794 	.word	0x00007794
    e180:	00007b54 	.word	0x00007b54
    e184:	00007780 	.word	0x00007780
    e188:	0000837c 	.word	0x0000837c
    e18c:	00008364 	.word	0x00008364
    e190:	00007710 	.word	0x00007710
    e194:	00007ae0 	.word	0x00007ae0
    e198:	0000775c 	.word	0x0000775c
    e19c:	0000830c 	.word	0x0000830c
    e1a0:	000082f0 	.word	0x000082f0
    e1a4:	000076ac 	.word	0x000076ac
    e1a8:	00007760 	.word	0x00007760
    e1ac:	00007a60 	.word	0x00007a60
    e1b0:	00008294 	.word	0x00008294
    e1b4:	00007efc 	.word	0x00007efc
    e1b8:	00008268 	.word	0x00008268
    e1bc:	0000824c 	.word	0x0000824c
    e1c0:	000075e4 	.word	0x000075e4
    e1c4:	000081d8 	.word	0x000081d8
    e1c8:	0000759c 	.word	0x0000759c
    e1cc:	00007a90 	.word	0x00007a90
    e1d0:	00007958 	.word	0x00007958
    e1d4:	00008188 	.word	0x00008188
    e1d8:	00008164 	.word	0x00008164
    e1dc:	00007918 	.word	0x00007918
    e1e0:	00007a40 	.word	0x00007a40
    e1e4:	000075f4 	.word	0x000075f4
    e1e8:	000080f0 	.word	0x000080f0
    e1ec:	00006dcc 	.word	0x00006dcc
    e1f0:	00007874 	.word	0x00007874
    e1f4:	00007a40 	.word	0x00007a40
    e1f8:	00007460 	.word	0x00007460
    e1fc:	000074ec 	.word	0x000074ec
    e200:	0000781c 	.word	0x0000781c
    e204:	00008050 	.word	0x00008050
    e208:	00006d3c 	.word	0x00006d3c
    e20c:	000077e4 	.word	0x000077e4
    e210:	0000799c 	.word	0x0000799c

0000e214 <run_end_to_end_msg_test>:
{
    e214:	e59f0980 	ldr	r0, [pc, #2432]	; eb9c <run_end_to_end_msg_test+0x988>
	TEST_BEGIN(__func__);
    e218:	e3003539 	movw	r3, #1337	; 0x539
{
    e21c:	e59f297c 	ldr	r2, [pc, #2428]	; eba0 <run_end_to_end_msg_test+0x98c>
    e220:	e08f0000 	add	r0, pc, r0
    e224:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TEST_BEGIN(__func__);
    e228:	e59fe974 	ldr	lr, [pc, #2420]	; eba4 <run_end_to_end_msg_test+0x990>
{
    e22c:	e24ddf4f 	sub	sp, sp, #316	; 0x13c
	TEST_BEGIN(__func__);
    e230:	e59f6970 	ldr	r6, [pc, #2416]	; eba8 <run_end_to_end_msg_test+0x994>
{
    e234:	e7902002 	ldr	r2, [r0, r2]
	tx_iov.len  = sizeof(tx_buf);
    e238:	e3a09040 	mov	r9, #64	; 0x40
	TEST_BEGIN(__func__);
    e23c:	e59fc968 	ldr	ip, [pc, #2408]	; ebac <run_end_to_end_msg_test+0x998>
    e240:	e08f6006 	add	r6, pc, r6
{
    e244:	e1a04002 	mov	r4, r2
    e248:	e58d2028 	str	r2, [sp, #40]	; 0x28
	TEST_BEGIN(__func__);
    e24c:	e59f195c 	ldr	r1, [pc, #2396]	; ebb0 <run_end_to_end_msg_test+0x99c>
    e250:	e08fc00c 	add	ip, pc, ip
    e254:	e1a02006 	mov	r2, r6
	tx_msg.num_iov = 1;
    e258:	e3a05001 	mov	r5, #1
{
    e25c:	e5944000 	ldr	r4, [r4]
	TEST_BEGIN(__func__);
    e260:	e08f1001 	add	r1, pc, r1
{
    e264:	e58d4134 	str	r4, [sp, #308]	; 0x134
	rx_iov.base = rx_buf;
    e268:	e28d40f4 	add	r4, sp, #244	; 0xf4
	TEST_BEGIN(__func__);
    e26c:	e790800e 	ldr	r8, [r0, lr]
    e270:	e58dc000 	str	ip, [sp]
    e274:	e2887028 	add	r7, r8, #40	; 0x28
    e278:	e1a00007 	mov	r0, r7
    e27c:	eb0018b5 	bl	14558 <fprintf>
	tx_iov.base = tx_buf;
    e280:	e28d30b4 	add	r3, sp, #180	; 0xb4
	memset (tx_buf, 0x55, sizeof(tx_buf));
    e284:	e1a02009 	mov	r2, r9
    e288:	e1a00003 	mov	r0, r3
    e28c:	e3a01055 	mov	r1, #85	; 0x55
	tx_iov.base = tx_buf;
    e290:	e58d3038 	str	r3, [sp, #56]	; 0x38
	tx_iov.len  = sizeof(tx_buf);
    e294:	e58d903c 	str	r9, [sp, #60]	; 0x3c
	tx_msg.iov     = &tx_iov;
    e298:	e28d3038 	add	r3, sp, #56	; 0x38
	rx_iov.len  = sizeof(rx_buf);
    e29c:	e58d9044 	str	r9, [sp, #68]	; 0x44
	rx_iov.base = rx_buf;
    e2a0:	e58d4040 	str	r4, [sp, #64]	; 0x40
	tx_msg.iov     = &tx_iov;
    e2a4:	e58d3058 	str	r3, [sp, #88]	; 0x58
	tx_msg.num_handles = 0;
    e2a8:	e3a03000 	mov	r3, #0
	tx_msg.num_iov = 1;
    e2ac:	e58d5054 	str	r5, [sp, #84]	; 0x54
	tx_msg.num_handles = 0;
    e2b0:	e58d305c 	str	r3, [sp, #92]	; 0x5c
	tx_msg.handles = NULL;
    e2b4:	e58d3060 	str	r3, [sp, #96]	; 0x60
	rx_msg.num_handles = 0;
    e2b8:	e58d306c 	str	r3, [sp, #108]	; 0x6c
	rx_msg.handles = NULL;
    e2bc:	e58d3070 	str	r3, [sp, #112]	; 0x70
	rx_msg.iov     = &rx_iov;
    e2c0:	e08d3009 	add	r3, sp, r9
	rx_msg.num_iov = 1;
    e2c4:	e58d5064 	str	r5, [sp, #100]	; 0x64
	rx_msg.iov     = &rx_iov;
    e2c8:	e58d3068 	str	r3, [sp, #104]	; 0x68
	memset (tx_buf, 0x55, sizeof(tx_buf));
    e2cc:	eb0018e6 	bl	1466c <memset>
	memset (rx_buf, 0xaa, sizeof(rx_buf));
    e2d0:	e1a02009 	mov	r2, r9
    e2d4:	e1a00004 	mov	r0, r4
    e2d8:	e3a010aa 	mov	r1, #170	; 0xaa
	EXPECT_GE_ZERO (rc, "connect to echo");
    e2dc:	e59f98d0 	ldr	r9, [pc, #2256]	; ebb4 <run_end_to_end_msg_test+0x9a0>
	memset (rx_buf, 0xaa, sizeof(rx_buf));
    e2e0:	eb0018e1 	bl	1466c <memset>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "echo");
    e2e4:	e59f38cc 	ldr	r3, [pc, #2252]	; ebb8 <run_end_to_end_msg_test+0x9a4>
    e2e8:	e59f28cc 	ldr	r2, [pc, #2252]	; ebbc <run_end_to_end_msg_test+0x9a8>
    e2ec:	e28d4074 	add	r4, sp, #116	; 0x74
    e2f0:	e59f18c8 	ldr	r1, [pc, #2248]	; ebc0 <run_end_to_end_msg_test+0x9ac>
	EXPECT_GE_ZERO (rc, "connect to echo");
    e2f4:	e08f9009 	add	r9, pc, r9
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "echo");
    e2f8:	e08f3003 	add	r3, pc, r3
    e2fc:	e1a00004 	mov	r0, r4
    e300:	e08f2002 	add	r2, pc, r2
    e304:	e08f1001 	add	r1, pc, r1
    e308:	eb00186a 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    e30c:	e1a00004 	mov	r0, r4
    e310:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    e314:	ebfffd00 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to echo");
    e318:	e5993000 	ldr	r3, [r9]
    e31c:	e2504000 	subs	r4, r0, #0
    e320:	e0833005 	add	r3, r3, r5
    e324:	e5893000 	str	r3, [r9]
    e328:	ba00020a 	blt	eb58 <run_end_to_end_msg_test+0x944>
    e32c:	e28d3048 	add	r3, sp, #72	; 0x48
    e330:	e58d3014 	str	r3, [sp, #20]
    e334:	e28d3064 	add	r3, sp, #100	; 0x64
    e338:	e58d3010 	str	r3, [sp, #16]
			EXPECT_EQ (64, rc, "sending msg to echo");
    e33c:	e59f3880 	ldr	r3, [pc, #2176]	; ebc4 <run_end_to_end_msg_test+0x9b0>
		chan = (handle_t) rc;
    e340:	e3027710 	movw	r7, #10000	; 0x2710
    e344:	e28db054 	add	fp, sp, #84	; 0x54
    e348:	e28da030 	add	sl, sp, #48	; 0x30
			EXPECT_EQ (64, rc, "sending msg to echo");
    e34c:	e08f3003 	add	r3, pc, r3
    e350:	e58d3018 	str	r3, [sp, #24]
    e354:	e59f386c 	ldr	r3, [pc, #2156]	; ebc8 <run_end_to_end_msg_test+0x9b4>
    e358:	e08f3003 	add	r3, pc, r3
    e35c:	e58d301c 	str	r3, [sp, #28]
    e360:	ea00004d 	b	e49c <run_end_to_end_msg_test+0x288>
			EXPECT_EQ (chan, uevt.handle, "wait on channel");
    e364:	e59f1860 	ldr	r1, [pc, #2144]	; ebcc <run_end_to_end_msg_test+0x9b8>
    e368:	e2833001 	add	r3, r3, #1
    e36c:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    e370:	e08f1001 	add	r1, pc, r1
    e374:	e1540002 	cmp	r4, r2
    e378:	e5813000 	str	r3, [r1]
    e37c:	0a000011 	beq	e3c8 <run_end_to_end_msg_test+0x1b4>
    e380:	e59f1848 	ldr	r1, [pc, #2120]	; ebd0 <run_end_to_end_msg_test+0x9bc>
    e384:	e3003562 	movw	r3, #1378	; 0x562
    e388:	e58d2008 	str	r2, [sp, #8]
    e38c:	e2880028 	add	r0, r8, #40	; 0x28
    e390:	e08f1001 	add	r1, pc, r1
    e394:	e59f2838 	ldr	r2, [pc, #2104]	; ebd4 <run_end_to_end_msg_test+0x9c0>
    e398:	e58d1000 	str	r1, [sp]
    e39c:	e3a05000 	mov	r5, #0
    e3a0:	e59f1830 	ldr	r1, [pc, #2096]	; ebd8 <run_end_to_end_msg_test+0x9c4>
    e3a4:	e08f2002 	add	r2, pc, r2
    e3a8:	e58d4004 	str	r4, [sp, #4]
    e3ac:	e08f1001 	add	r1, pc, r1
    e3b0:	eb001868 	bl	14558 <fprintf>
    e3b4:	e59f2820 	ldr	r2, [pc, #2080]	; ebdc <run_end_to_end_msg_test+0x9c8>
    e3b8:	e08f2002 	add	r2, pc, r2
    e3bc:	e5923000 	ldr	r3, [r2]
    e3c0:	e2833001 	add	r3, r3, #1
    e3c4:	e5823000 	str	r3, [r2]
			rc = get_msg(chan, &inf);
    e3c8:	e1a0100a 	mov	r1, sl
    e3cc:	e1a00004 	mov	r0, r4
    e3d0:	eb001318 	bl	13038 <get_msg>
			EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    e3d4:	e59f2804 	ldr	r2, [pc, #2052]	; ebe0 <run_end_to_end_msg_test+0x9cc>
    e3d8:	e3500000 	cmp	r0, #0
    e3dc:	e08f2002 	add	r2, pc, r2
    e3e0:	e5923000 	ldr	r3, [r2]
    e3e4:	e2833001 	add	r3, r3, #1
    e3e8:	e5823000 	str	r3, [r2]
    e3ec:	1a0000da 	bne	e75c <run_end_to_end_msg_test+0x548>
			rc = read_msg(chan, inf.id, 0, &rx_msg);
    e3f0:	e59d3010 	ldr	r3, [sp, #16]
    e3f4:	e3a02000 	mov	r2, #0
    e3f8:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    e3fc:	e1a00004 	mov	r0, r4
    e400:	eb00130f 	bl	13044 <read_msg>
			EXPECT_EQ (64, rc, "reading echo msg");
    e404:	e59f27d8 	ldr	r2, [pc, #2008]	; ebe4 <run_end_to_end_msg_test+0x9d0>
    e408:	e3500040 	cmp	r0, #64	; 0x40
    e40c:	e08f2002 	add	r2, pc, r2
    e410:	e5923000 	ldr	r3, [r2]
    e414:	e2833001 	add	r3, r3, #1
    e418:	e5823000 	str	r3, [r2]
    e41c:	0a000012 	beq	e46c <run_end_to_end_msg_test+0x258>
    e420:	e59f27c0 	ldr	r2, [pc, #1984]	; ebe8 <run_end_to_end_msg_test+0x9d4>
    e424:	e3a01040 	mov	r1, #64	; 0x40
    e428:	e58d1004 	str	r1, [sp, #4]
    e42c:	e300356a 	movw	r3, #1386	; 0x56a
    e430:	e08f2002 	add	r2, pc, r2
    e434:	e59f17b0 	ldr	r1, [pc, #1968]	; ebec <run_end_to_end_msg_test+0x9d8>
    e438:	e58d2000 	str	r2, [sp]
    e43c:	e3a05000 	mov	r5, #0
    e440:	e59f27a8 	ldr	r2, [pc, #1960]	; ebf0 <run_end_to_end_msg_test+0x9dc>
    e444:	e08f1001 	add	r1, pc, r1
    e448:	e58d0008 	str	r0, [sp, #8]
    e44c:	e2880028 	add	r0, r8, #40	; 0x28
    e450:	e08f2002 	add	r2, pc, r2
    e454:	eb00183f 	bl	14558 <fprintf>
    e458:	e59f2794 	ldr	r2, [pc, #1940]	; ebf4 <run_end_to_end_msg_test+0x9e0>
    e45c:	e08f2002 	add	r2, pc, r2
    e460:	e5923000 	ldr	r3, [r2]
    e464:	e2833001 	add	r3, r3, #1
    e468:	e5823000 	str	r3, [r2]
			rc = put_msg(chan, inf.id);
    e46c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    e470:	e1a00004 	mov	r0, r4
    e474:	eb0012f5 	bl	13050 <put_msg>
			EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e478:	e59f2778 	ldr	r2, [pc, #1912]	; ebf8 <run_end_to_end_msg_test+0x9e4>
    e47c:	e3500000 	cmp	r0, #0
    e480:	e08f2002 	add	r2, pc, r2
    e484:	e5923000 	ldr	r3, [r2]
    e488:	e2833001 	add	r3, r3, #1
    e48c:	e5823000 	str	r3, [r2]
    e490:	1a000039 	bne	e57c <run_end_to_end_msg_test+0x368>
		while (tx_cnt) {
    e494:	e2577001 	subs	r7, r7, #1
    e498:	0a00004b 	beq	e5cc <run_end_to_end_msg_test+0x3b8>
			rc = send_msg(chan, &tx_msg);
    e49c:	e1a0100b 	mov	r1, fp
    e4a0:	e1a00004 	mov	r0, r4
    e4a4:	eb0012ec 	bl	1305c <send_msg>
			EXPECT_EQ (64, rc, "sending msg to echo");
    e4a8:	e5993000 	ldr	r3, [r9]
    e4ac:	e3500040 	cmp	r0, #64	; 0x40
    e4b0:	e2833001 	add	r3, r3, #1
    e4b4:	e5893000 	str	r3, [r9]
    e4b8:	0a000010 	beq	e500 <run_end_to_end_msg_test+0x2ec>
    e4bc:	e59f2738 	ldr	r2, [pc, #1848]	; ebfc <run_end_to_end_msg_test+0x9e8>
    e4c0:	e3a01040 	mov	r1, #64	; 0x40
    e4c4:	e58d0008 	str	r0, [sp, #8]
    e4c8:	e300355d 	movw	r3, #1373	; 0x55d
    e4cc:	e08f2002 	add	r2, pc, r2
    e4d0:	e58d1004 	str	r1, [sp, #4]
    e4d4:	e58d2000 	str	r2, [sp]
    e4d8:	e2880028 	add	r0, r8, #40	; 0x28
    e4dc:	e59d2018 	ldr	r2, [sp, #24]
    e4e0:	e3a05000 	mov	r5, #0
    e4e4:	e59d101c 	ldr	r1, [sp, #28]
    e4e8:	eb00181a 	bl	14558 <fprintf>
    e4ec:	e59f270c 	ldr	r2, [pc, #1804]	; ec00 <run_end_to_end_msg_test+0x9ec>
    e4f0:	e08f2002 	add	r2, pc, r2
    e4f4:	e5923000 	ldr	r3, [r2]
    e4f8:	e2833001 	add	r3, r3, #1
    e4fc:	e5823000 	str	r3, [r2]
			EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
    e500:	e59f66fc 	ldr	r6, [pc, #1788]	; ec04 <run_end_to_end_msg_test+0x9f0>
			rc = wait(chan, &uevt, 1000);
    e504:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    e508:	e59d1014 	ldr	r1, [sp, #20]
    e50c:	e1a00004 	mov	r0, r4
			EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
    e510:	e08f6006 	add	r6, pc, r6
			rc = wait(chan, &uevt, 1000);
    e514:	eb0012c1 	bl	13020 <wait>
			EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
    e518:	e3500000 	cmp	r0, #0
    e51c:	e5963000 	ldr	r3, [r6]
    e520:	e2833001 	add	r3, r3, #1
    e524:	e5863000 	str	r3, [r6]
    e528:	0affff8d 	beq	e364 <run_end_to_end_msg_test+0x150>
    e52c:	e59f26d4 	ldr	r2, [pc, #1748]	; ec08 <run_end_to_end_msg_test+0x9f4>
    e530:	e3003561 	movw	r3, #1377	; 0x561
    e534:	e59f16d0 	ldr	r1, [pc, #1744]	; ec0c <run_end_to_end_msg_test+0x9f8>
    e538:	e3a05000 	mov	r5, #0
    e53c:	e08f2002 	add	r2, pc, r2
    e540:	e58d2000 	str	r2, [sp]
    e544:	e59f26c4 	ldr	r2, [pc, #1732]	; ec10 <run_end_to_end_msg_test+0x9fc>
    e548:	e08f1001 	add	r1, pc, r1
    e54c:	e58d0008 	str	r0, [sp, #8]
    e550:	e2880028 	add	r0, r8, #40	; 0x28
    e554:	e08f2002 	add	r2, pc, r2
    e558:	e58d5004 	str	r5, [sp, #4]
    e55c:	eb0017fd 	bl	14558 <fprintf>
    e560:	e59f16ac 	ldr	r1, [pc, #1708]	; ec14 <run_end_to_end_msg_test+0xa00>
    e564:	e5963000 	ldr	r3, [r6]
    e568:	e08f1001 	add	r1, pc, r1
    e56c:	e5912000 	ldr	r2, [r1]
    e570:	e2822001 	add	r2, r2, #1
    e574:	e5812000 	str	r2, [r1]
    e578:	eaffff79 	b	e364 <run_end_to_end_msg_test+0x150>
			EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e57c:	e59f2694 	ldr	r2, [pc, #1684]	; ec18 <run_end_to_end_msg_test+0xa04>
    e580:	e300356e 	movw	r3, #1390	; 0x56e
    e584:	e59f1690 	ldr	r1, [pc, #1680]	; ec1c <run_end_to_end_msg_test+0xa08>
    e588:	e3a05000 	mov	r5, #0
    e58c:	e08f2002 	add	r2, pc, r2
    e590:	e58d2000 	str	r2, [sp]
    e594:	e59f2684 	ldr	r2, [pc, #1668]	; ec20 <run_end_to_end_msg_test+0xa0c>
    e598:	e08f1001 	add	r1, pc, r1
    e59c:	e58d0008 	str	r0, [sp, #8]
    e5a0:	e2880028 	add	r0, r8, #40	; 0x28
    e5a4:	e08f2002 	add	r2, pc, r2
    e5a8:	e58d5004 	str	r5, [sp, #4]
    e5ac:	eb0017e9 	bl	14558 <fprintf>
    e5b0:	e59f266c 	ldr	r2, [pc, #1644]	; ec24 <run_end_to_end_msg_test+0xa10>
		while (tx_cnt) {
    e5b4:	e2577001 	subs	r7, r7, #1
			EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e5b8:	e08f2002 	add	r2, pc, r2
    e5bc:	e5923000 	ldr	r3, [r2]
    e5c0:	e2833001 	add	r3, r3, #1
    e5c4:	e5823000 	str	r3, [r2]
		while (tx_cnt) {
    e5c8:	1affffb3 	bne	e49c <run_end_to_end_msg_test+0x288>
				EXPECT_EQ(64, rc, "sending msg to echo");
    e5cc:	e59f9654 	ldr	r9, [pc, #1620]	; ec28 <run_end_to_end_msg_test+0xa14>
		rx_cnt = tx_cnt = 10000;
    e5d0:	e3022710 	movw	r2, #10000	; 0x2710
			EXPECT_EQ (NO_ERROR, rc, "waiting for reply");
    e5d4:	e59f7650 	ldr	r7, [pc, #1616]	; ec2c <run_end_to_end_msg_test+0xa18>
				EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    e5d8:	e59f6650 	ldr	r6, [pc, #1616]	; ec30 <run_end_to_end_msg_test+0xa1c>
				EXPECT_EQ(64, rc, "sending msg to echo");
    e5dc:	e08f9009 	add	r9, pc, r9
			EXPECT_EQ (NO_ERROR, rc, "waiting for reply");
    e5e0:	e59f164c 	ldr	r1, [pc, #1612]	; ec34 <run_end_to_end_msg_test+0xa20>
    e5e4:	e08f7007 	add	r7, pc, r7
    e5e8:	e58da018 	str	sl, [sp, #24]
				EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    e5ec:	e08f6006 	add	r6, pc, r6
    e5f0:	e58d7024 	str	r7, [sp, #36]	; 0x24
    e5f4:	e1a0a002 	mov	sl, r2
    e5f8:	e1a07002 	mov	r7, r2
			EXPECT_EQ (NO_ERROR, rc, "waiting for reply");
    e5fc:	e08f1001 	add	r1, pc, r1
    e600:	e58d102c 	str	r1, [sp, #44]	; 0x2c
			while (tx_cnt) {
    e604:	e3570000 	cmp	r7, #0
    e608:	0a000068 	beq	e7b0 <run_end_to_end_msg_test+0x59c>
				rc = send_msg(chan, &tx_msg);
    e60c:	e1a0100b 	mov	r1, fp
    e610:	e1a00004 	mov	r0, r4
    e614:	eb001290 	bl	1305c <send_msg>
				if (rc == ERR_NOT_ENOUGH_BUFFER)
    e618:	e3700009 	cmn	r0, #9
    e61c:	0a000064 	beq	e7b4 <run_end_to_end_msg_test+0x5a0>
				EXPECT_EQ(64, rc, "sending msg to echo");
    e620:	e5993000 	ldr	r3, [r9]
    e624:	e3500040 	cmp	r0, #64	; 0x40
    e628:	e2833001 	add	r3, r3, #1
    e62c:	e5893000 	str	r3, [r9]
    e630:	0a00005c 	beq	e7a8 <run_end_to_end_msg_test+0x594>
    e634:	e59f25fc 	ldr	r2, [pc, #1532]	; ec38 <run_end_to_end_msg_test+0xa24>
    e638:	e3a01040 	mov	r1, #64	; 0x40
    e63c:	e58d1004 	str	r1, [sp, #4]
    e640:	e300357c 	movw	r3, #1404	; 0x57c
    e644:	e08f2002 	add	r2, pc, r2
    e648:	e59f15ec 	ldr	r1, [pc, #1516]	; ec3c <run_end_to_end_msg_test+0xa28>
    e64c:	e58d2000 	str	r2, [sp]
    e650:	e1a05007 	mov	r5, r7
    e654:	e59f25e4 	ldr	r2, [pc, #1508]	; ec40 <run_end_to_end_msg_test+0xa2c>
    e658:	e08f1001 	add	r1, pc, r1
    e65c:	e58d0008 	str	r0, [sp, #8]
    e660:	e2880028 	add	r0, r8, #40	; 0x28
    e664:	e08f2002 	add	r2, pc, r2
    e668:	e1a0600a 	mov	r6, sl
    e66c:	eb0017b9 	bl	14558 <fprintf>
    e670:	e59f25cc 	ldr	r2, [pc, #1484]	; ec44 <run_end_to_end_msg_test+0xa30>
		EXPECT_EQ (0, tx_cnt, "tx_cnt");
    e674:	e5993000 	ldr	r3, [r9]
				EXPECT_EQ(64, rc, "sending msg to echo");
    e678:	e08f2002 	add	r2, pc, r2
		EXPECT_EQ (0, tx_cnt, "tx_cnt");
    e67c:	e2833001 	add	r3, r3, #1
    e680:	e5893000 	str	r3, [r9]
				EXPECT_EQ(64, rc, "sending msg to echo");
    e684:	e5923000 	ldr	r3, [r2]
    e688:	e2833001 	add	r3, r3, #1
    e68c:	e5823000 	str	r3, [r2]
		EXPECT_EQ (0, tx_cnt, "tx_cnt");
    e690:	e59f25b0 	ldr	r2, [pc, #1456]	; ec48 <run_end_to_end_msg_test+0xa34>
    e694:	e3a01000 	mov	r1, #0
    e698:	e58d1004 	str	r1, [sp, #4]
    e69c:	e3a03e5a 	mov	r3, #1440	; 0x5a0
    e6a0:	e08f2002 	add	r2, pc, r2
    e6a4:	e59f15a0 	ldr	r1, [pc, #1440]	; ec4c <run_end_to_end_msg_test+0xa38>
    e6a8:	e58d2000 	str	r2, [sp]
    e6ac:	e2880028 	add	r0, r8, #40	; 0x28
    e6b0:	e59f2598 	ldr	r2, [pc, #1432]	; ec50 <run_end_to_end_msg_test+0xa3c>
    e6b4:	e08f1001 	add	r1, pc, r1
    e6b8:	e58d5008 	str	r5, [sp, #8]
    e6bc:	e08f2002 	add	r2, pc, r2
    e6c0:	eb0017a4 	bl	14558 <fprintf>
    e6c4:	e59f1588 	ldr	r1, [pc, #1416]	; ec54 <run_end_to_end_msg_test+0xa40>
    e6c8:	e59f3588 	ldr	r3, [pc, #1416]	; ec58 <run_end_to_end_msg_test+0xa44>
    e6cc:	e08f1001 	add	r1, pc, r1
    e6d0:	e08f3003 	add	r3, pc, r3
    e6d4:	e5912000 	ldr	r2, [r1]
    e6d8:	e5933000 	ldr	r3, [r3]
    e6dc:	e2822001 	add	r2, r2, #1
    e6e0:	e5812000 	str	r2, [r1]
		EXPECT_EQ (0, rx_cnt, "rx_cnt");
    e6e4:	e59f5570 	ldr	r5, [pc, #1392]	; ec5c <run_end_to_end_msg_test+0xa48>
    e6e8:	e3560000 	cmp	r6, #0
    e6ec:	e2833001 	add	r3, r3, #1
		rc = close(chan);
    e6f0:	01a00004 	moveq	r0, r4
		EXPECT_EQ (0, rx_cnt, "rx_cnt");
    e6f4:	e08f5005 	add	r5, pc, r5
    e6f8:	e5853000 	str	r3, [r5]
    e6fc:	1a0000da 	bne	ea6c <run_end_to_end_msg_test+0x858>
		rc = close(chan);
    e700:	eb001240 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close channel");
    e704:	e5953000 	ldr	r3, [r5]
    e708:	e3500000 	cmp	r0, #0
    e70c:	e2833001 	add	r3, r3, #1
    e710:	e5853000 	str	r3, [r5]
    e714:	1a0000e8 	bne	eabc <run_end_to_end_msg_test+0x8a8>
	TEST_END
    e718:	e59f3540 	ldr	r3, [pc, #1344]	; ec60 <run_end_to_end_msg_test+0xa4c>
    e71c:	e2880028 	add	r0, r8, #40	; 0x28
    e720:	e59f253c 	ldr	r2, [pc, #1340]	; ec64 <run_end_to_end_msg_test+0xa50>
    e724:	e59f153c 	ldr	r1, [pc, #1340]	; ec68 <run_end_to_end_msg_test+0xa54>
    e728:	e08f3003 	add	r3, pc, r3
    e72c:	e08f2002 	add	r2, pc, r2
    e730:	e58d3000 	str	r3, [sp]
    e734:	e08f1001 	add	r1, pc, r1
    e738:	e30035a7 	movw	r3, #1447	; 0x5a7
    e73c:	eb001785 	bl	14558 <fprintf>
}
    e740:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    e744:	e59d2134 	ldr	r2, [sp, #308]	; 0x134
    e748:	e5933000 	ldr	r3, [r3]
    e74c:	e1520003 	cmp	r2, r3
    e750:	1a000110 	bne	eb98 <run_end_to_end_msg_test+0x984>
    e754:	e28ddf4f 	add	sp, sp, #316	; 0x13c
    e758:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
			EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    e75c:	e59f2508 	ldr	r2, [pc, #1288]	; ec6c <run_end_to_end_msg_test+0xa58>
    e760:	e3003566 	movw	r3, #1382	; 0x566
    e764:	e59f1504 	ldr	r1, [pc, #1284]	; ec70 <run_end_to_end_msg_test+0xa5c>
    e768:	e3a05000 	mov	r5, #0
    e76c:	e08f2002 	add	r2, pc, r2
    e770:	e58d2000 	str	r2, [sp]
    e774:	e59f24f8 	ldr	r2, [pc, #1272]	; ec74 <run_end_to_end_msg_test+0xa60>
    e778:	e08f1001 	add	r1, pc, r1
    e77c:	e58d0008 	str	r0, [sp, #8]
    e780:	e2880028 	add	r0, r8, #40	; 0x28
    e784:	e08f2002 	add	r2, pc, r2
    e788:	e58d5004 	str	r5, [sp, #4]
    e78c:	eb001771 	bl	14558 <fprintf>
    e790:	e59f24e0 	ldr	r2, [pc, #1248]	; ec78 <run_end_to_end_msg_test+0xa64>
    e794:	e08f2002 	add	r2, pc, r2
    e798:	e5923000 	ldr	r3, [r2]
    e79c:	e2833001 	add	r3, r3, #1
    e7a0:	e5823000 	str	r3, [r2]
    e7a4:	eaffff11 	b	e3f0 <run_end_to_end_msg_test+0x1dc>
			while (tx_cnt) {
    e7a8:	e2577001 	subs	r7, r7, #1
    e7ac:	1affff96 	bne	e60c <run_end_to_end_msg_test+0x3f8>
			EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e7b0:	e3a07000 	mov	r7, #0
			rc = wait(chan, &uevt, 1000);
    e7b4:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    e7b8:	e59d1014 	ldr	r1, [sp, #20]
    e7bc:	e1a00004 	mov	r0, r4
    e7c0:	eb001216 	bl	13020 <wait>
			EXPECT_EQ (NO_ERROR, rc, "waiting for reply");
    e7c4:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    e7c8:	e3500000 	cmp	r0, #0
    e7cc:	e5923000 	ldr	r3, [r2]
    e7d0:	e2833001 	add	r3, r3, #1
    e7d4:	e5823000 	str	r3, [r2]
    e7d8:	1a0000ca 	bne	eb08 <run_end_to_end_msg_test+0x8f4>
			EXPECT_EQ (chan, uevt.handle, "wait on channel");
    e7dc:	e59f1498 	ldr	r1, [pc, #1176]	; ec7c <run_end_to_end_msg_test+0xa68>
    e7e0:	e2833001 	add	r3, r3, #1
    e7e4:	e59d2048 	ldr	r2, [sp, #72]	; 0x48
    e7e8:	e08f1001 	add	r1, pc, r1
    e7ec:	e1540002 	cmp	r4, r2
    e7f0:	e5813000 	str	r3, [r1]
    e7f4:	0a000014 	beq	e84c <run_end_to_end_msg_test+0x638>
    e7f8:	e59f1480 	ldr	r1, [pc, #1152]	; ec80 <run_end_to_end_msg_test+0xa6c>
    e7fc:	e3003585 	movw	r3, #1413	; 0x585
    e800:	e58d2008 	str	r2, [sp, #8]
    e804:	e2880028 	add	r0, r8, #40	; 0x28
    e808:	e08f1001 	add	r1, pc, r1
    e80c:	e59f2470 	ldr	r2, [pc, #1136]	; ec84 <run_end_to_end_msg_test+0xa70>
    e810:	e58d1000 	str	r1, [sp]
    e814:	e59f146c 	ldr	r1, [pc, #1132]	; ec88 <run_end_to_end_msg_test+0xa74>
    e818:	e08f2002 	add	r2, pc, r2
    e81c:	e58d4004 	str	r4, [sp, #4]
    e820:	e08f1001 	add	r1, pc, r1
    e824:	eb00174b 	bl	14558 <fprintf>
    e828:	e59f245c 	ldr	r2, [pc, #1116]	; ec8c <run_end_to_end_msg_test+0xa78>
			while (rx_cnt) {
    e82c:	e35a0000 	cmp	sl, #0
			EXPECT_EQ (chan, uevt.handle, "wait on channel");
    e830:	e08f2002 	add	r2, pc, r2
    e834:	e5923000 	ldr	r3, [r2]
    e838:	e2833001 	add	r3, r3, #1
    e83c:	e5823000 	str	r3, [r2]
			while (rx_cnt) {
    e840:	0a00006e 	beq	ea00 <run_end_to_end_msg_test+0x7ec>
			EXPECT_EQ (chan, uevt.handle, "wait on channel");
    e844:	e3a05000 	mov	r5, #0
    e848:	ea000001 	b	e854 <run_end_to_end_msg_test+0x640>
			while (rx_cnt) {
    e84c:	e35a0000 	cmp	sl, #0
    e850:	0a00003b 	beq	e944 <run_end_to_end_msg_test+0x730>
				EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    e854:	e59f3434 	ldr	r3, [pc, #1076]	; ec90 <run_end_to_end_msg_test+0xa7c>
    e858:	e08f3003 	add	r3, pc, r3
    e85c:	e58d301c 	str	r3, [sp, #28]
    e860:	e59f342c 	ldr	r3, [pc, #1068]	; ec94 <run_end_to_end_msg_test+0xa80>
    e864:	e08f3003 	add	r3, pc, r3
    e868:	e58d3020 	str	r3, [sp, #32]
				rc = get_msg(chan, &inf);
    e86c:	e59d1018 	ldr	r1, [sp, #24]
    e870:	e1a00004 	mov	r0, r4
    e874:	eb0011ef 	bl	13038 <get_msg>
				if (rc == ERR_NO_MSG)
    e878:	e3700004 	cmn	r0, #4
    e87c:	0a000030 	beq	e944 <run_end_to_end_msg_test+0x730>
				EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    e880:	e5963000 	ldr	r3, [r6]
    e884:	e3500000 	cmp	r0, #0
    e888:	e2833001 	add	r3, r3, #1
    e88c:	e5863000 	str	r3, [r6]
    e890:	1a000064 	bne	ea28 <run_end_to_end_msg_test+0x814>
				rc = read_msg(chan, inf.id, 0, &rx_msg);
    e894:	e59d3010 	ldr	r3, [sp, #16]
    e898:	e3a02000 	mov	r2, #0
    e89c:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    e8a0:	e1a00004 	mov	r0, r4
    e8a4:	eb0011e6 	bl	13044 <read_msg>
				EXPECT_EQ (64, rc, "reading echo msg");
    e8a8:	e59f23e8 	ldr	r2, [pc, #1000]	; ec98 <run_end_to_end_msg_test+0xa84>
    e8ac:	e3500040 	cmp	r0, #64	; 0x40
    e8b0:	e08f2002 	add	r2, pc, r2
    e8b4:	e5923000 	ldr	r3, [r2]
    e8b8:	e2833001 	add	r3, r3, #1
    e8bc:	e5823000 	str	r3, [r2]
    e8c0:	0a000012 	beq	e910 <run_end_to_end_msg_test+0x6fc>
    e8c4:	e59f23d0 	ldr	r2, [pc, #976]	; ec9c <run_end_to_end_msg_test+0xa88>
    e8c8:	e3a01040 	mov	r1, #64	; 0x40
    e8cc:	e58d1004 	str	r1, [sp, #4]
    e8d0:	e3003592 	movw	r3, #1426	; 0x592
    e8d4:	e08f2002 	add	r2, pc, r2
    e8d8:	e59f13c0 	ldr	r1, [pc, #960]	; eca0 <run_end_to_end_msg_test+0xa8c>
    e8dc:	e58d2000 	str	r2, [sp]
    e8e0:	e3a05000 	mov	r5, #0
    e8e4:	e59f23b8 	ldr	r2, [pc, #952]	; eca4 <run_end_to_end_msg_test+0xa90>
    e8e8:	e08f1001 	add	r1, pc, r1
    e8ec:	e58d0008 	str	r0, [sp, #8]
    e8f0:	e2880028 	add	r0, r8, #40	; 0x28
    e8f4:	e08f2002 	add	r2, pc, r2
    e8f8:	eb001716 	bl	14558 <fprintf>
    e8fc:	e59f23a4 	ldr	r2, [pc, #932]	; eca8 <run_end_to_end_msg_test+0xa94>
    e900:	e08f2002 	add	r2, pc, r2
    e904:	e5923000 	ldr	r3, [r2]
    e908:	e2833001 	add	r3, r3, #1
    e90c:	e5823000 	str	r3, [r2]
				rc = put_msg(chan, inf.id);
    e910:	e59d1034 	ldr	r1, [sp, #52]	; 0x34
    e914:	e1a00004 	mov	r0, r4
    e918:	eb0011cc 	bl	13050 <put_msg>
				EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e91c:	e59f2388 	ldr	r2, [pc, #904]	; ecac <run_end_to_end_msg_test+0xa98>
    e920:	e24aa001 	sub	sl, sl, #1
    e924:	e3500000 	cmp	r0, #0
    e928:	e08f2002 	add	r2, pc, r2
    e92c:	e5923000 	ldr	r3, [r2]
    e930:	e2833001 	add	r3, r3, #1
    e934:	e5823000 	str	r3, [r2]
    e938:	1a00001c 	bne	e9b0 <run_end_to_end_msg_test+0x79c>
			while (rx_cnt) {
    e93c:	e35a0000 	cmp	sl, #0
    e940:	1affffc9 	bne	e86c <run_end_to_end_msg_test+0x658>
			if (!_all_ok)
    e944:	e3550000 	cmp	r5, #0
    e948:	0a00002c 	beq	ea00 <run_end_to_end_msg_test+0x7ec>
		while (tx_cnt || rx_cnt) {
    e94c:	e197300a 	orrs	r3, r7, sl
    e950:	1affff2b 	bne	e604 <run_end_to_end_msg_test+0x3f0>
		EXPECT_EQ (0, rx_cnt, "rx_cnt");
    e954:	e59f5354 	ldr	r5, [pc, #852]	; ecb0 <run_end_to_end_msg_test+0xa9c>
		rc = close(chan);
    e958:	e1a00004 	mov	r0, r4
		EXPECT_EQ (0, rx_cnt, "rx_cnt");
    e95c:	e08f5005 	add	r5, pc, r5
    e960:	e5953000 	ldr	r3, [r5]
    e964:	e2833002 	add	r3, r3, #2
    e968:	e5853000 	str	r3, [r5]
		rc = close(chan);
    e96c:	eb0011a5 	bl	13008 <close>
		EXPECT_EQ (NO_ERROR, rc, "close channel");
    e970:	e5953000 	ldr	r3, [r5]
    e974:	e3500000 	cmp	r0, #0
    e978:	e2833001 	add	r3, r3, #1
    e97c:	e5853000 	str	r3, [r5]
    e980:	1a00004d 	bne	eabc <run_end_to_end_msg_test+0x8a8>
	TEST_END
    e984:	e59f3328 	ldr	r3, [pc, #808]	; ecb4 <run_end_to_end_msg_test+0xaa0>
    e988:	e2880028 	add	r0, r8, #40	; 0x28
    e98c:	e59f2324 	ldr	r2, [pc, #804]	; ecb8 <run_end_to_end_msg_test+0xaa4>
    e990:	e59f1324 	ldr	r1, [pc, #804]	; ecbc <run_end_to_end_msg_test+0xaa8>
    e994:	e08f3003 	add	r3, pc, r3
    e998:	e08f2002 	add	r2, pc, r2
    e99c:	e58d3000 	str	r3, [sp]
    e9a0:	e08f1001 	add	r1, pc, r1
    e9a4:	e30035a7 	movw	r3, #1447	; 0x5a7
    e9a8:	eb0016ea 	bl	14558 <fprintf>
    e9ac:	eaffff63 	b	e740 <run_end_to_end_msg_test+0x52c>
				EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e9b0:	e59f2308 	ldr	r2, [pc, #776]	; ecc0 <run_end_to_end_msg_test+0xaac>
    e9b4:	e3a05000 	mov	r5, #0
    e9b8:	e59f1304 	ldr	r1, [pc, #772]	; ecc4 <run_end_to_end_msg_test+0xab0>
    e9bc:	e3003596 	movw	r3, #1430	; 0x596
    e9c0:	e08f2002 	add	r2, pc, r2
    e9c4:	e58d2000 	str	r2, [sp]
    e9c8:	e59f22f8 	ldr	r2, [pc, #760]	; ecc8 <run_end_to_end_msg_test+0xab4>
    e9cc:	e08f1001 	add	r1, pc, r1
    e9d0:	e58d0008 	str	r0, [sp, #8]
    e9d4:	e2880028 	add	r0, r8, #40	; 0x28
    e9d8:	e08f2002 	add	r2, pc, r2
    e9dc:	e58d5004 	str	r5, [sp, #4]
    e9e0:	eb0016dc 	bl	14558 <fprintf>
    e9e4:	e59f22e0 	ldr	r2, [pc, #736]	; eccc <run_end_to_end_msg_test+0xab8>
			while (rx_cnt) {
    e9e8:	e15a0005 	cmp	sl, r5
				EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
    e9ec:	e08f2002 	add	r2, pc, r2
    e9f0:	e5923000 	ldr	r3, [r2]
    e9f4:	e2833001 	add	r3, r3, #1
    e9f8:	e5823000 	str	r3, [r2]
			while (rx_cnt) {
    e9fc:	1affff9a 	bne	e86c <run_end_to_end_msg_test+0x658>
		EXPECT_EQ (0, tx_cnt, "tx_cnt");
    ea00:	e59f22c8 	ldr	r2, [pc, #712]	; ecd0 <run_end_to_end_msg_test+0xabc>
    ea04:	e1a05007 	mov	r5, r7
    ea08:	e1a0600a 	mov	r6, sl
    ea0c:	e3570000 	cmp	r7, #0
    ea10:	e08f2002 	add	r2, pc, r2
    ea14:	e5923000 	ldr	r3, [r2]
    ea18:	e2833001 	add	r3, r3, #1
    ea1c:	e5823000 	str	r3, [r2]
    ea20:	0affff2f 	beq	e6e4 <run_end_to_end_msg_test+0x4d0>
    ea24:	eaffff19 	b	e690 <run_end_to_end_msg_test+0x47c>
				EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    ea28:	e59f22a4 	ldr	r2, [pc, #676]	; ecd4 <run_end_to_end_msg_test+0xac0>
    ea2c:	e300358e 	movw	r3, #1422	; 0x58e
    ea30:	e58d0008 	str	r0, [sp, #8]
    ea34:	e3a05000 	mov	r5, #0
    ea38:	e08f2002 	add	r2, pc, r2
    ea3c:	e58d5004 	str	r5, [sp, #4]
    ea40:	e58d2000 	str	r2, [sp]
    ea44:	e2880028 	add	r0, r8, #40	; 0x28
    ea48:	e59d201c 	ldr	r2, [sp, #28]
    ea4c:	e59d1020 	ldr	r1, [sp, #32]
    ea50:	eb0016c0 	bl	14558 <fprintf>
    ea54:	e59f227c 	ldr	r2, [pc, #636]	; ecd8 <run_end_to_end_msg_test+0xac4>
    ea58:	e08f2002 	add	r2, pc, r2
    ea5c:	e5923000 	ldr	r3, [r2]
    ea60:	e2833001 	add	r3, r3, #1
    ea64:	e5823000 	str	r3, [r2]
    ea68:	eaffff89 	b	e894 <run_end_to_end_msg_test+0x680>
		EXPECT_EQ (0, rx_cnt, "rx_cnt");
    ea6c:	e59f2268 	ldr	r2, [pc, #616]	; ecdc <run_end_to_end_msg_test+0xac8>
    ea70:	e3a01000 	mov	r1, #0
    ea74:	e58d1004 	str	r1, [sp, #4]
    ea78:	e30035a1 	movw	r3, #1441	; 0x5a1
    ea7c:	e08f2002 	add	r2, pc, r2
    ea80:	e59f1258 	ldr	r1, [pc, #600]	; ece0 <run_end_to_end_msg_test+0xacc>
    ea84:	e58d2000 	str	r2, [sp]
    ea88:	e2880028 	add	r0, r8, #40	; 0x28
    ea8c:	e59f2250 	ldr	r2, [pc, #592]	; ece4 <run_end_to_end_msg_test+0xad0>
    ea90:	e08f1001 	add	r1, pc, r1
    ea94:	e58d6008 	str	r6, [sp, #8]
    ea98:	e08f2002 	add	r2, pc, r2
    ea9c:	eb0016ad 	bl	14558 <fprintf>
    eaa0:	e59f2240 	ldr	r2, [pc, #576]	; ece8 <run_end_to_end_msg_test+0xad4>
		rc = close(chan);
    eaa4:	e1a00004 	mov	r0, r4
		EXPECT_EQ (0, rx_cnt, "rx_cnt");
    eaa8:	e08f2002 	add	r2, pc, r2
    eaac:	e5923000 	ldr	r3, [r2]
    eab0:	e2833001 	add	r3, r3, #1
    eab4:	e5823000 	str	r3, [r2]
    eab8:	eaffff10 	b	e700 <run_end_to_end_msg_test+0x4ec>
		EXPECT_EQ (NO_ERROR, rc, "close channel");
    eabc:	e59f2228 	ldr	r2, [pc, #552]	; ecec <run_end_to_end_msg_test+0xad8>
    eac0:	e3a01000 	mov	r1, #0
    eac4:	e58d1004 	str	r1, [sp, #4]
    eac8:	e30035a4 	movw	r3, #1444	; 0x5a4
    eacc:	e08f2002 	add	r2, pc, r2
    ead0:	e59f1218 	ldr	r1, [pc, #536]	; ecf0 <run_end_to_end_msg_test+0xadc>
    ead4:	e58d2000 	str	r2, [sp]
    ead8:	e59f2214 	ldr	r2, [pc, #532]	; ecf4 <run_end_to_end_msg_test+0xae0>
    eadc:	e08f1001 	add	r1, pc, r1
    eae0:	e58d0008 	str	r0, [sp, #8]
    eae4:	e2880028 	add	r0, r8, #40	; 0x28
    eae8:	e08f2002 	add	r2, pc, r2
    eaec:	eb001699 	bl	14558 <fprintf>
    eaf0:	e59f2200 	ldr	r2, [pc, #512]	; ecf8 <run_end_to_end_msg_test+0xae4>
    eaf4:	e08f2002 	add	r2, pc, r2
    eaf8:	e5923000 	ldr	r3, [r2]
    eafc:	e2833001 	add	r3, r3, #1
    eb00:	e5823000 	str	r3, [r2]
    eb04:	eaffff03 	b	e718 <run_end_to_end_msg_test+0x504>
			EXPECT_EQ (NO_ERROR, rc, "waiting for reply");
    eb08:	e59f21ec 	ldr	r2, [pc, #492]	; ecfc <run_end_to_end_msg_test+0xae8>
    eb0c:	e3003584 	movw	r3, #1412	; 0x584
    eb10:	e59f11e8 	ldr	r1, [pc, #488]	; ed00 <run_end_to_end_msg_test+0xaec>
    eb14:	e3a05000 	mov	r5, #0
    eb18:	e08f2002 	add	r2, pc, r2
    eb1c:	e58d0008 	str	r0, [sp, #8]
    eb20:	e58d2000 	str	r2, [sp]
    eb24:	e08f1001 	add	r1, pc, r1
    eb28:	e59d202c 	ldr	r2, [sp, #44]	; 0x2c
    eb2c:	e2880028 	add	r0, r8, #40	; 0x28
    eb30:	e58d5004 	str	r5, [sp, #4]
    eb34:	eb001687 	bl	14558 <fprintf>
    eb38:	e59f11c4 	ldr	r1, [pc, #452]	; ed04 <run_end_to_end_msg_test+0xaf0>
    eb3c:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
    eb40:	e08f1001 	add	r1, pc, r1
    eb44:	e5933000 	ldr	r3, [r3]
    eb48:	e5912000 	ldr	r2, [r1]
    eb4c:	e2822001 	add	r2, r2, #1
    eb50:	e5812000 	str	r2, [r1]
    eb54:	eaffff20 	b	e7dc <run_end_to_end_msg_test+0x5c8>
	EXPECT_GE_ZERO (rc, "connect to echo");
    eb58:	e59f31a8 	ldr	r3, [pc, #424]	; ed08 <run_end_to_end_msg_test+0xaf4>
    eb5c:	e1a02006 	mov	r2, r6
    eb60:	e59f11a4 	ldr	r1, [pc, #420]	; ed0c <run_end_to_end_msg_test+0xaf8>
    eb64:	e1a00007 	mov	r0, r7
    eb68:	e08f3003 	add	r3, pc, r3
    eb6c:	e58d4004 	str	r4, [sp, #4]
    eb70:	e58d3000 	str	r3, [sp]
    eb74:	e08f1001 	add	r1, pc, r1
    eb78:	e300354e 	movw	r3, #1358	; 0x54e
    eb7c:	eb001675 	bl	14558 <fprintf>
    eb80:	e59f2188 	ldr	r2, [pc, #392]	; ed10 <run_end_to_end_msg_test+0xafc>
    eb84:	e08f2002 	add	r2, pc, r2
    eb88:	e5923000 	ldr	r3, [r2]
    eb8c:	e2833001 	add	r3, r3, #1
    eb90:	e5823000 	str	r3, [r2]
    eb94:	eafffedf 	b	e718 <run_end_to_end_msg_test+0x504>
}
    eb98:	eb00168a 	bl	145c8 <__stack_chk_fail>
    eb9c:	00007df4 	.word	0x00007df4
    eba0:	0000000c 	.word	0x0000000c
    eba4:	00000010 	.word	0x00000010
    eba8:	0000762c 	.word	0x0000762c
    ebac:	00006c04 	.word	0x00006c04
    ebb0:	00007620 	.word	0x00007620
    ebb4:	00007dc0 	.word	0x00007dc0
    ebb8:	000073d8 	.word	0x000073d8
    ebbc:	00007590 	.word	0x00007590
    ebc0:	00007188 	.word	0x00007188
    ebc4:	00007520 	.word	0x00007520
    ebc8:	00007390 	.word	0x00007390
    ebcc:	00007d44 	.word	0x00007d44
    ebd0:	000073f4 	.word	0x000073f4
    ebd4:	000074c8 	.word	0x000074c8
    ebd8:	0000739c 	.word	0x0000739c
    ebdc:	00007cf8 	.word	0x00007cf8
    ebe0:	00007cd8 	.word	0x00007cd8
    ebe4:	00007ca8 	.word	0x00007ca8
    ebe8:	00007378 	.word	0x00007378
    ebec:	000072a4 	.word	0x000072a4
    ebf0:	0000741c 	.word	0x0000741c
    ebf4:	00007c54 	.word	0x00007c54
    ebf8:	00007c34 	.word	0x00007c34
    ebfc:	0000724c 	.word	0x0000724c
    ec00:	00007bc0 	.word	0x00007bc0
    ec04:	00007ba4 	.word	0x00007ba4
    ec08:	000071f0 	.word	0x000071f0
    ec0c:	00007450 	.word	0x00007450
    ec10:	00007318 	.word	0x00007318
    ec14:	00007b48 	.word	0x00007b48
    ec18:	00007230 	.word	0x00007230
    ec1c:	00007400 	.word	0x00007400
    ec20:	000072c8 	.word	0x000072c8
    ec24:	00007af8 	.word	0x00007af8
    ec28:	00007ad8 	.word	0x00007ad8
    ec2c:	00007ad0 	.word	0x00007ad0
    ec30:	00007ac8 	.word	0x00007ac8
    ec34:	00007270 	.word	0x00007270
    ec38:	000070d4 	.word	0x000070d4
    ec3c:	00007090 	.word	0x00007090
    ec40:	00007208 	.word	0x00007208
    ec44:	00007a38 	.word	0x00007a38
    ec48:	00007178 	.word	0x00007178
    ec4c:	00007130 	.word	0x00007130
    ec50:	000071b0 	.word	0x000071b0
    ec54:	000079e4 	.word	0x000079e4
    ec58:	000079e4 	.word	0x000079e4
    ec5c:	000079c0 	.word	0x000079c0
    ec60:	0000672c 	.word	0x0000672c
    ec64:	00007140 	.word	0x00007140
    ec68:	0000730c 	.word	0x0000730c
    ec6c:	00007028 	.word	0x00007028
    ec70:	00007220 	.word	0x00007220
    ec74:	000070e8 	.word	0x000070e8
    ec78:	0000791c 	.word	0x0000791c
    ec7c:	000078cc 	.word	0x000078cc
    ec80:	00006f7c 	.word	0x00006f7c
    ec84:	00007054 	.word	0x00007054
    ec88:	00006f28 	.word	0x00006f28
    ec8c:	00007880 	.word	0x00007880
    ec90:	00007014 	.word	0x00007014
    ec94:	00007134 	.word	0x00007134
    ec98:	00007804 	.word	0x00007804
    ec9c:	00006ed4 	.word	0x00006ed4
    eca0:	00006e00 	.word	0x00006e00
    eca4:	00006f78 	.word	0x00006f78
    eca8:	000077b0 	.word	0x000077b0
    ecac:	0000778c 	.word	0x0000778c
    ecb0:	00007758 	.word	0x00007758
    ecb4:	000064c0 	.word	0x000064c0
    ecb8:	00006ed4 	.word	0x00006ed4
    ecbc:	0000708c 	.word	0x0000708c
    ecc0:	00006dfc 	.word	0x00006dfc
    ecc4:	00006fcc 	.word	0x00006fcc
    ecc8:	00006e94 	.word	0x00006e94
    eccc:	000076c4 	.word	0x000076c4
    ecd0:	000076a4 	.word	0x000076a4
    ecd4:	00006d5c 	.word	0x00006d5c
    ecd8:	00007658 	.word	0x00007658
    ecdc:	00006dd8 	.word	0x00006dd8
    ece0:	00006d90 	.word	0x00006d90
    ece4:	00006dd4 	.word	0x00006dd4
    ece8:	00007608 	.word	0x00007608
    ecec:	00006d90 	.word	0x00006d90
    ecf0:	00006ebc 	.word	0x00006ebc
    ecf4:	00006d84 	.word	0x00006d84
    ecf8:	000075bc 	.word	0x000075bc
    ecfc:	00006cb8 	.word	0x00006cb8
    ed00:	00006e74 	.word	0x00006e74
    ed04:	00007570 	.word	0x00007570
    ed08:	00006b70 	.word	0x00006b70
    ed0c:	00006d48 	.word	0x00006d48
    ed10:	0000752c 	.word	0x0000752c
    ed14:	00000000 	.word	0x00000000

0000ed18 <run_connect_close_by_peer_test>:
{
    ed18:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed1c:	e1a0b000 	mov	fp, r0
    ed20:	e59f2368 	ldr	r2, [pc, #872]	; f090 <run_connect_close_by_peer_test+0x378>
    ed24:	e24dd0c4 	sub	sp, sp, #196	; 0xc4
    ed28:	e59f1364 	ldr	r1, [pc, #868]	; f094 <run_connect_close_by_peer_test+0x37c>
    ed2c:	e08f2002 	add	r2, pc, r2
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, test);
    ed30:	e28d507c 	add	r5, sp, #124	; 0x7c
{
    ed34:	e1a00002 	mov	r0, r2
	for (uint i = 0; i  < countof(chans); i++) {
    ed38:	e3a02000 	mov	r2, #0
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, test);
    ed3c:	e58d5024 	str	r5, [sp, #36]	; 0x24
	for (uint i = 0; i  < countof(chans); i++) {
    ed40:	e1a09002 	mov	r9, r2
    ed44:	e58d2020 	str	r2, [sp, #32]
	TEST_BEGIN(__func__);
    ed48:	e30031da 	movw	r3, #474	; 0x1da
    ed4c:	e59fe344 	ldr	lr, [pc, #836]	; f098 <run_connect_close_by_peer_test+0x380>
    ed50:	e3a0a001 	mov	sl, #1
{
    ed54:	e7901001 	ldr	r1, [r0, r1]
    ed58:	e58d102c 	str	r1, [sp, #44]	; 0x2c
    ed5c:	e1a04001 	mov	r4, r1
	TEST_BEGIN(__func__);
    ed60:	e59fc334 	ldr	ip, [pc, #820]	; f09c <run_connect_close_by_peer_test+0x384>
    ed64:	e59f2334 	ldr	r2, [pc, #820]	; f0a0 <run_connect_close_by_peer_test+0x388>
    ed68:	e59f1334 	ldr	r1, [pc, #820]	; f0a4 <run_connect_close_by_peer_test+0x38c>
    ed6c:	e08fc00c 	add	ip, pc, ip
{
    ed70:	e5944000 	ldr	r4, [r4]
	TEST_BEGIN(__func__);
    ed74:	e08f2002 	add	r2, pc, r2
{
    ed78:	e58d40bc 	str	r4, [sp, #188]	; 0xbc
    ed7c:	e28d4030 	add	r4, sp, #48	; 0x30
    ed80:	e58d4014 	str	r4, [sp, #20]
	TEST_BEGIN(__func__);
    ed84:	e08f1001 	add	r1, pc, r1
			EXPECT_EQ (IPC_HANDLE_POLL_HUP, event.event, test);
    ed88:	e59f7318 	ldr	r7, [pc, #792]	; f0a8 <run_connect_close_by_peer_test+0x390>
	TEST_BEGIN(__func__);
    ed8c:	e790400e 	ldr	r4, [r0, lr]
    ed90:	e58dc000 	str	ip, [sp]
			EXPECT_EQ (IPC_HANDLE_POLL_HUP, event.event, test);
    ed94:	e08f7007 	add	r7, pc, r7
	TEST_BEGIN(__func__);
    ed98:	e2840028 	add	r0, r4, #40	; 0x28
    ed9c:	e58d4028 	str	r4, [sp, #40]	; 0x28
    eda0:	eb0015ec 	bl	14558 <fprintf>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE, test);
    eda4:	e59f2300 	ldr	r2, [pc, #768]	; f0ac <run_connect_close_by_peer_test+0x394>
    eda8:	e59f1300 	ldr	r1, [pc, #768]	; f0b0 <run_connect_close_by_peer_test+0x398>
    edac:	e1a0300b 	mov	r3, fp
    edb0:	e1a00005 	mov	r0, r5
    edb4:	e08f2002 	add	r2, pc, r2
    edb8:	e08f1001 	add	r1, pc, r1
    edbc:	eb0015bd 	bl	144b8 <sprintf>
			EXPECT_EQ (IPC_HANDLE_POLL_HUP, event.event, test);
    edc0:	e59f32ec 	ldr	r3, [pc, #748]	; f0b4 <run_connect_close_by_peer_test+0x39c>
    edc4:	e58da010 	str	sl, [sp, #16]
    edc8:	e1a0a004 	mov	sl, r4
    edcc:	e08f3003 	add	r3, pc, r3
    edd0:	e58d301c 	str	r3, [sp, #28]
    edd4:	e59d6024 	ldr	r6, [sp, #36]	; 0x24
{
    edd8:	e3a0400a 	mov	r4, #10
			rc = sync_connect(path, 2000);
    eddc:	e3a01e7d 	mov	r1, #2000	; 0x7d0
    ede0:	e1a00006 	mov	r0, r6
    ede4:	ebfffa4c 	bl	d71c <sync_connect>
    ede8:	e1a05000 	mov	r5, r0
			if (rc == ERR_NOT_FOUND) {
    edec:	e3700002 	cmn	r0, #2
    edf0:	1a000156 	bne	f350 <run_connect_close_by_peer_test+0x638>
				nanosleep (0, 0, 100 * MSEC);
    edf4:	e3a01000 	mov	r1, #0
    edf8:	e28f3fa2 	add	r3, pc, #648	; 0x288
    edfc:	e1c320d0 	ldrd	r2, [r3]
    ee00:	e1a00001 	mov	r0, r1
    ee04:	eb001073 	bl	12fd8 <nanosleep>
		while (retry_cnt) {
    ee08:	e2544001 	subs	r4, r4, #1
    ee0c:	1afffff2 	bne	eddc <run_connect_close_by_peer_test+0xc4>
		EXPECT_GT_ZERO (retry_cnt, test);
    ee10:	e59f62a0 	ldr	r6, [pc, #672]	; f0b8 <run_connect_close_by_peer_test+0x3a0>
    ee14:	e3a03e1f 	mov	r3, #496	; 0x1f0
    ee18:	e58d4004 	str	r4, [sp, #4]
    ee1c:	e28a0028 	add	r0, sl, #40	; 0x28
    ee20:	e08f6006 	add	r6, pc, r6
    ee24:	e58db000 	str	fp, [sp]
    ee28:	e59f228c 	ldr	r2, [pc, #652]	; f0bc <run_connect_close_by_peer_test+0x3a4>
    ee2c:	e59f128c 	ldr	r1, [pc, #652]	; f0c0 <run_connect_close_by_peer_test+0x3a8>
    ee30:	e596c000 	ldr	ip, [r6]
    ee34:	e08f2002 	add	r2, pc, r2
    ee38:	e08f1001 	add	r1, pc, r1
    ee3c:	e28cc001 	add	ip, ip, #1
    ee40:	e586c000 	str	ip, [r6]
    ee44:	eb0015c3 	bl	14558 <fprintf>
    ee48:	e59f2274 	ldr	r2, [pc, #628]	; f0c4 <run_connect_close_by_peer_test+0x3ac>
			EXPECT_EQ (ERR_CHANNEL_CLOSED, rc, test);
    ee4c:	e5963000 	ldr	r3, [r6]
		EXPECT_GT_ZERO (retry_cnt, test);
    ee50:	e08f2002 	add	r2, pc, r2
			EXPECT_EQ (ERR_CHANNEL_CLOSED, rc, test);
    ee54:	e2833001 	add	r3, r3, #1
    ee58:	e5863000 	str	r3, [r6]
		EXPECT_GT_ZERO (retry_cnt, test);
    ee5c:	e5923000 	ldr	r3, [r2]
    ee60:	e2833001 	add	r3, r3, #1
    ee64:	e5823000 	str	r3, [r2]
			EXPECT_EQ (ERR_CHANNEL_CLOSED, rc, test);
    ee68:	e3e0200e 	mvn	r2, #14
    ee6c:	e3a01000 	mov	r1, #0
    ee70:	e58d2004 	str	r2, [sp, #4]
    ee74:	e3a03f81 	mov	r3, #516	; 0x204
    ee78:	e58d1010 	str	r1, [sp, #16]
    ee7c:	e28a0028 	add	r0, sl, #40	; 0x28
    ee80:	e59f2240 	ldr	r2, [pc, #576]	; f0c8 <run_connect_close_by_peer_test+0x3b0>
    ee84:	e59f1240 	ldr	r1, [pc, #576]	; f0cc <run_connect_close_by_peer_test+0x3b4>
    ee88:	e08f2002 	add	r2, pc, r2
    ee8c:	e58d5008 	str	r5, [sp, #8]
    ee90:	e58db000 	str	fp, [sp]
    ee94:	e08f1001 	add	r1, pc, r1
    ee98:	eb0015ae 	bl	14558 <fprintf>
    ee9c:	e59f222c 	ldr	r2, [pc, #556]	; f0d0 <run_connect_close_by_peer_test+0x3b8>
    eea0:	e08f2002 	add	r2, pc, r2
    eea4:	e5923000 	ldr	r3, [r2]
    eea8:	e2833001 	add	r3, r3, #1
    eeac:	e5823000 	str	r3, [r2]
			EXPECT_EQ (IPC_HANDLE_POLL_HUP, event.event, test);
    eeb0:	e59f321c 	ldr	r3, [pc, #540]	; f0d4 <run_connect_close_by_peer_test+0x3bc>
    eeb4:	e08f3003 	add	r3, pc, r3
    eeb8:	e58d3018 	str	r3, [sp, #24]
    eebc:	ea00000b 	b	eef0 <run_connect_close_by_peer_test+0x1d8>
				rc = close(chans[idx]);
    eec0:	e1a00005 	mov	r0, r5
    eec4:	eb00104f 	bl	13008 <close>
				EXPECT_EQ (NO_ERROR, rc, test);
    eec8:	e5983000 	ldr	r3, [r8]
    eecc:	e3500000 	cmp	r0, #0
    eed0:	e2833001 	add	r3, r3, #1
    eed4:	e5883000 	str	r3, [r8]
    eed8:	1a00010a 	bne	f308 <run_connect_close_by_peer_test+0x5f0>
				chans[idx] = INVALID_IPC_HANDLE;
    eedc:	e28d30c0 	add	r3, sp, #192	; 0xc0
    eee0:	e0836006 	add	r6, r3, r6
    eee4:	e3e03000 	mvn	r3, #0
    eee8:	e5063084 	str	r3, [r6, #-132]	; 0xffffff7c
			chan_cnt--;
    eeec:	e2499001 	sub	r9, r9, #1
		while ((rc = wait_any(&event, 0)) == NO_ERROR) {
    eef0:	e3a01000 	mov	r1, #0
    eef4:	e59d0014 	ldr	r0, [sp, #20]
    eef8:	eb00104b 	bl	1302c <wait_any>
    eefc:	e2504000 	subs	r4, r0, #0
    ef00:	1a00004d 	bne	f03c <run_connect_close_by_peer_test+0x324>
			EXPECT_EQ (IPC_HANDLE_POLL_HUP, event.event, test);
    ef04:	e5973000 	ldr	r3, [r7]
    ef08:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    ef0c:	e2833001 	add	r3, r3, #1
    ef10:	e5873000 	str	r3, [r7]
    ef14:	e3520004 	cmp	r2, #4
    ef18:	0a00000f 	beq	ef5c <run_connect_close_by_peer_test+0x244>
    ef1c:	e58d2008 	str	r2, [sp, #8]
    ef20:	e3003209 	movw	r3, #521	; 0x209
    ef24:	e3a02004 	mov	r2, #4
    ef28:	e59d1018 	ldr	r1, [sp, #24]
    ef2c:	e58d2004 	str	r2, [sp, #4]
    ef30:	e28a0028 	add	r0, sl, #40	; 0x28
    ef34:	e59d201c 	ldr	r2, [sp, #28]
    ef38:	e58db000 	str	fp, [sp]
    ef3c:	eb001585 	bl	14558 <fprintf>
    ef40:	e59f1190 	ldr	r1, [pc, #400]	; f0d8 <run_connect_close_by_peer_test+0x3c0>
    ef44:	e5973000 	ldr	r3, [r7]
    ef48:	e08f1001 	add	r1, pc, r1
    ef4c:	e58d4010 	str	r4, [sp, #16]
    ef50:	e5912000 	ldr	r2, [r1]
    ef54:	e2822001 	add	r2, r2, #1
    ef58:	e5812000 	str	r2, [r1]
			uint idx = (uint) event.cookie - COOKIE_BASE;
    ef5c:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
			EXPECT_EQ (chans[idx], event.handle, test);
    ef60:	e28d10c0 	add	r1, sp, #192	; 0xc0
    ef64:	e59f8170 	ldr	r8, [pc, #368]	; f0dc <run_connect_close_by_peer_test+0x3c4>
    ef68:	e2833001 	add	r3, r3, #1
			uint idx = (uint) event.cookie - COOKIE_BASE;
    ef6c:	e2444064 	sub	r4, r4, #100	; 0x64
			EXPECT_EQ (chans[idx], event.handle, test);
    ef70:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    ef74:	e08f8008 	add	r8, pc, r8
    ef78:	e1a06104 	lsl	r6, r4, #2
    ef7c:	e0811006 	add	r1, r1, r6
    ef80:	e5883000 	str	r3, [r8]
    ef84:	e5115084 	ldr	r5, [r1, #-132]	; 0xffffff7c
    ef88:	e1550002 	cmp	r5, r2
    ef8c:	0a000011 	beq	efd8 <run_connect_close_by_peer_test+0x2c0>
    ef90:	e58d2008 	str	r2, [sp, #8]
    ef94:	e3a02000 	mov	r2, #0
    ef98:	e59f1140 	ldr	r1, [pc, #320]	; f0e0 <run_connect_close_by_peer_test+0x3c8>
    ef9c:	e300320b 	movw	r3, #523	; 0x20b
    efa0:	e58d2010 	str	r2, [sp, #16]
    efa4:	e28a0028 	add	r0, sl, #40	; 0x28
    efa8:	e59f2134 	ldr	r2, [pc, #308]	; f0e4 <run_connect_close_by_peer_test+0x3cc>
    efac:	e08f1001 	add	r1, pc, r1
    efb0:	e58d5004 	str	r5, [sp, #4]
    efb4:	e08f2002 	add	r2, pc, r2
    efb8:	e58db000 	str	fp, [sp]
    efbc:	eb001565 	bl	14558 <fprintf>
    efc0:	e59f1120 	ldr	r1, [pc, #288]	; f0e8 <run_connect_close_by_peer_test+0x3d0>
    efc4:	e5983000 	ldr	r3, [r8]
    efc8:	e08f1001 	add	r1, pc, r1
    efcc:	e5912000 	ldr	r2, [r1]
    efd0:	e2822001 	add	r2, r2, #1
    efd4:	e5812000 	str	r2, [r1]
			EXPECT_GT (countof(chans), idx, test);
    efd8:	e59f810c 	ldr	r8, [pc, #268]	; f0ec <run_connect_close_by_peer_test+0x3d4>
    efdc:	e2833001 	add	r3, r3, #1
    efe0:	e354000f 	cmp	r4, #15
    efe4:	e08f8008 	add	r8, pc, r8
    efe8:	e5883000 	str	r3, [r8]
    efec:	9affffb3 	bls	eec0 <run_connect_close_by_peer_test+0x1a8>
    eff0:	e3a02010 	mov	r2, #16
    eff4:	e3a01000 	mov	r1, #0
    eff8:	e58d2004 	str	r2, [sp, #4]
    effc:	e3a03f83 	mov	r3, #524	; 0x20c
    f000:	e58d1010 	str	r1, [sp, #16]
    f004:	e28a0028 	add	r0, sl, #40	; 0x28
    f008:	e59f20e0 	ldr	r2, [pc, #224]	; f0f0 <run_connect_close_by_peer_test+0x3d8>
    f00c:	e59f10e0 	ldr	r1, [pc, #224]	; f0f4 <run_connect_close_by_peer_test+0x3dc>
    f010:	e08f2002 	add	r2, pc, r2
    f014:	e58d4008 	str	r4, [sp, #8]
    f018:	e58db000 	str	fp, [sp]
    f01c:	e08f1001 	add	r1, pc, r1
    f020:	eb00154c 	bl	14558 <fprintf>
    f024:	e59f20cc 	ldr	r2, [pc, #204]	; f0f8 <run_connect_close_by_peer_test+0x3e0>
    f028:	e08f2002 	add	r2, pc, r2
    f02c:	e5923000 	ldr	r3, [r2]
    f030:	e2833001 	add	r3, r3, #1
    f034:	e5823000 	str	r3, [r2]
    f038:	eaffffab 	b	eeec <run_connect_close_by_peer_test+0x1d4>
	for (uint i = 0; i  < countof(chans); i++) {
    f03c:	e59d3020 	ldr	r3, [sp, #32]
    f040:	e2833001 	add	r3, r3, #1
    f044:	e58d3020 	str	r3, [sp, #32]
    f048:	e3530010 	cmp	r3, #16
    f04c:	1affff60 	bne	edd4 <run_connect_close_by_peer_test+0xbc>
    f050:	e59da010 	ldr	sl, [sp, #16]
	while (chan_cnt) {
    f054:	e3590000 	cmp	r9, #0
    f058:	0a000100 	beq	f460 <run_connect_close_by_peer_test+0x748>
		EXPECT_EQ (NO_ERROR, rc, test);
    f05c:	e59f3098 	ldr	r3, [pc, #152]	; f0fc <run_connect_close_by_peer_test+0x3e4>
    f060:	e59f6098 	ldr	r6, [pc, #152]	; f100 <run_connect_close_by_peer_test+0x3e8>
    f064:	e08f3003 	add	r3, pc, r3
    f068:	e58d3010 	str	r3, [sp, #16]
    f06c:	e59f3090 	ldr	r3, [pc, #144]	; f104 <run_connect_close_by_peer_test+0x3ec>
    f070:	e08f6006 	add	r6, pc, r6
    f074:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
    f078:	e08f3003 	add	r3, pc, r3
    f07c:	e58d3018 	str	r3, [sp, #24]
    f080:	ea000088 	b	f2a8 <run_connect_close_by_peer_test+0x590>
    f084:	e320f000 	nop	{0}
    f088:	05f5e100 	.word	0x05f5e100
    f08c:	00000000 	.word	0x00000000
    f090:	000072e8 	.word	0x000072e8
    f094:	0000000c 	.word	0x0000000c
    f098:	00000010 	.word	0x00000010
    f09c:	00005fd0 	.word	0x00005fd0
    f0a0:	00006af8 	.word	0x00006af8
    f0a4:	00006afc 	.word	0x00006afc
    f0a8:	00007320 	.word	0x00007320
    f0ac:	00006adc 	.word	0x00006adc
    f0b0:	000066d4 	.word	0x000066d4
    f0b4:	00006aa0 	.word	0x00006aa0
    f0b8:	00007294 	.word	0x00007294
    f0bc:	00006a38 	.word	0x00006a38
    f0c0:	00006868 	.word	0x00006868
    f0c4:	00007260 	.word	0x00007260
    f0c8:	000069e4 	.word	0x000069e4
    f0cc:	00006708 	.word	0x00006708
    f0d0:	00007210 	.word	0x00007210
    f0d4:	00006728 	.word	0x00006728
    f0d8:	00007168 	.word	0x00007168
    f0dc:	00007140 	.word	0x00007140
    f0e0:	00006678 	.word	0x00006678
    f0e4:	000068b8 	.word	0x000068b8
    f0e8:	000070e8 	.word	0x000070e8
    f0ec:	000070d0 	.word	0x000070d0
    f0f0:	0000685c 	.word	0x0000685c
    f0f4:	00006648 	.word	0x00006648
    f0f8:	00007088 	.word	0x00007088
    f0fc:	00006808 	.word	0x00006808
    f100:	00007044 	.word	0x00007044
    f104:	00006920 	.word	0x00006920
    f108:	00006f24 	.word	0x00006f24
    f10c:	00006420 	.word	0x00006420
    f110:	000066a4 	.word	0x000066a4
    f114:	00006ed8 	.word	0x00006ed8
    f118:	00006ec0 	.word	0x00006ec0
    f11c:	00006628 	.word	0x00006628
    f120:	000063d4 	.word	0x000063d4
    f124:	00006e54 	.word	0x00006e54
    f128:	00006e38 	.word	0x00006e38
    f12c:	00006dbc 	.word	0x00006dbc
    f130:	0000667c 	.word	0x0000667c
    f134:	00006540 	.word	0x00006540
    f138:	00006d74 	.word	0x00006d74
    f13c:	00006d5c 	.word	0x00006d5c
    f140:	000065e8 	.word	0x000065e8
    f144:	000064ac 	.word	0x000064ac
    f148:	00006ce0 	.word	0x00006ce0
    f14c:	00006474 	.word	0x00006474
    f150:	00006254 	.word	0x00006254
    f154:	00006c88 	.word	0x00006c88
    f158:	00006c4c 	.word	0x00006c4c
    f15c:	000058ac 	.word	0x000058ac
    f160:	000065ac 	.word	0x000065ac
    f164:	000063d0 	.word	0x000063d0
    f168:	00006394 	.word	0x00006394
    f16c:	000064b0 	.word	0x000064b0
    f170:	00006bbc 	.word	0x00006bbc
    f174:	00005820 	.word	0x00005820
    f178:	0000650c 	.word	0x0000650c
    f17c:	00006344 	.word	0x00006344
    f180:	000060d4 	.word	0x000060d4
		EXPECT_EQ (IPC_HANDLE_POLL_HUP, event.event, test);
    f184:	e51f4084 	ldr	r4, [pc, #-132]	; f108 <run_connect_close_by_peer_test+0x3f0>
    f188:	e2833001 	add	r3, r3, #1
    f18c:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    f190:	e08f4004 	add	r4, pc, r4
    f194:	e3520004 	cmp	r2, #4
    f198:	e5843000 	str	r3, [r4]
    f19c:	0a000011 	beq	f1e8 <run_connect_close_by_peer_test+0x4d0>
    f1a0:	e58d2008 	str	r2, [sp, #8]
    f1a4:	e3a02004 	mov	r2, #4
    f1a8:	e51f10a4 	ldr	r1, [pc, #-164]	; f10c <run_connect_close_by_peer_test+0x3f4>
    f1ac:	e300321a 	movw	r3, #538	; 0x21a
    f1b0:	e58d2004 	str	r2, [sp, #4]
    f1b4:	e2870028 	add	r0, r7, #40	; 0x28
    f1b8:	e51f20b0 	ldr	r2, [pc, #-176]	; f110 <run_connect_close_by_peer_test+0x3f8>
    f1bc:	e08f1001 	add	r1, pc, r1
    f1c0:	e58db000 	str	fp, [sp]
    f1c4:	e3a0a000 	mov	sl, #0
    f1c8:	e08f2002 	add	r2, pc, r2
    f1cc:	eb0014e1 	bl	14558 <fprintf>
    f1d0:	e51f10c4 	ldr	r1, [pc, #-196]	; f114 <run_connect_close_by_peer_test+0x3fc>
    f1d4:	e5943000 	ldr	r3, [r4]
    f1d8:	e08f1001 	add	r1, pc, r1
    f1dc:	e5912000 	ldr	r2, [r1]
    f1e0:	e2822001 	add	r2, r2, #1
    f1e4:	e5812000 	str	r2, [r1]
		EXPECT_GT (countof(chans), idx, test);
    f1e8:	e51f50d8 	ldr	r5, [pc, #-216]	; f118 <run_connect_close_by_peer_test+0x400>
    f1ec:	e2832001 	add	r2, r3, #1
		uint idx = (uint) event.cookie - COOKIE_BASE;
    f1f0:	e59d4038 	ldr	r4, [sp, #56]	; 0x38
		EXPECT_GT (countof(chans), idx, test);
    f1f4:	e08f5005 	add	r5, pc, r5
		uint idx = (uint) event.cookie - COOKIE_BASE;
    f1f8:	e2444064 	sub	r4, r4, #100	; 0x64
		EXPECT_GT (countof(chans), idx, test);
    f1fc:	e354000f 	cmp	r4, #15
    f200:	e5852000 	str	r2, [r5]
    f204:	8a000076 	bhi	f3e4 <run_connect_close_by_peer_test+0x6cc>
		EXPECT_EQ (chans[idx], event.handle, test);
    f208:	e1a04104 	lsl	r4, r4, #2
    f20c:	e28d10c0 	add	r1, sp, #192	; 0xc0
    f210:	e0811004 	add	r1, r1, r4
    f214:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    f218:	e2833002 	add	r3, r3, #2
    f21c:	e5853000 	str	r3, [r5]
    f220:	e5115084 	ldr	r5, [r1, #-132]	; 0xffffff7c
    f224:	e1520005 	cmp	r2, r5
    f228:	0a00000f 	beq	f26c <run_connect_close_by_peer_test+0x554>
    f22c:	e58d2008 	str	r2, [sp, #8]
    f230:	e300321e 	movw	r3, #542	; 0x21e
    f234:	e51f2120 	ldr	r2, [pc, #-288]	; f11c <run_connect_close_by_peer_test+0x404>
    f238:	e2870028 	add	r0, r7, #40	; 0x28
    f23c:	e51f1124 	ldr	r1, [pc, #-292]	; f120 <run_connect_close_by_peer_test+0x408>
    f240:	e3a0a000 	mov	sl, #0
    f244:	e08f2002 	add	r2, pc, r2
    f248:	e58d5004 	str	r5, [sp, #4]
    f24c:	e58db000 	str	fp, [sp]
    f250:	e08f1001 	add	r1, pc, r1
    f254:	eb0014bf 	bl	14558 <fprintf>
    f258:	e51f213c 	ldr	r2, [pc, #-316]	; f124 <run_connect_close_by_peer_test+0x40c>
    f25c:	e08f2002 	add	r2, pc, r2
    f260:	e5923000 	ldr	r3, [r2]
    f264:	e2833001 	add	r3, r3, #1
    f268:	e5823000 	str	r3, [r2]
			rc = close(chans[idx]);
    f26c:	e1a00005 	mov	r0, r5
    f270:	eb000f64 	bl	13008 <close>
			EXPECT_EQ (NO_ERROR, rc, test);
    f274:	e51f2154 	ldr	r2, [pc, #-340]	; f128 <run_connect_close_by_peer_test+0x410>
    f278:	e3500000 	cmp	r0, #0
    f27c:	e08f2002 	add	r2, pc, r2
    f280:	e5923000 	ldr	r3, [r2]
    f284:	e2833001 	add	r3, r3, #1
    f288:	e5823000 	str	r3, [r2]
    f28c:	1a00008c 	bne	f4c4 <run_connect_close_by_peer_test+0x7ac>
			chans[idx] = INVALID_IPC_HANDLE;
    f290:	e28d30c0 	add	r3, sp, #192	; 0xc0
	while (chan_cnt) {
    f294:	e2599001 	subs	r9, r9, #1
			chans[idx] = INVALID_IPC_HANDLE;
    f298:	e0834004 	add	r4, r3, r4
    f29c:	e3e03000 	mvn	r3, #0
    f2a0:	e5043084 	str	r3, [r4, #-132]	; 0xffffff7c
	while (chan_cnt) {
    f2a4:	0a00006d 	beq	f460 <run_connect_close_by_peer_test+0x748>
		rc = wait_any(&event, 10000);
    f2a8:	e3021710 	movw	r1, #10000	; 0x2710
    f2ac:	e59d0014 	ldr	r0, [sp, #20]
    f2b0:	eb000f5d 	bl	1302c <wait_any>
		EXPECT_EQ (NO_ERROR, rc, test);
    f2b4:	e5963000 	ldr	r3, [r6]
    f2b8:	e3500000 	cmp	r0, #0
    f2bc:	e2833001 	add	r3, r3, #1
    f2c0:	e5863000 	str	r3, [r6]
    f2c4:	0affffae 	beq	f184 <run_connect_close_by_peer_test+0x46c>
    f2c8:	e58d0008 	str	r0, [sp, #8]
    f2cc:	e3003219 	movw	r3, #537	; 0x219
    f2d0:	e59d2010 	ldr	r2, [sp, #16]
    f2d4:	e3a0a000 	mov	sl, #0
    f2d8:	e59d1018 	ldr	r1, [sp, #24]
    f2dc:	e2870028 	add	r0, r7, #40	; 0x28
    f2e0:	e58db000 	str	fp, [sp]
    f2e4:	e58da004 	str	sl, [sp, #4]
    f2e8:	eb00149a 	bl	14558 <fprintf>
    f2ec:	e51f11c8 	ldr	r1, [pc, #-456]	; f12c <run_connect_close_by_peer_test+0x414>
    f2f0:	e5963000 	ldr	r3, [r6]
    f2f4:	e08f1001 	add	r1, pc, r1
    f2f8:	e5912000 	ldr	r2, [r1]
    f2fc:	e2822001 	add	r2, r2, #1
    f300:	e5812000 	str	r2, [r1]
    f304:	eaffff9e 	b	f184 <run_connect_close_by_peer_test+0x46c>
				EXPECT_EQ (NO_ERROR, rc, test);
    f308:	e3a02000 	mov	r2, #0
    f30c:	e51f11e4 	ldr	r1, [pc, #-484]	; f130 <run_connect_close_by_peer_test+0x418>
    f310:	e58d2004 	str	r2, [sp, #4]
    f314:	e300320f 	movw	r3, #527	; 0x20f
    f318:	e58d2010 	str	r2, [sp, #16]
    f31c:	e08f1001 	add	r1, pc, r1
    f320:	e51f21f4 	ldr	r2, [pc, #-500]	; f134 <run_connect_close_by_peer_test+0x41c>
    f324:	e58d0008 	str	r0, [sp, #8]
    f328:	e28a0028 	add	r0, sl, #40	; 0x28
    f32c:	e08f2002 	add	r2, pc, r2
    f330:	e58db000 	str	fp, [sp]
    f334:	eb001487 	bl	14558 <fprintf>
    f338:	e51f2208 	ldr	r2, [pc, #-520]	; f138 <run_connect_close_by_peer_test+0x420>
    f33c:	e08f2002 	add	r2, pc, r2
    f340:	e5923000 	ldr	r3, [r2]
    f344:	e2833001 	add	r3, r3, #1
    f348:	e5823000 	str	r3, [r2]
    f34c:	eafffee2 	b	eedc <run_connect_close_by_peer_test+0x1c4>
		EXPECT_GT_ZERO (retry_cnt, test);
    f350:	e51f421c 	ldr	r4, [pc, #-540]	; f13c <run_connect_close_by_peer_test+0x424>
		if (rc >= 0) {
    f354:	e3500000 	cmp	r0, #0
		EXPECT_GT_ZERO (retry_cnt, test);
    f358:	e08f4004 	add	r4, pc, r4
    f35c:	e5943000 	ldr	r3, [r4]
    f360:	e2832001 	add	r2, r3, #1
    f364:	e5842000 	str	r2, [r4]
		if (rc >= 0) {
    f368:	ba00007f 	blt	f56c <run_connect_close_by_peer_test+0x854>
			rc = set_cookie((handle_t) rc,
    f36c:	e59d2020 	ldr	r2, [sp, #32]
			chans[i] = (handle_t) rc;
    f370:	e28d303c 	add	r3, sp, #60	; 0x3c
			rc = set_cookie((handle_t) rc,
    f374:	e2821064 	add	r1, r2, #100	; 0x64
			chans[i] = (handle_t) rc;
    f378:	e7835102 	str	r5, [r3, r2, lsl #2]
			rc = set_cookie((handle_t) rc,
    f37c:	eb000f24 	bl	13014 <set_cookie>
			EXPECT_EQ (NO_ERROR, rc, test);
    f380:	e5943000 	ldr	r3, [r4]
    f384:	e3500000 	cmp	r0, #0
    f388:	e2833001 	add	r3, r3, #1
    f38c:	e5843000 	str	r3, [r4]
    f390:	1a000001 	bne	f39c <run_connect_close_by_peer_test+0x684>
			chan_cnt++;
    f394:	e2899001 	add	r9, r9, #1
    f398:	eafffec4 	b	eeb0 <run_connect_close_by_peer_test+0x198>
			EXPECT_EQ (NO_ERROR, rc, test);
    f39c:	e3a02000 	mov	r2, #0
    f3a0:	e51f1268 	ldr	r1, [pc, #-616]	; f140 <run_connect_close_by_peer_test+0x428>
    f3a4:	e58d2004 	str	r2, [sp, #4]
    f3a8:	e30031ff 	movw	r3, #511	; 0x1ff
    f3ac:	e58d2010 	str	r2, [sp, #16]
    f3b0:	e08f1001 	add	r1, pc, r1
    f3b4:	e51f2278 	ldr	r2, [pc, #-632]	; f144 <run_connect_close_by_peer_test+0x42c>
    f3b8:	e58d0008 	str	r0, [sp, #8]
    f3bc:	e28a0028 	add	r0, sl, #40	; 0x28
    f3c0:	e08f2002 	add	r2, pc, r2
    f3c4:	e58db000 	str	fp, [sp]
    f3c8:	eb001462 	bl	14558 <fprintf>
    f3cc:	e51f228c 	ldr	r2, [pc, #-652]	; f148 <run_connect_close_by_peer_test+0x430>
    f3d0:	e08f2002 	add	r2, pc, r2
    f3d4:	e5923000 	ldr	r3, [r2]
    f3d8:	e2833001 	add	r3, r3, #1
    f3dc:	e5823000 	str	r3, [r2]
    f3e0:	eaffffeb 	b	f394 <run_connect_close_by_peer_test+0x67c>
		EXPECT_GT (countof(chans), idx, test);
    f3e4:	e51fa2a0 	ldr	sl, [pc, #-672]	; f14c <run_connect_close_by_peer_test+0x434>
    f3e8:	e3a01010 	mov	r1, #16
    f3ec:	e58d1004 	str	r1, [sp, #4]
    f3f0:	e2873028 	add	r3, r7, #40	; 0x28
    f3f4:	e51f12ac 	ldr	r1, [pc, #-684]	; f150 <run_connect_close_by_peer_test+0x438>
    f3f8:	e08fa00a 	add	sl, pc, sl
    f3fc:	e58d301c 	str	r3, [sp, #28]
    f400:	e1a00003 	mov	r0, r3
    f404:	e58d4008 	str	r4, [sp, #8]
    f408:	e1a0200a 	mov	r2, sl
    f40c:	e300321d 	movw	r3, #541	; 0x21d
    f410:	e08f1001 	add	r1, pc, r1
    f414:	e58db000 	str	fp, [sp]
    f418:	e51f82cc 	ldr	r8, [pc, #-716]	; f154 <run_connect_close_by_peer_test+0x43c>
    f41c:	eb00144d 	bl	14558 <fprintf>
		EXPECT_EQ (chans[idx], event.handle, test);
    f420:	e28d30c0 	add	r3, sp, #192	; 0xc0
    f424:	e5952000 	ldr	r2, [r5]
		EXPECT_GT (countof(chans), idx, test);
    f428:	e08f8008 	add	r8, pc, r8
		EXPECT_EQ (chans[idx], event.handle, test);
    f42c:	e0834104 	add	r4, r3, r4, lsl #2
    f430:	e59d0030 	ldr	r0, [sp, #48]	; 0x30
    f434:	e2822001 	add	r2, r2, #1
    f438:	e5852000 	str	r2, [r5]
		EXPECT_GT (countof(chans), idx, test);
    f43c:	e5983000 	ldr	r3, [r8]
		EXPECT_EQ (chans[idx], event.handle, test);
    f440:	e5141084 	ldr	r1, [r4, #-132]	; 0xffffff7c
		EXPECT_GT (countof(chans), idx, test);
    f444:	e2833001 	add	r3, r3, #1
    f448:	e5883000 	str	r3, [r8]
		EXPECT_EQ (chans[idx], event.handle, test);
    f44c:	e1510000 	cmp	r1, r0
    f450:	1a000038 	bne	f538 <run_connect_close_by_peer_test+0x820>
		EXPECT_GT (countof(chans), idx, test);
    f454:	e3a0a000 	mov	sl, #0
	while (chan_cnt) {
    f458:	e2599001 	subs	r9, r9, #1
    f45c:	1affff91 	bne	f2a8 <run_connect_close_by_peer_test+0x590>
	EXPECT_EQ (0, chan_cnt, test);
    f460:	e51f2310 	ldr	r2, [pc, #-784]	; f158 <run_connect_close_by_peer_test+0x440>
	TEST_END
    f464:	e35a0000 	cmp	sl, #0
	EXPECT_EQ (0, chan_cnt, test);
    f468:	e08f2002 	add	r2, pc, r2
    f46c:	e5923000 	ldr	r3, [r2]
    f470:	e2833001 	add	r3, r3, #1
    f474:	e5823000 	str	r3, [r2]
	TEST_END
    f478:	1a000022 	bne	f508 <run_connect_close_by_peer_test+0x7f0>
    f47c:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    f480:	e51f332c 	ldr	r3, [pc, #-812]	; f15c <run_connect_close_by_peer_test+0x444>
    f484:	e2820028 	add	r0, r2, #40	; 0x28
    f488:	e51f1330 	ldr	r1, [pc, #-816]	; f160 <run_connect_close_by_peer_test+0x448>
    f48c:	e51f2330 	ldr	r2, [pc, #-816]	; f164 <run_connect_close_by_peer_test+0x44c>
    f490:	e08f3003 	add	r3, pc, r3
    f494:	e08f1001 	add	r1, pc, r1
    f498:	e58d3000 	str	r3, [sp]
    f49c:	e08f2002 	add	r2, pc, r2
    f4a0:	e3003229 	movw	r3, #553	; 0x229
    f4a4:	eb00142b 	bl	14558 <fprintf>
}
    f4a8:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    f4ac:	e59d20bc 	ldr	r2, [sp, #188]	; 0xbc
    f4b0:	e5933000 	ldr	r3, [r3]
    f4b4:	e1520003 	cmp	r2, r3
    f4b8:	1a000030 	bne	f580 <run_connect_close_by_peer_test+0x868>
    f4bc:	e28dd0c4 	add	sp, sp, #196	; 0xc4
    f4c0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
			EXPECT_EQ (NO_ERROR, rc, test);
    f4c4:	e51f2364 	ldr	r2, [pc, #-868]	; f168 <run_connect_close_by_peer_test+0x450>
    f4c8:	e3003221 	movw	r3, #545	; 0x221
    f4cc:	e51f1368 	ldr	r1, [pc, #-872]	; f16c <run_connect_close_by_peer_test+0x454>
    f4d0:	e3a0a000 	mov	sl, #0
    f4d4:	e58d0008 	str	r0, [sp, #8]
    f4d8:	e08f2002 	add	r2, pc, r2
    f4dc:	e58db000 	str	fp, [sp]
    f4e0:	e2870028 	add	r0, r7, #40	; 0x28
    f4e4:	e58da004 	str	sl, [sp, #4]
    f4e8:	e08f1001 	add	r1, pc, r1
    f4ec:	eb001419 	bl	14558 <fprintf>
    f4f0:	e51f2388 	ldr	r2, [pc, #-904]	; f170 <run_connect_close_by_peer_test+0x458>
    f4f4:	e08f2002 	add	r2, pc, r2
    f4f8:	e5923000 	ldr	r3, [r2]
    f4fc:	e2833001 	add	r3, r3, #1
    f500:	e5823000 	str	r3, [r2]
    f504:	eaffff61 	b	f290 <run_connect_close_by_peer_test+0x578>
	TEST_END
    f508:	e59d2028 	ldr	r2, [sp, #40]	; 0x28
    f50c:	e51f33a0 	ldr	r3, [pc, #-928]	; f174 <run_connect_close_by_peer_test+0x45c>
    f510:	e2820028 	add	r0, r2, #40	; 0x28
    f514:	e51f13a4 	ldr	r1, [pc, #-932]	; f178 <run_connect_close_by_peer_test+0x460>
    f518:	e51f23a4 	ldr	r2, [pc, #-932]	; f17c <run_connect_close_by_peer_test+0x464>
    f51c:	e08f3003 	add	r3, pc, r3
    f520:	e08f1001 	add	r1, pc, r1
    f524:	e58d3000 	str	r3, [sp]
    f528:	e08f2002 	add	r2, pc, r2
    f52c:	e3003229 	movw	r3, #553	; 0x229
    f530:	eb001408 	bl	14558 <fprintf>
    f534:	eaffffdb 	b	f4a8 <run_connect_close_by_peer_test+0x790>
		EXPECT_EQ (chans[idx], event.handle, test);
    f538:	e58d1004 	str	r1, [sp, #4]
    f53c:	e300321e 	movw	r3, #542	; 0x21e
    f540:	e51f13c8 	ldr	r1, [pc, #-968]	; f180 <run_connect_close_by_peer_test+0x468>
    f544:	e1a0200a 	mov	r2, sl
    f548:	e58d0008 	str	r0, [sp, #8]
    f54c:	e58db000 	str	fp, [sp]
    f550:	e08f1001 	add	r1, pc, r1
    f554:	e59d001c 	ldr	r0, [sp, #28]
    f558:	eb0013fe 	bl	14558 <fprintf>
    f55c:	e5983000 	ldr	r3, [r8]
    f560:	e2833001 	add	r3, r3, #1
    f564:	e5883000 	str	r3, [r8]
    f568:	eaffffb9 	b	f454 <run_connect_close_by_peer_test+0x73c>
			EXPECT_EQ (ERR_CHANNEL_CLOSED, rc, test);
    f56c:	e2833002 	add	r3, r3, #2
    f570:	e375000f 	cmn	r5, #15
    f574:	e5843000 	str	r3, [r4]
    f578:	0afffe4c 	beq	eeb0 <run_connect_close_by_peer_test+0x198>
    f57c:	eafffe39 	b	ee68 <run_connect_close_by_peer_test+0x150>
}
    f580:	eb001410 	bl	145c8 <__stack_chk_fail>

0000f584 <run_read_msg_negative_test>:
{
    f584:	e59f0d3c 	ldr	r0, [pc, #3388]	; 102c8 <run_read_msg_negative_test+0xd44>
	TEST_BEGIN(__func__);
    f588:	e30034ac 	movw	r3, #1196	; 0x4ac
{
    f58c:	e59f2d38 	ldr	r2, [pc, #3384]	; 102cc <run_read_msg_negative_test+0xd48>
    f590:	e08f0000 	add	r0, pc, r0
    f594:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TEST_BEGIN(__func__);
    f598:	e59fed30 	ldr	lr, [pc, #3376]	; 102d0 <run_read_msg_negative_test+0xd4c>
{
    f59c:	e24ddf49 	sub	sp, sp, #292	; 0x124
	TEST_BEGIN(__func__);
    f5a0:	e59f4d2c 	ldr	r4, [pc, #3372]	; 102d4 <run_read_msg_negative_test+0xd50>
{
    f5a4:	e790a002 	ldr	sl, [r0, r2]
	memset (&rx_msg, 0, sizeof(rx_msg));
    f5a8:	e28d603c 	add	r6, sp, #60	; 0x3c
	TEST_BEGIN(__func__);
    f5ac:	e59fcd24 	ldr	ip, [pc, #3364]	; 102d8 <run_read_msg_negative_test+0xd54>
    f5b0:	e08f4004 	add	r4, pc, r4
    f5b4:	e59f1d20 	ldr	r1, [pc, #3360]	; 102dc <run_read_msg_negative_test+0xd58>
    f5b8:	e1a02004 	mov	r2, r4
{
    f5bc:	e59a5000 	ldr	r5, [sl]
	TEST_BEGIN(__func__);
    f5c0:	e08fc00c 	add	ip, pc, ip
{
    f5c4:	e58d511c 	str	r5, [sp, #284]	; 0x11c
	TEST_BEGIN(__func__);
    f5c8:	e08f1001 	add	r1, pc, r1
	memset (&tx_msg, 0, sizeof(tx_msg));
    f5cc:	e28db02c 	add	fp, sp, #44	; 0x2c
	TEST_BEGIN(__func__);
    f5d0:	e790700e 	ldr	r7, [r0, lr]
    f5d4:	e58dc000 	str	ip, [sp]
    f5d8:	e2875028 	add	r5, r7, #40	; 0x28
    f5dc:	e1a00005 	mov	r0, r5
    f5e0:	eb0013dc 	bl	14558 <fprintf>
	memset (&rx_msg, 0, sizeof(rx_msg));
    f5e4:	e3a02010 	mov	r2, #16
    f5e8:	e3a01000 	mov	r1, #0
    f5ec:	e1a00006 	mov	r0, r6
    f5f0:	eb00141d 	bl	1466c <memset>
	memset (&tx_msg, 0, sizeof(tx_msg));
    f5f4:	e3a02010 	mov	r2, #16
    f5f8:	e3a01000 	mov	r1, #0
    f5fc:	e1a0000b 	mov	r0, fp
    f600:	eb001419 	bl	1466c <memset>
	rc = read_msg(INVALID_IPC_HANDLE, 0, 0, &rx_msg);
    f604:	e3a02000 	mov	r2, #0
    f608:	e1a03006 	mov	r3, r6
    f60c:	e1a01002 	mov	r1, r2
    f610:	e3e00000 	mvn	r0, #0
    f614:	eb000e8a 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "read_msg on invalid handle");
    f618:	e59f2cc0 	ldr	r2, [pc, #3264]	; 102e0 <run_read_msg_negative_test+0xd5c>
    f61c:	e370002a 	cmn	r0, #42	; 0x2a
    f620:	e08f2002 	add	r2, pc, r2
	TEST_BEGIN(__func__);
    f624:	03a08001 	moveq	r8, #1
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "read_msg on invalid handle");
    f628:	e5923000 	ldr	r3, [r2]
    f62c:	e2833001 	add	r3, r3, #1
    f630:	e5823000 	str	r3, [r2]
    f634:	0a000011 	beq	f680 <run_read_msg_negative_test+0xfc>
    f638:	e3e01029 	mvn	r1, #41	; 0x29
    f63c:	e59f3ca0 	ldr	r3, [pc, #3232]	; 102e4 <run_read_msg_negative_test+0xd60>
    f640:	e58d1004 	str	r1, [sp, #4]
    f644:	e1a02004 	mov	r2, r4
    f648:	e59f1c98 	ldr	r1, [pc, #3224]	; 102e8 <run_read_msg_negative_test+0xd64>
    f64c:	e08f3003 	add	r3, pc, r3
    f650:	e58d0008 	str	r0, [sp, #8]
    f654:	e1a00005 	mov	r0, r5
    f658:	e58d3000 	str	r3, [sp]
    f65c:	e08f1001 	add	r1, pc, r1
    f660:	e30034b4 	movw	r3, #1204	; 0x4b4
    f664:	e3a08000 	mov	r8, #0
    f668:	eb0013ba 	bl	14558 <fprintf>
    f66c:	e59f2c78 	ldr	r2, [pc, #3192]	; 102ec <run_read_msg_negative_test+0xd68>
    f670:	e08f2002 	add	r2, pc, r2
    f674:	e5923000 	ldr	r3, [r2]
    f678:	e2833001 	add	r3, r3, #1
    f67c:	e5823000 	str	r3, [r2]
	rc = read_msg(INVALID_IPC_HANDLE, 0, 0, NULL);
    f680:	e3a03000 	mov	r3, #0
    f684:	e3e00000 	mvn	r0, #0
    f688:	e1a02003 	mov	r2, r3
    f68c:	e1a01003 	mov	r1, r3
    f690:	eb000e6b 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_FAULT, rc, "read_msg on invalid handle");
    f694:	e59f2c54 	ldr	r2, [pc, #3156]	; 102f0 <run_read_msg_negative_test+0xd6c>
    f698:	e3700028 	cmn	r0, #40	; 0x28
    f69c:	e08f2002 	add	r2, pc, r2
    f6a0:	e5923000 	ldr	r3, [r2]
    f6a4:	e2833001 	add	r3, r3, #1
    f6a8:	e5823000 	str	r3, [r2]
    f6ac:	0a000012 	beq	f6fc <run_read_msg_negative_test+0x178>
    f6b0:	e59f2c3c 	ldr	r2, [pc, #3132]	; 102f4 <run_read_msg_negative_test+0xd70>
    f6b4:	e3e01027 	mvn	r1, #39	; 0x27
    f6b8:	e58d1004 	str	r1, [sp, #4]
    f6bc:	e30034b7 	movw	r3, #1207	; 0x4b7
    f6c0:	e08f2002 	add	r2, pc, r2
    f6c4:	e59f1c2c 	ldr	r1, [pc, #3116]	; 102f8 <run_read_msg_negative_test+0xd74>
    f6c8:	e58d2000 	str	r2, [sp]
    f6cc:	e3a08000 	mov	r8, #0
    f6d0:	e59f2c24 	ldr	r2, [pc, #3108]	; 102fc <run_read_msg_negative_test+0xd78>
    f6d4:	e08f1001 	add	r1, pc, r1
    f6d8:	e58d0008 	str	r0, [sp, #8]
    f6dc:	e2870028 	add	r0, r7, #40	; 0x28
    f6e0:	e08f2002 	add	r2, pc, r2
    f6e4:	eb00139b 	bl	14558 <fprintf>
    f6e8:	e59f2c10 	ldr	r2, [pc, #3088]	; 10300 <run_read_msg_negative_test+0xd7c>
    f6ec:	e08f2002 	add	r2, pc, r2
    f6f0:	e5923000 	ldr	r3, [r2]
    f6f4:	e2833001 	add	r3, r3, #1
    f6f8:	e5823000 	str	r3, [r2]
	rc = read_msg(MAX_USER_HANDLES, 0, 0, &rx_msg);
    f6fc:	e3a02000 	mov	r2, #0
    f700:	e1a03006 	mov	r3, r6
    f704:	e1a01002 	mov	r1, r2
    f708:	e3a00080 	mov	r0, #128	; 0x80
    f70c:	eb000e4c 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_BAD_HANDLE, rc, "read_msg on NULL msg");
    f710:	e59f2bec 	ldr	r2, [pc, #3052]	; 10304 <run_read_msg_negative_test+0xd80>
    f714:	e370002a 	cmn	r0, #42	; 0x2a
    f718:	e08f2002 	add	r2, pc, r2
    f71c:	e5923000 	ldr	r3, [r2]
    f720:	e2833001 	add	r3, r3, #1
    f724:	e5823000 	str	r3, [r2]
    f728:	0a000012 	beq	f778 <run_read_msg_negative_test+0x1f4>
    f72c:	e59f2bd4 	ldr	r2, [pc, #3028]	; 10308 <run_read_msg_negative_test+0xd84>
    f730:	e3e01029 	mvn	r1, #41	; 0x29
    f734:	e58d1004 	str	r1, [sp, #4]
    f738:	e30034bb 	movw	r3, #1211	; 0x4bb
    f73c:	e08f2002 	add	r2, pc, r2
    f740:	e59f1bc4 	ldr	r1, [pc, #3012]	; 1030c <run_read_msg_negative_test+0xd88>
    f744:	e58d2000 	str	r2, [sp]
    f748:	e3a08000 	mov	r8, #0
    f74c:	e59f2bbc 	ldr	r2, [pc, #3004]	; 10310 <run_read_msg_negative_test+0xd8c>
    f750:	e08f1001 	add	r1, pc, r1
    f754:	e58d0008 	str	r0, [sp, #8]
    f758:	e2870028 	add	r0, r7, #40	; 0x28
    f75c:	e08f2002 	add	r2, pc, r2
    f760:	eb00137c 	bl	14558 <fprintf>
    f764:	e59f2ba8 	ldr	r2, [pc, #2984]	; 10314 <run_read_msg_negative_test+0xd90>
    f768:	e08f2002 	add	r2, pc, r2
    f76c:	e5923000 	ldr	r3, [r2]
    f770:	e2833001 	add	r3, r3, #1
    f774:	e5823000 	str	r3, [r2]
	rc = read_msg(MAX_USER_HANDLES, 0, 0, NULL);
    f778:	e3a03000 	mov	r3, #0
    f77c:	e3a00080 	mov	r0, #128	; 0x80
    f780:	e1a02003 	mov	r2, r3
    f784:	e1a01003 	mov	r1, r3
    f788:	eb000e2d 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_FAULT, rc, "read_msg on NULL msg");
    f78c:	e59f2b84 	ldr	r2, [pc, #2948]	; 10318 <run_read_msg_negative_test+0xd94>
    f790:	e3700028 	cmn	r0, #40	; 0x28
    f794:	e08f2002 	add	r2, pc, r2
    f798:	e5923000 	ldr	r3, [r2]
    f79c:	e2833001 	add	r3, r3, #1
    f7a0:	e5823000 	str	r3, [r2]
    f7a4:	0a000012 	beq	f7f4 <run_read_msg_negative_test+0x270>
    f7a8:	e59f2b6c 	ldr	r2, [pc, #2924]	; 1031c <run_read_msg_negative_test+0xd98>
    f7ac:	e3e01027 	mvn	r1, #39	; 0x27
    f7b0:	e58d1004 	str	r1, [sp, #4]
    f7b4:	e30034be 	movw	r3, #1214	; 0x4be
    f7b8:	e08f2002 	add	r2, pc, r2
    f7bc:	e59f1b5c 	ldr	r1, [pc, #2908]	; 10320 <run_read_msg_negative_test+0xd9c>
    f7c0:	e58d2000 	str	r2, [sp]
    f7c4:	e3a08000 	mov	r8, #0
    f7c8:	e59f2b54 	ldr	r2, [pc, #2900]	; 10324 <run_read_msg_negative_test+0xda0>
    f7cc:	e08f1001 	add	r1, pc, r1
    f7d0:	e58d0008 	str	r0, [sp, #8]
    f7d4:	e2870028 	add	r0, r7, #40	; 0x28
    f7d8:	e08f2002 	add	r2, pc, r2
    f7dc:	eb00135d 	bl	14558 <fprintf>
    f7e0:	e59f2b40 	ldr	r2, [pc, #2880]	; 10328 <run_read_msg_negative_test+0xda4>
    f7e4:	e08f2002 	add	r2, pc, r2
    f7e8:	e5923000 	ldr	r3, [r2]
    f7ec:	e2833001 	add	r3, r3, #1
    f7f0:	e5823000 	str	r3, [r2]
		EXPECT_EQ (ERR_NOT_FOUND, rc, "read_msg on non existing handle");
    f7f4:	e59f5b30 	ldr	r5, [pc, #2864]	; 1032c <run_read_msg_negative_test+0xda8>
	EXPECT_EQ (ERR_FAULT, rc, "read_msg on NULL msg");
    f7f8:	e3a04002 	mov	r4, #2
		EXPECT_EQ (ERR_NOT_FOUND, rc, "read_msg on non existing handle");
    f7fc:	e59f9b2c 	ldr	r9, [pc, #2860]	; 10330 <run_read_msg_negative_test+0xdac>
    f800:	e08f5005 	add	r5, pc, r5
    f804:	e08f9009 	add	r9, pc, r9
		rc = read_msg(i, 0, 0, &rx_msg);
    f808:	e3a02000 	mov	r2, #0
    f80c:	e1a03006 	mov	r3, r6
    f810:	e1a01002 	mov	r1, r2
    f814:	e1a00004 	mov	r0, r4
    f818:	eb000e09 	bl	13044 <read_msg>
		EXPECT_EQ (ERR_NOT_FOUND, rc, "read_msg on non existing handle");
    f81c:	e5953000 	ldr	r3, [r5]
    f820:	e3700002 	cmn	r0, #2
    f824:	e2833001 	add	r3, r3, #1
    f828:	e5853000 	str	r3, [r5]
    f82c:	0a000011 	beq	f878 <run_read_msg_negative_test+0x2f4>
    f830:	e3e01001 	mvn	r1, #1
    f834:	e59f2af8 	ldr	r2, [pc, #2808]	; 10334 <run_read_msg_negative_test+0xdb0>
    f838:	e58d1004 	str	r1, [sp, #4]
    f83c:	e30034c3 	movw	r3, #1219	; 0x4c3
    f840:	e59f1af0 	ldr	r1, [pc, #2800]	; 10338 <run_read_msg_negative_test+0xdb4>
    f844:	e08f2002 	add	r2, pc, r2
    f848:	e58d0008 	str	r0, [sp, #8]
    f84c:	e2870028 	add	r0, r7, #40	; 0x28
    f850:	e58d2000 	str	r2, [sp]
    f854:	e08f1001 	add	r1, pc, r1
    f858:	e1a02009 	mov	r2, r9
    f85c:	e3a08000 	mov	r8, #0
    f860:	eb00133c 	bl	14558 <fprintf>
    f864:	e59f2ad0 	ldr	r2, [pc, #2768]	; 1033c <run_read_msg_negative_test+0xdb8>
    f868:	e08f2002 	add	r2, pc, r2
    f86c:	e5923000 	ldr	r3, [r2]
    f870:	e2833001 	add	r3, r3, #1
    f874:	e5823000 	str	r3, [r2]
		rc = read_msg(i, 0, 0, NULL);
    f878:	e3a03000 	mov	r3, #0
    f87c:	e1a00004 	mov	r0, r4
    f880:	e1a02003 	mov	r2, r3
    f884:	e1a01003 	mov	r1, r3
    f888:	eb000ded 	bl	13044 <read_msg>
		EXPECT_EQ (ERR_FAULT, rc, "read_msg on NULL msg");
    f88c:	e59f2aac 	ldr	r2, [pc, #2732]	; 10340 <run_read_msg_negative_test+0xdbc>
    f890:	e3700028 	cmn	r0, #40	; 0x28
    f894:	e08f2002 	add	r2, pc, r2
    f898:	e5923000 	ldr	r3, [r2]
    f89c:	e2833001 	add	r3, r3, #1
    f8a0:	e5823000 	str	r3, [r2]
    f8a4:	0a000012 	beq	f8f4 <run_read_msg_negative_test+0x370>
    f8a8:	e59f2a94 	ldr	r2, [pc, #2708]	; 10344 <run_read_msg_negative_test+0xdc0>
    f8ac:	e3e01027 	mvn	r1, #39	; 0x27
    f8b0:	e58d1004 	str	r1, [sp, #4]
    f8b4:	e30034c7 	movw	r3, #1223	; 0x4c7
    f8b8:	e08f2002 	add	r2, pc, r2
    f8bc:	e59f1a84 	ldr	r1, [pc, #2692]	; 10348 <run_read_msg_negative_test+0xdc4>
    f8c0:	e58d2000 	str	r2, [sp]
    f8c4:	e3a08000 	mov	r8, #0
    f8c8:	e59f2a7c 	ldr	r2, [pc, #2684]	; 1034c <run_read_msg_negative_test+0xdc8>
    f8cc:	e08f1001 	add	r1, pc, r1
    f8d0:	e58d0008 	str	r0, [sp, #8]
    f8d4:	e2870028 	add	r0, r7, #40	; 0x28
    f8d8:	e08f2002 	add	r2, pc, r2
    f8dc:	eb00131d 	bl	14558 <fprintf>
    f8e0:	e59f2a68 	ldr	r2, [pc, #2664]	; 10350 <run_read_msg_negative_test+0xdcc>
    f8e4:	e08f2002 	add	r2, pc, r2
    f8e8:	e5923000 	ldr	r3, [r2]
    f8ec:	e2833001 	add	r3, r3, #1
    f8f0:	e5823000 	str	r3, [r2]
	for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    f8f4:	e2844001 	add	r4, r4, #1
    f8f8:	e3540080 	cmp	r4, #128	; 0x80
    f8fc:	1affffc1 	bne	f808 <run_read_msg_negative_test+0x284>
	sprintf(path, "%s.main.%s", SRV_PATH_BASE,  "datasink");
    f900:	e59f3a4c 	ldr	r3, [pc, #2636]	; 10354 <run_read_msg_negative_test+0xdd0>
    f904:	e28d405c 	add	r4, sp, #92	; 0x5c
    f908:	e59f2a48 	ldr	r2, [pc, #2632]	; 10358 <run_read_msg_negative_test+0xdd4>
    f90c:	e1a00004 	mov	r0, r4
    f910:	e59f1a44 	ldr	r1, [pc, #2628]	; 1035c <run_read_msg_negative_test+0xdd8>
    f914:	e08f3003 	add	r3, pc, r3
    f918:	e08f2002 	add	r2, pc, r2
    f91c:	e08f1001 	add	r1, pc, r1
    f920:	eb0012e4 	bl	144b8 <sprintf>
	rc = port_create(path, 2, MAX_PORT_BUF_SIZE,
    f924:	e3a03001 	mov	r3, #1
    f928:	e3a02a01 	mov	r2, #4096	; 0x1000
    f92c:	e1a00004 	mov	r0, r4
    f930:	e3a01002 	mov	r1, #2
    f934:	eb000daa 	bl	12fe4 <port_create>
	EXPECT_GE_ZERO (rc, "create datasink port");
    f938:	e59f2a20 	ldr	r2, [pc, #2592]	; 10360 <run_read_msg_negative_test+0xddc>
    f93c:	e2505000 	subs	r5, r0, #0
    f940:	e08f2002 	add	r2, pc, r2
    f944:	e5923000 	ldr	r3, [r2]
    f948:	e2833001 	add	r3, r3, #1
    f94c:	e5823000 	str	r3, [r2]
    f950:	ba00023e 	blt	10250 <run_read_msg_negative_test+0xccc>
	rc = read_msg(port, 0, 0, &rx_msg);
    f954:	e3a02000 	mov	r2, #0
    f958:	e1a03006 	mov	r3, r6
    f95c:	e1a01002 	mov	r1, r2
    f960:	e1a00005 	mov	r0, r5
    f964:	eb000db6 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "read_msg on port");
    f968:	e59f29f4 	ldr	r2, [pc, #2548]	; 10364 <run_read_msg_negative_test+0xde0>
    f96c:	e3700008 	cmn	r0, #8
    f970:	e08f2002 	add	r2, pc, r2
    f974:	e5923000 	ldr	r3, [r2]
    f978:	e2833001 	add	r3, r3, #1
    f97c:	e5823000 	str	r3, [r2]
    f980:	0a000012 	beq	f9d0 <run_read_msg_negative_test+0x44c>
    f984:	e59f29dc 	ldr	r2, [pc, #2524]	; 10368 <run_read_msg_negative_test+0xde4>
    f988:	e3e01007 	mvn	r1, #7
    f98c:	e58d1004 	str	r1, [sp, #4]
    f990:	e30034d3 	movw	r3, #1235	; 0x4d3
    f994:	e08f2002 	add	r2, pc, r2
    f998:	e59f19cc 	ldr	r1, [pc, #2508]	; 1036c <run_read_msg_negative_test+0xde8>
    f99c:	e58d2000 	str	r2, [sp]
    f9a0:	e3a08000 	mov	r8, #0
    f9a4:	e59f29c4 	ldr	r2, [pc, #2500]	; 10370 <run_read_msg_negative_test+0xdec>
    f9a8:	e08f1001 	add	r1, pc, r1
    f9ac:	e58d0008 	str	r0, [sp, #8]
    f9b0:	e2870028 	add	r0, r7, #40	; 0x28
    f9b4:	e08f2002 	add	r2, pc, r2
    f9b8:	eb0012e6 	bl	14558 <fprintf>
    f9bc:	e59f29b0 	ldr	r2, [pc, #2480]	; 10374 <run_read_msg_negative_test+0xdf0>
    f9c0:	e08f2002 	add	r2, pc, r2
    f9c4:	e5923000 	ldr	r3, [r2]
    f9c8:	e2833001 	add	r3, r3, #1
    f9cc:	e5823000 	str	r3, [r2]
	close(port);
    f9d0:	e1a00005 	mov	r0, r5
    f9d4:	eb000d8b 	bl	13008 <close>
	sprintf(path, "%s.srv.%s", SRV_PATH_BASE,  "echo");
    f9d8:	e59f3998 	ldr	r3, [pc, #2456]	; 10378 <run_read_msg_negative_test+0xdf4>
    f9dc:	e59f2998 	ldr	r2, [pc, #2456]	; 1037c <run_read_msg_negative_test+0xdf8>
    f9e0:	e1a00004 	mov	r0, r4
    f9e4:	e59f1994 	ldr	r1, [pc, #2452]	; 10380 <run_read_msg_negative_test+0xdfc>
    f9e8:	e08f3003 	add	r3, pc, r3
    f9ec:	e08f2002 	add	r2, pc, r2
    f9f0:	e08f1001 	add	r1, pc, r1
    f9f4:	eb0012af 	bl	144b8 <sprintf>
	rc = sync_connect(path, 1000);
    f9f8:	e1a00004 	mov	r0, r4
    f9fc:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    fa00:	ebfff745 	bl	d71c <sync_connect>
	EXPECT_GE_ZERO (rc, "connect to datasink");
    fa04:	e59f2978 	ldr	r2, [pc, #2424]	; 10384 <run_read_msg_negative_test+0xe00>
    fa08:	e2504000 	subs	r4, r0, #0
    fa0c:	e08f2002 	add	r2, pc, r2
    fa10:	e5923000 	ldr	r3, [r2]
    fa14:	e2833001 	add	r3, r3, #1
    fa18:	e5823000 	str	r3, [r2]
    fa1c:	ba0001f9 	blt	10208 <run_read_msg_negative_test+0xc84>
	rc = read_msg(chan, 0, 0, NULL);
    fa20:	e3a03000 	mov	r3, #0
    fa24:	e1a00004 	mov	r0, r4
    fa28:	e1a02003 	mov	r2, r3
    fa2c:	e1a01003 	mov	r1, r3
    fa30:	eb000d83 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_FAULT, rc, "read_msg on NULL msg");
    fa34:	e59f294c 	ldr	r2, [pc, #2380]	; 10388 <run_read_msg_negative_test+0xe04>
    fa38:	e3700028 	cmn	r0, #40	; 0x28
    fa3c:	e08f2002 	add	r2, pc, r2
    fa40:	e5923000 	ldr	r3, [r2]
    fa44:	e2833001 	add	r3, r3, #1
    fa48:	e5823000 	str	r3, [r2]
    fa4c:	0a000012 	beq	fa9c <run_read_msg_negative_test+0x518>
    fa50:	e59f2934 	ldr	r2, [pc, #2356]	; 1038c <run_read_msg_negative_test+0xe08>
    fa54:	e3e01027 	mvn	r1, #39	; 0x27
    fa58:	e58d1004 	str	r1, [sp, #4]
    fa5c:	e30034de 	movw	r3, #1246	; 0x4de
    fa60:	e08f2002 	add	r2, pc, r2
    fa64:	e59f1924 	ldr	r1, [pc, #2340]	; 10390 <run_read_msg_negative_test+0xe0c>
    fa68:	e58d2000 	str	r2, [sp]
    fa6c:	e3a08000 	mov	r8, #0
    fa70:	e59f291c 	ldr	r2, [pc, #2332]	; 10394 <run_read_msg_negative_test+0xe10>
    fa74:	e08f1001 	add	r1, pc, r1
    fa78:	e58d0008 	str	r0, [sp, #8]
    fa7c:	e2870028 	add	r0, r7, #40	; 0x28
    fa80:	e08f2002 	add	r2, pc, r2
    fa84:	eb0012b3 	bl	14558 <fprintf>
    fa88:	e59f2908 	ldr	r2, [pc, #2312]	; 10398 <run_read_msg_negative_test+0xe14>
    fa8c:	e08f2002 	add	r2, pc, r2
    fa90:	e5923000 	ldr	r3, [r2]
    fa94:	e2833001 	add	r3, r3, #1
    fa98:	e5823000 	str	r3, [r2]
	rc = read_msg(chan, 0, 0, &rx_msg);
    fa9c:	e3a02000 	mov	r2, #0
    faa0:	e1a03006 	mov	r3, r6
    faa4:	e1a01002 	mov	r1, r2
    faa8:	e1a00004 	mov	r0, r4
    faac:	eb000d64 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "read_msg on invalid msg id");
    fab0:	e59f28e4 	ldr	r2, [pc, #2276]	; 1039c <run_read_msg_negative_test+0xe18>
    fab4:	e3700008 	cmn	r0, #8
    fab8:	e08f2002 	add	r2, pc, r2
    fabc:	e5923000 	ldr	r3, [r2]
    fac0:	e2833001 	add	r3, r3, #1
    fac4:	e5823000 	str	r3, [r2]
    fac8:	0a000012 	beq	fb18 <run_read_msg_negative_test+0x594>
    facc:	e59f28cc 	ldr	r2, [pc, #2252]	; 103a0 <run_read_msg_negative_test+0xe1c>
    fad0:	e3e01007 	mvn	r1, #7
    fad4:	e58d1004 	str	r1, [sp, #4]
    fad8:	e30034e2 	movw	r3, #1250	; 0x4e2
    fadc:	e08f2002 	add	r2, pc, r2
    fae0:	e59f18bc 	ldr	r1, [pc, #2236]	; 103a4 <run_read_msg_negative_test+0xe20>
    fae4:	e58d2000 	str	r2, [sp]
    fae8:	e3a08000 	mov	r8, #0
    faec:	e59f28b4 	ldr	r2, [pc, #2228]	; 103a8 <run_read_msg_negative_test+0xe24>
    faf0:	e08f1001 	add	r1, pc, r1
    faf4:	e58d0008 	str	r0, [sp, #8]
    faf8:	e2870028 	add	r0, r7, #40	; 0x28
    fafc:	e08f2002 	add	r2, pc, r2
    fb00:	eb001294 	bl	14558 <fprintf>
    fb04:	e59f28a0 	ldr	r2, [pc, #2208]	; 103ac <run_read_msg_negative_test+0xe28>
    fb08:	e08f2002 	add	r2, pc, r2
    fb0c:	e5923000 	ldr	r3, [r2]
    fb10:	e2833001 	add	r3, r3, #1
    fb14:	e5823000 	str	r3, [r2]
	rc = read_msg(chan, 1000, 0, &rx_msg);
    fb18:	e1a03006 	mov	r3, r6
    fb1c:	e3a02000 	mov	r2, #0
    fb20:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    fb24:	e1a00004 	mov	r0, r4
    fb28:	eb000d45 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "read_msg on invalid msg id");
    fb2c:	e59f287c 	ldr	r2, [pc, #2172]	; 103b0 <run_read_msg_negative_test+0xe2c>
    fb30:	e3700008 	cmn	r0, #8
    fb34:	e08f2002 	add	r2, pc, r2
    fb38:	e5923000 	ldr	r3, [r2]
    fb3c:	e2833001 	add	r3, r3, #1
    fb40:	e5823000 	str	r3, [r2]
    fb44:	0a000012 	beq	fb94 <run_read_msg_negative_test+0x610>
    fb48:	e59f2864 	ldr	r2, [pc, #2148]	; 103b4 <run_read_msg_negative_test+0xe30>
    fb4c:	e3e01007 	mvn	r1, #7
    fb50:	e58d1004 	str	r1, [sp, #4]
    fb54:	e30034e5 	movw	r3, #1253	; 0x4e5
    fb58:	e08f2002 	add	r2, pc, r2
    fb5c:	e59f1854 	ldr	r1, [pc, #2132]	; 103b8 <run_read_msg_negative_test+0xe34>
    fb60:	e58d2000 	str	r2, [sp]
    fb64:	e3a08000 	mov	r8, #0
    fb68:	e59f284c 	ldr	r2, [pc, #2124]	; 103bc <run_read_msg_negative_test+0xe38>
    fb6c:	e08f1001 	add	r1, pc, r1
    fb70:	e58d0008 	str	r0, [sp, #8]
    fb74:	e2870028 	add	r0, r7, #40	; 0x28
    fb78:	e08f2002 	add	r2, pc, r2
    fb7c:	eb001275 	bl	14558 <fprintf>
    fb80:	e59f2838 	ldr	r2, [pc, #2104]	; 103c0 <run_read_msg_negative_test+0xe3c>
    fb84:	e08f2002 	add	r2, pc, r2
    fb88:	e5923000 	ldr	r3, [r2]
    fb8c:	e2833001 	add	r3, r3, #1
    fb90:	e5823000 	str	r3, [r2]
	memset(tx_buf, 0x55, sizeof(tx_buf));
    fb94:	e28d509c 	add	r5, sp, #156	; 0x9c
    fb98:	e3a02040 	mov	r2, #64	; 0x40
    fb9c:	e1a00005 	mov	r0, r5
    fba0:	e3a01055 	mov	r1, #85	; 0x55
    fba4:	eb0012b0 	bl	1466c <memset>
	rc = send_msg(chan, &tx_msg);
    fba8:	e1a0100b 	mov	r1, fp
    fbac:	e1a00004 	mov	r0, r4
	tx_iov.base = tx_buf;
    fbb0:	e58d5018 	str	r5, [sp, #24]
	tx_iov.len  = sizeof(tx_buf);
    fbb4:	e3a09040 	mov	r9, #64	; 0x40
	tx_msg.num_iov = 1;
    fbb8:	e3a03001 	mov	r3, #1
	tx_msg.num_handles = 0;
    fbbc:	e3a05000 	mov	r5, #0
	tx_msg.num_iov = 1;
    fbc0:	e58d302c 	str	r3, [sp, #44]	; 0x2c
	tx_iov.len  = sizeof(tx_buf);
    fbc4:	e58d901c 	str	r9, [sp, #28]
	tx_msg.iov     = &tx_iov;
    fbc8:	e28d3018 	add	r3, sp, #24
	tx_msg.num_handles = 0;
    fbcc:	e58d5034 	str	r5, [sp, #52]	; 0x34
	tx_msg.iov     = &tx_iov;
    fbd0:	e58d3030 	str	r3, [sp, #48]	; 0x30
	tx_msg.handles = NULL;
    fbd4:	e58d5038 	str	r5, [sp, #56]	; 0x38
	rc = send_msg(chan, &tx_msg);
    fbd8:	eb000d1f 	bl	1305c <send_msg>
	EXPECT_EQ (64, rc, "sending msg to echo");
    fbdc:	e59f27e0 	ldr	r2, [pc, #2016]	; 103c4 <run_read_msg_negative_test+0xe40>
    fbe0:	e1500009 	cmp	r0, r9
    fbe4:	e08f2002 	add	r2, pc, r2
    fbe8:	e5923000 	ldr	r3, [r2]
    fbec:	e2833001 	add	r3, r3, #1
    fbf0:	e5823000 	str	r3, [r2]
    fbf4:	0a000011 	beq	fc40 <run_read_msg_negative_test+0x6bc>
    fbf8:	e59f27c8 	ldr	r2, [pc, #1992]	; 103c8 <run_read_msg_negative_test+0xe44>
    fbfc:	e30034f1 	movw	r3, #1265	; 0x4f1
    fc00:	e59f17c4 	ldr	r1, [pc, #1988]	; 103cc <run_read_msg_negative_test+0xe48>
    fc04:	e1a08005 	mov	r8, r5
    fc08:	e08f2002 	add	r2, pc, r2
    fc0c:	e58d2000 	str	r2, [sp]
    fc10:	e59f27b8 	ldr	r2, [pc, #1976]	; 103d0 <run_read_msg_negative_test+0xe4c>
    fc14:	e08f1001 	add	r1, pc, r1
    fc18:	e58d0008 	str	r0, [sp, #8]
    fc1c:	e2870028 	add	r0, r7, #40	; 0x28
    fc20:	e08f2002 	add	r2, pc, r2
    fc24:	e58d9004 	str	r9, [sp, #4]
    fc28:	eb00124a 	bl	14558 <fprintf>
    fc2c:	e59f27a0 	ldr	r2, [pc, #1952]	; 103d4 <run_read_msg_negative_test+0xe50>
    fc30:	e08f2002 	add	r2, pc, r2
    fc34:	e5923000 	ldr	r3, [r2]
    fc38:	e2833001 	add	r3, r3, #1
    fc3c:	e5823000 	str	r3, [r2]
	EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
    fc40:	e59f5790 	ldr	r5, [pc, #1936]	; 103d8 <run_read_msg_negative_test+0xe54>
	rc = wait(chan, &uevt, 1000);
    fc44:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    fc48:	e28d1020 	add	r1, sp, #32
    fc4c:	e1a00004 	mov	r0, r4
	EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
    fc50:	e08f5005 	add	r5, pc, r5
	rc = wait(chan, &uevt, 1000);
    fc54:	eb000cf1 	bl	13020 <wait>
	EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
    fc58:	e3500000 	cmp	r0, #0
    fc5c:	e5953000 	ldr	r3, [r5]
    fc60:	e2833001 	add	r3, r3, #1
    fc64:	e5853000 	str	r3, [r5]
    fc68:	1a000152 	bne	101b8 <run_read_msg_negative_test+0xc34>
	EXPECT_EQ (chan, uevt.handle, "wait on channel");
    fc6c:	e59f1768 	ldr	r1, [pc, #1896]	; 103dc <run_read_msg_negative_test+0xe58>
    fc70:	e2833001 	add	r3, r3, #1
    fc74:	e59d2020 	ldr	r2, [sp, #32]
    fc78:	e08f1001 	add	r1, pc, r1
    fc7c:	e1540002 	cmp	r4, r2
    fc80:	e5813000 	str	r3, [r1]
    fc84:	0a000011 	beq	fcd0 <run_read_msg_negative_test+0x74c>
    fc88:	e59f1750 	ldr	r1, [pc, #1872]	; 103e0 <run_read_msg_negative_test+0xe5c>
    fc8c:	e30034f6 	movw	r3, #1270	; 0x4f6
    fc90:	e58d2008 	str	r2, [sp, #8]
    fc94:	e2870028 	add	r0, r7, #40	; 0x28
    fc98:	e08f1001 	add	r1, pc, r1
    fc9c:	e59f2740 	ldr	r2, [pc, #1856]	; 103e4 <run_read_msg_negative_test+0xe60>
    fca0:	e58d1000 	str	r1, [sp]
    fca4:	e3a08000 	mov	r8, #0
    fca8:	e59f1738 	ldr	r1, [pc, #1848]	; 103e8 <run_read_msg_negative_test+0xe64>
    fcac:	e08f2002 	add	r2, pc, r2
    fcb0:	e58d4004 	str	r4, [sp, #4]
    fcb4:	e08f1001 	add	r1, pc, r1
    fcb8:	eb001226 	bl	14558 <fprintf>
    fcbc:	e59f2728 	ldr	r2, [pc, #1832]	; 103ec <run_read_msg_negative_test+0xe68>
    fcc0:	e08f2002 	add	r2, pc, r2
    fcc4:	e5923000 	ldr	r3, [r2]
    fcc8:	e2833001 	add	r3, r3, #1
    fccc:	e5823000 	str	r3, [r2]
	EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    fcd0:	e59f5718 	ldr	r5, [pc, #1816]	; 103f0 <run_read_msg_negative_test+0xe6c>
	rc = get_msg(chan, &inf);
    fcd4:	e28d1010 	add	r1, sp, #16
    fcd8:	e1a00004 	mov	r0, r4
	EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    fcdc:	e08f5005 	add	r5, pc, r5
	rc = get_msg(chan, &inf);
    fce0:	eb000cd4 	bl	13038 <get_msg>
	EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
    fce4:	e3500000 	cmp	r0, #0
    fce8:	e5953000 	ldr	r3, [r5]
    fcec:	e2833001 	add	r3, r3, #1
    fcf0:	e5853000 	str	r3, [r5]
    fcf4:	1a00011b 	bne	10168 <run_read_msg_negative_test+0xbe4>
	EXPECT_EQ (sizeof(tx_buf), inf.len, "echo message reply length");
    fcf8:	e59f16f4 	ldr	r1, [pc, #1780]	; 103f4 <run_read_msg_negative_test+0xe70>
    fcfc:	e2833001 	add	r3, r3, #1
    fd00:	e59d2010 	ldr	r2, [sp, #16]
    fd04:	e08f1001 	add	r1, pc, r1
    fd08:	e3520040 	cmp	r2, #64	; 0x40
    fd0c:	e5813000 	str	r3, [r1]
    fd10:	0a000012 	beq	fd60 <run_read_msg_negative_test+0x7dc>
    fd14:	e59f16dc 	ldr	r1, [pc, #1756]	; 103f8 <run_read_msg_negative_test+0xe74>
    fd18:	e3a0c040 	mov	ip, #64	; 0x40
    fd1c:	e58d2008 	str	r2, [sp, #8]
    fd20:	e30034fa 	movw	r3, #1274	; 0x4fa
    fd24:	e08f1001 	add	r1, pc, r1
    fd28:	e59f26cc 	ldr	r2, [pc, #1740]	; 103fc <run_read_msg_negative_test+0xe78>
    fd2c:	e58d1000 	str	r1, [sp]
    fd30:	e2870028 	add	r0, r7, #40	; 0x28
    fd34:	e59f16c4 	ldr	r1, [pc, #1732]	; 10400 <run_read_msg_negative_test+0xe7c>
    fd38:	e08f2002 	add	r2, pc, r2
    fd3c:	e58dc004 	str	ip, [sp, #4]
    fd40:	e3a08000 	mov	r8, #0
    fd44:	e08f1001 	add	r1, pc, r1
    fd48:	eb001202 	bl	14558 <fprintf>
    fd4c:	e59f26b0 	ldr	r2, [pc, #1712]	; 10404 <run_read_msg_negative_test+0xe80>
    fd50:	e08f2002 	add	r2, pc, r2
    fd54:	e5923000 	ldr	r3, [r2]
    fd58:	e2833001 	add	r3, r3, #1
    fd5c:	e5823000 	str	r3, [r2]
	rx_msg.iov     = NULL;
    fd60:	e3a05000 	mov	r5, #0
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    fd64:	e1a03006 	mov	r3, r6
    fd68:	e1a02005 	mov	r2, r5
    fd6c:	e59d1014 	ldr	r1, [sp, #20]
    fd70:	e1a00004 	mov	r0, r4
	rx_iov[0].len  = sizeof(rx_buf) / 2;
    fd74:	e3a0c020 	mov	ip, #32
	rx_msg.iov     = NULL;
    fd78:	e58d5040 	str	r5, [sp, #64]	; 0x40
	rx_iov[0].len  = sizeof(rx_buf) / 2;
    fd7c:	e58dc050 	str	ip, [sp, #80]	; 0x50
	rx_iov[1].len  = sizeof(rx_buf) / 2;
    fd80:	e58dc058 	str	ip, [sp, #88]	; 0x58
	rx_msg.num_iov = 2;
    fd84:	e3a0c002 	mov	ip, #2
    fd88:	e58dc03c 	str	ip, [sp, #60]	; 0x3c
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    fd8c:	eb000cac 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_FAULT, rc, "read with invalid iovec array");
    fd90:	e59f2670 	ldr	r2, [pc, #1648]	; 10408 <run_read_msg_negative_test+0xe84>
    fd94:	e3700028 	cmn	r0, #40	; 0x28
    fd98:	e08f2002 	add	r2, pc, r2
    fd9c:	e5923000 	ldr	r3, [r2]
    fda0:	e2833001 	add	r3, r3, #1
    fda4:	e5823000 	str	r3, [r2]
    fda8:	0a000012 	beq	fdf8 <run_read_msg_negative_test+0x874>
    fdac:	e59f2658 	ldr	r2, [pc, #1624]	; 1040c <run_read_msg_negative_test+0xe88>
    fdb0:	e3e01027 	mvn	r1, #39	; 0x27
    fdb4:	e58d1004 	str	r1, [sp, #4]
    fdb8:	e3003505 	movw	r3, #1285	; 0x505
    fdbc:	e08f2002 	add	r2, pc, r2
    fdc0:	e59f1648 	ldr	r1, [pc, #1608]	; 10410 <run_read_msg_negative_test+0xe8c>
    fdc4:	e58d2000 	str	r2, [sp]
    fdc8:	e1a08005 	mov	r8, r5
    fdcc:	e59f2640 	ldr	r2, [pc, #1600]	; 10414 <run_read_msg_negative_test+0xe90>
    fdd0:	e08f1001 	add	r1, pc, r1
    fdd4:	e58d0008 	str	r0, [sp, #8]
    fdd8:	e2870028 	add	r0, r7, #40	; 0x28
    fddc:	e08f2002 	add	r2, pc, r2
    fde0:	eb0011dc 	bl	14558 <fprintf>
    fde4:	e59f262c 	ldr	r2, [pc, #1580]	; 10418 <run_read_msg_negative_test+0xe94>
    fde8:	e08f2002 	add	r2, pc, r2
    fdec:	e5923000 	ldr	r3, [r2]
    fdf0:	e2833001 	add	r3, r3, #1
    fdf4:	e5823000 	str	r3, [r2]
	rx_iov[0].base = NULL;
    fdf8:	e3a05000 	mov	r5, #0
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    fdfc:	e1a03006 	mov	r3, r6
    fe00:	e1a02005 	mov	r2, r5
    fe04:	e59d1014 	ldr	r1, [sp, #20]
    fe08:	e1a00004 	mov	r0, r4
	rx_msg.iov     = rx_iov;
    fe0c:	e28dc04c 	add	ip, sp, #76	; 0x4c
	rx_iov[0].base = NULL;
    fe10:	e58d504c 	str	r5, [sp, #76]	; 0x4c
	rx_iov[1].base = NULL;
    fe14:	e58d5054 	str	r5, [sp, #84]	; 0x54
	rx_msg.iov     = rx_iov;
    fe18:	e58dc040 	str	ip, [sp, #64]	; 0x40
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    fe1c:	eb000c88 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_FAULT, rc, "read with invalid iovec");
    fe20:	e59f25f4 	ldr	r2, [pc, #1524]	; 1041c <run_read_msg_negative_test+0xe98>
    fe24:	e3700028 	cmn	r0, #40	; 0x28
    fe28:	e08f2002 	add	r2, pc, r2
    fe2c:	e5923000 	ldr	r3, [r2]
    fe30:	e2833001 	add	r3, r3, #1
    fe34:	e5823000 	str	r3, [r2]
    fe38:	0a000012 	beq	fe88 <run_read_msg_negative_test+0x904>
    fe3c:	e59f25dc 	ldr	r2, [pc, #1500]	; 10420 <run_read_msg_negative_test+0xe9c>
    fe40:	e3e01027 	mvn	r1, #39	; 0x27
    fe44:	e58d1004 	str	r1, [sp, #4]
    fe48:	e300350c 	movw	r3, #1292	; 0x50c
    fe4c:	e08f2002 	add	r2, pc, r2
    fe50:	e59f15cc 	ldr	r1, [pc, #1484]	; 10424 <run_read_msg_negative_test+0xea0>
    fe54:	e58d2000 	str	r2, [sp]
    fe58:	e1a08005 	mov	r8, r5
    fe5c:	e59f25c4 	ldr	r2, [pc, #1476]	; 10428 <run_read_msg_negative_test+0xea4>
    fe60:	e08f1001 	add	r1, pc, r1
    fe64:	e58d0008 	str	r0, [sp, #8]
    fe68:	e2870028 	add	r0, r7, #40	; 0x28
    fe6c:	e08f2002 	add	r2, pc, r2
    fe70:	eb0011b8 	bl	14558 <fprintf>
    fe74:	e59f25b0 	ldr	r2, [pc, #1456]	; 1042c <run_read_msg_negative_test+0xea8>
    fe78:	e08f2002 	add	r2, pc, r2
    fe7c:	e5923000 	ldr	r3, [r2]
    fe80:	e2833001 	add	r3, r3, #1
    fe84:	e5823000 	str	r3, [r2]
	rx_iov[1].base = NULL;
    fe88:	e3a05000 	mov	r5, #0
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    fe8c:	e1a03006 	mov	r3, r6
    fe90:	e1a02005 	mov	r2, r5
    fe94:	e59d1014 	ldr	r1, [sp, #20]
    fe98:	e1a00004 	mov	r0, r4
	rx_iov[1].base = NULL;
    fe9c:	e58d5054 	str	r5, [sp, #84]	; 0x54
	rx_iov[0].base = rx_buf;
    fea0:	e28d90dc 	add	r9, sp, #220	; 0xdc
    fea4:	e58d904c 	str	r9, [sp, #76]	; 0x4c
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    fea8:	eb000c65 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_FAULT, rc, "read with invalid iovec");
    feac:	e59f257c 	ldr	r2, [pc, #1404]	; 10430 <run_read_msg_negative_test+0xeac>
    feb0:	e3700028 	cmn	r0, #40	; 0x28
    feb4:	e08f2002 	add	r2, pc, r2
    feb8:	e5923000 	ldr	r3, [r2]
    febc:	e2833001 	add	r3, r3, #1
    fec0:	e5823000 	str	r3, [r2]
    fec4:	0a000012 	beq	ff14 <run_read_msg_negative_test+0x990>
    fec8:	e59f2564 	ldr	r2, [pc, #1380]	; 10434 <run_read_msg_negative_test+0xeb0>
    fecc:	e3e01027 	mvn	r1, #39	; 0x27
    fed0:	e58d1004 	str	r1, [sp, #4]
    fed4:	e3003511 	movw	r3, #1297	; 0x511
    fed8:	e08f2002 	add	r2, pc, r2
    fedc:	e59f1554 	ldr	r1, [pc, #1364]	; 10438 <run_read_msg_negative_test+0xeb4>
    fee0:	e58d2000 	str	r2, [sp]
    fee4:	e1a08005 	mov	r8, r5
    fee8:	e59f254c 	ldr	r2, [pc, #1356]	; 1043c <run_read_msg_negative_test+0xeb8>
    feec:	e08f1001 	add	r1, pc, r1
    fef0:	e58d0008 	str	r0, [sp, #8]
    fef4:	e2870028 	add	r0, r7, #40	; 0x28
    fef8:	e08f2002 	add	r2, pc, r2
    fefc:	eb001195 	bl	14558 <fprintf>
    ff00:	e59f2538 	ldr	r2, [pc, #1336]	; 10440 <run_read_msg_negative_test+0xebc>
    ff04:	e08f2002 	add	r2, pc, r2
    ff08:	e5923000 	ldr	r3, [r2]
    ff0c:	e2833001 	add	r3, r3, #1
    ff10:	e5823000 	str	r3, [r2]
	rc = read_msg(chan, inf.id, inf.len + 1, &rx_msg);
    ff14:	e59d2010 	ldr	r2, [sp, #16]
    ff18:	e1a03006 	mov	r3, r6
    ff1c:	e59d1014 	ldr	r1, [sp, #20]
    ff20:	e1a00004 	mov	r0, r4
    ff24:	e2822001 	add	r2, r2, #1
	rx_iov[1].base = rx_buf + sizeof(rx_buf) / 2;
    ff28:	e28dc0fc 	add	ip, sp, #252	; 0xfc
	rx_iov[0].base = rx_buf;
    ff2c:	e58d904c 	str	r9, [sp, #76]	; 0x4c
	rx_iov[1].base = rx_buf + sizeof(rx_buf) / 2;
    ff30:	e58dc054 	str	ip, [sp, #84]	; 0x54
	rc = read_msg(chan, inf.id, inf.len + 1, &rx_msg);
    ff34:	eb000c42 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_INVALID_ARGS, rc, "read with invalid offset");
    ff38:	e59f2504 	ldr	r2, [pc, #1284]	; 10444 <run_read_msg_negative_test+0xec0>
    ff3c:	e3700008 	cmn	r0, #8
    ff40:	e08f2002 	add	r2, pc, r2
    ff44:	e5923000 	ldr	r3, [r2]
    ff48:	e2833001 	add	r3, r3, #1
    ff4c:	e5823000 	str	r3, [r2]
    ff50:	0a000012 	beq	ffa0 <run_read_msg_negative_test+0xa1c>
    ff54:	e59f24ec 	ldr	r2, [pc, #1260]	; 10448 <run_read_msg_negative_test+0xec4>
    ff58:	e3e01007 	mvn	r1, #7
    ff5c:	e58d1004 	str	r1, [sp, #4]
    ff60:	e3003518 	movw	r3, #1304	; 0x518
    ff64:	e08f2002 	add	r2, pc, r2
    ff68:	e59f14dc 	ldr	r1, [pc, #1244]	; 1044c <run_read_msg_negative_test+0xec8>
    ff6c:	e58d2000 	str	r2, [sp]
    ff70:	e3a08000 	mov	r8, #0
    ff74:	e59f24d4 	ldr	r2, [pc, #1236]	; 10450 <run_read_msg_negative_test+0xecc>
    ff78:	e08f1001 	add	r1, pc, r1
    ff7c:	e58d0008 	str	r0, [sp, #8]
    ff80:	e2870028 	add	r0, r7, #40	; 0x28
    ff84:	e08f2002 	add	r2, pc, r2
    ff88:	eb001172 	bl	14558 <fprintf>
    ff8c:	e59f24c0 	ldr	r2, [pc, #1216]	; 10454 <run_read_msg_negative_test+0xed0>
    ff90:	e08f2002 	add	r2, pc, r2
    ff94:	e5923000 	ldr	r3, [r2]
    ff98:	e2833001 	add	r3, r3, #1
    ff9c:	e5823000 	str	r3, [r2]
	rx_msg.handles = NULL;
    ffa0:	e3a05000 	mov	r5, #0
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    ffa4:	e1a03006 	mov	r3, r6
    ffa8:	e1a02005 	mov	r2, r5
    ffac:	e59d1014 	ldr	r1, [sp, #20]
    ffb0:	e1a00004 	mov	r0, r4
	rx_msg.num_handles = 1;
    ffb4:	e3a0c001 	mov	ip, #1
	rx_msg.handles = NULL;
    ffb8:	e58d5048 	str	r5, [sp, #72]	; 0x48
	rx_msg.num_handles = 1;
    ffbc:	e58dc044 	str	ip, [sp, #68]	; 0x44
	rc = read_msg(chan, inf.id, 0, &rx_msg);
    ffc0:	eb000c1f 	bl	13044 <read_msg>
	EXPECT_EQ (ERR_NOT_SUPPORTED, rc, "read with handles");
    ffc4:	e59f248c 	ldr	r2, [pc, #1164]	; 10458 <run_read_msg_negative_test+0xed4>
    ffc8:	e3700018 	cmn	r0, #24
    ffcc:	e08f2002 	add	r2, pc, r2
    ffd0:	e5923000 	ldr	r3, [r2]
    ffd4:	e2833001 	add	r3, r3, #1
    ffd8:	e5823000 	str	r3, [r2]
    ffdc:	0a000012 	beq	1002c <run_read_msg_negative_test+0xaa8>
    ffe0:	e59f2474 	ldr	r2, [pc, #1140]	; 1045c <run_read_msg_negative_test+0xed8>
    ffe4:	e3e01017 	mvn	r1, #23
    ffe8:	e58d1004 	str	r1, [sp, #4]
    ffec:	e300351e 	movw	r3, #1310	; 0x51e
    fff0:	e08f2002 	add	r2, pc, r2
    fff4:	e59f1464 	ldr	r1, [pc, #1124]	; 10460 <run_read_msg_negative_test+0xedc>
    fff8:	e58d2000 	str	r2, [sp]
    fffc:	e1a08005 	mov	r8, r5
   10000:	e59f245c 	ldr	r2, [pc, #1116]	; 10464 <run_read_msg_negative_test+0xee0>
   10004:	e08f1001 	add	r1, pc, r1
   10008:	e58d0008 	str	r0, [sp, #8]
   1000c:	e2870028 	add	r0, r7, #40	; 0x28
   10010:	e08f2002 	add	r2, pc, r2
   10014:	eb00114f 	bl	14558 <fprintf>
   10018:	e59f2448 	ldr	r2, [pc, #1096]	; 10468 <run_read_msg_negative_test+0xee4>
   1001c:	e08f2002 	add	r2, pc, r2
   10020:	e5923000 	ldr	r3, [r2]
   10024:	e2833001 	add	r3, r3, #1
   10028:	e5823000 	str	r3, [r2]
	EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
   1002c:	e59f5438 	ldr	r5, [pc, #1080]	; 1046c <run_read_msg_negative_test+0xee8>
	rc = put_msg(chan, inf.id);
   10030:	e1a00004 	mov	r0, r4
   10034:	e59d1014 	ldr	r1, [sp, #20]
	rx_msg.num_handles = 0;
   10038:	e3a06000 	mov	r6, #0
	EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
   1003c:	e08f5005 	add	r5, pc, r5
	rx_msg.num_handles = 0;
   10040:	e58d6044 	str	r6, [sp, #68]	; 0x44
	rc = put_msg(chan, inf.id);
   10044:	eb000c01 	bl	13050 <put_msg>
	EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
   10048:	e3500000 	cmp	r0, #0
   1004c:	e5953000 	ldr	r3, [r5]
   10050:	e2833001 	add	r3, r3, #1
   10054:	e5853000 	str	r3, [r5]
   10058:	1a000018 	bne	100c0 <run_read_msg_negative_test+0xb3c>
	rc = close(chan);
   1005c:	e1a00004 	mov	r0, r4
   10060:	eb000be8 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
   10064:	e5953000 	ldr	r3, [r5]
   10068:	e3500000 	cmp	r0, #0
   1006c:	e2833001 	add	r3, r3, #1
   10070:	e5853000 	str	r3, [r5]
   10074:	1a000028 	bne	1011c <run_read_msg_negative_test+0xb98>
	TEST_END
   10078:	e3580000 	cmp	r8, #0
   1007c:	1a000085 	bne	10298 <run_read_msg_negative_test+0xd14>
   10080:	e59f33e8 	ldr	r3, [pc, #1000]	; 10470 <run_read_msg_negative_test+0xeec>
   10084:	e2870028 	add	r0, r7, #40	; 0x28
   10088:	e59f23e4 	ldr	r2, [pc, #996]	; 10474 <run_read_msg_negative_test+0xef0>
   1008c:	e59f13e4 	ldr	r1, [pc, #996]	; 10478 <run_read_msg_negative_test+0xef4>
   10090:	e08f3003 	add	r3, pc, r3
   10094:	e08f2002 	add	r2, pc, r2
   10098:	e58d3000 	str	r3, [sp]
   1009c:	e08f1001 	add	r1, pc, r1
   100a0:	e3003528 	movw	r3, #1320	; 0x528
   100a4:	eb00112b 	bl	14558 <fprintf>
}
   100a8:	e59d211c 	ldr	r2, [sp, #284]	; 0x11c
   100ac:	e59a3000 	ldr	r3, [sl]
   100b0:	e1520003 	cmp	r2, r3
   100b4:	1a000082 	bne	102c4 <run_read_msg_negative_test+0xd40>
   100b8:	e28ddf49 	add	sp, sp, #292	; 0x124
   100bc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
   100c0:	e59f23b4 	ldr	r2, [pc, #948]	; 1047c <run_read_msg_negative_test+0xef8>
   100c4:	e3003523 	movw	r3, #1315	; 0x523
   100c8:	e59f13b0 	ldr	r1, [pc, #944]	; 10480 <run_read_msg_negative_test+0xefc>
   100cc:	e08f2002 	add	r2, pc, r2
   100d0:	e88d0044 	stm	sp, {r2, r6}
   100d4:	e59f23a8 	ldr	r2, [pc, #936]	; 10484 <run_read_msg_negative_test+0xf00>
   100d8:	e08f1001 	add	r1, pc, r1
   100dc:	e58d0008 	str	r0, [sp, #8]
   100e0:	e2870028 	add	r0, r7, #40	; 0x28
   100e4:	e08f2002 	add	r2, pc, r2
   100e8:	eb00111a 	bl	14558 <fprintf>
   100ec:	e59f2394 	ldr	r2, [pc, #916]	; 10488 <run_read_msg_negative_test+0xf04>
	rc = close(chan);
   100f0:	e1a00004 	mov	r0, r4
	EXPECT_EQ (NO_ERROR, rc, "putting echo msg");
   100f4:	e08f2002 	add	r2, pc, r2
   100f8:	e5923000 	ldr	r3, [r2]
   100fc:	e2833001 	add	r3, r3, #1
   10100:	e5823000 	str	r3, [r2]
	rc = close(chan);
   10104:	eb000bbf 	bl	13008 <close>
	EXPECT_EQ (NO_ERROR, rc, "close channel");
   10108:	e5953000 	ldr	r3, [r5]
   1010c:	e3500000 	cmp	r0, #0
   10110:	e2833001 	add	r3, r3, #1
   10114:	e5853000 	str	r3, [r5]
   10118:	0affffd8 	beq	10080 <run_read_msg_negative_test+0xafc>
   1011c:	e59f2368 	ldr	r2, [pc, #872]	; 1048c <run_read_msg_negative_test+0xf08>
   10120:	e3a01000 	mov	r1, #0
   10124:	e58d1004 	str	r1, [sp, #4]
   10128:	e3003526 	movw	r3, #1318	; 0x526
   1012c:	e08f2002 	add	r2, pc, r2
   10130:	e59f1358 	ldr	r1, [pc, #856]	; 10490 <run_read_msg_negative_test+0xf0c>
   10134:	e58d2000 	str	r2, [sp]
   10138:	e59f2354 	ldr	r2, [pc, #852]	; 10494 <run_read_msg_negative_test+0xf10>
   1013c:	e08f1001 	add	r1, pc, r1
   10140:	e58d0008 	str	r0, [sp, #8]
   10144:	e2870028 	add	r0, r7, #40	; 0x28
   10148:	e08f2002 	add	r2, pc, r2
   1014c:	eb001101 	bl	14558 <fprintf>
   10150:	e59f2340 	ldr	r2, [pc, #832]	; 10498 <run_read_msg_negative_test+0xf14>
   10154:	e08f2002 	add	r2, pc, r2
   10158:	e5923000 	ldr	r3, [r2]
   1015c:	e2833001 	add	r3, r3, #1
   10160:	e5823000 	str	r3, [r2]
   10164:	eaffffc5 	b	10080 <run_read_msg_negative_test+0xafc>
	EXPECT_EQ (NO_ERROR, rc, "getting echo msg");
   10168:	e59f232c 	ldr	r2, [pc, #812]	; 1049c <run_read_msg_negative_test+0xf18>
   1016c:	e30034f9 	movw	r3, #1273	; 0x4f9
   10170:	e59f1328 	ldr	r1, [pc, #808]	; 104a0 <run_read_msg_negative_test+0xf1c>
   10174:	e3a08000 	mov	r8, #0
   10178:	e08f2002 	add	r2, pc, r2
   1017c:	e58d2000 	str	r2, [sp]
   10180:	e59f231c 	ldr	r2, [pc, #796]	; 104a4 <run_read_msg_negative_test+0xf20>
   10184:	e08f1001 	add	r1, pc, r1
   10188:	e58d0008 	str	r0, [sp, #8]
   1018c:	e2870028 	add	r0, r7, #40	; 0x28
   10190:	e08f2002 	add	r2, pc, r2
   10194:	e58d8004 	str	r8, [sp, #4]
   10198:	eb0010ee 	bl	14558 <fprintf>
   1019c:	e59f1304 	ldr	r1, [pc, #772]	; 104a8 <run_read_msg_negative_test+0xf24>
   101a0:	e5953000 	ldr	r3, [r5]
   101a4:	e08f1001 	add	r1, pc, r1
   101a8:	e5912000 	ldr	r2, [r1]
   101ac:	e2822001 	add	r2, r2, #1
   101b0:	e5812000 	str	r2, [r1]
   101b4:	eafffecf 	b	fcf8 <run_read_msg_negative_test+0x774>
	EXPECT_EQ (NO_ERROR, rc, "waiting on echo response");
   101b8:	e59f22ec 	ldr	r2, [pc, #748]	; 104ac <run_read_msg_negative_test+0xf28>
   101bc:	e30034f5 	movw	r3, #1269	; 0x4f5
   101c0:	e59f12e8 	ldr	r1, [pc, #744]	; 104b0 <run_read_msg_negative_test+0xf2c>
   101c4:	e3a08000 	mov	r8, #0
   101c8:	e08f2002 	add	r2, pc, r2
   101cc:	e58d2000 	str	r2, [sp]
   101d0:	e59f22dc 	ldr	r2, [pc, #732]	; 104b4 <run_read_msg_negative_test+0xf30>
   101d4:	e08f1001 	add	r1, pc, r1
   101d8:	e58d0008 	str	r0, [sp, #8]
   101dc:	e2870028 	add	r0, r7, #40	; 0x28
   101e0:	e08f2002 	add	r2, pc, r2
   101e4:	e58d8004 	str	r8, [sp, #4]
   101e8:	eb0010da 	bl	14558 <fprintf>
   101ec:	e59f12c4 	ldr	r1, [pc, #708]	; 104b8 <run_read_msg_negative_test+0xf34>
   101f0:	e5953000 	ldr	r3, [r5]
   101f4:	e08f1001 	add	r1, pc, r1
   101f8:	e5912000 	ldr	r2, [r1]
   101fc:	e2822001 	add	r2, r2, #1
   10200:	e5812000 	str	r2, [r1]
   10204:	eafffe98 	b	fc6c <run_read_msg_negative_test+0x6e8>
	EXPECT_GE_ZERO (rc, "connect to datasink");
   10208:	e59f22ac 	ldr	r2, [pc, #684]	; 104bc <run_read_msg_negative_test+0xf38>
   1020c:	e30034d9 	movw	r3, #1241	; 0x4d9
   10210:	e59f12a8 	ldr	r1, [pc, #680]	; 104c0 <run_read_msg_negative_test+0xf3c>
   10214:	e2870028 	add	r0, r7, #40	; 0x28
   10218:	e08f2002 	add	r2, pc, r2
   1021c:	e58d2000 	str	r2, [sp]
   10220:	e59f229c 	ldr	r2, [pc, #668]	; 104c4 <run_read_msg_negative_test+0xf40>
   10224:	e08f1001 	add	r1, pc, r1
   10228:	e58d4004 	str	r4, [sp, #4]
   1022c:	e3a08000 	mov	r8, #0
   10230:	e08f2002 	add	r2, pc, r2
   10234:	eb0010c7 	bl	14558 <fprintf>
   10238:	e59f2288 	ldr	r2, [pc, #648]	; 104c8 <run_read_msg_negative_test+0xf44>
   1023c:	e08f2002 	add	r2, pc, r2
   10240:	e5923000 	ldr	r3, [r2]
   10244:	e2833001 	add	r3, r3, #1
   10248:	e5823000 	str	r3, [r2]
   1024c:	eafffdf3 	b	fa20 <run_read_msg_negative_test+0x49c>
	EXPECT_GE_ZERO (rc, "create datasink port");
   10250:	e59f2274 	ldr	r2, [pc, #628]	; 104cc <run_read_msg_negative_test+0xf48>
   10254:	e30034cf 	movw	r3, #1231	; 0x4cf
   10258:	e59f1270 	ldr	r1, [pc, #624]	; 104d0 <run_read_msg_negative_test+0xf4c>
   1025c:	e2870028 	add	r0, r7, #40	; 0x28
   10260:	e08f2002 	add	r2, pc, r2
   10264:	e58d2000 	str	r2, [sp]
   10268:	e59f2264 	ldr	r2, [pc, #612]	; 104d4 <run_read_msg_negative_test+0xf50>
   1026c:	e08f1001 	add	r1, pc, r1
   10270:	e58d5004 	str	r5, [sp, #4]
   10274:	e3a08000 	mov	r8, #0
   10278:	e08f2002 	add	r2, pc, r2
   1027c:	eb0010b5 	bl	14558 <fprintf>
   10280:	e59f2250 	ldr	r2, [pc, #592]	; 104d8 <run_read_msg_negative_test+0xf54>
   10284:	e08f2002 	add	r2, pc, r2
   10288:	e5923000 	ldr	r3, [r2]
   1028c:	e2833001 	add	r3, r3, #1
   10290:	e5823000 	str	r3, [r2]
   10294:	eafffdae 	b	f954 <run_read_msg_negative_test+0x3d0>
	TEST_END
   10298:	e59f323c 	ldr	r3, [pc, #572]	; 104dc <run_read_msg_negative_test+0xf58>
   1029c:	e2870028 	add	r0, r7, #40	; 0x28
   102a0:	e59f2238 	ldr	r2, [pc, #568]	; 104e0 <run_read_msg_negative_test+0xf5c>
   102a4:	e59f1238 	ldr	r1, [pc, #568]	; 104e4 <run_read_msg_negative_test+0xf60>
   102a8:	e08f3003 	add	r3, pc, r3
   102ac:	e08f2002 	add	r2, pc, r2
   102b0:	e58d3000 	str	r3, [sp]
   102b4:	e08f1001 	add	r1, pc, r1
   102b8:	e3003528 	movw	r3, #1320	; 0x528
   102bc:	eb0010a5 	bl	14558 <fprintf>
   102c0:	eaffff78 	b	100a8 <run_read_msg_negative_test+0xb24>
}
   102c4:	eb0010bf 	bl	145c8 <__stack_chk_fail>
   102c8:	00006a84 	.word	0x00006a84
   102cc:	0000000c 	.word	0x0000000c
   102d0:	00000010 	.word	0x00000010
   102d4:	000062bc 	.word	0x000062bc
   102d8:	00005878 	.word	0x00005878
   102dc:	000062b8 	.word	0x000062b8
   102e0:	00006a94 	.word	0x00006a94
   102e4:	00006444 	.word	0x00006444
   102e8:	000063f8 	.word	0x000063f8
   102ec:	00006a40 	.word	0x00006a40
   102f0:	00006a18 	.word	0x00006a18
   102f4:	000063d0 	.word	0x000063d0
   102f8:	000063d8 	.word	0x000063d8
   102fc:	0000618c 	.word	0x0000618c
   10300:	000069c4 	.word	0x000069c4
   10304:	0000699c 	.word	0x0000699c
   10308:	000063a8 	.word	0x000063a8
   1030c:	00006304 	.word	0x00006304
   10310:	00006110 	.word	0x00006110
   10314:	00006948 	.word	0x00006948
   10318:	00006920 	.word	0x00006920
   1031c:	0000632c 	.word	0x0000632c
   10320:	000062e0 	.word	0x000062e0
   10324:	00006094 	.word	0x00006094
   10328:	000068cc 	.word	0x000068cc
   1032c:	000068b4 	.word	0x000068b4
   10330:	00006068 	.word	0x00006068
   10334:	000062b8 	.word	0x000062b8
   10338:	00006188 	.word	0x00006188
   1033c:	00006848 	.word	0x00006848
   10340:	00006820 	.word	0x00006820
   10344:	0000622c 	.word	0x0000622c
   10348:	000061e0 	.word	0x000061e0
   1034c:	00005f94 	.word	0x00005f94
   10350:	000067cc 	.word	0x000067cc
   10354:	00006208 	.word	0x00006208
   10358:	00005f78 	.word	0x00005f78
   1035c:	0000620c 	.word	0x0000620c
   10360:	00006774 	.word	0x00006774
   10364:	00006744 	.word	0x00006744
   10368:	000061f4 	.word	0x000061f4
   1036c:	000061a4 	.word	0x000061a4
   10370:	00005eb8 	.word	0x00005eb8
   10374:	000066f0 	.word	0x000066f0
   10378:	00005ce8 	.word	0x00005ce8
   1037c:	00005ea4 	.word	0x00005ea4
   10380:	00005a9c 	.word	0x00005a9c
   10384:	000066a8 	.word	0x000066a8
   10388:	00006678 	.word	0x00006678
   1038c:	00006084 	.word	0x00006084
   10390:	00006038 	.word	0x00006038
   10394:	00005dec 	.word	0x00005dec
   10398:	00006624 	.word	0x00006624
   1039c:	000065fc 	.word	0x000065fc
   103a0:	000060d4 	.word	0x000060d4
   103a4:	0000605c 	.word	0x0000605c
   103a8:	00005d70 	.word	0x00005d70
   103ac:	000065a8 	.word	0x000065a8
   103b0:	00006580 	.word	0x00006580
   103b4:	00006058 	.word	0x00006058
   103b8:	00005fe0 	.word	0x00005fe0
   103bc:	00005cf4 	.word	0x00005cf4
   103c0:	0000652c 	.word	0x0000652c
   103c4:	000064d0 	.word	0x000064d0
   103c8:	00005b10 	.word	0x00005b10
   103cc:	00005ad4 	.word	0x00005ad4
   103d0:	00005c4c 	.word	0x00005c4c
   103d4:	00006480 	.word	0x00006480
   103d8:	00006464 	.word	0x00006464
   103dc:	0000643c 	.word	0x0000643c
   103e0:	00005aec 	.word	0x00005aec
   103e4:	00005bc0 	.word	0x00005bc0
   103e8:	00005a94 	.word	0x00005a94
   103ec:	000063f0 	.word	0x000063f0
   103f0:	000063d8 	.word	0x000063d8
   103f4:	000063b0 	.word	0x000063b0
   103f8:	00005ee8 	.word	0x00005ee8
   103fc:	00005b34 	.word	0x00005b34
   10400:	00005e88 	.word	0x00005e88
   10404:	00006360 	.word	0x00006360
   10408:	0000631c 	.word	0x0000631c
   1040c:	00005e6c 	.word	0x00005e6c
   10410:	00005cdc 	.word	0x00005cdc
   10414:	00005a90 	.word	0x00005a90
   10418:	000062c8 	.word	0x000062c8
   1041c:	0000628c 	.word	0x0000628c
   10420:	00005dfc 	.word	0x00005dfc
   10424:	00005c4c 	.word	0x00005c4c
   10428:	00005a00 	.word	0x00005a00
   1042c:	00006238 	.word	0x00006238
   10430:	00006200 	.word	0x00006200
   10434:	00005d70 	.word	0x00005d70
   10438:	00005bc0 	.word	0x00005bc0
   1043c:	00005974 	.word	0x00005974
   10440:	000061ac 	.word	0x000061ac
   10444:	00006174 	.word	0x00006174
   10448:	00005cfc 	.word	0x00005cfc
   1044c:	00005bd4 	.word	0x00005bd4
   10450:	000058e8 	.word	0x000058e8
   10454:	00006120 	.word	0x00006120
   10458:	000060e8 	.word	0x000060e8
   1045c:	00005ccc 	.word	0x00005ccc
   10460:	00005c78 	.word	0x00005c78
   10464:	0000585c 	.word	0x0000585c
   10468:	00006094 	.word	0x00006094
   1046c:	00006078 	.word	0x00006078
   10470:	00004da8 	.word	0x00004da8
   10474:	000057d8 	.word	0x000057d8
   10478:	000059a4 	.word	0x000059a4
   1047c:	000056f0 	.word	0x000056f0
   10480:	000058c0 	.word	0x000058c0
   10484:	00005788 	.word	0x00005788
   10488:	00005fbc 	.word	0x00005fbc
   1048c:	00005730 	.word	0x00005730
   10490:	0000585c 	.word	0x0000585c
   10494:	00005724 	.word	0x00005724
   10498:	00005f5c 	.word	0x00005f5c
   1049c:	0000561c 	.word	0x0000561c
   104a0:	00005814 	.word	0x00005814
   104a4:	000056dc 	.word	0x000056dc
   104a8:	00005f0c 	.word	0x00005f0c
   104ac:	00005564 	.word	0x00005564
   104b0:	000057c4 	.word	0x000057c4
   104b4:	0000568c 	.word	0x0000568c
   104b8:	00005ebc 	.word	0x00005ebc
   104bc:	00005984 	.word	0x00005984
   104c0:	00005698 	.word	0x00005698
   104c4:	0000563c 	.word	0x0000563c
   104c8:	00005e74 	.word	0x00005e74
   104cc:	000058d4 	.word	0x000058d4
   104d0:	00005650 	.word	0x00005650
   104d4:	000055f4 	.word	0x000055f4
   104d8:	00005e2c 	.word	0x00005e2c
   104dc:	00004b90 	.word	0x00004b90
   104e0:	000055c0 	.word	0x000055c0
   104e4:	00005778 	.word	0x00005778

000104e8 <_start>:

__attribute__ ((section (".bss")))
void *__dso_handle = (void *) 0;

/* Arguments are supplied in memory pointed by r0 */
void _start(void *args) {
   104e8:	e92d4800 	push	{fp, lr}
   104ec:	e28db004 	add	fp, sp, #4
   104f0:	e24dd018 	sub	sp, sp, #24
   104f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
   104f8:	e59f3068 	ldr	r3, [pc, #104]	; 10568 <_start+0x80>
   104fc:	e08f3003 	add	r3, pc, r3
   10500:	e59f2064 	ldr	r2, [pc, #100]	; 1056c <_start+0x84>
   10504:	e7932002 	ldr	r2, [r3, r2]
   10508:	e5922000 	ldr	r2, [r2]
   1050c:	e50b2008 	str	r2, [fp, #-8]
  structors_array_t array;
  array.preinit_array = &__PREINIT_ARRAY__;
   10510:	e59f2058 	ldr	r2, [pc, #88]	; 10570 <_start+0x88>
   10514:	e08f2002 	add	r2, pc, r2
   10518:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  array.init_array = &__INIT_ARRAY__;
   1051c:	e59f2050 	ldr	r2, [pc, #80]	; 10574 <_start+0x8c>
   10520:	e08f2002 	add	r2, pc, r2
   10524:	e50b2010 	str	r2, [fp, #-16]
  array.fini_array = (&__FINI_ARRAY__)[0] ? &__FINI_ARRAY__ : 0;
   10528:	e59f2048 	ldr	r2, [pc, #72]	; 10578 <_start+0x90>
   1052c:	e08f2002 	add	r2, pc, r2
   10530:	e5922000 	ldr	r2, [r2]
   10534:	e3520000 	cmp	r2, #0
   10538:	0a000002 	beq	10548 <_start+0x60>
   1053c:	e59f2038 	ldr	r2, [pc, #56]	; 1057c <_start+0x94>
   10540:	e08f2002 	add	r2, pc, r2
   10544:	ea000000 	b	1054c <_start+0x64>
   10548:	e3a02000 	mov	r2, #0
   1054c:	e50b200c 	str	r2, [fp, #-12]

  __libc_init(args, &main, &array);
   10550:	e24b2014 	sub	r2, fp, #20
   10554:	e59f1024 	ldr	r1, [pc, #36]	; 10580 <_start+0x98>
   10558:	e7933001 	ldr	r3, [r3, r1]
   1055c:	e1a01003 	mov	r1, r3
   10560:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
   10564:	eb000a56 	bl	12ec4 <__libc_init>
   10568:	00005b18 	.word	0x00005b18
   1056c:	0000000c 	.word	0x0000000c
   10570:	00005ae4 	.word	0x00005ae4
   10574:	00005ae0 	.word	0x00005ae0
   10578:	00005ae0 	.word	0x00005ae0
   1057c:	00005acc 	.word	0x00005acc
   10580:	00000018 	.word	0x00000018

00010584 <abort>:

#include <stdlib.h>
#include <trusty_std.h>

void abort(void)
{
   10584:	e92d4010 	push	{r4, lr}
	exit(1);
   10588:	e3a00001 	mov	r0, #1
   1058c:	ebffde9b 	bl	8000 <exit>

00010590 <__cxa_atexit>:
 *
 *	http://www.codesourcery.com/cxx-abi/abi.html#dso-dtor
 */
int
__cxa_atexit(void (*func)(void *), void *arg)
{
   10590:	e59f30c4 	ldr	r3, [pc, #196]	; 1065c <__cxa_atexit+0xcc>
	struct atexit *p = __atexit;
   10594:	e59f20c4 	ldr	r2, [pc, #196]	; 10660 <__cxa_atexit+0xd0>
{
   10598:	e08f3003 	add	r3, pc, r3
   1059c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
   105a0:	e1a06000 	mov	r6, r0
   105a4:	e1a05001 	mov	r5, r1
	struct atexit *p = __atexit;
   105a8:	e7937002 	ldr	r7, [r3, r2]
   105ac:	e5974000 	ldr	r4, [r7]
	struct atexit_fn *fnp;
	int size = 64;
	int ret = -1;

	if (p != NULL) {
   105b0:	e3540000 	cmp	r4, #0
   105b4:	0a000004 	beq	105cc <__cxa_atexit+0x3c>
		if (p->ind + 1 >= p->max)
   105b8:	e5943004 	ldr	r3, [r4, #4]
   105bc:	e5941008 	ldr	r1, [r4, #8]
   105c0:	e2832001 	add	r2, r3, #1
   105c4:	e1520001 	cmp	r2, r1
   105c8:	ba000014 	blt	10620 <__cxa_atexit+0x90>
			p = NULL;
	}
	if (p == NULL) {
		p = malloc(size);
   105cc:	e3a00040 	mov	r0, #64	; 0x40
   105d0:	eb00011c 	bl	10a48 <malloc>
		if (!p)
   105d4:	e2504000 	subs	r4, r0, #0
   105d8:	0a00001d 	beq	10654 <__cxa_atexit+0xc4>
			goto done;
		if (__atexit == NULL) {
   105dc:	e5971000 	ldr	r1, [r7]
   105e0:	e3510000 	cmp	r1, #0
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
			p->ind = 1;
		} else
			p->ind = 0;
   105e4:	13a03000 	movne	r3, #0
   105e8:	15843004 	strne	r3, [r4, #4]
		if (__atexit == NULL) {
   105ec:	0a000011 	beq	10638 <__cxa_atexit+0xa8>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
		    sizeof(p->fns[0]);
		p->next = __atexit;
		__atexit = p;
		if (__atexit_invalid)
   105f0:	e59f206c 	ldr	r2, [pc, #108]	; 10664 <__cxa_atexit+0xd4>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
   105f4:	e3a03006 	mov	r3, #6
   105f8:	e5843008 	str	r3, [r4, #8]
		if (__atexit_invalid)
   105fc:	e08f2002 	add	r2, pc, r2
		p->next = __atexit;
   10600:	e5841000 	str	r1, [r4]
		__atexit = p;
   10604:	e5874000 	str	r4, [r7]
		if (__atexit_invalid)
   10608:	e5923000 	ldr	r3, [r2]
   1060c:	e3530000 	cmp	r3, #0
   10610:	e5943004 	ldr	r3, [r4, #4]
			__atexit_invalid = 0;
   10614:	13a01000 	movne	r1, #0
   10618:	15821000 	strne	r1, [r2]
   1061c:	e2832001 	add	r2, r3, #1
   10620:	e0843183 	add	r3, r4, r3, lsl #3
	}
	fnp = &p->fns[p->ind++];
   10624:	e5842004 	str	r2, [r4, #4]
	fnp->fn_ptr.cxa_func = func;
	fnp->fn_arg = arg;
	ret = 0;
   10628:	e3a00000 	mov	r0, #0
	fnp->fn_ptr.cxa_func = func;
   1062c:	e583600c 	str	r6, [r3, #12]
	fnp->fn_arg = arg;
   10630:	e5835010 	str	r5, [r3, #16]
   10634:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
   10638:	e3a02008 	mov	r2, #8
   1063c:	e284000c 	add	r0, r4, #12
   10640:	eb001009 	bl	1466c <memset>
			p->ind = 1;
   10644:	e3a03001 	mov	r3, #1
   10648:	e5971000 	ldr	r1, [r7]
   1064c:	e5843004 	str	r3, [r4, #4]
   10650:	eaffffe6 	b	105f0 <__cxa_atexit+0x60>
	int ret = -1;
   10654:	e3e00000 	mvn	r0, #0
done:
	return (ret);
}
   10658:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   1065c:	00005a7c 	.word	0x00005a7c
   10660:	00000014 	.word	0x00000014
   10664:	00005a34 	.word	0x00005a34

00010668 <__cxa_finalize>:
	struct atexit *p, *q;
	struct atexit_fn fn;
	int n;
	static int call_depth;

	if (__atexit_invalid)
   10668:	e59f30c8 	ldr	r3, [pc, #200]	; 10738 <__cxa_finalize+0xd0>
{
   1066c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (__atexit_invalid)
   10670:	e08f3003 	add	r3, pc, r3
{
   10674:	e59f20c0 	ldr	r2, [pc, #192]	; 1073c <__cxa_finalize+0xd4>
	if (__atexit_invalid)
   10678:	e5936000 	ldr	r6, [r3]
{
   1067c:	e08f2002 	add	r2, pc, r2
	if (__atexit_invalid)
   10680:	e3560000 	cmp	r6, #0
   10684:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
		return;

	call_depth++;
   10688:	e59f00b0 	ldr	r0, [pc, #176]	; 10740 <__cxa_finalize+0xd8>

	for (p = __atexit; p != NULL; p = p->next) {
   1068c:	e59f10b0 	ldr	r1, [pc, #176]	; 10744 <__cxa_finalize+0xdc>
	call_depth++;
   10690:	e08f0000 	add	r0, pc, r0
   10694:	e5903000 	ldr	r3, [r0]
   10698:	e2833001 	add	r3, r3, #1
   1069c:	e5803000 	str	r3, [r0]
	for (p = __atexit; p != NULL; p = p->next) {
   106a0:	e7928001 	ldr	r8, [r2, r1]
   106a4:	e5987000 	ldr	r7, [r8]
   106a8:	e3570000 	cmp	r7, #0
   106ac:	0a000011 	beq	106f8 <__cxa_finalize+0x90>
		for (n = p->ind; --n >= 0;) {
   106b0:	e5975004 	ldr	r5, [r7, #4]
   106b4:	e0874185 	add	r4, r7, r5, lsl #3
   106b8:	ea000006 	b	106d8 <__cxa_finalize+0x70>
			if (p->fns[n].fn_ptr.cxa_func == NULL)
   106bc:	e5943004 	ldr	r3, [r4, #4]
   106c0:	e3530000 	cmp	r3, #0
   106c4:	0a000002 	beq	106d4 <__cxa_finalize+0x6c>

			/*
			 * Mark handler as having been already called to avoid
			 * dupes and loops, then call the appropriate function.
			 */
			fn = p->fns[n];
   106c8:	e5940008 	ldr	r0, [r4, #8]
			p->fns[n].fn_ptr.cxa_func = NULL;
   106cc:	e5846004 	str	r6, [r4, #4]
                        (*fn.fn_ptr.cxa_func)(fn.fn_arg);
   106d0:	e12fff33 	blx	r3
   106d4:	e2444008 	sub	r4, r4, #8
		for (n = p->ind; --n >= 0;) {
   106d8:	e2555001 	subs	r5, r5, #1
   106dc:	5afffff6 	bpl	106bc <__cxa_finalize+0x54>
	for (p = __atexit; p != NULL; p = p->next) {
   106e0:	e5977000 	ldr	r7, [r7]
   106e4:	e3570000 	cmp	r7, #0
   106e8:	1afffff0 	bne	106b0 <__cxa_finalize+0x48>
   106ec:	e59f3054 	ldr	r3, [pc, #84]	; 10748 <__cxa_finalize+0xe0>
   106f0:	e08f3003 	add	r3, pc, r3
   106f4:	e5933000 	ldr	r3, [r3]
	/*
	 * If called via exit(), unmap the pages since we have now run
	 * all the handlers.  We defer this until calldepth == 0 so that
	 * we don't unmap things prematurely if called recursively.
	 */
	if (--call_depth == 0) {
   106f8:	e59f204c 	ldr	r2, [pc, #76]	; 1074c <__cxa_finalize+0xe4>
   106fc:	e2433001 	sub	r3, r3, #1
   10700:	e3530000 	cmp	r3, #0
   10704:	e08f2002 	add	r2, pc, r2
   10708:	e5823000 	str	r3, [r2]
   1070c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
		for (p = __atexit; p != NULL; ) {
   10710:	e5980000 	ldr	r0, [r8]
   10714:	e3500000 	cmp	r0, #0
   10718:	0a000003 	beq	1072c <__cxa_finalize+0xc4>
			q = p;
			p = p->next;
   1071c:	e5904000 	ldr	r4, [r0]
			free(q);
   10720:	eb000772 	bl	124f0 <free>
		for (p = __atexit; p != NULL; ) {
   10724:	e2540000 	subs	r0, r4, #0
   10728:	1afffffb 	bne	1071c <__cxa_finalize+0xb4>
		}
		__atexit = NULL;
   1072c:	e3a03000 	mov	r3, #0
   10730:	e5883000 	str	r3, [r8]
	}
}
   10734:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
   10738:	000059c0 	.word	0x000059c0
   1073c:	00005998 	.word	0x00005998
   10740:	00005a28 	.word	0x00005a28
   10744:	00000014 	.word	0x00000014
   10748:	000059c8 	.word	0x000059c8
   1074c:	000059b4 	.word	0x000059b4

00010750 <sbrk>:

static char *__libc_brk;

#define SBRK_ALIGN	32
static void *sbrk(ptrdiff_t increment)
{
   10750:	e92d4070 	push	{r4, r5, r6, lr}
   10754:	e1a04000 	mov	r4, r0
	char *new_brk;
	char *start;
	char *end;

	if (!__libc_brk)
   10758:	e59f5050 	ldr	r5, [pc, #80]	; 107b0 <sbrk+0x60>
   1075c:	e08f5005 	add	r5, pc, r5
   10760:	e5950000 	ldr	r0, [r5]
   10764:	e3500000 	cmp	r0, #0
   10768:	0a00000d 	beq	107a4 <sbrk+0x54>
		__libc_brk = (char *)brk(0);

	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
   1076c:	e280001f 	add	r0, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
   10770:	e284401f 	add	r4, r4, #31
	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
   10774:	e3c0501f 	bic	r5, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
   10778:	e3c4401f 	bic	r4, r4, #31
   1077c:	e0854004 	add	r4, r5, r4

	new_brk = (char *)brk((uint32_t)end);
   10780:	e1a00004 	mov	r0, r4
   10784:	eb000a0d 	bl	12fc0 <brk>
	if (new_brk < end)
   10788:	e1540000 	cmp	r4, r0
		return (void *)-1;
   1078c:	83e05000 	mvnhi	r5, #0

	__libc_brk = new_brk;
   10790:	959f301c 	ldrls	r3, [pc, #28]	; 107b4 <sbrk+0x64>
   10794:	908f3003 	addls	r3, pc, r3
   10798:	95830000 	strls	r0, [r3]
	return start;
}
   1079c:	e1a00005 	mov	r0, r5
   107a0:	e8bd8070 	pop	{r4, r5, r6, pc}
		__libc_brk = (char *)brk(0);
   107a4:	eb000a05 	bl	12fc0 <brk>
   107a8:	e5850000 	str	r0, [r5]
   107ac:	eaffffee 	b	1076c <sbrk+0x1c>
   107b0:	00005960 	.word	0x00005960
   107b4:	00005928 	.word	0x00005928

000107b8 <init_mparams.part.2>:
static void post_fork_parent(void) { RELEASE_LOCK(&(gm)->mutex); }
static void post_fork_child(void)  { INITIAL_LOCK(&(gm)->mutex); }
#endif /* LOCK_AT_FORK */

/* Initialize mparams */
static int init_mparams(void) {
   107b8:	e59f1084 	ldr	r1, [pc, #132]	; 10844 <init_mparams.part.2+0x8c>
      magic = (size_t)&magic ^ (size_t)0x55555555U;
#else
      magic = (size_t)(time(0) ^ (size_t)0x55555555U);
#endif
      magic |= (size_t)8U;    /* ensure nonzero */
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
   107bc:	e3052550 	movw	r2, #21840	; 0x5550
   107c0:	e3452555 	movt	r2, #21845	; 0x5555
static int init_mparams(void) {
   107c4:	e59fc07c 	ldr	ip, [pc, #124]	; 10848 <init_mparams.part.2+0x90>
   107c8:	e08f1001 	add	r1, pc, r1
   107cc:	e92d4010 	push	{r4, lr}
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
   107d0:	e3e04000 	mvn	r4, #0
    mparams.granularity = gsize;
   107d4:	e59f3070 	ldr	r3, [pc, #112]	; 1084c <init_mparams.part.2+0x94>
static int init_mparams(void) {
   107d8:	e24dd008 	sub	sp, sp, #8
   107dc:	e791e00c 	ldr	lr, [r1, ip]
    mparams.granularity = gsize;
   107e0:	e08f3003 	add	r3, pc, r3
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
   107e4:	e1a0000d 	mov	r0, sp
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
   107e8:	e3a01602 	mov	r1, #2097152	; 0x200000
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
   107ec:	e0222000 	eor	r2, r2, r0
    gm->mflags = mparams.default_mflags;
   107f0:	e59f0058 	ldr	r0, [pc, #88]	; 10850 <init_mparams.part.2+0x98>
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
   107f4:	e5831010 	str	r1, [r3, #16]
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
   107f8:	e3822008 	orr	r2, r2, #8
static int init_mparams(void) {
   107fc:	e59e1000 	ldr	r1, [lr]
    gm->mflags = mparams.default_mflags;
   10800:	e08f0000 	add	r0, pc, r0
static int init_mparams(void) {
   10804:	e58d1004 	str	r1, [sp, #4]
    mparams.granularity = gsize;
   10808:	e3a0ca01 	mov	ip, #4096	; 0x1000
      /* Until memory modes commonly available, use volatile-write */
      (*(volatile size_t *)(&(mparams.magic))) = magic;
   1080c:	e5832000 	str	r2, [r3]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
   10810:	e3a01000 	mov	r1, #0
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
   10814:	e583400c 	str	r4, [r3, #12]
    }
  }

  RELEASE_MALLOC_GLOBAL_LOCK();
  return 1;
}
   10818:	e59d4004 	ldr	r4, [sp, #4]
   1081c:	e59e2000 	ldr	r2, [lr]
    mparams.granularity = gsize;
   10820:	e583c008 	str	ip, [r3, #8]
}
   10824:	e1540002 	cmp	r4, r2
    mparams.page_size = psize;
   10828:	e583c004 	str	ip, [r3, #4]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
   1082c:	e5831014 	str	r1, [r3, #20]
    gm->mflags = mparams.default_mflags;
   10830:	e58011bc 	str	r1, [r0, #444]	; 0x1bc
}
   10834:	1a000001 	bne	10840 <init_mparams.part.2+0x88>
   10838:	e28dd008 	add	sp, sp, #8
   1083c:	e8bd8010 	pop	{r4, pc}
   10840:	eb000f60 	bl	145c8 <__stack_chk_fail>
   10844:	0000584c 	.word	0x0000584c
   10848:	0000000c 	.word	0x0000000c
   1084c:	00005ab8 	.word	0x00005ab8
   10850:	000058c0 	.word	0x000058c0

00010854 <sys_trim.constprop.7>:
  return released;
}

static int sys_trim(mstate m, size_t pad) {
  size_t released = 0;
  ensure_initialization();
   10854:	e59f31c8 	ldr	r3, [pc, #456]	; 10a24 <sys_trim.constprop.7+0x1d0>
static int sys_trim(mstate m, size_t pad) {
   10858:	e92d4070 	push	{r4, r5, r6, lr}
   1085c:	e1a05000 	mov	r5, r0
  ensure_initialization();
   10860:	e08f3003 	add	r3, pc, r3
   10864:	e5933000 	ldr	r3, [r3]
   10868:	e3530000 	cmp	r3, #0
   1086c:	0a000036 	beq	1094c <sys_trim.constprop.7+0xf8>
  if (pad < MAX_REQUEST && is_initialized(m)) {
   10870:	e3750041 	cmn	r5, #65	; 0x41
   10874:	8a000032 	bhi	10944 <sys_trim.constprop.7+0xf0>
   10878:	e59f41a8 	ldr	r4, [pc, #424]	; 10a28 <sys_trim.constprop.7+0x1d4>
   1087c:	e08f4004 	add	r4, pc, r4
   10880:	e5942018 	ldr	r2, [r4, #24]
   10884:	e3520000 	cmp	r2, #0
   10888:	0a00002d 	beq	10944 <sys_trim.constprop.7+0xf0>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */

    if (m->topsize > pad) {
   1088c:	e594100c 	ldr	r1, [r4, #12]
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
   10890:	e2855028 	add	r5, r5, #40	; 0x28
    if (m->topsize > pad) {
   10894:	e1550001 	cmp	r5, r1
   10898:	2a000024 	bcs	10930 <sys_trim.constprop.7+0xdc>
  msegmentptr sp = &m->seg;
   1089c:	e2844d07 	add	r4, r4, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
   108a0:	e5943000 	ldr	r3, [r4]
   108a4:	e1520003 	cmp	r2, r3
   108a8:	3a000003 	bcc	108bc <sys_trim.constprop.7+0x68>
   108ac:	e5940004 	ldr	r0, [r4, #4]
   108b0:	e0833000 	add	r3, r3, r0
   108b4:	e1520003 	cmp	r2, r3
   108b8:	3a000004 	bcc	108d0 <sys_trim.constprop.7+0x7c>
    if ((sp = sp->next) == 0)
   108bc:	e5944008 	ldr	r4, [r4, #8]
   108c0:	e3540000 	cmp	r4, #0
   108c4:	1afffff5 	bne	108a0 <sys_trim.constprop.7+0x4c>
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
   108c8:	e594300c 	ldr	r3, [r4, #12]
   108cc:	e7f000f0 	udf	#0
   108d0:	e594300c 	ldr	r3, [r4, #12]
   108d4:	e3130008 	tst	r3, #8
   108d8:	1a000014 	bne	10930 <sys_trim.constprop.7+0xdc>
      size_t unit = mparams.granularity;
   108dc:	e59f3148 	ldr	r3, [pc, #328]	; 10a2c <sys_trim.constprop.7+0x1d8>
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
          ACQUIRE_MALLOC_GLOBAL_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
   108e0:	e3a00000 	mov	r0, #0
      size_t unit = mparams.granularity;
   108e4:	e08f3003 	add	r3, pc, r3
   108e8:	e5933008 	ldr	r3, [r3, #8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
   108ec:	e0811003 	add	r1, r1, r3
   108f0:	e2411001 	sub	r1, r1, #1
   108f4:	e0415005 	sub	r5, r1, r5
   108f8:	e735f315 	udiv	r5, r5, r3
   108fc:	e2455001 	sub	r5, r5, #1
   10900:	e0050593 	mul	r5, r3, r5
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
   10904:	e375010a 	cmn	r5, #-2147483646	; 0x80000002
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
   10908:	82635102 	rsbhi	r5, r3, #-2147483648	; 0x80000000
            char* old_br = (char*)(CALL_MORECORE(0));
   1090c:	ebffff8f 	bl	10750 <sbrk>
            if (old_br == sp->base + sp->size) {
   10910:	e1c420d0 	ldrd	r2, [r4]
            char* old_br = (char*)(CALL_MORECORE(0));
   10914:	e1a06000 	mov	r6, r0
            if (old_br == sp->base + sp->size) {
   10918:	e0833002 	add	r3, r3, r2
   1091c:	e1500003 	cmp	r0, r3
   10920:	0a00000f 	beq	10964 <sys_trim.constprop.7+0x110>
   10924:	e59f3104 	ldr	r3, [pc, #260]	; 10a30 <sys_trim.constprop.7+0x1dc>
   10928:	e08f3003 	add	r3, pc, r3
   1092c:	e593100c 	ldr	r1, [r3, #12]
    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0 && m->topsize > m->trim_check)
   10930:	e59f30fc 	ldr	r3, [pc, #252]	; 10a34 <sys_trim.constprop.7+0x1e0>
   10934:	e08f3003 	add	r3, pc, r3
   10938:	e593201c 	ldr	r2, [r3, #28]
   1093c:	e1520001 	cmp	r2, r1
   10940:	3a000003 	bcc	10954 <sys_trim.constprop.7+0x100>
  size_t offset = align_offset(chunk2mem(p));
   10944:	e3a00000 	mov	r0, #0
   10948:	e8bd8070 	pop	{r4, r5, r6, pc}
   1094c:	ebffff99 	bl	107b8 <init_mparams.part.2>
   10950:	eaffffc6 	b	10870 <sys_trim.constprop.7+0x1c>
      m->trim_check = MAX_SIZE_T;
   10954:	e3e02000 	mvn	r2, #0
   10958:	e3a00000 	mov	r0, #0
   1095c:	e583201c 	str	r2, [r3, #28]
  }

  return (released != 0)? 1 : 0;
}
   10960:	e8bd8070 	pop	{r4, r5, r6, pc}
              char* rel_br = (char*)(CALL_MORECORE(-extra));
   10964:	e2650000 	rsb	r0, r5, #0
   10968:	ebffff78 	bl	10750 <sbrk>
   1096c:	e1a05000 	mov	r5, r0
              char* new_br = (char*)(CALL_MORECORE(0));
   10970:	e3a00000 	mov	r0, #0
   10974:	ebffff75 	bl	10750 <sbrk>
              if (rel_br != CMFAIL && new_br < old_br)
   10978:	e3750001 	cmn	r5, #1
   1097c:	11560000 	cmpne	r6, r0
   10980:	9a000023 	bls	10a14 <sys_trim.constprop.7+0x1c0>
      if (released != 0) {
   10984:	e0566000 	subs	r6, r6, r0
   10988:	0a000021 	beq	10a14 <sys_trim.constprop.7+0x1c0>
        m->footprint -= released;
   1098c:	e59f00a4 	ldr	r0, [pc, #164]	; 10a38 <sys_trim.constprop.7+0x1e4>
        sp->size -= released;
   10990:	e5943004 	ldr	r3, [r4, #4]
        m->footprint -= released;
   10994:	e08f0000 	add	r0, pc, r0
        sp->size -= released;
   10998:	e0433006 	sub	r3, r3, r6
   1099c:	e5843004 	str	r3, [r4, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   109a0:	e3a04028 	mov	r4, #40	; 0x28
        init_top(m, m->top, m->topsize - released);
   109a4:	e5902018 	ldr	r2, [r0, #24]
   109a8:	e590100c 	ldr	r1, [r0, #12]
  size_t offset = align_offset(chunk2mem(p));
   109ac:	e2823008 	add	r3, r2, #8
        m->footprint -= released;
   109b0:	e590c1b0 	ldr	ip, [r0, #432]	; 0x1b0
  size_t offset = align_offset(chunk2mem(p));
   109b4:	e3130007 	tst	r3, #7
   109b8:	12633000 	rsbne	r3, r3, #0
        m->footprint -= released;
   109bc:	e04cc006 	sub	ip, ip, r6
  size_t offset = align_offset(chunk2mem(p));
   109c0:	12033007 	andne	r3, r3, #7
        m->footprint -= released;
   109c4:	e580c1b0 	str	ip, [r0, #432]	; 0x1b0
        init_top(m, m->top, m->topsize - released);
   109c8:	e0416006 	sub	r6, r1, r6
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   109cc:	e59f0068 	ldr	r0, [pc, #104]	; 10a3c <sys_trim.constprop.7+0x1e8>
   109d0:	1082c003 	addne	ip, r2, r3
  size_t offset = align_offset(chunk2mem(p));
   109d4:	01a0c002 	moveq	ip, r2
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   109d8:	e0821006 	add	r1, r2, r6
  m->top = p;
   109dc:	e59f205c 	ldr	r2, [pc, #92]	; 10a40 <sys_trim.constprop.7+0x1ec>
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   109e0:	e08f0000 	add	r0, pc, r0
   109e4:	10463003 	subne	r3, r6, r3
  m->top = p;
   109e8:	e08f2002 	add	r2, pc, r2
  size_t offset = align_offset(chunk2mem(p));
   109ec:	01a03006 	moveq	r3, r6
  p->head = psize | PINUSE_BIT;
   109f0:	e3835001 	orr	r5, r3, #1
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   109f4:	e590e010 	ldr	lr, [r0, #16]
   109f8:	e3a00001 	mov	r0, #1
  m->top = p;
   109fc:	e582c018 	str	ip, [r2, #24]
  m->topsize = psize;
   10a00:	e582300c 	str	r3, [r2, #12]
  p->head = psize | PINUSE_BIT;
   10a04:	e58c5004 	str	r5, [ip, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   10a08:	e5814004 	str	r4, [r1, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   10a0c:	e582e01c 	str	lr, [r2, #28]
   10a10:	e8bd8070 	pop	{r4, r5, r6, pc}
   10a14:	e59f3028 	ldr	r3, [pc, #40]	; 10a44 <sys_trim.constprop.7+0x1f0>
   10a18:	e08f3003 	add	r3, pc, r3
   10a1c:	e593100c 	ldr	r1, [r3, #12]
   10a20:	eaffffc2 	b	10930 <sys_trim.constprop.7+0xdc>
   10a24:	00005a38 	.word	0x00005a38
   10a28:	00005844 	.word	0x00005844
   10a2c:	000059b4 	.word	0x000059b4
   10a30:	00005798 	.word	0x00005798
   10a34:	0000578c 	.word	0x0000578c
   10a38:	0000572c 	.word	0x0000572c
   10a3c:	000058b8 	.word	0x000058b8
   10a40:	000056d8 	.word	0x000056d8
   10a44:	000056a8 	.word	0x000056a8

00010a48 <malloc>:
  return 0;
}

#if !ONLY_MSPACES

void* dlmalloc(size_t bytes) {
   10a48:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
   10a4c:	e35000f4 	cmp	r0, #244	; 0xf4
void* dlmalloc(size_t bytes) {
   10a50:	e24dd00c 	sub	sp, sp, #12
    if (bytes <= MAX_SMALL_REQUEST) {
   10a54:	8a00002d 	bhi	10b10 <malloc+0xc8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
      idx = small_index(nb);
      smallbits = gm->smallmap >> idx;
   10a58:	e59fefdc 	ldr	lr, [pc, #4060]	; 11a3c <malloc+0xff4>
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
   10a5c:	e350000a 	cmp	r0, #10
   10a60:	8280400b 	addhi	r4, r0, #11
   10a64:	93a01002 	movls	r1, #2
      smallbits = gm->smallmap >> idx;
   10a68:	e08fe00e 	add	lr, pc, lr
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
   10a6c:	83c44007 	bichi	r4, r4, #7
   10a70:	93a04010 	movls	r4, #16
   10a74:	81a011a4 	lsrhi	r1, r4, #3
      smallbits = gm->smallmap >> idx;
   10a78:	e59ec000 	ldr	ip, [lr]
   10a7c:	e1a0313c 	lsr	r3, ip, r1

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
   10a80:	e3130003 	tst	r3, #3
   10a84:	0a00004e 	beq	10bc4 <malloc+0x17c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
   10a88:	e1e03003 	mvn	r3, r3
   10a8c:	e2033001 	and	r3, r3, #1
   10a90:	e0833001 	add	r3, r3, r1
        b = smallbin_at(gm, idx);
   10a94:	e08e1183 	add	r1, lr, r3, lsl #3
   10a98:	e2811028 	add	r1, r1, #40	; 0x28
        p = b->fd;
   10a9c:	e5910008 	ldr	r0, [r1, #8]
        assert(chunksize(p) == small_index2size(idx));
   10aa0:	e5902004 	ldr	r2, [r0, #4]
   10aa4:	e3c22007 	bic	r2, r2, #7
   10aa8:	e1520183 	cmp	r2, r3, lsl #3
   10aac:	1a0001e9 	bne	11258 <malloc+0x810>
        unlink_first_small_chunk(gm, b, p, idx);
   10ab0:	e1510000 	cmp	r1, r0
   10ab4:	e5904008 	ldr	r4, [r0, #8]
   10ab8:	0a0001e6 	beq	11258 <malloc+0x810>
   10abc:	e1500004 	cmp	r0, r4
   10ac0:	0a0001e4 	beq	11258 <malloc+0x810>
   10ac4:	e1510004 	cmp	r1, r4
   10ac8:	0a00019c 	beq	11140 <malloc+0x6f8>
   10acc:	e59e3010 	ldr	r3, [lr, #16]
   10ad0:	e1530004 	cmp	r3, r4
   10ad4:	8a0001df 	bhi	11258 <malloc+0x810>
   10ad8:	e594300c 	ldr	r3, [r4, #12]
   10adc:	e1530000 	cmp	r3, r0
   10ae0:	1a0001dc 	bne	11258 <malloc+0x810>
   10ae4:	e584100c 	str	r1, [r4, #12]
   10ae8:	e5814008 	str	r4, [r1, #8]
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
   10aec:	e0801002 	add	r1, r0, r2
   10af0:	e3822003 	orr	r2, r2, #3
   10af4:	e5802004 	str	r2, [r0, #4]
        mem = chunk2mem(p);
   10af8:	e2800008 	add	r0, r0, #8
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
   10afc:	e5913004 	ldr	r3, [r1, #4]
   10b00:	e3833001 	orr	r3, r3, #1
   10b04:	e5813004 	str	r3, [r1, #4]
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
   10b08:	e28dd00c 	add	sp, sp, #12
   10b0c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10b10:	e59f3f28 	ldr	r3, [pc, #3880]	; 11a40 <malloc+0xff8>
    else if (bytes >= MAX_REQUEST)
   10b14:	e3700041 	cmn	r0, #65	; 0x41
   10b18:	e08f3003 	add	r3, pc, r3
   10b1c:	e5932008 	ldr	r2, [r3, #8]
   10b20:	9a00000f 	bls	10b64 <malloc+0x11c>
    if (nb <= gm->dvsize) {
   10b24:	e3720001 	cmn	r2, #1
   10b28:	1a000090 	bne	10d70 <malloc+0x328>
      mchunkptr p = gm->dv;
   10b2c:	e5930014 	ldr	r0, [r3, #20]
   10b30:	e240c001 	sub	ip, r0, #1
        gm->dvsize = 0;
   10b34:	e59f3f08 	ldr	r3, [pc, #3848]	; 11a44 <malloc+0xffc>
   10b38:	e3a01000 	mov	r1, #0
   10b3c:	e08f3003 	add	r3, pc, r3
   10b40:	e5831008 	str	r1, [r3, #8]
        gm->dv = 0;
   10b44:	e5831014 	str	r1, [r3, #20]
        set_inuse_and_pinuse(gm, p, dvs);
   10b48:	e5802004 	str	r2, [r0, #4]
   10b4c:	e59c3004 	ldr	r3, [ip, #4]
   10b50:	e3833001 	orr	r3, r3, #1
   10b54:	e58c3004 	str	r3, [ip, #4]
      mem = chunk2mem(p);
   10b58:	e2800008 	add	r0, r0, #8
}
   10b5c:	e28dd00c 	add	sp, sp, #12
   10b60:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
   10b64:	e5931004 	ldr	r1, [r3, #4]
      nb = pad_request(bytes);
   10b68:	e280400b 	add	r4, r0, #11
   10b6c:	e3c44007 	bic	r4, r4, #7
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
   10b70:	e3510000 	cmp	r1, #0
   10b74:	1a0000ea 	bne	10f24 <malloc+0x4dc>
    if (nb <= gm->dvsize) {
   10b78:	e1540002 	cmp	r4, r2
   10b7c:	9a00006b 	bls	10d30 <malloc+0x2e8>
    else if (nb < gm->topsize) { /* Split top */
   10b80:	e59f2ec0 	ldr	r2, [pc, #3776]	; 11a48 <malloc+0x1000>
   10b84:	e08f2002 	add	r2, pc, r2
   10b88:	e592300c 	ldr	r3, [r2, #12]
   10b8c:	e1530004 	cmp	r3, r4
   10b90:	9a00064c 	bls	124c8 <malloc+0x1a80>
      mchunkptr p = gm->top;
   10b94:	e5921018 	ldr	r1, [r2, #24]
      size_t rsize = gm->topsize -= nb;
   10b98:	e0433004 	sub	r3, r3, r4
      r->head = rsize | PINUSE_BIT;
   10b9c:	e383c001 	orr	ip, r3, #1
      size_t rsize = gm->topsize -= nb;
   10ba0:	e582300c 	str	r3, [r2, #12]
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
   10ba4:	e0813004 	add	r3, r1, r4
      mem = chunk2mem(p);
   10ba8:	e2810008 	add	r0, r1, #8
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
   10bac:	e5823018 	str	r3, [r2, #24]
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
   10bb0:	e3844003 	orr	r4, r4, #3
      r->head = rsize | PINUSE_BIT;
   10bb4:	e583c004 	str	ip, [r3, #4]
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
   10bb8:	e5814004 	str	r4, [r1, #4]
}
   10bbc:	e28dd00c 	add	sp, sp, #12
   10bc0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (nb > gm->dvsize) {
   10bc4:	e59e2008 	ldr	r2, [lr, #8]
   10bc8:	e1520004 	cmp	r2, r4
   10bcc:	2a000057 	bcs	10d30 <malloc+0x2e8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
   10bd0:	e3530000 	cmp	r3, #0
   10bd4:	0a0001a1 	beq	11260 <malloc+0x818>
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
   10bd8:	e3a05001 	mov	r5, #1
   10bdc:	e1a00115 	lsl	r0, r5, r1
   10be0:	e1a06510 	lsl	r6, r0, r5
   10be4:	e2660000 	rsb	r0, r6, #0
   10be8:	e1800006 	orr	r0, r0, r6
   10bec:	e0001113 	and	r1, r0, r3, lsl r1
          binmap_t leastbit = least_bit(leftbits);
   10bf0:	e2613000 	rsb	r3, r1, #0
   10bf4:	e0033001 	and	r3, r3, r1
          compute_bit2idx(leastbit, i);
   10bf8:	e2433001 	sub	r3, r3, #1
   10bfc:	e1a01623 	lsr	r1, r3, #12
   10c00:	e2011010 	and	r1, r1, #16
   10c04:	e1a03133 	lsr	r3, r3, r1
   10c08:	e1a002a3 	lsr	r0, r3, #5
   10c0c:	e2000008 	and	r0, r0, #8
   10c10:	e1811000 	orr	r1, r1, r0
   10c14:	e1a03033 	lsr	r3, r3, r0
   10c18:	e1a00123 	lsr	r0, r3, #2
   10c1c:	e2000004 	and	r0, r0, #4
   10c20:	e0811000 	add	r1, r1, r0
   10c24:	e1a03033 	lsr	r3, r3, r0
   10c28:	e1a00533 	lsr	r0, r3, r5
   10c2c:	e2000002 	and	r0, r0, #2
   10c30:	e0811000 	add	r1, r1, r0
   10c34:	e1a03033 	lsr	r3, r3, r0
   10c38:	e7e000d3 	ubfx	r0, r3, #1, #1
   10c3c:	e0811000 	add	r1, r1, r0
   10c40:	e0813033 	add	r3, r1, r3, lsr r0
          b = smallbin_at(gm, i);
   10c44:	e08e1183 	add	r1, lr, r3, lsl #3
   10c48:	e2811028 	add	r1, r1, #40	; 0x28
          p = b->fd;
   10c4c:	e5910008 	ldr	r0, [r1, #8]
          assert(chunksize(p) == small_index2size(i));
   10c50:	e5907004 	ldr	r7, [r0, #4]
   10c54:	e3c77007 	bic	r7, r7, #7
   10c58:	e1570183 	cmp	r7, r3, lsl #3
   10c5c:	1a00017d 	bne	11258 <malloc+0x810>
          unlink_first_small_chunk(gm, b, p, i);
   10c60:	e1510000 	cmp	r1, r0
   10c64:	e5906008 	ldr	r6, [r0, #8]
   10c68:	0a00017a 	beq	11258 <malloc+0x810>
   10c6c:	e1500006 	cmp	r0, r6
   10c70:	0a000178 	beq	11258 <malloc+0x810>
   10c74:	e1510006 	cmp	r1, r6
   10c78:	01cc3315 	biceq	r3, ip, r5, lsl r3
   10c7c:	058e3000 	streq	r3, [lr]
   10c80:	0a000007 	beq	10ca4 <malloc+0x25c>
   10c84:	e59e3010 	ldr	r3, [lr, #16]
   10c88:	e1530006 	cmp	r3, r6
   10c8c:	8a000171 	bhi	11258 <malloc+0x810>
   10c90:	e596300c 	ldr	r3, [r6, #12]
   10c94:	e1530000 	cmp	r3, r0
   10c98:	1a00016e 	bne	11258 <malloc+0x810>
   10c9c:	e586100c 	str	r1, [r6, #12]
   10ca0:	e5816008 	str	r6, [r1, #8]
            r = chunk_plus_offset(p, nb);
   10ca4:	e080e004 	add	lr, r0, r4
          rsize = small_index2size(i) - nb;
   10ca8:	e047c004 	sub	ip, r7, r4
            set_size_and_pinuse_of_free_chunk(r, rsize);
   10cac:	e38c3001 	orr	r3, ip, #1
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
   10cb0:	e3844003 	orr	r4, r4, #3
            replace_dv(gm, r, rsize);
   10cb4:	e3520000 	cmp	r2, #0
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
   10cb8:	e5804004 	str	r4, [r0, #4]
            replace_dv(gm, r, rsize);
   10cbc:	e1a051a2 	lsr	r5, r2, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
   10cc0:	e58e3004 	str	r3, [lr, #4]
   10cc4:	e780c007 	str	ip, [r0, r7]
            replace_dv(gm, r, rsize);
   10cc8:	0a000012 	beq	10d18 <malloc+0x2d0>
   10ccc:	e59f1d78 	ldr	r1, [pc, #3448]	; 11a4c <malloc+0x1004>
   10cd0:	e352000f 	cmp	r2, #15
   10cd4:	e08f1001 	add	r1, pc, r1
   10cd8:	e0813185 	add	r3, r1, r5, lsl #3
   10cdc:	e2833028 	add	r3, r3, #40	; 0x28
   10ce0:	e5912014 	ldr	r2, [r1, #20]
   10ce4:	9a00015b 	bls	11258 <malloc+0x810>
   10ce8:	e3a04001 	mov	r4, #1
   10cec:	e5916000 	ldr	r6, [r1]
   10cf0:	e1a04514 	lsl	r4, r4, r5
   10cf4:	e1160004 	tst	r6, r4
   10cf8:	1a0003da 	bne	11c68 <malloc+0x1220>
   10cfc:	e1a05003 	mov	r5, r3
   10d00:	e1864004 	orr	r4, r6, r4
   10d04:	e5814000 	str	r4, [r1]
   10d08:	e5832008 	str	r2, [r3, #8]
   10d0c:	e585200c 	str	r2, [r5, #12]
   10d10:	e5825008 	str	r5, [r2, #8]
   10d14:	e582300c 	str	r3, [r2, #12]
   10d18:	e59f3d30 	ldr	r3, [pc, #3376]	; 11a50 <malloc+0x1008>
          mem = chunk2mem(p);
   10d1c:	e2800008 	add	r0, r0, #8
            replace_dv(gm, r, rsize);
   10d20:	e08f3003 	add	r3, pc, r3
   10d24:	e583c008 	str	ip, [r3, #8]
   10d28:	e583e014 	str	lr, [r3, #20]
          goto postaction;
   10d2c:	eaffff75 	b	10b08 <malloc+0xc0>
      mchunkptr p = gm->dv;
   10d30:	e59f1d1c 	ldr	r1, [pc, #3356]	; 11a54 <malloc+0x100c>
      size_t rsize = gm->dvsize - nb;
   10d34:	e0423004 	sub	r3, r2, r4
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
   10d38:	e353000f 	cmp	r3, #15
      mchunkptr p = gm->dv;
   10d3c:	e08f1001 	add	r1, pc, r1
   10d40:	e5910014 	ldr	r0, [r1, #20]
   10d44:	e080c002 	add	ip, r0, r2
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
   10d48:	9a000408 	bls	11d70 <malloc+0x1328>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
   10d4c:	e080c004 	add	ip, r0, r4
        gm->dvsize = rsize;
   10d50:	e5813008 	str	r3, [r1, #8]
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
   10d54:	e581c014 	str	ip, [r1, #20]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
   10d58:	e3844003 	orr	r4, r4, #3
        set_size_and_pinuse_of_free_chunk(r, rsize);
   10d5c:	e3831001 	orr	r1, r3, #1
   10d60:	e58c1004 	str	r1, [ip, #4]
   10d64:	e7803002 	str	r3, [r0, r2]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
   10d68:	e5804004 	str	r4, [r0, #4]
   10d6c:	eaffff79 	b	10b58 <malloc+0x110>
  ensure_initialization();
   10d70:	e59f3ce0 	ldr	r3, [pc, #3296]	; 11a58 <malloc+0x1010>
   10d74:	e08f3003 	add	r3, pc, r3
   10d78:	e5933000 	ldr	r3, [r3]
   10d7c:	e3530000 	cmp	r3, #0
   10d80:	1a00012a 	bne	11230 <malloc+0x7e8>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
   10d84:	e3e04000 	mvn	r4, #0
   10d88:	ebfffe8a 	bl	107b8 <init_mparams.part.2>
  asize = granularity_align(nb + SYS_ALLOC_PADDING);
   10d8c:	e59f3cc8 	ldr	r3, [pc, #3272]	; 11a5c <malloc+0x1014>
   10d90:	e08f3003 	add	r3, pc, r3
   10d94:	e5936008 	ldr	r6, [r3, #8]
   10d98:	e286002f 	add	r0, r6, #47	; 0x2f
   10d9c:	e266c000 	rsb	ip, r6, #0
   10da0:	e0848000 	add	r8, r4, r0
   10da4:	e008800c 	and	r8, r8, ip
  if (asize <= nb)
   10da8:	e1580004 	cmp	r8, r4
   10dac:	9a00011f 	bls	11230 <malloc+0x7e8>
  if (m->footprint_limit != 0) {
   10db0:	e59f3ca8 	ldr	r3, [pc, #3240]	; 11a60 <malloc+0x1018>
   10db4:	e08f3003 	add	r3, pc, r3
   10db8:	e59321b8 	ldr	r2, [r3, #440]	; 0x1b8
   10dbc:	e3520000 	cmp	r2, #0
   10dc0:	0a000008 	beq	10de8 <malloc+0x3a0>
    size_t fp = m->footprint + asize;
   10dc4:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
   10dc8:	e0881003 	add	r1, r8, r3
    if (fp <= m->footprint || fp > m->footprint_limit)
   10dcc:	e1530001 	cmp	r3, r1
   10dd0:	33a03000 	movcc	r3, #0
   10dd4:	23a03001 	movcs	r3, #1
   10dd8:	e1520001 	cmp	r2, r1
   10ddc:	33833001 	orrcc	r3, r3, #1
   10de0:	e3530000 	cmp	r3, #0
   10de4:	1a000111 	bne	11230 <malloc+0x7e8>
  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
   10de8:	e59f7c74 	ldr	r7, [pc, #3188]	; 11a64 <malloc+0x101c>
   10dec:	e08f7007 	add	r7, pc, r7
   10df0:	e597e1bc 	ldr	lr, [r7, #444]	; 0x1bc
   10df4:	e31e0004 	tst	lr, #4
   10df8:	0a0000d4 	beq	11150 <malloc+0x708>
    if (asize < HALF_MAX_SIZE_T) {
   10dfc:	e378010a 	cmn	r8, #-2147483646	; 0x80000002
   10e00:	8a00010a 	bhi	11230 <malloc+0x7e8>
      br = (char*)(CALL_MORECORE(asize));
   10e04:	e1a00008 	mov	r0, r8
   10e08:	ebfffe50 	bl	10750 <sbrk>
   10e0c:	e1a05000 	mov	r5, r0
      end = (char*)(CALL_MORECORE(0));
   10e10:	e3a00000 	mov	r0, #0
   10e14:	ebfffe4d 	bl	10750 <sbrk>
      if (br != CMFAIL && end != CMFAIL && br < end) {
   10e18:	e3700001 	cmn	r0, #1
   10e1c:	13750001 	cmnne	r5, #1
   10e20:	13a03001 	movne	r3, #1
   10e24:	03a03000 	moveq	r3, #0
   10e28:	e1550000 	cmp	r5, r0
   10e2c:	23a03000 	movcs	r3, #0
   10e30:	32033001 	andcc	r3, r3, #1
   10e34:	e3530000 	cmp	r3, #0
   10e38:	0a0000fc 	beq	11230 <malloc+0x7e8>
        size_t ssize = end - br;
   10e3c:	e0406005 	sub	r6, r0, r5
        if (ssize > nb + TOP_FOOT_SIZE) {
   10e40:	e2843028 	add	r3, r4, #40	; 0x28
   10e44:	e1560003 	cmp	r6, r3
   10e48:	9a0000f8 	bls	11230 <malloc+0x7e8>
  if (tbase != CMFAIL) {
   10e4c:	e3750001 	cmn	r5, #1
   10e50:	0a0000f6 	beq	11230 <malloc+0x7e8>
    if ((m->footprint += tsize) > m->max_footprint)
   10e54:	e59f2c0c 	ldr	r2, [pc, #3084]	; 11a68 <malloc+0x1020>
   10e58:	e08f2002 	add	r2, pc, r2
   10e5c:	e59231b0 	ldr	r3, [r2, #432]	; 0x1b0
   10e60:	e59211b4 	ldr	r1, [r2, #436]	; 0x1b4
   10e64:	e0863003 	add	r3, r6, r3
   10e68:	e58231b0 	str	r3, [r2, #432]	; 0x1b0
   10e6c:	e1530001 	cmp	r3, r1
      m->max_footprint = m->footprint;
   10e70:	858231b4 	strhi	r3, [r2, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
   10e74:	e59f3bf0 	ldr	r3, [pc, #3056]	; 11a6c <malloc+0x1024>
   10e78:	e08f3003 	add	r3, pc, r3
   10e7c:	e593e018 	ldr	lr, [r3, #24]
   10e80:	e35e0000 	cmp	lr, #0
      msegmentptr sp = &m->seg;
   10e84:	12833d07 	addne	r3, r3, #448	; 0x1c0
    if (!is_initialized(m)) { /* first-time initialization */
   10e88:	0a000271 	beq	11854 <malloc+0xe0c>
      while (sp != 0 && tbase != sp->base + sp->size)
   10e8c:	e5932000 	ldr	r2, [r3]
   10e90:	e5931004 	ldr	r1, [r3, #4]
   10e94:	e0820001 	add	r0, r2, r1
   10e98:	e1500005 	cmp	r0, r5
   10e9c:	0a00018e 	beq	114dc <malloc+0xa94>
        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
   10ea0:	e5933008 	ldr	r3, [r3, #8]
      while (sp != 0 && tbase != sp->base + sp->size)
   10ea4:	e3530000 	cmp	r3, #0
   10ea8:	1afffff7 	bne	10e8c <malloc+0x444>
        if (tbase < m->least_addr)
   10eac:	e59f3bbc 	ldr	r3, [pc, #3004]	; 11a70 <malloc+0x1028>
   10eb0:	e0851006 	add	r1, r5, r6
   10eb4:	e08f3003 	add	r3, pc, r3
   10eb8:	e5932010 	ldr	r2, [r3, #16]
   10ebc:	e1520005 	cmp	r2, r5
          m->least_addr = tbase;
   10ec0:	85835010 	strhi	r5, [r3, #16]
  size_t offset = align_offset(chunk2mem(p));
   10ec4:	e59f3ba8 	ldr	r3, [pc, #2984]	; 11a74 <malloc+0x102c>
   10ec8:	e08f3003 	add	r3, pc, r3
   10ecc:	e2833d07 	add	r3, r3, #448	; 0x1c0
        while (sp != 0 && sp->base != tbase + tsize)
   10ed0:	e5932000 	ldr	r2, [r3]
   10ed4:	e1520001 	cmp	r2, r1
   10ed8:	0a000178 	beq	114c0 <malloc+0xa78>
          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
   10edc:	e5933008 	ldr	r3, [r3, #8]
        while (sp != 0 && sp->base != tbase + tsize)
   10ee0:	e3530000 	cmp	r3, #0
   10ee4:	1afffff9 	bne	10ed0 <malloc+0x488>
   10ee8:	e59f3b88 	ldr	r3, [pc, #2952]	; 11a78 <malloc+0x1030>
   10eec:	e08f3003 	add	r3, pc, r3
   10ef0:	e2833d07 	add	r3, r3, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
   10ef4:	e5932000 	ldr	r2, [r3]
   10ef8:	e15e0002 	cmp	lr, r2
   10efc:	3a000003 	bcc	10f10 <malloc+0x4c8>
   10f00:	e5931004 	ldr	r1, [r3, #4]
   10f04:	e0822001 	add	r2, r2, r1
   10f08:	e15e0002 	cmp	lr, r2
   10f0c:	3a0001a3 	bcc	115a0 <malloc+0xb58>
    if ((sp = sp->next) == 0)
   10f10:	e5933008 	ldr	r3, [r3, #8]
   10f14:	e3530000 	cmp	r3, #0
   10f18:	1afffff5 	bne	10ef4 <malloc+0x4ac>
  char* old_end = oldsp->base + oldsp->size;
   10f1c:	e5933000 	ldr	r3, [r3]
   10f20:	e7f000f0 	udf	#0
  size_t rsize = -nb; /* Unsigned negation */
   10f24:	e2646000 	rsb	r6, r4, #0
  compute_tree_index(nb, idx);
   10f28:	e1b07424 	lsrs	r7, r4, #8
   10f2c:	1a00015b 	bne	114a0 <malloc+0xa58>
  if ((t = *treebin_at(m, idx)) != 0) {
   10f30:	e593c130 	ldr	ip, [r3, #304]	; 0x130
   10f34:	e35c0000 	cmp	ip, #0
   10f38:	01a08006 	moveq	r8, r6
   10f3c:	03e07001 	mvneq	r7, #1
   10f40:	0a0001f4 	beq	11718 <malloc+0xcd0>
   10f44:	e3a0e019 	mov	lr, #25
   10f48:	e1a0ee14 	lsl	lr, r4, lr
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
   10f4c:	e3a05000 	mov	r5, #0
  tchunkptr v = 0;
   10f50:	e1a00005 	mov	r0, r5
   10f54:	ea000000 	b	10f5c <malloc+0x514>
      sizebits <<= 1;
   10f58:	e1a0e08e 	lsl	lr, lr, #1
      size_t trem = chunksize(t) - nb;
   10f5c:	e59c8004 	ldr	r8, [ip, #4]
   10f60:	e3c88007 	bic	r8, r8, #7
   10f64:	e0488004 	sub	r8, r8, r4
      if (trem < rsize) {
   10f68:	e1580006 	cmp	r8, r6
   10f6c:	2a000003 	bcs	10f80 <malloc+0x538>
        if ((rsize = trem) == 0)
   10f70:	e3580000 	cmp	r8, #0
   10f74:	0a00027e 	beq	11974 <malloc+0xf2c>
   10f78:	e1a06008 	mov	r6, r8
   10f7c:	e1a0000c 	mov	r0, ip
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
   10f80:	e1a03fae 	lsr	r3, lr, #31
      rt = t->child[1];
   10f84:	e59c8014 	ldr	r8, [ip, #20]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
   10f88:	e2833004 	add	r3, r3, #4
   10f8c:	e79cc103 	ldr	ip, [ip, r3, lsl #2]
      if (rt != 0 && rt != t)
   10f90:	e3580000 	cmp	r8, #0
   10f94:	1158000c 	cmpne	r8, ip
   10f98:	11a05008 	movne	r5, r8
      if (t == 0) {
   10f9c:	e35c0000 	cmp	ip, #0
   10fa0:	1affffec 	bne	10f58 <malloc+0x510>
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
   10fa4:	e3550000 	cmp	r5, #0
   10fa8:	03500000 	cmpeq	r0, #0
   10fac:	0a0001d6 	beq	1170c <malloc+0xcc4>
  while (t != 0) { /* find smallest of tree or subtree */
   10fb0:	e3550000 	cmp	r5, #0
   10fb4:	e1a08006 	mov	r8, r6
   10fb8:	11a0c005 	movne	ip, r5
   10fbc:	1a000001 	bne	10fc8 <malloc+0x580>
   10fc0:	ea00000c 	b	10ff8 <malloc+0x5b0>
   10fc4:	e1a0c00e 	mov	ip, lr
    size_t trem = chunksize(t) - nb;
   10fc8:	e59c3004 	ldr	r3, [ip, #4]
    t = leftmost_child(t);
   10fcc:	e59ce010 	ldr	lr, [ip, #16]
    size_t trem = chunksize(t) - nb;
   10fd0:	e3c33007 	bic	r3, r3, #7
   10fd4:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
   10fd8:	e1530008 	cmp	r3, r8
   10fdc:	31a08003 	movcc	r8, r3
   10fe0:	31a0000c 	movcc	r0, ip
    t = leftmost_child(t);
   10fe4:	e35e0000 	cmp	lr, #0
   10fe8:	1afffff5 	bne	10fc4 <malloc+0x57c>
   10fec:	e59ce014 	ldr	lr, [ip, #20]
  while (t != 0) { /* find smallest of tree or subtree */
   10ff0:	e35e0000 	cmp	lr, #0
   10ff4:	1afffff2 	bne	10fc4 <malloc+0x57c>
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
   10ff8:	e3500000 	cmp	r0, #0
   10ffc:	0afffedd 	beq	10b78 <malloc+0x130>
   11000:	e0423004 	sub	r3, r2, r4
   11004:	e1530008 	cmp	r3, r8
   11008:	9afffeda 	bls	10b78 <malloc+0x130>
    if (RTCHECK(ok_address(m, v))) { /* split */
   1100c:	e59fca68 	ldr	ip, [pc, #2664]	; 11a7c <malloc+0x1034>
   11010:	e08fc00c 	add	ip, pc, ip
   11014:	e59c6010 	ldr	r6, [ip, #16]
   11018:	e1560000 	cmp	r6, r0
   1101c:	8a00008d 	bhi	11258 <malloc+0x810>
      assert(chunksize(v) == rsize + nb);
   11020:	e5905004 	ldr	r5, [r0, #4]
   11024:	e0843008 	add	r3, r4, r8
      mchunkptr r = chunk_plus_offset(v, nb);
   11028:	e0807004 	add	r7, r0, r4
      assert(chunksize(v) == rsize + nb);
   1102c:	e3c55007 	bic	r5, r5, #7
   11030:	e1550003 	cmp	r5, r3
   11034:	1a000087 	bne	11258 <malloc+0x810>
      if (RTCHECK(ok_next(v, r))) {
   11038:	e1570000 	cmp	r7, r0
   1103c:	9a000085 	bls	11258 <malloc+0x810>
        unlink_large_chunk(m, v);
   11040:	e590200c 	ldr	r2, [r0, #12]
   11044:	e5909018 	ldr	r9, [r0, #24]
   11048:	e1520000 	cmp	r2, r0
   1104c:	0a000262 	beq	119dc <malloc+0xf94>
   11050:	e5903008 	ldr	r3, [r0, #8]
   11054:	e1560003 	cmp	r6, r3
   11058:	8a00007e 	bhi	11258 <malloc+0x810>
   1105c:	e593100c 	ldr	r1, [r3, #12]
   11060:	e1510000 	cmp	r1, r0
   11064:	1a00007b 	bne	11258 <malloc+0x810>
   11068:	e5921008 	ldr	r1, [r2, #8]
   1106c:	e1510000 	cmp	r1, r0
   11070:	1a000078 	bne	11258 <malloc+0x810>
   11074:	e583200c 	str	r2, [r3, #12]
   11078:	e5823008 	str	r3, [r2, #8]
   1107c:	e3590000 	cmp	r9, #0
   11080:	0a000020 	beq	11108 <malloc+0x6c0>
   11084:	e590301c 	ldr	r3, [r0, #28]
   11088:	e59f19f0 	ldr	r1, [pc, #2544]	; 11a80 <malloc+0x1038>
   1108c:	e283304c 	add	r3, r3, #76	; 0x4c
   11090:	e08f1001 	add	r1, pc, r1
   11094:	e791c103 	ldr	ip, [r1, r3, lsl #2]
   11098:	e15c0000 	cmp	ip, r0
   1109c:	07812103 	streq	r2, [r1, r3, lsl #2]
   110a0:	0a000007 	beq	110c4 <malloc+0x67c>
   110a4:	e1560009 	cmp	r6, r9
   110a8:	8a00006a 	bhi	11258 <malloc+0x810>
   110ac:	e5993010 	ldr	r3, [r9, #16]
   110b0:	e1530000 	cmp	r3, r0
   110b4:	05892010 	streq	r2, [r9, #16]
   110b8:	15892014 	strne	r2, [r9, #20]
   110bc:	e3520000 	cmp	r2, #0
   110c0:	0a000010 	beq	11108 <malloc+0x6c0>
   110c4:	e1560002 	cmp	r6, r2
   110c8:	8a000062 	bhi	11258 <malloc+0x810>
   110cc:	e5903010 	ldr	r3, [r0, #16]
   110d0:	e5829018 	str	r9, [r2, #24]
   110d4:	e3530000 	cmp	r3, #0
   110d8:	0a000003 	beq	110ec <malloc+0x6a4>
   110dc:	e1560003 	cmp	r6, r3
   110e0:	8a00005c 	bhi	11258 <malloc+0x810>
   110e4:	e5823010 	str	r3, [r2, #16]
   110e8:	e5832018 	str	r2, [r3, #24]
   110ec:	e5903014 	ldr	r3, [r0, #20]
   110f0:	e3530000 	cmp	r3, #0
   110f4:	0a000003 	beq	11108 <malloc+0x6c0>
   110f8:	e1560003 	cmp	r6, r3
   110fc:	8a000055 	bhi	11258 <malloc+0x810>
   11100:	e5823014 	str	r3, [r2, #20]
   11104:	e5832018 	str	r2, [r3, #24]
        if (rsize < MIN_CHUNK_SIZE)
   11108:	e358000f 	cmp	r8, #15
   1110c:	8a00021a 	bhi	1197c <malloc+0xf34>
          set_inuse_and_pinuse(m, v, (rsize + nb));
   11110:	e0802005 	add	r2, r0, r5
   11114:	e3855003 	orr	r5, r5, #3
   11118:	e5805004 	str	r5, [r0, #4]
   1111c:	e5923004 	ldr	r3, [r2, #4]
   11120:	e3833001 	orr	r3, r3, #1
   11124:	e5823004 	str	r3, [r2, #4]
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
   11128:	e2900008 	adds	r0, r0, #8
   1112c:	1afffe75 	bne	10b08 <malloc+0xc0>
   11130:	e59f394c 	ldr	r3, [pc, #2380]	; 11a84 <malloc+0x103c>
   11134:	e08f3003 	add	r3, pc, r3
   11138:	e5932008 	ldr	r2, [r3, #8]
   1113c:	eafffe8d 	b	10b78 <malloc+0x130>
        unlink_first_small_chunk(gm, b, p, idx);
   11140:	e3a01001 	mov	r1, #1
   11144:	e1cc3311 	bic	r3, ip, r1, lsl r3
   11148:	e58e3000 	str	r3, [lr]
   1114c:	eafffe66 	b	10aec <malloc+0xa4>
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
   11150:	e5971018 	ldr	r1, [r7, #24]
   11154:	e3510000 	cmp	r1, #0
   11158:	0a00000a 	beq	11188 <malloc+0x740>
  msegmentptr sp = &m->seg;
   1115c:	e2877d07 	add	r7, r7, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
   11160:	e5973000 	ldr	r3, [r7]
   11164:	e1510003 	cmp	r1, r3
   11168:	3a000003 	bcc	1117c <malloc+0x734>
   1116c:	e5972004 	ldr	r2, [r7, #4]
   11170:	e0833002 	add	r3, r3, r2
   11174:	e1510003 	cmp	r1, r3
   11178:	3a000185 	bcc	11794 <malloc+0xd4c>
    if ((sp = sp->next) == 0)
   1117c:	e5977008 	ldr	r7, [r7, #8]
   11180:	e3570000 	cmp	r7, #0
   11184:	1afffff5 	bne	11160 <malloc+0x718>
      char* base = (char*)CALL_MORECORE(0);
   11188:	e3a00000 	mov	r0, #0
   1118c:	ebfffd6f 	bl	10750 <sbrk>
   11190:	e1a07000 	mov	r7, r0
      if (base != CMFAIL) {
   11194:	e3700001 	cmn	r0, #1
   11198:	0a00001b 	beq	1120c <malloc+0x7c4>
        if (!is_page_aligned(base))
   1119c:	e59f38e4 	ldr	r3, [pc, #2276]	; 11a88 <malloc+0x1040>
   111a0:	e08f3003 	add	r3, pc, r3
   111a4:	e5932004 	ldr	r2, [r3, #4]
   111a8:	e2423001 	sub	r3, r2, #1
   111ac:	e1100003 	tst	r0, r3
          ssize += (page_align((size_t)base) - (size_t)base);
   111b0:	10836000 	addne	r6, r3, r0
   111b4:	12622000 	rsbne	r2, r2, #0
   111b8:	10483000 	subne	r3, r8, r0
   111bc:	10066002 	andne	r6, r6, r2
   111c0:	10866003 	addne	r6, r6, r3
        if (!is_page_aligned(base))
   111c4:	01a06008 	moveq	r6, r8
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
   111c8:	e1560004 	cmp	r6, r4
   111cc:	83a03001 	movhi	r3, #1
   111d0:	93a03000 	movls	r3, #0
   111d4:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
   111d8:	83a03000 	movhi	r3, #0
   111dc:	e3530000 	cmp	r3, #0
   111e0:	0a000009 	beq	1120c <malloc+0x7c4>
        fp = m->footprint + ssize; /* recheck limits */
   111e4:	e59f38a0 	ldr	r3, [pc, #2208]	; 11a8c <malloc+0x1044>
   111e8:	e08f3003 	add	r3, pc, r3
            (m->footprint_limit == 0 ||
   111ec:	e59321b8 	ldr	r2, [r3, #440]	; 0x1b8
        fp = m->footprint + ssize; /* recheck limits */
   111f0:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
   111f4:	e3520000 	cmp	r2, #0
   111f8:	0a0003bd 	beq	120f4 <malloc+0x16ac>
        fp = m->footprint + ssize; /* recheck limits */
   111fc:	e0831006 	add	r1, r3, r6
             (fp > m->footprint && fp <= m->footprint_limit)) &&
   11200:	e1510002 	cmp	r1, r2
   11204:	91530001 	cmpls	r3, r1
   11208:	3a0003b9 	bcc	120f4 <malloc+0x16ac>
   1120c:	e59f387c 	ldr	r3, [pc, #2172]	; 11a90 <malloc+0x1048>
   11210:	e08f3003 	add	r3, pc, r3
   11214:	e593e1bc 	ldr	lr, [r3, #444]	; 0x1bc
        disable_contiguous(m); /* Don't try contiguous path in the future */
   11218:	e59f3874 	ldr	r3, [pc, #2164]	; 11a94 <malloc+0x104c>
   1121c:	e38ee004 	orr	lr, lr, #4
    if (asize < HALF_MAX_SIZE_T) {
   11220:	e378010a 	cmn	r8, #-2147483646	; 0x80000002
        disable_contiguous(m); /* Don't try contiguous path in the future */
   11224:	e08f3003 	add	r3, pc, r3
   11228:	e583e1bc 	str	lr, [r3, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
   1122c:	9afffef4 	bls	10e04 <malloc+0x3bc>
    return 0; /* wraparound */
   11230:	e3a00000 	mov	r0, #0
   11234:	eafffe33 	b	10b08 <malloc+0xc0>
      unlink_chunk(m, oldfirst, nsize);
   11238:	e59f7858 	ldr	r7, [pc, #2136]	; 11a98 <malloc+0x1050>
   1123c:	e08f7007 	add	r7, pc, r7
   11240:	e5977010 	ldr	r7, [r7, #16]
   11244:	e1540007 	cmp	r4, r7
   11248:	3a000002 	bcc	11258 <malloc+0x810>
   1124c:	e594700c 	ldr	r7, [r4, #12]
   11250:	e1570002 	cmp	r7, r2
   11254:	0a0003c2 	beq	12164 <malloc+0x171c>
        assert(chunksize(p) == small_index2size(idx));
   11258:	e3e00000 	mvn	r0, #0
   1125c:	ebffdb67 	bl	8000 <exit>
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
   11260:	e59e5004 	ldr	r5, [lr, #4]
   11264:	e3550000 	cmp	r5, #0
   11268:	0afffe44 	beq	10b80 <malloc+0x138>
  binmap_t leastbit = least_bit(m->treemap);
   1126c:	e2653000 	rsb	r3, r5, #0
   11270:	e0033005 	and	r3, r3, r5
  compute_bit2idx(leastbit, i);
   11274:	e2433001 	sub	r3, r3, #1
   11278:	e1a01623 	lsr	r1, r3, #12
   1127c:	e2011010 	and	r1, r1, #16
   11280:	e1a03133 	lsr	r3, r3, r1
   11284:	e1a002a3 	lsr	r0, r3, #5
   11288:	e2000008 	and	r0, r0, #8
   1128c:	e1811000 	orr	r1, r1, r0
   11290:	e1a03033 	lsr	r3, r3, r0
   11294:	e1a00123 	lsr	r0, r3, #2
   11298:	e2000004 	and	r0, r0, #4
   1129c:	e0811000 	add	r1, r1, r0
   112a0:	e1a03033 	lsr	r3, r3, r0
   112a4:	e1a000a3 	lsr	r0, r3, #1
   112a8:	e2000002 	and	r0, r0, #2
   112ac:	e0811000 	add	r1, r1, r0
   112b0:	e1a03033 	lsr	r3, r3, r0
   112b4:	e7e000d3 	ubfx	r0, r3, #1, #1
  v = t = *treebin_at(m, i);
   112b8:	e0811000 	add	r1, r1, r0
   112bc:	e0813033 	add	r3, r1, r3, lsr r0
   112c0:	e283304c 	add	r3, r3, #76	; 0x4c
   112c4:	e79e6103 	ldr	r6, [lr, r3, lsl #2]
  rsize = chunksize(t) - nb;
   112c8:	e1a00006 	mov	r0, r6
   112cc:	e596e004 	ldr	lr, [r6, #4]
   112d0:	e3cee007 	bic	lr, lr, #7
   112d4:	e04ee004 	sub	lr, lr, r4
   112d8:	ea000006 	b	112f8 <malloc+0x8b0>
    size_t trem = chunksize(t) - nb;
   112dc:	e5913004 	ldr	r3, [r1, #4]
    if (trem < rsize) {
   112e0:	e1a06001 	mov	r6, r1
    size_t trem = chunksize(t) - nb;
   112e4:	e3c33007 	bic	r3, r3, #7
   112e8:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
   112ec:	e153000e 	cmp	r3, lr
   112f0:	31a0e003 	movcc	lr, r3
   112f4:	31a00001 	movcc	r0, r1
  while ((t = leftmost_child(t)) != 0) {
   112f8:	e5961010 	ldr	r1, [r6, #16]
   112fc:	e3510000 	cmp	r1, #0
   11300:	1afffff5 	bne	112dc <malloc+0x894>
   11304:	e5961014 	ldr	r1, [r6, #20]
   11308:	e3510000 	cmp	r1, #0
   1130c:	1afffff2 	bne	112dc <malloc+0x894>
  if (RTCHECK(ok_address(m, v))) {
   11310:	e59fb784 	ldr	fp, [pc, #1924]	; 11a9c <malloc+0x1054>
   11314:	e08fb00b 	add	fp, pc, fp
   11318:	e59b9010 	ldr	r9, [fp, #16]
   1131c:	e1590000 	cmp	r9, r0
   11320:	8affffcc 	bhi	11258 <malloc+0x810>
    assert(chunksize(v) == rsize + nb);
   11324:	e5907004 	ldr	r7, [r0, #4]
   11328:	e084300e 	add	r3, r4, lr
    mchunkptr r = chunk_plus_offset(v, nb);
   1132c:	e0808004 	add	r8, r0, r4
    assert(chunksize(v) == rsize + nb);
   11330:	e3c77007 	bic	r7, r7, #7
   11334:	e1570003 	cmp	r7, r3
   11338:	1affffc6 	bne	11258 <malloc+0x810>
    if (RTCHECK(ok_next(v, r))) {
   1133c:	e1580000 	cmp	r8, r0
   11340:	9affffc4 	bls	11258 <malloc+0x810>
      unlink_large_chunk(m, v);
   11344:	e590600c 	ldr	r6, [r0, #12]
   11348:	e590a018 	ldr	sl, [r0, #24]
   1134c:	e1560000 	cmp	r6, r0
   11350:	0a0002d7 	beq	11eb4 <malloc+0x146c>
   11354:	e5903008 	ldr	r3, [r0, #8]
   11358:	e1590003 	cmp	r9, r3
   1135c:	8affffbd 	bhi	11258 <malloc+0x810>
   11360:	e593100c 	ldr	r1, [r3, #12]
   11364:	e1510000 	cmp	r1, r0
   11368:	1affffba 	bne	11258 <malloc+0x810>
   1136c:	e5961008 	ldr	r1, [r6, #8]
   11370:	e1510000 	cmp	r1, r0
   11374:	1affffb7 	bne	11258 <malloc+0x810>
   11378:	e583600c 	str	r6, [r3, #12]
   1137c:	e5863008 	str	r3, [r6, #8]
   11380:	e35a0000 	cmp	sl, #0
   11384:	0a000020 	beq	1140c <malloc+0x9c4>
   11388:	e590301c 	ldr	r3, [r0, #28]
   1138c:	e59f170c 	ldr	r1, [pc, #1804]	; 11aa0 <malloc+0x1058>
   11390:	e283304c 	add	r3, r3, #76	; 0x4c
   11394:	e08f1001 	add	r1, pc, r1
   11398:	e7915103 	ldr	r5, [r1, r3, lsl #2]
   1139c:	e1550000 	cmp	r5, r0
   113a0:	07816103 	streq	r6, [r1, r3, lsl #2]
   113a4:	0a000007 	beq	113c8 <malloc+0x980>
   113a8:	e159000a 	cmp	r9, sl
   113ac:	8affffa9 	bhi	11258 <malloc+0x810>
   113b0:	e59a3010 	ldr	r3, [sl, #16]
   113b4:	e1530000 	cmp	r3, r0
   113b8:	058a6010 	streq	r6, [sl, #16]
   113bc:	158a6014 	strne	r6, [sl, #20]
   113c0:	e3560000 	cmp	r6, #0
   113c4:	0a000010 	beq	1140c <malloc+0x9c4>
   113c8:	e1590006 	cmp	r9, r6
   113cc:	8affffa1 	bhi	11258 <malloc+0x810>
   113d0:	e5903010 	ldr	r3, [r0, #16]
   113d4:	e586a018 	str	sl, [r6, #24]
   113d8:	e3530000 	cmp	r3, #0
   113dc:	0a000003 	beq	113f0 <malloc+0x9a8>
   113e0:	e1590003 	cmp	r9, r3
   113e4:	8affff9b 	bhi	11258 <malloc+0x810>
   113e8:	e5863010 	str	r3, [r6, #16]
   113ec:	e5836018 	str	r6, [r3, #24]
   113f0:	e5903014 	ldr	r3, [r0, #20]
   113f4:	e3530000 	cmp	r3, #0
   113f8:	0a000003 	beq	1140c <malloc+0x9c4>
   113fc:	e1590003 	cmp	r9, r3
   11400:	8affff94 	bhi	11258 <malloc+0x810>
   11404:	e5863014 	str	r3, [r6, #20]
   11408:	e5836018 	str	r6, [r3, #24]
      if (rsize < MIN_CHUNK_SIZE)
   1140c:	e35e000f 	cmp	lr, #15
   11410:	9a0002a0 	bls	11e98 <malloc+0x1450>
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
   11414:	e3843003 	orr	r3, r4, #3
        replace_dv(m, r, rsize);
   11418:	e3520000 	cmp	r2, #0
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
   1141c:	e5803004 	str	r3, [r0, #4]
        set_size_and_pinuse_of_free_chunk(r, rsize);
   11420:	e38e3001 	orr	r3, lr, #1
   11424:	e5883004 	str	r3, [r8, #4]
   11428:	e788e00e 	str	lr, [r8, lr]
        replace_dv(m, r, rsize);
   1142c:	0a000011 	beq	11478 <malloc+0xa30>
   11430:	e59f566c 	ldr	r5, [pc, #1644]	; 11aa4 <malloc+0x105c>
   11434:	e1a061a2 	lsr	r6, r2, #3
   11438:	e352000f 	cmp	r2, #15
   1143c:	e08f5005 	add	r5, pc, r5
   11440:	e0853186 	add	r3, r5, r6, lsl #3
   11444:	e2833028 	add	r3, r3, #40	; 0x28
   11448:	e5951014 	ldr	r1, [r5, #20]
   1144c:	9affff81 	bls	11258 <malloc+0x810>
   11450:	e3a02001 	mov	r2, #1
   11454:	e1a02612 	lsl	r2, r2, r6
   11458:	e11c0002 	tst	ip, r2
   1145c:	1a000382 	bne	1226c <malloc+0x1824>
   11460:	e18cc002 	orr	ip, ip, r2
   11464:	e1a02003 	mov	r2, r3
   11468:	e585c000 	str	ip, [r5]
   1146c:	e5831008 	str	r1, [r3, #8]
   11470:	e582100c 	str	r1, [r2, #12]
   11474:	e1c120f8 	strd	r2, [r1, #8]
   11478:	e59f3628 	ldr	r3, [pc, #1576]	; 11aa8 <malloc+0x1060>
   1147c:	e08f3003 	add	r3, pc, r3
   11480:	e583e008 	str	lr, [r3, #8]
   11484:	e5838014 	str	r8, [r3, #20]
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
   11488:	e2900008 	adds	r0, r0, #8
   1148c:	1afffd9d 	bne	10b08 <malloc+0xc0>
   11490:	e59f3614 	ldr	r3, [pc, #1556]	; 11aac <malloc+0x1064>
   11494:	e08f3003 	add	r3, pc, r3
   11498:	e5932008 	ldr	r2, [r3, #8]
   1149c:	eafffdb5 	b	10b78 <malloc+0x130>
  compute_tree_index(nb, idx);
   114a0:	e3570801 	cmp	r7, #65536	; 0x10000
   114a4:	3a000114 	bcc	118fc <malloc+0xeb4>
  if ((t = *treebin_at(m, idx)) != 0) {
   114a8:	e593c1ac 	ldr	ip, [r3, #428]	; 0x1ac
   114ac:	e35c0000 	cmp	ip, #0
   114b0:	11a0e004 	movne	lr, r4
  compute_tree_index(nb, idx);
   114b4:	13a0701f 	movne	r7, #31
  if ((t = *treebin_at(m, idx)) != 0) {
   114b8:	1afffea3 	bne	10f4c <malloc+0x504>
   114bc:	eafffdad 	b	10b78 <malloc+0x130>
            !is_extern_segment(sp) &&
   114c0:	e593100c 	ldr	r1, [r3, #12]
   114c4:	e3110008 	tst	r1, #8
   114c8:	0a0001eb 	beq	11c7c <malloc+0x1234>
   114cc:	e59f35dc 	ldr	r3, [pc, #1500]	; 11ab0 <malloc+0x1068>
   114d0:	e08f3003 	add	r3, pc, r3
   114d4:	e2833d07 	add	r3, r3, #448	; 0x1c0
   114d8:	eafffe85 	b	10ef4 <malloc+0x4ac>
          !is_extern_segment(sp) &&
   114dc:	e593000c 	ldr	r0, [r3, #12]
   114e0:	e3100008 	tst	r0, #8
   114e4:	1afffe70 	bne	10eac <malloc+0x464>
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
   114e8:	e15e0002 	cmp	lr, r2
   114ec:	3afffe6e 	bcc	10eac <malloc+0x464>
          segment_holds(sp, m->top)) { /* append */
   114f0:	e15e0005 	cmp	lr, r5
   114f4:	2afffe6c 	bcs	10eac <malloc+0x464>
        init_top(m, m->top, m->topsize + tsize);
   114f8:	e59f05b4 	ldr	r0, [pc, #1460]	; 11ab4 <malloc+0x106c>
  size_t offset = align_offset(chunk2mem(p));
   114fc:	e28e2008 	add	r2, lr, #8
        sp->size += tsize;
   11500:	e0811006 	add	r1, r1, r6
   11504:	e5831004 	str	r1, [r3, #4]
        init_top(m, m->top, m->topsize + tsize);
   11508:	e08f0000 	add	r0, pc, r0
  size_t offset = align_offset(chunk2mem(p));
   1150c:	e3120007 	tst	r2, #7
   11510:	01a0c00e 	moveq	ip, lr
        init_top(m, m->top, m->topsize + tsize);
   11514:	e590300c 	ldr	r3, [r0, #12]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   11518:	e59f0598 	ldr	r0, [pc, #1432]	; 11ab8 <malloc+0x1070>
        init_top(m, m->top, m->topsize + tsize);
   1151c:	e0866003 	add	r6, r6, r3
  size_t offset = align_offset(chunk2mem(p));
   11520:	12623000 	rsbne	r3, r2, #0
  m->top = p;
   11524:	e59f2590 	ldr	r2, [pc, #1424]	; 11abc <malloc+0x1074>
  size_t offset = align_offset(chunk2mem(p));
   11528:	12033007 	andne	r3, r3, #7
   1152c:	108ec003 	addne	ip, lr, r3
   11530:	01a03006 	moveq	r3, r6
   11534:	10463003 	subne	r3, r6, r3
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   11538:	e08f0000 	add	r0, pc, r0
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   1153c:	e08e6006 	add	r6, lr, r6
  m->top = p;
   11540:	e08f2002 	add	r2, pc, r2
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   11544:	e5900010 	ldr	r0, [r0, #16]
  p->head = psize | PINUSE_BIT;
   11548:	e3831001 	orr	r1, r3, #1
  m->top = p;
   1154c:	e582c018 	str	ip, [r2, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   11550:	e3a0e028 	mov	lr, #40	; 0x28
  m->topsize = psize;
   11554:	e582300c 	str	r3, [r2, #12]
  p->head = psize | PINUSE_BIT;
   11558:	e58c1004 	str	r1, [ip, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   1155c:	e586e004 	str	lr, [r6, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   11560:	e582001c 	str	r0, [r2, #28]
    if (nb < m->topsize) { /* Allocate from new or extended top space */
   11564:	e1540003 	cmp	r4, r3
   11568:	2affff30 	bcs	11230 <malloc+0x7e8>
      size_t rsize = m->topsize -= nb;
   1156c:	e59f154c 	ldr	r1, [pc, #1356]	; 11ac0 <malloc+0x1078>
   11570:	e0433004 	sub	r3, r3, r4
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
   11574:	e384c003 	orr	ip, r4, #3
      r->head = rsize | PINUSE_BIT;
   11578:	e383e001 	orr	lr, r3, #1
      size_t rsize = m->topsize -= nb;
   1157c:	e08f1001 	add	r1, pc, r1
      mchunkptr p = m->top;
   11580:	e5912018 	ldr	r2, [r1, #24]
      size_t rsize = m->topsize -= nb;
   11584:	e581300c 	str	r3, [r1, #12]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
   11588:	e0824004 	add	r4, r2, r4
      return chunk2mem(p);
   1158c:	e2820008 	add	r0, r2, #8
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
   11590:	e5814018 	str	r4, [r1, #24]
      r->head = rsize | PINUSE_BIT;
   11594:	e584e004 	str	lr, [r4, #4]
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
   11598:	e582c004 	str	ip, [r2, #4]
   1159c:	eafffd59 	b	10b08 <malloc+0xc0>
  size_t offset = align_offset(chunk2mem(rawsp));
   115a0:	e2423027 	sub	r3, r2, #39	; 0x27
   115a4:	e1a0c002 	mov	ip, r2
   115a8:	e3130007 	tst	r3, #7
  m->top = p;
   115ac:	e59fa510 	ldr	sl, [pc, #1296]	; 11ac4 <malloc+0x107c>
  size_t offset = align_offset(chunk2mem(rawsp));
   115b0:	12638000 	rsbne	r8, r3, #0
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
   115b4:	e28e3010 	add	r3, lr, #16
  size_t offset = align_offset(chunk2mem(rawsp));
   115b8:	12088007 	andne	r8, r8, #7
   115bc:	03e0802e 	mvneq	r8, #46	; 0x2e
   115c0:	1248802f 	subne	r8, r8, #47	; 0x2f
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
   115c4:	e2461028 	sub	r1, r6, #40	; 0x28
  char* asp = rawsp + offset;
   115c8:	e0828008 	add	r8, r2, r8
  m->top = p;
   115cc:	e08fa00a 	add	sl, pc, sl
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
   115d0:	e1580003 	cmp	r8, r3
  size_t offset = align_offset(chunk2mem(p));
   115d4:	e2853008 	add	r3, r5, #8
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
   115d8:	31a0800e 	movcc	r8, lr
  size_t offset = align_offset(chunk2mem(p));
   115dc:	e3130007 	tst	r3, #7
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
   115e0:	e2882008 	add	r2, r8, #8
  size_t offset = align_offset(chunk2mem(p));
   115e4:	12633000 	rsbne	r3, r3, #0
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
   115e8:	e1a09002 	mov	r9, r2
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   115ec:	e59f24d4 	ldr	r2, [pc, #1236]	; 11ac8 <malloc+0x1080>
  size_t offset = align_offset(chunk2mem(p));
   115f0:	12033007 	andne	r3, r3, #7
   115f4:	01a03001 	moveq	r3, r1
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   115f8:	e08f2002 	add	r2, pc, r2
   115fc:	10850003 	addne	r0, r5, r3
  size_t offset = align_offset(chunk2mem(p));
   11600:	01a00005 	moveq	r0, r5
   11604:	10413003 	subne	r3, r1, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   11608:	e0851001 	add	r1, r5, r1
  p->head = psize | PINUSE_BIT;
   1160c:	e3837001 	orr	r7, r3, #1
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   11610:	e5922010 	ldr	r2, [r2, #16]
  m->topsize = psize;
   11614:	e58a300c 	str	r3, [sl, #12]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   11618:	e3a03028 	mov	r3, #40	; 0x28
  m->top = p;
   1161c:	e58a0018 	str	r0, [sl, #24]
  p->head = psize | PINUSE_BIT;
   11620:	e5807004 	str	r7, [r0, #4]
  assert(is_aligned(ss));
   11624:	e1a07009 	mov	r7, r9
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   11628:	e5813004 	str	r3, [r1, #4]
  assert(is_aligned(ss));
   1162c:	e2191007 	ands	r1, r9, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   11630:	e58a201c 	str	r2, [sl, #28]
  assert(is_aligned(ss));
   11634:	1affff07 	bne	11258 <malloc+0x810>
  *ss = m->seg; /* Push current record */
   11638:	e28a3d07 	add	r3, sl, #448	; 0x1c0
  int nfences = 0;
   1163c:	e1a09001 	mov	r9, r1
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
   11640:	e3a0201b 	mov	r2, #27
  int nfences = 0;
   11644:	e58d1004 	str	r1, [sp, #4]
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
   11648:	e5882004 	str	r2, [r8, #4]
    p->head = FENCEPOST_HEAD;
   1164c:	e3a0b007 	mov	fp, #7
  *ss = m->seg; /* Push current record */
   11650:	e893000f 	ldm	r3, {r0, r1, r2, r3}
   11654:	e887000f 	stm	r7, {r0, r1, r2, r3}
  m->seg.next = ss;
   11658:	e58a71c8 	str	r7, [sl, #456]	; 0x1c8
   1165c:	e288701c 	add	r7, r8, #28
  m->seg.base = tbase;
   11660:	e58a51c0 	str	r5, [sl, #448]	; 0x1c0
  m->seg.size = tsize;
   11664:	e58a61c4 	str	r6, [sl, #452]	; 0x1c4
  m->seg.sflags = mmapped;
   11668:	e58a91cc 	str	r9, [sl, #460]	; 0x1cc
    p->head = FENCEPOST_HEAD;
   1166c:	e487b004 	str	fp, [r7], #4
    ++nfences;
   11670:	e2899001 	add	r9, r9, #1
    if ((char*)(&(nextp->head)) < old_end)
   11674:	e15c0007 	cmp	ip, r7
   11678:	8afffffb 	bhi	1166c <malloc+0xc24>
  assert(nfences >= 2);
   1167c:	e3590001 	cmp	r9, #1
   11680:	0afffef4 	beq	11258 <malloc+0x810>
  if (csp != old_top) {
   11684:	e15e0008 	cmp	lr, r8
   11688:	0a0001ba 	beq	11d78 <malloc+0x1330>
    size_t psize = csp - old_top;
   1168c:	e048100e 	sub	r1, r8, lr
    set_free_with_pinuse(q, psize, tn);
   11690:	e5983004 	ldr	r3, [r8, #4]
   11694:	e3812001 	orr	r2, r1, #1
   11698:	e3c33001 	bic	r3, r3, #1
   1169c:	e5883004 	str	r3, [r8, #4]
    insert_chunk(m, q, psize);
   116a0:	e1a031a1 	lsr	r3, r1, #3
    set_free_with_pinuse(q, psize, tn);
   116a4:	e58e2004 	str	r2, [lr, #4]
    insert_chunk(m, q, psize);
   116a8:	e353001f 	cmp	r3, #31
    set_free_with_pinuse(q, psize, tn);
   116ac:	e5881000 	str	r1, [r8]
    insert_chunk(m, q, psize);
   116b0:	8a000127 	bhi	11b54 <malloc+0x110c>
   116b4:	e59f0410 	ldr	r0, [pc, #1040]	; 11acc <malloc+0x1084>
   116b8:	e351000f 	cmp	r1, #15
   116bc:	e08f0000 	add	r0, pc, r0
   116c0:	e0802183 	add	r2, r0, r3, lsl #3
   116c4:	e2822028 	add	r2, r2, #40	; 0x28
   116c8:	9afffee2 	bls	11258 <malloc+0x810>
   116cc:	e3a01001 	mov	r1, #1
   116d0:	e590c000 	ldr	ip, [r0]
   116d4:	e1a03311 	lsl	r3, r1, r3
   116d8:	e11c0003 	tst	ip, r3
   116dc:	1a0001da 	bne	11e4c <malloc+0x1404>
   116e0:	e1a01002 	mov	r1, r2
   116e4:	e18c3003 	orr	r3, ip, r3
   116e8:	e5803000 	str	r3, [r0]
   116ec:	e59f33dc 	ldr	r3, [pc, #988]	; 11ad0 <malloc+0x1088>
   116f0:	e582e008 	str	lr, [r2, #8]
   116f4:	e08f3003 	add	r3, pc, r3
   116f8:	e581e00c 	str	lr, [r1, #12]
   116fc:	e58e1008 	str	r1, [lr, #8]
   11700:	e58e200c 	str	r2, [lr, #12]
   11704:	e593300c 	ldr	r3, [r3, #12]
   11708:	eaffff95 	b	11564 <malloc+0xb1c>
   1170c:	e3e03001 	mvn	r3, #1
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
   11710:	e1a08006 	mov	r8, r6
   11714:	e1a07713 	lsl	r7, r3, r7
    if (leftbits != 0) {
   11718:	e0117007 	ands	r7, r1, r7
   1171c:	0afffd15 	beq	10b78 <malloc+0x130>
      binmap_t leastbit = least_bit(leftbits);
   11720:	e2673000 	rsb	r3, r7, #0
      t = *treebin_at(m, i);
   11724:	e59fc3a8 	ldr	ip, [pc, #936]	; 11ad4 <malloc+0x108c>
      binmap_t leastbit = least_bit(leftbits);
   11728:	e0033007 	and	r3, r3, r7
      compute_bit2idx(leastbit, i);
   1172c:	e2433001 	sub	r3, r3, #1
      t = *treebin_at(m, i);
   11730:	e08fc00c 	add	ip, pc, ip
      compute_bit2idx(leastbit, i);
   11734:	e1a00623 	lsr	r0, r3, #12
   11738:	e2000010 	and	r0, r0, #16
   1173c:	e1a03033 	lsr	r3, r3, r0
   11740:	e1a0e2a3 	lsr	lr, r3, #5
   11744:	e20ee008 	and	lr, lr, #8
   11748:	e180000e 	orr	r0, r0, lr
   1174c:	e1a03e33 	lsr	r3, r3, lr
   11750:	e1a0e123 	lsr	lr, r3, #2
   11754:	e20ee004 	and	lr, lr, #4
   11758:	e080000e 	add	r0, r0, lr
   1175c:	e1a03e33 	lsr	r3, r3, lr
   11760:	e1a0e0a3 	lsr	lr, r3, #1
   11764:	e20ee002 	and	lr, lr, #2
   11768:	e080000e 	add	r0, r0, lr
   1176c:	e1a03e33 	lsr	r3, r3, lr
   11770:	e7e0e0d3 	ubfx	lr, r3, #1, #1
      t = *treebin_at(m, i);
   11774:	e080000e 	add	r0, r0, lr
   11778:	e0803e33 	add	r3, r0, r3, lsr lr
   1177c:	e283304c 	add	r3, r3, #76	; 0x4c
   11780:	e79cc103 	ldr	ip, [ip, r3, lsl #2]
  while (t != 0) { /* find smallest of tree or subtree */
   11784:	e35c0000 	cmp	ip, #0
   11788:	13a00000 	movne	r0, #0
   1178c:	1afffe0d 	bne	10fc8 <malloc+0x580>
   11790:	eafffcf8 	b	10b78 <malloc+0x130>
      ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
   11794:	e59f333c 	ldr	r3, [pc, #828]	; 11ad8 <malloc+0x1090>
   11798:	e08f3003 	add	r3, pc, r3
   1179c:	e593600c 	ldr	r6, [r3, #12]
   117a0:	e0406006 	sub	r6, r0, r6
   117a4:	e0866004 	add	r6, r6, r4
   117a8:	e006600c 	and	r6, r6, ip
      if (ssize < HALF_MAX_SIZE_T &&
   117ac:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
   117b0:	8afffe98 	bhi	11218 <malloc+0x7d0>
   117b4:	e1a00006 	mov	r0, r6
   117b8:	ebfffbe4 	bl	10750 <sbrk>
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
   117bc:	e5972000 	ldr	r2, [r7]
   117c0:	e5971004 	ldr	r1, [r7, #4]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
   117c4:	e3700001 	cmn	r0, #1
   117c8:	13a03000 	movne	r3, #0
   117cc:	03a03001 	moveq	r3, #1
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
   117d0:	e0822001 	add	r2, r2, r1
      if (ssize < HALF_MAX_SIZE_T &&
   117d4:	e1a05000 	mov	r5, r0
    if (tbase == CMFAIL) {    /* Cope with partial failure */
   117d8:	e1500002 	cmp	r0, r2
   117dc:	13833001 	orrne	r3, r3, #1
   117e0:	e3530000 	cmp	r3, #0
   117e4:	0afffd9a 	beq	10e54 <malloc+0x40c>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
   117e8:	e3750001 	cmn	r5, #1
   117ec:	0a00033b 	beq	124e0 <malloc+0x1a98>
            ssize < nb + SYS_ALLOC_PADDING) {
   117f0:	e2843030 	add	r3, r4, #48	; 0x30
        if (ssize < HALF_MAX_SIZE_T &&
   117f4:	e1530006 	cmp	r3, r6
   117f8:	9afffd95 	bls	10e54 <malloc+0x40c>
          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
   117fc:	e59f32d8 	ldr	r3, [pc, #728]	; 11adc <malloc+0x1094>
   11800:	e2669000 	rsb	r9, r6, #0
   11804:	e08f3003 	add	r3, pc, r3
   11808:	e5933008 	ldr	r3, [r3, #8]
   1180c:	e283702f 	add	r7, r3, #47	; 0x2f
   11810:	e2633000 	rsb	r3, r3, #0
   11814:	e0877004 	add	r7, r7, r4
   11818:	e0477006 	sub	r7, r7, r6
   1181c:	e0077003 	and	r7, r7, r3
          if (esize < HALF_MAX_SIZE_T) {
   11820:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
   11824:	8afffd8a 	bhi	10e54 <malloc+0x40c>
            char* end = (char*)CALL_MORECORE(esize);
   11828:	e1a00007 	mov	r0, r7
   1182c:	ebfffbc7 	bl	10750 <sbrk>
            if (end != CMFAIL)
   11830:	e3700001 	cmn	r0, #1
              ssize += esize;
   11834:	10866007 	addne	r6, r6, r7
            if (end != CMFAIL)
   11838:	1afffd85 	bne	10e54 <malloc+0x40c>
              (void) CALL_MORECORE(-ssize);
   1183c:	e1a00009 	mov	r0, r9
   11840:	ebfffbc2 	bl	10750 <sbrk>
   11844:	e59f3294 	ldr	r3, [pc, #660]	; 11ae0 <malloc+0x1098>
   11848:	e08f3003 	add	r3, pc, r3
   1184c:	e593e1bc 	ldr	lr, [r3, #444]	; 0x1bc
   11850:	eafffe70 	b	11218 <malloc+0x7d0>
      if (m->least_addr == 0 || tbase < m->least_addr)
   11854:	e5931010 	ldr	r1, [r3, #16]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
   11858:	e3e00000 	mvn	r0, #0
      if (m->least_addr == 0 || tbase < m->least_addr)
   1185c:	e1510005 	cmp	r1, r5
   11860:	93a02000 	movls	r2, #0
   11864:	83a02001 	movhi	r2, #1
   11868:	e3510000 	cmp	r1, #0
      m->seg.base = tbase;
   1186c:	e59f1270 	ldr	r1, [pc, #624]	; 11ae4 <malloc+0x109c>
      if (m->least_addr == 0 || tbase < m->least_addr)
   11870:	03a02001 	moveq	r2, #1
   11874:	e3520000 	cmp	r2, #0
        m->least_addr = tbase;
   11878:	15835010 	strne	r5, [r3, #16]
      m->magic = mparams.magic;
   1187c:	e59f3264 	ldr	r3, [pc, #612]	; 11ae8 <malloc+0x10a0>
      m->seg.base = tbase;
   11880:	e08f1001 	add	r1, pc, r1
      m->seg.sflags = mmap_flag;
   11884:	e3a02000 	mov	r2, #0
      m->magic = mparams.magic;
   11888:	e08f3003 	add	r3, pc, r3
      m->seg.sflags = mmap_flag;
   1188c:	e58121cc 	str	r2, [r1, #460]	; 0x1cc
   11890:	e2812f4a 	add	r2, r1, #296	; 0x128
      m->seg.base = tbase;
   11894:	e58151c0 	str	r5, [r1, #448]	; 0x1c0
      m->magic = mparams.magic;
   11898:	e5933000 	ldr	r3, [r3]
   1189c:	e5813024 	str	r3, [r1, #36]	; 0x24
   118a0:	e2813028 	add	r3, r1, #40	; 0x28
      m->seg.size = tsize;
   118a4:	e58161c4 	str	r6, [r1, #452]	; 0x1c4
      m->release_checks = MAX_RELEASE_CHECK_RATE;
   118a8:	e5810020 	str	r0, [r1, #32]
    bin->fd = bin->bk = bin;
   118ac:	e583300c 	str	r3, [r3, #12]
   118b0:	e5833008 	str	r3, [r3, #8]
   118b4:	e2833008 	add	r3, r3, #8
  for (i = 0; i < NSMALLBINS; ++i) {
   118b8:	e1520003 	cmp	r2, r3
   118bc:	1afffffa 	bne	118ac <malloc+0xe64>
  size_t offset = align_offset(chunk2mem(p));
   118c0:	e2853008 	add	r3, r5, #8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   118c4:	e59f0220 	ldr	r0, [pc, #544]	; 11aec <malloc+0x10a4>
  size_t offset = align_offset(chunk2mem(p));
   118c8:	e3130007 	tst	r3, #7
  m->top = p;
   118cc:	e59f221c 	ldr	r2, [pc, #540]	; 11af0 <malloc+0x10a8>
  size_t offset = align_offset(chunk2mem(p));
   118d0:	12633000 	rsbne	r3, r3, #0
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
   118d4:	e2466028 	sub	r6, r6, #40	; 0x28
  size_t offset = align_offset(chunk2mem(p));
   118d8:	12033007 	andne	r3, r3, #7
   118dc:	01a03006 	moveq	r3, r6
   118e0:	1085c003 	addne	ip, r5, r3
   118e4:	01a0c005 	moveq	ip, r5
   118e8:	10463003 	subne	r3, r6, r3
  m->trim_check = mparams.trim_threshold; /* reset on each update */
   118ec:	e08f0000 	add	r0, pc, r0
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
   118f0:	e0856006 	add	r6, r5, r6
  m->top = p;
   118f4:	e08f2002 	add	r2, pc, r2
   118f8:	eaffff11 	b	11544 <malloc+0xafc>
  compute_tree_index(nb, idx);
   118fc:	e2470c01 	sub	r0, r7, #256	; 0x100
   11900:	e1a00820 	lsr	r0, r0, #16
   11904:	e2000008 	and	r0, r0, #8
   11908:	e1a07017 	lsl	r7, r7, r0
   1190c:	e247ca01 	sub	ip, r7, #4096	; 0x1000
   11910:	e1a0c82c 	lsr	ip, ip, #16
   11914:	e20cc004 	and	ip, ip, #4
   11918:	e180000c 	orr	r0, r0, ip
   1191c:	e1a07c17 	lsl	r7, r7, ip
   11920:	e247c901 	sub	ip, r7, #16384	; 0x4000
   11924:	e1a0c82c 	lsr	ip, ip, #16
   11928:	e20cc002 	and	ip, ip, #2
   1192c:	e080000c 	add	r0, r0, ip
   11930:	e1a07c17 	lsl	r7, r7, ip
   11934:	e06077a7 	rsb	r7, r0, r7, lsr #15
   11938:	e2870015 	add	r0, r7, #21
   1193c:	e287700e 	add	r7, r7, #14
   11940:	e1a00034 	lsr	r0, r4, r0
   11944:	e2000001 	and	r0, r0, #1
   11948:	e0807087 	add	r7, r0, r7, lsl #1
  if ((t = *treebin_at(m, idx)) != 0) {
   1194c:	e287004c 	add	r0, r7, #76	; 0x4c
   11950:	e793c100 	ldr	ip, [r3, r0, lsl #2]
   11954:	e35c0000 	cmp	ip, #0
   11958:	0affff6b 	beq	1170c <malloc+0xcc4>
    size_t sizebits = nb << leftshift_for_tree_index(idx);
   1195c:	e357001f 	cmp	r7, #31
   11960:	01a0e004 	moveq	lr, r4
   11964:	0afffd78 	beq	10f4c <malloc+0x504>
   11968:	e1a0e0a7 	lsr	lr, r7, #1
   1196c:	e26ee019 	rsb	lr, lr, #25
   11970:	eafffd74 	b	10f48 <malloc+0x500>
        if ((rsize = trem) == 0)
   11974:	e1a0000c 	mov	r0, ip
   11978:	eafffd92 	b	10fc8 <malloc+0x580>
          insert_chunk(m, r, rsize);
   1197c:	e1a031a8 	lsr	r3, r8, #3
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
   11980:	e3842003 	orr	r2, r4, #3
          insert_chunk(m, r, rsize);
   11984:	e353001f 	cmp	r3, #31
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
   11988:	e5802004 	str	r2, [r0, #4]
          set_size_and_pinuse_of_free_chunk(r, rsize);
   1198c:	e3882001 	orr	r2, r8, #1
   11990:	e5872004 	str	r2, [r7, #4]
   11994:	e7878008 	str	r8, [r7, r8]
          insert_chunk(m, r, rsize);
   11998:	8a0000fa 	bhi	11d88 <malloc+0x1340>
   1199c:	e59f1150 	ldr	r1, [pc, #336]	; 11af4 <malloc+0x10ac>
   119a0:	e3a02001 	mov	r2, #1
   119a4:	e08f1001 	add	r1, pc, r1
   119a8:	e1a02312 	lsl	r2, r2, r3
   119ac:	e0813183 	add	r3, r1, r3, lsl #3
   119b0:	e2833028 	add	r3, r3, #40	; 0x28
   119b4:	e591c000 	ldr	ip, [r1]
   119b8:	e11c0002 	tst	ip, r2
   119bc:	1a00014e 	bne	11efc <malloc+0x14b4>
   119c0:	e18cc002 	orr	ip, ip, r2
   119c4:	e1a02003 	mov	r2, r3
   119c8:	e581c000 	str	ip, [r1]
   119cc:	e5837008 	str	r7, [r3, #8]
   119d0:	e582700c 	str	r7, [r2, #12]
   119d4:	e1c720f8 	strd	r2, [r7, #8]
   119d8:	eafffdd2 	b	11128 <malloc+0x6e0>
        unlink_large_chunk(m, v);
   119dc:	e590e014 	ldr	lr, [r0, #20]
   119e0:	e35e0000 	cmp	lr, #0
   119e4:	12803014 	addne	r3, r0, #20
   119e8:	0a000125 	beq	11e84 <malloc+0x143c>
  while (t != 0) { /* find smallest of tree or subtree */
   119ec:	e1a0200e 	mov	r2, lr
   119f0:	e1a0c003 	mov	ip, r3
        unlink_large_chunk(m, v);
   119f4:	e1a03002 	mov	r3, r2
   119f8:	e5b31014 	ldr	r1, [r3, #20]!
   119fc:	e3510000 	cmp	r1, #0
   11a00:	0a000005 	beq	11a1c <malloc+0xfd4>
   11a04:	e1a02001 	mov	r2, r1
   11a08:	e1a0c003 	mov	ip, r3
   11a0c:	e1a03002 	mov	r3, r2
   11a10:	e5b31014 	ldr	r1, [r3, #20]!
   11a14:	e3510000 	cmp	r1, #0
   11a18:	1afffff9 	bne	11a04 <malloc+0xfbc>
   11a1c:	e1a03002 	mov	r3, r2
   11a20:	e5b3e010 	ldr	lr, [r3, #16]!
   11a24:	e35e0000 	cmp	lr, #0
   11a28:	1affffef 	bne	119ec <malloc+0xfa4>
   11a2c:	e156000c 	cmp	r6, ip
   11a30:	8afffe08 	bhi	11258 <malloc+0x810>
   11a34:	e58ce000 	str	lr, [ip]
   11a38:	eafffd8f 	b	1107c <malloc+0x634>
   11a3c:	00005658 	.word	0x00005658
   11a40:	000055a8 	.word	0x000055a8
   11a44:	00005584 	.word	0x00005584
   11a48:	0000553c 	.word	0x0000553c
   11a4c:	000053ec 	.word	0x000053ec
   11a50:	000053a0 	.word	0x000053a0
   11a54:	00005384 	.word	0x00005384
   11a58:	00005524 	.word	0x00005524
   11a5c:	00005508 	.word	0x00005508
   11a60:	0000530c 	.word	0x0000530c
   11a64:	000052d4 	.word	0x000052d4
   11a68:	00005268 	.word	0x00005268
   11a6c:	00005248 	.word	0x00005248
   11a70:	0000520c 	.word	0x0000520c
   11a74:	000051f8 	.word	0x000051f8
   11a78:	000051d4 	.word	0x000051d4
   11a7c:	000050b0 	.word	0x000050b0
   11a80:	00005030 	.word	0x00005030
   11a84:	00004f8c 	.word	0x00004f8c
   11a88:	000050f8 	.word	0x000050f8
   11a8c:	00004ed8 	.word	0x00004ed8
   11a90:	00004eb0 	.word	0x00004eb0
   11a94:	00004e9c 	.word	0x00004e9c
   11a98:	00004e84 	.word	0x00004e84
   11a9c:	00004dac 	.word	0x00004dac
   11aa0:	00004d2c 	.word	0x00004d2c
   11aa4:	00004c84 	.word	0x00004c84
   11aa8:	00004c44 	.word	0x00004c44
   11aac:	00004c2c 	.word	0x00004c2c
   11ab0:	00004bf0 	.word	0x00004bf0
   11ab4:	00004bb8 	.word	0x00004bb8
   11ab8:	00004d60 	.word	0x00004d60
   11abc:	00004b80 	.word	0x00004b80
   11ac0:	00004b44 	.word	0x00004b44
   11ac4:	00004af4 	.word	0x00004af4
   11ac8:	00004ca0 	.word	0x00004ca0
   11acc:	00004a04 	.word	0x00004a04
   11ad0:	000049cc 	.word	0x000049cc
   11ad4:	00004990 	.word	0x00004990
   11ad8:	00004928 	.word	0x00004928
   11adc:	00004a94 	.word	0x00004a94
   11ae0:	00004878 	.word	0x00004878
   11ae4:	00004840 	.word	0x00004840
   11ae8:	00004a10 	.word	0x00004a10
   11aec:	000049ac 	.word	0x000049ac
   11af0:	000047cc 	.word	0x000047cc
   11af4:	0000471c 	.word	0x0000471c
   11af8:	000044f4 	.word	0x000044f4
   11afc:	0000448c 	.word	0x0000448c
   11b00:	000043d0 	.word	0x000043d0
   11b04:	00004384 	.word	0x00004384
   11b08:	00004344 	.word	0x00004344
   11b0c:	000042c0 	.word	0x000042c0
   11b10:	00004124 	.word	0x00004124
   11b14:	000040f8 	.word	0x000040f8
   11b18:	00004060 	.word	0x00004060
   11b1c:	00003ffc 	.word	0x00003ffc
   11b20:	00003f10 	.word	0x00003f10
   11b24:	00003e6c 	.word	0x00003e6c
   11b28:	00003de0 	.word	0x00003de0
   11b2c:	00003dc8 	.word	0x00003dc8
   11b30:	00003d9c 	.word	0x00003d9c
   11b34:	00003d44 	.word	0x00003d44
   11b38:	00003cf8 	.word	0x00003cf8
   11b3c:	00003ca0 	.word	0x00003ca0
   11b40:	00003c80 	.word	0x00003c80
   11b44:	00003c68 	.word	0x00003c68
   11b48:	00003c24 	.word	0x00003c24
   11b4c:	00003dcc 	.word	0x00003dcc
   11b50:	00003bdc 	.word	0x00003bdc
    insert_chunk(m, q, psize);
   11b54:	e1a03421 	lsr	r3, r1, #8
   11b58:	e3530801 	cmp	r3, #65536	; 0x10000
   11b5c:	2a0000b5 	bcs	11e38 <malloc+0x13f0>
   11b60:	e2432c01 	sub	r2, r3, #256	; 0x100
   11b64:	e3a00001 	mov	r0, #1
   11b68:	e1a02822 	lsr	r2, r2, #16
   11b6c:	e2022008 	and	r2, r2, #8
   11b70:	e1a03213 	lsl	r3, r3, r2
   11b74:	e243ca01 	sub	ip, r3, #4096	; 0x1000
   11b78:	e1a0c82c 	lsr	ip, ip, #16
   11b7c:	e20cc004 	and	ip, ip, #4
   11b80:	e182200c 	orr	r2, r2, ip
   11b84:	e1a03c13 	lsl	r3, r3, ip
   11b88:	e243c901 	sub	ip, r3, #16384	; 0x4000
   11b8c:	e1a0c82c 	lsr	ip, ip, #16
   11b90:	e20cc002 	and	ip, ip, #2
   11b94:	e082200c 	add	r2, r2, ip
   11b98:	e1a03c13 	lsl	r3, r3, ip
   11b9c:	e06227a3 	rsb	r2, r2, r3, lsr #15
   11ba0:	e2823015 	add	r3, r2, #21
   11ba4:	e282200e 	add	r2, r2, #14
   11ba8:	e1a03331 	lsr	r3, r1, r3
   11bac:	e0033000 	and	r3, r3, r0
   11bb0:	e0833012 	add	r3, r3, r2, lsl r0
   11bb4:	e283604c 	add	r6, r3, #76	; 0x4c
   11bb8:	e1a00310 	lsl	r0, r0, r3
   11bbc:	e1a05106 	lsl	r5, r6, #2
   11bc0:	e51f20d0 	ldr	r2, [pc, #-208]	; 11af8 <malloc+0x10b0>
   11bc4:	e3a0c000 	mov	ip, #0
   11bc8:	e58ec014 	str	ip, [lr, #20]
   11bcc:	e08f2002 	add	r2, pc, r2
   11bd0:	e58ec010 	str	ip, [lr, #16]
   11bd4:	e58e301c 	str	r3, [lr, #28]
   11bd8:	e592c004 	ldr	ip, [r2, #4]
   11bdc:	e110000c 	tst	r0, ip
   11be0:	0a00009e 	beq	11e60 <malloc+0x1418>
   11be4:	e353001f 	cmp	r3, #31
   11be8:	e7920106 	ldr	r0, [r2, r6, lsl #2]
   11bec:	11a020a3 	lsrne	r2, r3, #1
   11bf0:	01a02001 	moveq	r2, r1
   11bf4:	12622019 	rsbne	r2, r2, #25
   11bf8:	11a02211 	lslne	r2, r1, r2
   11bfc:	ea000006 	b	11c1c <malloc+0x11d4>
   11c00:	e1a03fa2 	lsr	r3, r2, #31
   11c04:	e1a02082 	lsl	r2, r2, #1
   11c08:	e2833004 	add	r3, r3, #4
   11c0c:	e790c103 	ldr	ip, [r0, r3, lsl #2]
   11c10:	e35c0000 	cmp	ip, #0
   11c14:	0a0000de 	beq	11f94 <malloc+0x154c>
   11c18:	e1a0000c 	mov	r0, ip
   11c1c:	e5903004 	ldr	r3, [r0, #4]
   11c20:	e3c33007 	bic	r3, r3, #7
   11c24:	e1510003 	cmp	r1, r3
   11c28:	1afffff4 	bne	11c00 <malloc+0x11b8>
   11c2c:	e51f1138 	ldr	r1, [pc, #-312]	; 11afc <malloc+0x10b4>
   11c30:	e5902008 	ldr	r2, [r0, #8]
   11c34:	e08f1001 	add	r1, pc, r1
   11c38:	e5913010 	ldr	r3, [r1, #16]
   11c3c:	e1520003 	cmp	r2, r3
   11c40:	21500003 	cmpcs	r0, r3
   11c44:	3afffd83 	bcc	11258 <malloc+0x810>
   11c48:	e582e00c 	str	lr, [r2, #12]
   11c4c:	e3a0c000 	mov	ip, #0
   11c50:	e580e008 	str	lr, [r0, #8]
   11c54:	e591300c 	ldr	r3, [r1, #12]
   11c58:	e58ec018 	str	ip, [lr, #24]
   11c5c:	e58e2008 	str	r2, [lr, #8]
   11c60:	e58e000c 	str	r0, [lr, #12]
   11c64:	eafffe3e 	b	11564 <malloc+0xb1c>
            replace_dv(gm, r, rsize);
   11c68:	e5911010 	ldr	r1, [r1, #16]
   11c6c:	e5935008 	ldr	r5, [r3, #8]
   11c70:	e1550001 	cmp	r5, r1
   11c74:	2afffc23 	bcs	10d08 <malloc+0x2c0>
   11c78:	eafffd76 	b	11258 <malloc+0x810>
          sp->size += tsize;
   11c7c:	e5930004 	ldr	r0, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
   11c80:	e2851008 	add	r1, r5, #8
   11c84:	e3110007 	tst	r1, #7
          sp->base = tbase;
   11c88:	e5835000 	str	r5, [r3]
          sp->size += tsize;
   11c8c:	e0806006 	add	r6, r0, r6
   11c90:	e5836004 	str	r6, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
   11c94:	12613000 	rsbne	r3, r1, #0
   11c98:	12033007 	andne	r3, r3, #7
   11c9c:	10855003 	addne	r5, r5, r3
  mchunkptr oldfirst = align_as_chunk(oldbase);
   11ca0:	e2823008 	add	r3, r2, #8
   11ca4:	e3130007 	tst	r3, #7
  mchunkptr q = chunk_plus_offset(p, nb);
   11ca8:	e085c004 	add	ip, r5, r4
  mchunkptr oldfirst = align_as_chunk(oldbase);
   11cac:	12633000 	rsbne	r3, r3, #0
   11cb0:	12033007 	andne	r3, r3, #7
   11cb4:	10822003 	addne	r2, r2, r3
  size_t psize = (char*)oldfirst - (char*)p;
   11cb8:	e0423005 	sub	r3, r2, r5
  assert((char*)oldfirst > (char*)q);
   11cbc:	e15c0002 	cmp	ip, r2
  size_t qsize = psize - nb;
   11cc0:	e0433004 	sub	r3, r3, r4
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
   11cc4:	e3844003 	orr	r4, r4, #3
   11cc8:	e5854004 	str	r4, [r5, #4]
  assert((char*)oldfirst > (char*)q);
   11ccc:	2afffd61 	bcs	11258 <malloc+0x810>
  assert(pinuse(oldfirst));
   11cd0:	e5920004 	ldr	r0, [r2, #4]
   11cd4:	e3100001 	tst	r0, #1
   11cd8:	0afffd5e 	beq	11258 <malloc+0x810>
  assert(qsize >= MIN_CHUNK_SIZE);
   11cdc:	e353000f 	cmp	r3, #15
   11ce0:	9afffd5c 	bls	11258 <malloc+0x810>
  if (oldfirst == m->top) {
   11ce4:	e15e0002 	cmp	lr, r2
   11ce8:	0a0000b5 	beq	11fc4 <malloc+0x157c>
  else if (oldfirst == m->dv) {
   11cec:	e51f11f4 	ldr	r1, [pc, #-500]	; 11b00 <malloc+0x10b8>
   11cf0:	e08f1001 	add	r1, pc, r1
   11cf4:	e591e014 	ldr	lr, [r1, #20]
   11cf8:	e15e0002 	cmp	lr, r2
   11cfc:	0a000102 	beq	1210c <malloc+0x16c4>
    if (!is_inuse(oldfirst)) {
   11d00:	e200e003 	and	lr, r0, #3
   11d04:	e35e0001 	cmp	lr, #1
   11d08:	0a000107 	beq	1212c <malloc+0x16e4>
    insert_chunk(m, q, qsize);
   11d0c:	e1a0e1a3 	lsr	lr, r3, #3
    set_free_with_pinuse(q, qsize, oldfirst);
   11d10:	e3c00001 	bic	r0, r0, #1
    insert_chunk(m, q, qsize);
   11d14:	e35e001f 	cmp	lr, #31
    set_free_with_pinuse(q, qsize, oldfirst);
   11d18:	e5820004 	str	r0, [r2, #4]
   11d1c:	e3830001 	orr	r0, r3, #1
   11d20:	e58c0004 	str	r0, [ip, #4]
   11d24:	e5823000 	str	r3, [r2]
    insert_chunk(m, q, qsize);
   11d28:	8a0000ae 	bhi	11fe8 <malloc+0x15a0>
   11d2c:	e081318e 	add	r3, r1, lr, lsl #3
   11d30:	e2833028 	add	r3, r3, #40	; 0x28
   11d34:	e51f1238 	ldr	r1, [pc, #-568]	; 11b04 <malloc+0x10bc>
   11d38:	e3a02001 	mov	r2, #1
   11d3c:	e08f1001 	add	r1, pc, r1
   11d40:	e1a0ee12 	lsl	lr, r2, lr
   11d44:	e5912000 	ldr	r2, [r1]
   11d48:	e112000e 	tst	r2, lr
   11d4c:	1a000129 	bne	121f8 <malloc+0x17b0>
   11d50:	e182e00e 	orr	lr, r2, lr
   11d54:	e1a02003 	mov	r2, r3
   11d58:	e581e000 	str	lr, [r1]
   11d5c:	e583c008 	str	ip, [r3, #8]
   11d60:	e582c00c 	str	ip, [r2, #12]
   11d64:	e1cc20f8 	strd	r2, [ip, #8]
  return chunk2mem(p);
   11d68:	e2850008 	add	r0, r5, #8
   11d6c:	eafffb65 	b	10b08 <malloc+0xc0>
   11d70:	e3822003 	orr	r2, r2, #3
   11d74:	eafffb6e 	b	10b34 <malloc+0xec>
   11d78:	e51f3278 	ldr	r3, [pc, #-632]	; 11b08 <malloc+0x10c0>
   11d7c:	e08f3003 	add	r3, pc, r3
   11d80:	e593300c 	ldr	r3, [r3, #12]
   11d84:	eafffdf6 	b	11564 <malloc+0xb1c>
          insert_chunk(m, r, rsize);
   11d88:	e1a03428 	lsr	r3, r8, #8
   11d8c:	e3530801 	cmp	r3, #65536	; 0x10000
   11d90:	2a00007a 	bcs	11f80 <malloc+0x1538>
   11d94:	e2431c01 	sub	r1, r3, #256	; 0x100
   11d98:	e3a02001 	mov	r2, #1
   11d9c:	e1a01821 	lsr	r1, r1, #16
   11da0:	e2011008 	and	r1, r1, #8
   11da4:	e1a03113 	lsl	r3, r3, r1
   11da8:	e243ca01 	sub	ip, r3, #4096	; 0x1000
   11dac:	e1a0c82c 	lsr	ip, ip, #16
   11db0:	e20cc004 	and	ip, ip, #4
   11db4:	e181100c 	orr	r1, r1, ip
   11db8:	e1a03c13 	lsl	r3, r3, ip
   11dbc:	e243c901 	sub	ip, r3, #16384	; 0x4000
   11dc0:	e1a0c82c 	lsr	ip, ip, #16
   11dc4:	e20cc002 	and	ip, ip, #2
   11dc8:	e081100c 	add	r1, r1, ip
   11dcc:	e1a03c13 	lsl	r3, r3, ip
   11dd0:	e06117a3 	rsb	r1, r1, r3, lsr #15
   11dd4:	e2813015 	add	r3, r1, #21
   11dd8:	e281100e 	add	r1, r1, #14
   11ddc:	e1a03338 	lsr	r3, r8, r3
   11de0:	e0033002 	and	r3, r3, r2
   11de4:	e0833211 	add	r3, r3, r1, lsl r2
   11de8:	e283e04c 	add	lr, r3, #76	; 0x4c
   11dec:	e1a0c312 	lsl	ip, r2, r3
   11df0:	e1a0510e 	lsl	r5, lr, #2
   11df4:	e51f22f0 	ldr	r2, [pc, #-752]	; 11b0c <malloc+0x10c4>
   11df8:	e3a01000 	mov	r1, #0
   11dfc:	e5871014 	str	r1, [r7, #20]
   11e00:	e08f2002 	add	r2, pc, r2
   11e04:	e5871010 	str	r1, [r7, #16]
   11e08:	e587301c 	str	r3, [r7, #28]
   11e0c:	e5921004 	ldr	r1, [r2, #4]
   11e10:	e111000c 	tst	r1, ip
   11e14:	1a00003c 	bne	11f0c <malloc+0x14c4>
   11e18:	e782710e 	str	r7, [r2, lr, lsl #2]
   11e1c:	e181100c 	orr	r1, r1, ip
   11e20:	e587700c 	str	r7, [r7, #12]
   11e24:	e5821004 	str	r1, [r2, #4]
   11e28:	e0822005 	add	r2, r2, r5
   11e2c:	e5877008 	str	r7, [r7, #8]
   11e30:	e5872018 	str	r2, [r7, #24]
   11e34:	eafffcbb 	b	11128 <malloc+0x6e0>
    insert_chunk(m, q, psize);
   11e38:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
   11e3c:	e3a05f6b 	mov	r5, #428	; 0x1ac
   11e40:	e3a0301f 	mov	r3, #31
   11e44:	e3a0606b 	mov	r6, #107	; 0x6b
   11e48:	eaffff5c 	b	11bc0 <malloc+0x1178>
   11e4c:	e5903010 	ldr	r3, [r0, #16]
   11e50:	e5921008 	ldr	r1, [r2, #8]
   11e54:	e1510003 	cmp	r1, r3
   11e58:	2afffe23 	bcs	116ec <malloc+0xca4>
   11e5c:	eafffcfd 	b	11258 <malloc+0x810>
   11e60:	e782e106 	str	lr, [r2, r6, lsl #2]
   11e64:	e180000c 	orr	r0, r0, ip
   11e68:	e0825005 	add	r5, r2, r5
   11e6c:	e5820004 	str	r0, [r2, #4]
   11e70:	e58ee00c 	str	lr, [lr, #12]
   11e74:	e58e5018 	str	r5, [lr, #24]
   11e78:	e58ee008 	str	lr, [lr, #8]
   11e7c:	e592300c 	ldr	r3, [r2, #12]
   11e80:	eafffdb7 	b	11564 <malloc+0xb1c>
        unlink_large_chunk(m, v);
   11e84:	e590e010 	ldr	lr, [r0, #16]
   11e88:	e35e0000 	cmp	lr, #0
   11e8c:	0a0000e6 	beq	1222c <malloc+0x17e4>
   11e90:	e2803010 	add	r3, r0, #16
   11e94:	eafffed4 	b	119ec <malloc+0xfa4>
        set_inuse_and_pinuse(m, v, (rsize + nb));
   11e98:	e0802007 	add	r2, r0, r7
   11e9c:	e3877003 	orr	r7, r7, #3
   11ea0:	e5807004 	str	r7, [r0, #4]
   11ea4:	e5923004 	ldr	r3, [r2, #4]
   11ea8:	e3833001 	orr	r3, r3, #1
   11eac:	e5823004 	str	r3, [r2, #4]
   11eb0:	eafffd74 	b	11488 <malloc+0xa40>
      unlink_large_chunk(m, v);
   11eb4:	e5901014 	ldr	r1, [r0, #20]
   11eb8:	e3510000 	cmp	r1, #0
   11ebc:	12803014 	addne	r3, r0, #20
   11ec0:	0a0000ed 	beq	1227c <malloc+0x1834>
   11ec4:	e1a05003 	mov	r5, r3
   11ec8:	e1a03001 	mov	r3, r1
   11ecc:	e1a06001 	mov	r6, r1
   11ed0:	e5b31014 	ldr	r1, [r3, #20]!
   11ed4:	e3510000 	cmp	r1, #0
   11ed8:	1afffff9 	bne	11ec4 <malloc+0x147c>
   11edc:	e1a03006 	mov	r3, r6
   11ee0:	e5b31010 	ldr	r1, [r3, #16]!
   11ee4:	e3510000 	cmp	r1, #0
   11ee8:	1afffff5 	bne	11ec4 <malloc+0x147c>
   11eec:	e1590005 	cmp	r9, r5
   11ef0:	8afffcd8 	bhi	11258 <malloc+0x810>
   11ef4:	e5851000 	str	r1, [r5]
   11ef8:	eafffd20 	b	11380 <malloc+0x938>
          insert_chunk(m, r, rsize);
   11efc:	e5932008 	ldr	r2, [r3, #8]
   11f00:	e1560002 	cmp	r6, r2
   11f04:	9afffeb0 	bls	119cc <malloc+0xf84>
   11f08:	eafffcd2 	b	11258 <malloc+0x810>
   11f0c:	e353001f 	cmp	r3, #31
   11f10:	e792110e 	ldr	r1, [r2, lr, lsl #2]
   11f14:	11a020a3 	lsrne	r2, r3, #1
   11f18:	01a02008 	moveq	r2, r8
   11f1c:	12622019 	rsbne	r2, r2, #25
   11f20:	11a02218 	lslne	r2, r8, r2
   11f24:	ea000006 	b	11f44 <malloc+0x14fc>
   11f28:	e1a03fa2 	lsr	r3, r2, #31
   11f2c:	e1a02082 	lsl	r2, r2, #1
   11f30:	e2833004 	add	r3, r3, #4
   11f34:	e791c103 	ldr	ip, [r1, r3, lsl #2]
   11f38:	e35c0000 	cmp	ip, #0
   11f3c:	0a0000a0 	beq	121c4 <malloc+0x177c>
   11f40:	e1a0100c 	mov	r1, ip
   11f44:	e5913004 	ldr	r3, [r1, #4]
   11f48:	e3c33007 	bic	r3, r3, #7
   11f4c:	e1530008 	cmp	r3, r8
   11f50:	1afffff4 	bne	11f28 <malloc+0x14e0>
   11f54:	e5913008 	ldr	r3, [r1, #8]
   11f58:	e1560001 	cmp	r6, r1
   11f5c:	91560003 	cmpls	r6, r3
   11f60:	8afffcbc 	bhi	11258 <malloc+0x810>
   11f64:	e583700c 	str	r7, [r3, #12]
   11f68:	e3a02000 	mov	r2, #0
   11f6c:	e5817008 	str	r7, [r1, #8]
   11f70:	e5873008 	str	r3, [r7, #8]
   11f74:	e587100c 	str	r1, [r7, #12]
   11f78:	e5872018 	str	r2, [r7, #24]
   11f7c:	eafffc69 	b	11128 <malloc+0x6e0>
   11f80:	e3a05f6b 	mov	r5, #428	; 0x1ac
   11f84:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
   11f88:	e3a0301f 	mov	r3, #31
   11f8c:	e3a0e06b 	mov	lr, #107	; 0x6b
   11f90:	eaffff97 	b	11df4 <malloc+0x13ac>
    insert_chunk(m, q, psize);
   11f94:	e51f148c 	ldr	r1, [pc, #-1164]	; 11b10 <malloc+0x10c8>
   11f98:	e0802103 	add	r2, r0, r3, lsl #2
   11f9c:	e08f1001 	add	r1, pc, r1
   11fa0:	e591c010 	ldr	ip, [r1, #16]
   11fa4:	e15c0002 	cmp	ip, r2
   11fa8:	8afffcaa 	bhi	11258 <malloc+0x810>
   11fac:	e780e103 	str	lr, [r0, r3, lsl #2]
   11fb0:	e591300c 	ldr	r3, [r1, #12]
   11fb4:	e58e0018 	str	r0, [lr, #24]
   11fb8:	e58ee00c 	str	lr, [lr, #12]
   11fbc:	e58ee008 	str	lr, [lr, #8]
   11fc0:	eafffd67 	b	11564 <malloc+0xb1c>
    size_t tsize = m->topsize += qsize;
   11fc4:	e51f14b8 	ldr	r1, [pc, #-1208]	; 11b14 <malloc+0x10cc>
   11fc8:	e08f1001 	add	r1, pc, r1
   11fcc:	e591200c 	ldr	r2, [r1, #12]
    m->top = q;
   11fd0:	e581c018 	str	ip, [r1, #24]
    size_t tsize = m->topsize += qsize;
   11fd4:	e0833002 	add	r3, r3, r2
   11fd8:	e581300c 	str	r3, [r1, #12]
    q->head = tsize | PINUSE_BIT;
   11fdc:	e3833001 	orr	r3, r3, #1
   11fe0:	e58c3004 	str	r3, [ip, #4]
   11fe4:	eaffff5f 	b	11d68 <malloc+0x1320>
    insert_chunk(m, q, qsize);
   11fe8:	e1a01423 	lsr	r1, r3, #8
   11fec:	e3510801 	cmp	r1, #65536	; 0x10000
   11ff0:	2a00007b 	bcs	121e4 <malloc+0x179c>
   11ff4:	e2412c01 	sub	r2, r1, #256	; 0x100
   11ff8:	e3a00001 	mov	r0, #1
   11ffc:	e1a02822 	lsr	r2, r2, #16
   12000:	e2022008 	and	r2, r2, #8
   12004:	e1a01211 	lsl	r1, r1, r2
   12008:	e241ea01 	sub	lr, r1, #4096	; 0x1000
   1200c:	e1a0e82e 	lsr	lr, lr, #16
   12010:	e20ee004 	and	lr, lr, #4
   12014:	e182200e 	orr	r2, r2, lr
   12018:	e1a01e11 	lsl	r1, r1, lr
   1201c:	e241e901 	sub	lr, r1, #16384	; 0x4000
   12020:	e1a0e82e 	lsr	lr, lr, #16
   12024:	e20ee002 	and	lr, lr, #2
   12028:	e082200e 	add	r2, r2, lr
   1202c:	e1a01e11 	lsl	r1, r1, lr
   12030:	e06227a1 	rsb	r2, r2, r1, lsr #15
   12034:	e2821015 	add	r1, r2, #21
   12038:	e282200e 	add	r2, r2, #14
   1203c:	e1a01133 	lsr	r1, r3, r1
   12040:	e0011000 	and	r1, r1, r0
   12044:	e0811012 	add	r1, r1, r2, lsl r0
   12048:	e281604c 	add	r6, r1, #76	; 0x4c
   1204c:	e1a00110 	lsl	r0, r0, r1
   12050:	e1a07106 	lsl	r7, r6, #2
   12054:	e51fe544 	ldr	lr, [pc, #-1348]	; 11b18 <malloc+0x10d0>
   12058:	e3a02000 	mov	r2, #0
   1205c:	e58c101c 	str	r1, [ip, #28]
   12060:	e08fe00e 	add	lr, pc, lr
   12064:	e58c2014 	str	r2, [ip, #20]
   12068:	e58c2010 	str	r2, [ip, #16]
   1206c:	e59e4004 	ldr	r4, [lr, #4]
   12070:	e1100004 	tst	r0, r4
   12074:	0a000064 	beq	1220c <malloc+0x17c4>
   12078:	e351001f 	cmp	r1, #31
   1207c:	e79ee106 	ldr	lr, [lr, r6, lsl #2]
   12080:	11a020a1 	lsrne	r2, r1, #1
   12084:	12622019 	rsbne	r2, r2, #25
   12088:	e1a01213 	lsl	r1, r3, r2
   1208c:	ea000006 	b	120ac <malloc+0x1664>
   12090:	e1a02fa1 	lsr	r2, r1, #31
   12094:	e1a01081 	lsl	r1, r1, #1
   12098:	e2822004 	add	r2, r2, #4
   1209c:	e79e0102 	ldr	r0, [lr, r2, lsl #2]
   120a0:	e3500000 	cmp	r0, #0
   120a4:	0a0000b2 	beq	12374 <malloc+0x192c>
   120a8:	e1a0e000 	mov	lr, r0
   120ac:	e59e2004 	ldr	r2, [lr, #4]
   120b0:	e3c22007 	bic	r2, r2, #7
   120b4:	e1530002 	cmp	r3, r2
   120b8:	1afffff4 	bne	12090 <malloc+0x1648>
   120bc:	e51f25a8 	ldr	r2, [pc, #-1448]	; 11b1c <malloc+0x10d4>
   120c0:	e59e3008 	ldr	r3, [lr, #8]
   120c4:	e08f2002 	add	r2, pc, r2
   120c8:	e5922010 	ldr	r2, [r2, #16]
   120cc:	e1530002 	cmp	r3, r2
   120d0:	215e0002 	cmpcs	lr, r2
   120d4:	3afffc5f 	bcc	11258 <malloc+0x810>
   120d8:	e583c00c 	str	ip, [r3, #12]
   120dc:	e3a02000 	mov	r2, #0
   120e0:	e58ec008 	str	ip, [lr, #8]
   120e4:	e58c3008 	str	r3, [ip, #8]
   120e8:	e58ce00c 	str	lr, [ip, #12]
   120ec:	e58c2018 	str	r2, [ip, #24]
   120f0:	eaffff1c 	b	11d68 <malloc+0x1320>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
   120f4:	e1a00006 	mov	r0, r6
   120f8:	ebfff994 	bl	10750 <sbrk>
   120fc:	e1a05000 	mov	r5, r0
   12100:	e1570000 	cmp	r7, r0
   12104:	1afffdb7 	bne	117e8 <malloc+0xda0>
   12108:	eafffb51 	b	10e54 <malloc+0x40c>
    size_t dsize = m->dvsize += qsize;
   1210c:	e5912008 	ldr	r2, [r1, #8]
    m->dv = q;
   12110:	e581c014 	str	ip, [r1, #20]
    size_t dsize = m->dvsize += qsize;
   12114:	e0833002 	add	r3, r3, r2
   12118:	e5813008 	str	r3, [r1, #8]
    set_size_and_pinuse_of_free_chunk(q, dsize);
   1211c:	e3832001 	orr	r2, r3, #1
   12120:	e58c2004 	str	r2, [ip, #4]
   12124:	e78c3003 	str	r3, [ip, r3]
   12128:	eaffff0e 	b	11d68 <malloc+0x1320>
      size_t nsize = chunksize(oldfirst);
   1212c:	e3c00007 	bic	r0, r0, #7
   12130:	e592e00c 	ldr	lr, [r2, #12]
      unlink_chunk(m, oldfirst, nsize);
   12134:	e1a061a0 	lsr	r6, r0, #3
   12138:	e356001f 	cmp	r6, #31
   1213c:	8a000053 	bhi	12290 <malloc+0x1848>
   12140:	e15e0002 	cmp	lr, r2
   12144:	e5924008 	ldr	r4, [r2, #8]
   12148:	0afffc42 	beq	11258 <malloc+0x810>
   1214c:	e1540002 	cmp	r4, r2
   12150:	0afffc40 	beq	11258 <malloc+0x810>
   12154:	e0811186 	add	r1, r1, r6, lsl #3
   12158:	e2811028 	add	r1, r1, #40	; 0x28
   1215c:	e1540001 	cmp	r4, r1
   12160:	1afffc34 	bne	11238 <malloc+0x7f0>
   12164:	e154000e 	cmp	r4, lr
   12168:	0a0000b2 	beq	12438 <malloc+0x19f0>
   1216c:	e151000e 	cmp	r1, lr
   12170:	1a0000b7 	bne	12454 <malloc+0x1a0c>
   12174:	e584e00c 	str	lr, [r4, #12]
   12178:	e58e4008 	str	r4, [lr, #8]
      oldfirst = chunk_plus_offset(oldfirst, nsize);
   1217c:	e0822000 	add	r2, r2, r0
      qsize += nsize;
   12180:	e0833000 	add	r3, r3, r0
    set_free_with_pinuse(q, qsize, oldfirst);
   12184:	e3830001 	orr	r0, r3, #1
    insert_chunk(m, q, qsize);
   12188:	e1a0e1a3 	lsr	lr, r3, #3
    set_free_with_pinuse(q, qsize, oldfirst);
   1218c:	e5921004 	ldr	r1, [r2, #4]
    insert_chunk(m, q, qsize);
   12190:	e35e001f 	cmp	lr, #31
    set_free_with_pinuse(q, qsize, oldfirst);
   12194:	e3c11001 	bic	r1, r1, #1
   12198:	e5821004 	str	r1, [r2, #4]
   1219c:	e58c0004 	str	r0, [ip, #4]
   121a0:	e78c3003 	str	r3, [ip, r3]
    insert_chunk(m, q, qsize);
   121a4:	8affff8f 	bhi	11fe8 <malloc+0x15a0>
   121a8:	e51f2690 	ldr	r2, [pc, #-1680]	; 11b20 <malloc+0x10d8>
   121ac:	e353000f 	cmp	r3, #15
   121b0:	e08f2002 	add	r2, pc, r2
   121b4:	e082318e 	add	r3, r2, lr, lsl #3
   121b8:	e2833028 	add	r3, r3, #40	; 0x28
   121bc:	8afffedc 	bhi	11d34 <malloc+0x12ec>
   121c0:	eafffc24 	b	11258 <malloc+0x810>
          insert_chunk(m, r, rsize);
   121c4:	e0812103 	add	r2, r1, r3, lsl #2
   121c8:	e1560002 	cmp	r6, r2
   121cc:	8afffc21 	bhi	11258 <malloc+0x810>
   121d0:	e7817103 	str	r7, [r1, r3, lsl #2]
   121d4:	e5871018 	str	r1, [r7, #24]
   121d8:	e587700c 	str	r7, [r7, #12]
   121dc:	e5877008 	str	r7, [r7, #8]
   121e0:	eafffbd0 	b	11128 <malloc+0x6e0>
    insert_chunk(m, q, qsize);
   121e4:	e3a07f6b 	mov	r7, #428	; 0x1ac
   121e8:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
   121ec:	e3a0101f 	mov	r1, #31
   121f0:	e3a0606b 	mov	r6, #107	; 0x6b
   121f4:	eaffff96 	b	12054 <malloc+0x160c>
   121f8:	e5911010 	ldr	r1, [r1, #16]
   121fc:	e5932008 	ldr	r2, [r3, #8]
   12200:	e1520001 	cmp	r2, r1
   12204:	2afffed4 	bcs	11d5c <malloc+0x1314>
   12208:	eafffc12 	b	11258 <malloc+0x810>
   1220c:	e78ec106 	str	ip, [lr, r6, lsl #2]
   12210:	e1800004 	orr	r0, r0, r4
   12214:	e58cc00c 	str	ip, [ip, #12]
   12218:	e58e0004 	str	r0, [lr, #4]
   1221c:	e08ee007 	add	lr, lr, r7
   12220:	e58cc008 	str	ip, [ip, #8]
   12224:	e58ce018 	str	lr, [ip, #24]
   12228:	eafffece 	b	11d68 <malloc+0x1320>
        unlink_large_chunk(m, v);
   1222c:	e3590000 	cmp	r9, #0
   12230:	0afffbb4 	beq	11108 <malloc+0x6c0>
   12234:	e590e01c 	ldr	lr, [r0, #28]
   12238:	e28e204c 	add	r2, lr, #76	; 0x4c
   1223c:	e79c3102 	ldr	r3, [ip, r2, lsl #2]
   12240:	e1530000 	cmp	r3, r0
   12244:	13a02000 	movne	r2, #0
   12248:	1afffb95 	bne	110a4 <malloc+0x65c>
   1224c:	e51f3730 	ldr	r3, [pc, #-1840]	; 11b24 <malloc+0x10dc>
   12250:	e3a0c001 	mov	ip, #1
   12254:	e08f3003 	add	r3, pc, r3
   12258:	e1c11e1c 	bic	r1, r1, ip, lsl lr
   1225c:	e3a0c000 	mov	ip, #0
   12260:	e5831004 	str	r1, [r3, #4]
   12264:	e783c102 	str	ip, [r3, r2, lsl #2]
   12268:	eafffba6 	b	11108 <malloc+0x6c0>
        replace_dv(m, r, rsize);
   1226c:	e5932008 	ldr	r2, [r3, #8]
   12270:	e1590002 	cmp	r9, r2
   12274:	9afffc7c 	bls	1146c <malloc+0xa24>
   12278:	eafffbf6 	b	11258 <malloc+0x810>
      unlink_large_chunk(m, v);
   1227c:	e5901010 	ldr	r1, [r0, #16]
   12280:	e3510000 	cmp	r1, #0
   12284:	0a000045 	beq	123a0 <malloc+0x1958>
   12288:	e2803010 	add	r3, r0, #16
   1228c:	eaffff0c 	b	11ec4 <malloc+0x147c>
      unlink_chunk(m, oldfirst, nsize);
   12290:	e15e0002 	cmp	lr, r2
   12294:	e5927018 	ldr	r7, [r2, #24]
   12298:	0a000050 	beq	123e0 <malloc+0x1998>
   1229c:	e5914010 	ldr	r4, [r1, #16]
   122a0:	e5921008 	ldr	r1, [r2, #8]
   122a4:	e1510004 	cmp	r1, r4
   122a8:	3afffbea 	bcc	11258 <malloc+0x810>
   122ac:	e591400c 	ldr	r4, [r1, #12]
   122b0:	e1540002 	cmp	r4, r2
   122b4:	1afffbe7 	bne	11258 <malloc+0x810>
   122b8:	e59e6008 	ldr	r6, [lr, #8]
   122bc:	e1540006 	cmp	r4, r6
   122c0:	1afffbe4 	bne	11258 <malloc+0x810>
   122c4:	e581e00c 	str	lr, [r1, #12]
   122c8:	e58e1008 	str	r1, [lr, #8]
   122cc:	e3570000 	cmp	r7, #0
   122d0:	0affffa9 	beq	1217c <malloc+0x1734>
   122d4:	e592101c 	ldr	r1, [r2, #28]
   122d8:	e51f47b8 	ldr	r4, [pc, #-1976]	; 11b28 <malloc+0x10e0>
   122dc:	e281104c 	add	r1, r1, #76	; 0x4c
   122e0:	e08f4004 	add	r4, pc, r4
   122e4:	e7946101 	ldr	r6, [r4, r1, lsl #2]
   122e8:	e1560002 	cmp	r6, r2
   122ec:	0784e101 	streq	lr, [r4, r1, lsl #2]
   122f0:	0a00000a 	beq	12320 <malloc+0x18d8>
   122f4:	e51f17d0 	ldr	r1, [pc, #-2000]	; 11b2c <malloc+0x10e4>
   122f8:	e08f1001 	add	r1, pc, r1
   122fc:	e5911010 	ldr	r1, [r1, #16]
   12300:	e1570001 	cmp	r7, r1
   12304:	3afffbd3 	bcc	11258 <malloc+0x810>
   12308:	e5971010 	ldr	r1, [r7, #16]
   1230c:	e1510002 	cmp	r1, r2
   12310:	0587e010 	streq	lr, [r7, #16]
   12314:	1587e014 	strne	lr, [r7, #20]
   12318:	e35e0000 	cmp	lr, #0
   1231c:	0affff96 	beq	1217c <malloc+0x1734>
   12320:	e51f17f8 	ldr	r1, [pc, #-2040]	; 11b30 <malloc+0x10e8>
   12324:	e08f1001 	add	r1, pc, r1
   12328:	e5914010 	ldr	r4, [r1, #16]
   1232c:	e15e0004 	cmp	lr, r4
   12330:	3afffbc8 	bcc	11258 <malloc+0x810>
   12334:	e5921010 	ldr	r1, [r2, #16]
   12338:	e58e7018 	str	r7, [lr, #24]
   1233c:	e3510000 	cmp	r1, #0
   12340:	0a000003 	beq	12354 <malloc+0x190c>
   12344:	e1540001 	cmp	r4, r1
   12348:	8afffbc2 	bhi	11258 <malloc+0x810>
   1234c:	e58e1010 	str	r1, [lr, #16]
   12350:	e581e018 	str	lr, [r1, #24]
   12354:	e5921014 	ldr	r1, [r2, #20]
   12358:	e3510000 	cmp	r1, #0
   1235c:	0affff86 	beq	1217c <malloc+0x1734>
   12360:	e1540001 	cmp	r4, r1
   12364:	8afffbbb 	bhi	11258 <malloc+0x810>
   12368:	e58e1014 	str	r1, [lr, #20]
   1236c:	e581e018 	str	lr, [r1, #24]
   12370:	eaffff81 	b	1217c <malloc+0x1734>
    insert_chunk(m, q, qsize);
   12374:	e51f1848 	ldr	r1, [pc, #-2120]	; 11b34 <malloc+0x10ec>
   12378:	e08e3102 	add	r3, lr, r2, lsl #2
   1237c:	e08f1001 	add	r1, pc, r1
   12380:	e5911010 	ldr	r1, [r1, #16]
   12384:	e1510003 	cmp	r1, r3
   12388:	8afffbb2 	bhi	11258 <malloc+0x810>
   1238c:	e78ec102 	str	ip, [lr, r2, lsl #2]
   12390:	e58ce018 	str	lr, [ip, #24]
   12394:	e58cc00c 	str	ip, [ip, #12]
   12398:	e58cc008 	str	ip, [ip, #8]
   1239c:	eafffe71 	b	11d68 <malloc+0x1320>
      unlink_large_chunk(m, v);
   123a0:	e35a0000 	cmp	sl, #0
   123a4:	0afffc18 	beq	1140c <malloc+0x9c4>
   123a8:	e590601c 	ldr	r6, [r0, #28]
   123ac:	e286104c 	add	r1, r6, #76	; 0x4c
   123b0:	e79b3101 	ldr	r3, [fp, r1, lsl #2]
   123b4:	e1500003 	cmp	r0, r3
   123b8:	13a06000 	movne	r6, #0
   123bc:	1afffbf9 	bne	113a8 <malloc+0x960>
   123c0:	e51f3890 	ldr	r3, [pc, #-2192]	; 11b38 <malloc+0x10f0>
   123c4:	e3a0a001 	mov	sl, #1
   123c8:	e08f3003 	add	r3, pc, r3
   123cc:	e1c5561a 	bic	r5, r5, sl, lsl r6
   123d0:	e3a06000 	mov	r6, #0
   123d4:	e5835004 	str	r5, [r3, #4]
   123d8:	e7836101 	str	r6, [r3, r1, lsl #2]
   123dc:	eafffc0a 	b	1140c <malloc+0x9c4>
      unlink_chunk(m, oldfirst, nsize);
   123e0:	e592e014 	ldr	lr, [r2, #20]
   123e4:	e2821014 	add	r1, r2, #20
   123e8:	e35e0000 	cmp	lr, #0
   123ec:	0a000021 	beq	12478 <malloc+0x1a30>
  size_t offset = align_offset(chunk2mem(p));
   123f0:	e1a0400e 	mov	r4, lr
      unlink_chunk(m, oldfirst, nsize);
   123f4:	e1a06001 	mov	r6, r1
   123f8:	e1a01004 	mov	r1, r4
   123fc:	e1a0e004 	mov	lr, r4
   12400:	e5b14014 	ldr	r4, [r1, #20]!
   12404:	e3540000 	cmp	r4, #0
   12408:	1afffff9 	bne	123f4 <malloc+0x19ac>
   1240c:	e1a0100e 	mov	r1, lr
   12410:	e5b14010 	ldr	r4, [r1, #16]!
   12414:	e3540000 	cmp	r4, #0
   12418:	1afffff5 	bne	123f4 <malloc+0x19ac>
   1241c:	e51f18e8 	ldr	r1, [pc, #-2280]	; 11b3c <malloc+0x10f4>
   12420:	e08f1001 	add	r1, pc, r1
   12424:	e5911010 	ldr	r1, [r1, #16]
   12428:	e1510006 	cmp	r1, r6
   1242c:	8afffb89 	bhi	11258 <malloc+0x810>
   12430:	e5864000 	str	r4, [r6]
   12434:	eaffffa4 	b	122cc <malloc+0x1884>
   12438:	e51fe900 	ldr	lr, [pc, #-2304]	; 11b40 <malloc+0x10f8>
   1243c:	e3a04001 	mov	r4, #1
   12440:	e08fe00e 	add	lr, pc, lr
   12444:	e59e1000 	ldr	r1, [lr]
   12448:	e1c16614 	bic	r6, r1, r4, lsl r6
   1244c:	e58e6000 	str	r6, [lr]
   12450:	eaffff49 	b	1217c <malloc+0x1734>
   12454:	e51f1918 	ldr	r1, [pc, #-2328]	; 11b44 <malloc+0x10fc>
   12458:	e08f1001 	add	r1, pc, r1
   1245c:	e5911010 	ldr	r1, [r1, #16]
   12460:	e151000e 	cmp	r1, lr
   12464:	8afffb7b 	bhi	11258 <malloc+0x810>
   12468:	e59e1008 	ldr	r1, [lr, #8]
   1246c:	e1510002 	cmp	r1, r2
   12470:	0affff3f 	beq	12174 <malloc+0x172c>
   12474:	eafffb77 	b	11258 <malloc+0x810>
   12478:	e592e010 	ldr	lr, [r2, #16]
   1247c:	e2821010 	add	r1, r2, #16
   12480:	e35e0000 	cmp	lr, #0
   12484:	1affffd9 	bne	123f0 <malloc+0x19a8>
   12488:	e3570000 	cmp	r7, #0
   1248c:	0affff3a 	beq	1217c <malloc+0x1734>
   12490:	e592401c 	ldr	r4, [r2, #28]
   12494:	e51f1954 	ldr	r1, [pc, #-2388]	; 11b48 <malloc+0x1100>
   12498:	e284604c 	add	r6, r4, #76	; 0x4c
   1249c:	e08f1001 	add	r1, pc, r1
   124a0:	e7918106 	ldr	r8, [r1, r6, lsl #2]
   124a4:	e1580002 	cmp	r8, r2
   124a8:	1affff91 	bne	122f4 <malloc+0x18ac>
   124ac:	e591e004 	ldr	lr, [r1, #4]
   124b0:	e3a07001 	mov	r7, #1
   124b4:	e3a08000 	mov	r8, #0
   124b8:	e7818106 	str	r8, [r1, r6, lsl #2]
   124bc:	e1cee417 	bic	lr, lr, r7, lsl r4
   124c0:	e581e004 	str	lr, [r1, #4]
   124c4:	eaffff2c 	b	1217c <malloc+0x1734>
  ensure_initialization();
   124c8:	e51f3984 	ldr	r3, [pc, #-2436]	; 11b4c <malloc+0x1104>
   124cc:	e08f3003 	add	r3, pc, r3
   124d0:	e5933000 	ldr	r3, [r3]
   124d4:	e3530000 	cmp	r3, #0
   124d8:	1afffa2b 	bne	10d8c <malloc+0x344>
   124dc:	eafffa29 	b	10d88 <malloc+0x340>
   124e0:	e51f3998 	ldr	r3, [pc, #-2456]	; 11b50 <malloc+0x1108>
   124e4:	e08f3003 	add	r3, pc, r3
   124e8:	e593e1bc 	ldr	lr, [r3, #444]	; 0x1bc
   124ec:	eafffb49 	b	11218 <malloc+0x7d0>

000124f0 <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
   124f0:	e3500000 	cmp	r0, #0
   124f4:	012fff1e 	bxeq	lr
void dlfree(void* mem) {
   124f8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    mchunkptr p  = mem2chunk(mem);
   124fc:	e2403008 	sub	r3, r0, #8
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
   12500:	e59f47bc 	ldr	r4, [pc, #1980]	; 12cc4 <free+0x7d4>
   12504:	e08f4004 	add	r4, pc, r4
   12508:	e594e010 	ldr	lr, [r4, #16]
   1250c:	e15e0003 	cmp	lr, r3
   12510:	8a00004e 	bhi	12650 <free+0x160>
   12514:	e5101004 	ldr	r1, [r0, #-4]
   12518:	e2015003 	and	r5, r1, #3
   1251c:	e3550001 	cmp	r5, #1
   12520:	0a00004a 	beq	12650 <free+0x160>
        size_t psize = chunksize(p);
   12524:	e3c12007 	bic	r2, r1, #7
        mchunkptr next = chunk_plus_offset(p, psize);
        if (!pinuse(p)) {
   12528:	e3110001 	tst	r1, #1
        mchunkptr next = chunk_plus_offset(p, psize);
   1252c:	e083c002 	add	ip, r3, r2
        if (!pinuse(p)) {
   12530:	0a000021 	beq	125bc <free+0xcc>
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
   12534:	e153000c 	cmp	r3, ip
   12538:	2a000044 	bcs	12650 <free+0x160>
   1253c:	e59c1004 	ldr	r1, [ip, #4]
   12540:	e3110001 	tst	r1, #1
   12544:	0a000041 	beq	12650 <free+0x160>
          if (!cinuse(next)) {  /* consolidate forward */
   12548:	e2110002 	ands	r0, r1, #2
   1254c:	0a000041 	beq	12658 <free+0x168>
                goto postaction;
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
   12550:	e3c11001 	bic	r1, r1, #1
   12554:	e3820001 	orr	r0, r2, #1
   12558:	e58c1004 	str	r1, [ip, #4]
   1255c:	e5830004 	str	r0, [r3, #4]
   12560:	e7832002 	str	r2, [r3, r2]

          if (is_small(psize)) {
   12564:	e1a011a2 	lsr	r1, r2, #3
   12568:	e351001f 	cmp	r1, #31
   1256c:	8a00008a 	bhi	1279c <free+0x2ac>
            insert_small_chunk(fm, p, psize);
   12570:	e59fc750 	ldr	ip, [pc, #1872]	; 12cc8 <free+0x7d8>
   12574:	e352000f 	cmp	r2, #15
   12578:	e08fc00c 	add	ip, pc, ip
   1257c:	e08c2181 	add	r2, ip, r1, lsl #3
   12580:	e2822028 	add	r2, r2, #40	; 0x28
   12584:	9a000082 	bls	12794 <free+0x2a4>
   12588:	e3a00001 	mov	r0, #1
   1258c:	e59ce000 	ldr	lr, [ip]
   12590:	e1a01110 	lsl	r1, r0, r1
   12594:	e11e0001 	tst	lr, r1
   12598:	1a000079 	bne	12784 <free+0x294>
   1259c:	e1a00002 	mov	r0, r2
   125a0:	e18e1001 	orr	r1, lr, r1
   125a4:	e58c1000 	str	r1, [ip]
   125a8:	e5823008 	str	r3, [r2, #8]
   125ac:	e580300c 	str	r3, [r0, #12]
   125b0:	e5830008 	str	r0, [r3, #8]
   125b4:	e583200c 	str	r2, [r3, #12]
   125b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          if (is_mmapped(p)) {
   125bc:	e3550000 	cmp	r5, #0
   125c0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
          size_t prevsize = p->prev_foot;
   125c4:	e5100008 	ldr	r0, [r0, #-8]
            mchunkptr prev = chunk_minus_offset(p, prevsize);
   125c8:	e0433000 	sub	r3, r3, r0
            psize += prevsize;
   125cc:	e0822000 	add	r2, r2, r0
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
   125d0:	e15e0003 	cmp	lr, r3
   125d4:	8a00001d 	bhi	12650 <free+0x160>
              if (p != fm->dv) {
   125d8:	e5941014 	ldr	r1, [r4, #20]
   125dc:	e1510003 	cmp	r1, r3
   125e0:	0a00012f 	beq	12aa4 <free+0x5b4>
                unlink_chunk(fm, p, prevsize);
   125e4:	e1a051a0 	lsr	r5, r0, #3
   125e8:	e593100c 	ldr	r1, [r3, #12]
   125ec:	e355001f 	cmp	r5, #31
   125f0:	8a000087 	bhi	12814 <free+0x324>
   125f4:	e1510003 	cmp	r1, r3
   125f8:	e5934008 	ldr	r4, [r3, #8]
   125fc:	0a000064 	beq	12794 <free+0x2a4>
   12600:	e1530004 	cmp	r3, r4
   12604:	0a000062 	beq	12794 <free+0x2a4>
   12608:	e5936004 	ldr	r6, [r3, #4]
   1260c:	e3c00007 	bic	r0, r0, #7
   12610:	e3c66007 	bic	r6, r6, #7
   12614:	e1560000 	cmp	r6, r0
   12618:	1a00005d 	bne	12794 <free+0x2a4>
   1261c:	e59f06a8 	ldr	r0, [pc, #1704]	; 12ccc <free+0x7dc>
   12620:	e08f0000 	add	r0, pc, r0
   12624:	e0800185 	add	r0, r0, r5, lsl #3
   12628:	e2800028 	add	r0, r0, #40	; 0x28
   1262c:	e1500004 	cmp	r0, r4
   12630:	1a0000e4 	bne	129c8 <free+0x4d8>
   12634:	e1510004 	cmp	r1, r4
   12638:	0a000137 	beq	12b1c <free+0x62c>
   1263c:	e1500001 	cmp	r0, r1
   12640:	1a000171 	bne	12c0c <free+0x71c>
   12644:	e584100c 	str	r1, [r4, #12]
   12648:	e5814008 	str	r4, [r1, #8]
   1264c:	eaffffb8 	b	12534 <free+0x44>
          }
          goto postaction;
        }
      }
    erroraction:
      USAGE_ERROR_ACTION(fm, p);
   12650:	e3e00000 	mvn	r0, #0
   12654:	ebffd669 	bl	8000 <exit>
   12658:	e59f4670 	ldr	r4, [pc, #1648]	; 12cd0 <free+0x7e0>
   1265c:	e08f4004 	add	r4, pc, r4
            if (next == fm->top) {
   12660:	e5946018 	ldr	r6, [r4, #24]
   12664:	e5945014 	ldr	r5, [r4, #20]
   12668:	e156000c 	cmp	r6, ip
   1266c:	0a0000fb 	beq	12a60 <free+0x570>
            else if (next == fm->dv) {
   12670:	e155000c 	cmp	r5, ip
   12674:	0a000115 	beq	12ad0 <free+0x5e0>
              size_t nsize = chunksize(next);
   12678:	e3c11007 	bic	r1, r1, #7
   1267c:	e59c000c 	ldr	r0, [ip, #12]
              psize += nsize;
   12680:	e0822001 	add	r2, r2, r1
              unlink_chunk(fm, next, nsize);
   12684:	e1a011a1 	lsr	r1, r1, #3
   12688:	e351001f 	cmp	r1, #31
   1268c:	9a000092 	bls	128dc <free+0x3ec>
   12690:	e150000c 	cmp	r0, ip
   12694:	e59c6018 	ldr	r6, [ip, #24]
   12698:	0a000126 	beq	12b38 <free+0x648>
   1269c:	e59c1008 	ldr	r1, [ip, #8]
   126a0:	e15e0001 	cmp	lr, r1
   126a4:	8a00003a 	bhi	12794 <free+0x2a4>
   126a8:	e591400c 	ldr	r4, [r1, #12]
   126ac:	e154000c 	cmp	r4, ip
   126b0:	1a000037 	bne	12794 <free+0x2a4>
   126b4:	e5904008 	ldr	r4, [r0, #8]
   126b8:	e154000c 	cmp	r4, ip
   126bc:	1a000034 	bne	12794 <free+0x2a4>
   126c0:	e581000c 	str	r0, [r1, #12]
   126c4:	e5801008 	str	r1, [r0, #8]
   126c8:	e3560000 	cmp	r6, #0
   126cc:	0a000132 	beq	12b9c <free+0x6ac>
   126d0:	e59c101c 	ldr	r1, [ip, #28]
   126d4:	e59f45f8 	ldr	r4, [pc, #1528]	; 12cd4 <free+0x7e4>
   126d8:	e281104c 	add	r1, r1, #76	; 0x4c
   126dc:	e08f4004 	add	r4, pc, r4
   126e0:	e7945101 	ldr	r5, [r4, r1, lsl #2]
   126e4:	e155000c 	cmp	r5, ip
   126e8:	07840101 	streq	r0, [r4, r1, lsl #2]
   126ec:	0a000007 	beq	12710 <free+0x220>
   126f0:	e15e0006 	cmp	lr, r6
   126f4:	8a000026 	bhi	12794 <free+0x2a4>
   126f8:	e5961010 	ldr	r1, [r6, #16]
   126fc:	e151000c 	cmp	r1, ip
   12700:	05860010 	streq	r0, [r6, #16]
   12704:	15860014 	strne	r0, [r6, #20]
   12708:	e3500000 	cmp	r0, #0
   1270c:	0a00012b 	beq	12bc0 <free+0x6d0>
   12710:	e15e0000 	cmp	lr, r0
   12714:	8a00001e 	bhi	12794 <free+0x2a4>
   12718:	e59c1010 	ldr	r1, [ip, #16]
   1271c:	e5806018 	str	r6, [r0, #24]
   12720:	e3510000 	cmp	r1, #0
   12724:	0a000003 	beq	12738 <free+0x248>
   12728:	e15e0001 	cmp	lr, r1
   1272c:	8a000018 	bhi	12794 <free+0x2a4>
   12730:	e5801010 	str	r1, [r0, #16]
   12734:	e5810018 	str	r0, [r1, #24]
   12738:	e59c1014 	ldr	r1, [ip, #20]
   1273c:	e3510000 	cmp	r1, #0
   12740:	0a00012d 	beq	12bfc <free+0x70c>
   12744:	e15e0001 	cmp	lr, r1
   12748:	8a000011 	bhi	12794 <free+0x2a4>
   1274c:	e59fc584 	ldr	ip, [pc, #1412]	; 12cd8 <free+0x7e8>
   12750:	e5801014 	str	r1, [r0, #20]
   12754:	e08fc00c 	add	ip, pc, ip
   12758:	e5810018 	str	r0, [r1, #24]
   1275c:	e59c5014 	ldr	r5, [ip, #20]
              set_size_and_pinuse_of_free_chunk(p, psize);
   12760:	e3821001 	orr	r1, r2, #1
              if (p == fm->dv) {
   12764:	e1530005 	cmp	r3, r5
              set_size_and_pinuse_of_free_chunk(p, psize);
   12768:	e5831004 	str	r1, [r3, #4]
   1276c:	e7832002 	str	r2, [r3, r2]
              if (p == fm->dv) {
   12770:	1affff7b 	bne	12564 <free+0x74>
                fm->dvsize = psize;
   12774:	e59f3560 	ldr	r3, [pc, #1376]	; 12cdc <free+0x7ec>
   12778:	e08f3003 	add	r3, pc, r3
   1277c:	e5832008 	str	r2, [r3, #8]
                goto postaction;
   12780:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_small_chunk(fm, p, psize);
   12784:	e59c1010 	ldr	r1, [ip, #16]
   12788:	e5920008 	ldr	r0, [r2, #8]
   1278c:	e1500001 	cmp	r0, r1
   12790:	2affff84 	bcs	125a8 <free+0xb8>
                unlink_chunk(fm, p, prevsize);
   12794:	e3e00000 	mvn	r0, #0
   12798:	ebffd618 	bl	8000 <exit>
            insert_large_chunk(fm, tp, psize);
   1279c:	e1a00422 	lsr	r0, r2, #8
   127a0:	e3500801 	cmp	r0, #65536	; 0x10000
   127a4:	3a00005c 	bcc	1291c <free+0x42c>
   127a8:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
   127ac:	e3a05f6b 	mov	r5, #428	; 0x1ac
   127b0:	e3a0101f 	mov	r1, #31
   127b4:	e3a0406b 	mov	r4, #107	; 0x6b
   127b8:	e59f0520 	ldr	r0, [pc, #1312]	; 12ce0 <free+0x7f0>
   127bc:	e3a0e000 	mov	lr, #0
   127c0:	e583e014 	str	lr, [r3, #20]
   127c4:	e08f0000 	add	r0, pc, r0
   127c8:	e583e010 	str	lr, [r3, #16]
   127cc:	e583101c 	str	r1, [r3, #28]
   127d0:	e590e004 	ldr	lr, [r0, #4]
   127d4:	e11c000e 	tst	ip, lr
   127d8:	1a000080 	bne	129e0 <free+0x4f0>
   127dc:	e7803104 	str	r3, [r0, r4, lsl #2]
   127e0:	e18cc00e 	orr	ip, ip, lr
   127e4:	e583300c 	str	r3, [r3, #12]
   127e8:	e580c004 	str	ip, [r0, #4]
   127ec:	e0800005 	add	r0, r0, r5
   127f0:	e5833008 	str	r3, [r3, #8]
   127f4:	e5830018 	str	r0, [r3, #24]
            if (--fm->release_checks == 0)
   127f8:	e59f24e4 	ldr	r2, [pc, #1252]	; 12ce4 <free+0x7f4>
   127fc:	e08f2002 	add	r2, pc, r2
   12800:	e5923020 	ldr	r3, [r2, #32]
   12804:	e2533001 	subs	r3, r3, #1
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
   12808:	03e03000 	mvneq	r3, #0
   1280c:	e5823020 	str	r3, [r2, #32]
    }
  }
#if !FOOTERS
#undef fm
#endif /* FOOTERS */
}
   12810:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                unlink_chunk(fm, p, prevsize);
   12814:	e1510003 	cmp	r1, r3
   12818:	e5936018 	ldr	r6, [r3, #24]
   1281c:	0a000057 	beq	12980 <free+0x490>
   12820:	e5930008 	ldr	r0, [r3, #8]
   12824:	e15e0000 	cmp	lr, r0
   12828:	8affffd9 	bhi	12794 <free+0x2a4>
   1282c:	e590400c 	ldr	r4, [r0, #12]
   12830:	e1540003 	cmp	r4, r3
   12834:	1affffd6 	bne	12794 <free+0x2a4>
   12838:	e5914008 	ldr	r4, [r1, #8]
   1283c:	e1540003 	cmp	r4, r3
   12840:	1affffd3 	bne	12794 <free+0x2a4>
   12844:	e580100c 	str	r1, [r0, #12]
   12848:	e5810008 	str	r0, [r1, #8]
   1284c:	e3560000 	cmp	r6, #0
   12850:	0affff37 	beq	12534 <free+0x44>
   12854:	e593001c 	ldr	r0, [r3, #28]
   12858:	e59f4488 	ldr	r4, [pc, #1160]	; 12ce8 <free+0x7f8>
   1285c:	e280004c 	add	r0, r0, #76	; 0x4c
   12860:	e08f4004 	add	r4, pc, r4
   12864:	e7945100 	ldr	r5, [r4, r0, lsl #2]
   12868:	e1550003 	cmp	r5, r3
   1286c:	07841100 	streq	r1, [r4, r0, lsl #2]
   12870:	0a000007 	beq	12894 <free+0x3a4>
   12874:	e15e0006 	cmp	lr, r6
   12878:	8affffc5 	bhi	12794 <free+0x2a4>
   1287c:	e5960010 	ldr	r0, [r6, #16]
   12880:	e1500003 	cmp	r0, r3
   12884:	05861010 	streq	r1, [r6, #16]
   12888:	15861014 	strne	r1, [r6, #20]
   1288c:	e3510000 	cmp	r1, #0
   12890:	0affff27 	beq	12534 <free+0x44>
   12894:	e15e0001 	cmp	lr, r1
   12898:	8affffbd 	bhi	12794 <free+0x2a4>
   1289c:	e5930010 	ldr	r0, [r3, #16]
   128a0:	e5816018 	str	r6, [r1, #24]
   128a4:	e3500000 	cmp	r0, #0
   128a8:	0a000003 	beq	128bc <free+0x3cc>
   128ac:	e15e0000 	cmp	lr, r0
   128b0:	8affffb7 	bhi	12794 <free+0x2a4>
   128b4:	e5810010 	str	r0, [r1, #16]
   128b8:	e5801018 	str	r1, [r0, #24]
   128bc:	e5930014 	ldr	r0, [r3, #20]
   128c0:	e3500000 	cmp	r0, #0
   128c4:	0affff1a 	beq	12534 <free+0x44>
   128c8:	e15e0000 	cmp	lr, r0
   128cc:	8affffb0 	bhi	12794 <free+0x2a4>
   128d0:	e5810014 	str	r0, [r1, #20]
   128d4:	e5801018 	str	r1, [r0, #24]
   128d8:	eaffff15 	b	12534 <free+0x44>
              unlink_chunk(fm, next, nsize);
   128dc:	e150000c 	cmp	r0, ip
   128e0:	e59c6008 	ldr	r6, [ip, #8]
   128e4:	0affffaa 	beq	12794 <free+0x2a4>
   128e8:	e15c0006 	cmp	ip, r6
   128ec:	0affffa8 	beq	12794 <free+0x2a4>
   128f0:	e0844181 	add	r4, r4, r1, lsl #3
   128f4:	e2844028 	add	r4, r4, #40	; 0x28
   128f8:	e1540006 	cmp	r4, r6
   128fc:	1a0000b3 	bne	12bd0 <free+0x6e0>
   12900:	e1500006 	cmp	r0, r6
   12904:	0a00009d 	beq	12b80 <free+0x690>
   12908:	e1500004 	cmp	r0, r4
   1290c:	1a0000c4 	bne	12c24 <free+0x734>
   12910:	e586000c 	str	r0, [r6, #12]
   12914:	e5806008 	str	r6, [r0, #8]
   12918:	eaffff90 	b	12760 <free+0x270>
            insert_large_chunk(fm, tp, psize);
   1291c:	e2401c01 	sub	r1, r0, #256	; 0x100
   12920:	e3a0c001 	mov	ip, #1
   12924:	e1a01821 	lsr	r1, r1, #16
   12928:	e2011008 	and	r1, r1, #8
   1292c:	e1a0e110 	lsl	lr, r0, r1
   12930:	e24e4a01 	sub	r4, lr, #4096	; 0x1000
   12934:	e1a04824 	lsr	r4, r4, #16
   12938:	e2044004 	and	r4, r4, #4
   1293c:	e1810004 	orr	r0, r1, r4
   12940:	e1a0141e 	lsl	r1, lr, r4
   12944:	e241e901 	sub	lr, r1, #16384	; 0x4000
   12948:	e1a0e82e 	lsr	lr, lr, #16
   1294c:	e20ee002 	and	lr, lr, #2
   12950:	e080000e 	add	r0, r0, lr
   12954:	e1a01e11 	lsl	r1, r1, lr
   12958:	e06007a1 	rsb	r0, r0, r1, lsr #15
   1295c:	e2801015 	add	r1, r0, #21
   12960:	e280000e 	add	r0, r0, #14
   12964:	e1a01132 	lsr	r1, r2, r1
   12968:	e001100c 	and	r1, r1, ip
   1296c:	e0811c10 	add	r1, r1, r0, lsl ip
   12970:	e281404c 	add	r4, r1, #76	; 0x4c
   12974:	e1a0c11c 	lsl	ip, ip, r1
   12978:	e1a05104 	lsl	r5, r4, #2
   1297c:	eaffff8d 	b	127b8 <free+0x2c8>
                unlink_chunk(fm, p, prevsize);
   12980:	e5934014 	ldr	r4, [r3, #20]
   12984:	e3540000 	cmp	r4, #0
   12988:	12830014 	addne	r0, r3, #20
   1298c:	0a000086 	beq	12bac <free+0x6bc>
   12990:	e1a05000 	mov	r5, r0
   12994:	e1a00004 	mov	r0, r4
   12998:	e1a01004 	mov	r1, r4
   1299c:	e5b04014 	ldr	r4, [r0, #20]!
   129a0:	e3540000 	cmp	r4, #0
   129a4:	1afffff9 	bne	12990 <free+0x4a0>
   129a8:	e1a00001 	mov	r0, r1
   129ac:	e5b04010 	ldr	r4, [r0, #16]!
   129b0:	e3540000 	cmp	r4, #0
   129b4:	1afffff5 	bne	12990 <free+0x4a0>
   129b8:	e15e0005 	cmp	lr, r5
   129bc:	8affff74 	bhi	12794 <free+0x2a4>
   129c0:	e5854000 	str	r4, [r5]
   129c4:	eaffffa0 	b	1284c <free+0x35c>
   129c8:	e15e0004 	cmp	lr, r4
   129cc:	8affff70 	bhi	12794 <free+0x2a4>
   129d0:	e594600c 	ldr	r6, [r4, #12]
   129d4:	e1560003 	cmp	r6, r3
   129d8:	0affff15 	beq	12634 <free+0x144>
   129dc:	eaffff6c 	b	12794 <free+0x2a4>
            insert_large_chunk(fm, tp, psize);
   129e0:	e351001f 	cmp	r1, #31
   129e4:	e790c104 	ldr	ip, [r0, r4, lsl #2]
   129e8:	11a000a1 	lsrne	r0, r1, #1
   129ec:	01a00002 	moveq	r0, r2
   129f0:	12600019 	rsbne	r0, r0, #25
   129f4:	11a00012 	lslne	r0, r2, r0
   129f8:	ea000006 	b	12a18 <free+0x528>
   129fc:	e1a01fa0 	lsr	r1, r0, #31
   12a00:	e1a00080 	lsl	r0, r0, #1
   12a04:	e2811004 	add	r1, r1, #4
   12a08:	e79ce101 	ldr	lr, [ip, r1, lsl #2]
   12a0c:	e35e0000 	cmp	lr, #0
   12a10:	0a000036 	beq	12af0 <free+0x600>
   12a14:	e1a0c00e 	mov	ip, lr
   12a18:	e59c1004 	ldr	r1, [ip, #4]
   12a1c:	e3c11007 	bic	r1, r1, #7
   12a20:	e1510002 	cmp	r1, r2
   12a24:	1afffff4 	bne	129fc <free+0x50c>
   12a28:	e59f22bc 	ldr	r2, [pc, #700]	; 12cec <free+0x7fc>
   12a2c:	e59c1008 	ldr	r1, [ip, #8]
   12a30:	e08f2002 	add	r2, pc, r2
   12a34:	e5922010 	ldr	r2, [r2, #16]
   12a38:	e1520001 	cmp	r2, r1
   12a3c:	9152000c 	cmpls	r2, ip
   12a40:	8affff53 	bhi	12794 <free+0x2a4>
   12a44:	e581300c 	str	r3, [r1, #12]
   12a48:	e3a02000 	mov	r2, #0
   12a4c:	e58c3008 	str	r3, [ip, #8]
   12a50:	e5831008 	str	r1, [r3, #8]
   12a54:	e583c00c 	str	ip, [r3, #12]
   12a58:	e5832018 	str	r2, [r3, #24]
   12a5c:	eaffff65 	b	127f8 <free+0x308>
              size_t tsize = fm->topsize += psize;
   12a60:	e594100c 	ldr	r1, [r4, #12]
              if (p == fm->dv) {
   12a64:	e1530005 	cmp	r3, r5
              fm->top = p;
   12a68:	e5843018 	str	r3, [r4, #24]
              size_t tsize = fm->topsize += psize;
   12a6c:	e0822001 	add	r2, r2, r1
   12a70:	e584200c 	str	r2, [r4, #12]
              p->head = tsize | PINUSE_BIT;
   12a74:	e3821001 	orr	r1, r2, #1
   12a78:	e5831004 	str	r1, [r3, #4]
              if (should_trim(fm, tsize))
   12a7c:	e59f326c 	ldr	r3, [pc, #620]	; 12cf0 <free+0x800>
                fm->dv = 0;
   12a80:	05840014 	streq	r0, [r4, #20]
              if (should_trim(fm, tsize))
   12a84:	e08f3003 	add	r3, pc, r3
                fm->dvsize = 0;
   12a88:	05840008 	streq	r0, [r4, #8]
              if (should_trim(fm, tsize))
   12a8c:	e593301c 	ldr	r3, [r3, #28]
   12a90:	e1520003 	cmp	r2, r3
   12a94:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
                sys_trim(fm, 0);
   12a98:	e3a00000 	mov	r0, #0
}
   12a9c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
                sys_trim(fm, 0);
   12aa0:	eafff76b 	b	10854 <sys_trim.constprop.7>
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
   12aa4:	e59c0004 	ldr	r0, [ip, #4]
   12aa8:	e2005003 	and	r5, r0, #3
   12aac:	e3550003 	cmp	r5, #3
   12ab0:	1afffe9f 	bne	12534 <free+0x44>
                fm->dvsize = psize;
   12ab4:	e5842008 	str	r2, [r4, #8]
                set_free_with_pinuse(p, psize, next);
   12ab8:	e3c00001 	bic	r0, r0, #1
   12abc:	e3823001 	orr	r3, r2, #1
   12ac0:	e58c0004 	str	r0, [ip, #4]
   12ac4:	e5813004 	str	r3, [r1, #4]
   12ac8:	e58c2000 	str	r2, [ip]
                goto postaction;
   12acc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              size_t dsize = fm->dvsize += psize;
   12ad0:	e5941008 	ldr	r1, [r4, #8]
              fm->dv = p;
   12ad4:	e5843014 	str	r3, [r4, #20]
              size_t dsize = fm->dvsize += psize;
   12ad8:	e0822001 	add	r2, r2, r1
   12adc:	e5842008 	str	r2, [r4, #8]
              set_size_and_pinuse_of_free_chunk(p, dsize);
   12ae0:	e3821001 	orr	r1, r2, #1
   12ae4:	e5831004 	str	r1, [r3, #4]
   12ae8:	e7832002 	str	r2, [r3, r2]
              goto postaction;
   12aec:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_large_chunk(fm, tp, psize);
   12af0:	e59f01fc 	ldr	r0, [pc, #508]	; 12cf4 <free+0x804>
   12af4:	e08c2101 	add	r2, ip, r1, lsl #2
   12af8:	e08f0000 	add	r0, pc, r0
   12afc:	e5900010 	ldr	r0, [r0, #16]
   12b00:	e1500002 	cmp	r0, r2
   12b04:	8affff22 	bhi	12794 <free+0x2a4>
   12b08:	e78c3101 	str	r3, [ip, r1, lsl #2]
   12b0c:	e583c018 	str	ip, [r3, #24]
   12b10:	e583300c 	str	r3, [r3, #12]
   12b14:	e5833008 	str	r3, [r3, #8]
   12b18:	eaffff36 	b	127f8 <free+0x308>
                unlink_chunk(fm, p, prevsize);
   12b1c:	e59f01d4 	ldr	r0, [pc, #468]	; 12cf8 <free+0x808>
   12b20:	e3a04001 	mov	r4, #1
   12b24:	e08f0000 	add	r0, pc, r0
   12b28:	e5901000 	ldr	r1, [r0]
   12b2c:	e1c15514 	bic	r5, r1, r4, lsl r5
   12b30:	e5805000 	str	r5, [r0]
   12b34:	eafffe7e 	b	12534 <free+0x44>
              unlink_chunk(fm, next, nsize);
   12b38:	e59c4014 	ldr	r4, [ip, #20]
   12b3c:	e3540000 	cmp	r4, #0
   12b40:	128c1014 	addne	r1, ip, #20
   12b44:	0a000027 	beq	12be8 <free+0x6f8>
   12b48:	e1a05001 	mov	r5, r1
   12b4c:	e1a01004 	mov	r1, r4
   12b50:	e1a00004 	mov	r0, r4
   12b54:	e5b14014 	ldr	r4, [r1, #20]!
   12b58:	e3540000 	cmp	r4, #0
   12b5c:	1afffff9 	bne	12b48 <free+0x658>
   12b60:	e1a01000 	mov	r1, r0
   12b64:	e5b14010 	ldr	r4, [r1, #16]!
   12b68:	e3540000 	cmp	r4, #0
   12b6c:	1afffff5 	bne	12b48 <free+0x658>
   12b70:	e15e0005 	cmp	lr, r5
   12b74:	8affff06 	bhi	12794 <free+0x2a4>
   12b78:	e5854000 	str	r4, [r5]
   12b7c:	eafffed1 	b	126c8 <free+0x1d8>
   12b80:	e59fc174 	ldr	ip, [pc, #372]	; 12cfc <free+0x80c>
   12b84:	e3a0e001 	mov	lr, #1
   12b88:	e08fc00c 	add	ip, pc, ip
   12b8c:	e59c0000 	ldr	r0, [ip]
   12b90:	e1c0111e 	bic	r1, r0, lr, lsl r1
   12b94:	e58c1000 	str	r1, [ip]
   12b98:	eafffef0 	b	12760 <free+0x270>
   12b9c:	e59f115c 	ldr	r1, [pc, #348]	; 12d00 <free+0x810>
   12ba0:	e08f1001 	add	r1, pc, r1
   12ba4:	e5915014 	ldr	r5, [r1, #20]
   12ba8:	eafffeec 	b	12760 <free+0x270>
                unlink_chunk(fm, p, prevsize);
   12bac:	e5934010 	ldr	r4, [r3, #16]
   12bb0:	e3540000 	cmp	r4, #0
   12bb4:	0a000020 	beq	12c3c <free+0x74c>
   12bb8:	e2830010 	add	r0, r3, #16
   12bbc:	eaffff73 	b	12990 <free+0x4a0>
   12bc0:	e59f113c 	ldr	r1, [pc, #316]	; 12d04 <free+0x814>
   12bc4:	e08f1001 	add	r1, pc, r1
   12bc8:	e5915014 	ldr	r5, [r1, #20]
   12bcc:	eafffee3 	b	12760 <free+0x270>
              unlink_chunk(fm, next, nsize);
   12bd0:	e15e0006 	cmp	lr, r6
   12bd4:	8afffeee 	bhi	12794 <free+0x2a4>
   12bd8:	e596700c 	ldr	r7, [r6, #12]
   12bdc:	e157000c 	cmp	r7, ip
   12be0:	0affff46 	beq	12900 <free+0x410>
   12be4:	eafffeea 	b	12794 <free+0x2a4>
   12be8:	e59c4010 	ldr	r4, [ip, #16]
   12bec:	e3540000 	cmp	r4, #0
   12bf0:	0a000021 	beq	12c7c <free+0x78c>
   12bf4:	e28c1010 	add	r1, ip, #16
   12bf8:	eaffffd2 	b	12b48 <free+0x658>
   12bfc:	e59f1104 	ldr	r1, [pc, #260]	; 12d08 <free+0x818>
   12c00:	e08f1001 	add	r1, pc, r1
   12c04:	e5915014 	ldr	r5, [r1, #20]
   12c08:	eafffed4 	b	12760 <free+0x270>
                unlink_chunk(fm, p, prevsize);
   12c0c:	e15e0001 	cmp	lr, r1
   12c10:	8afffedf 	bhi	12794 <free+0x2a4>
   12c14:	e5910008 	ldr	r0, [r1, #8]
   12c18:	e1500003 	cmp	r0, r3
   12c1c:	0afffe88 	beq	12644 <free+0x154>
   12c20:	eafffedb 	b	12794 <free+0x2a4>
              unlink_chunk(fm, next, nsize);
   12c24:	e15e0000 	cmp	lr, r0
   12c28:	8afffed9 	bhi	12794 <free+0x2a4>
   12c2c:	e5901008 	ldr	r1, [r0, #8]
   12c30:	e151000c 	cmp	r1, ip
   12c34:	0affff35 	beq	12910 <free+0x420>
   12c38:	eafffed5 	b	12794 <free+0x2a4>
                unlink_chunk(fm, p, prevsize);
   12c3c:	e3560000 	cmp	r6, #0
   12c40:	0afffe3b 	beq	12534 <free+0x44>
   12c44:	e593501c 	ldr	r5, [r3, #28]
   12c48:	e59f10bc 	ldr	r1, [pc, #188]	; 12d0c <free+0x81c>
   12c4c:	e285704c 	add	r7, r5, #76	; 0x4c
   12c50:	e08f1001 	add	r1, pc, r1
   12c54:	e7910107 	ldr	r0, [r1, r7, lsl #2]
   12c58:	e1500003 	cmp	r0, r3
   12c5c:	11a01004 	movne	r1, r4
   12c60:	1affff03 	bne	12874 <free+0x384>
   12c64:	e5910004 	ldr	r0, [r1, #4]
   12c68:	e3a06001 	mov	r6, #1
   12c6c:	e7814107 	str	r4, [r1, r7, lsl #2]
   12c70:	e1c00516 	bic	r0, r0, r6, lsl r5
   12c74:	e5810004 	str	r0, [r1, #4]
   12c78:	eafffe2d 	b	12534 <free+0x44>
              unlink_chunk(fm, next, nsize);
   12c7c:	e3560000 	cmp	r6, #0
   12c80:	0afffeb6 	beq	12760 <free+0x270>
   12c84:	e59c401c 	ldr	r4, [ip, #28]
   12c88:	e59f1080 	ldr	r1, [pc, #128]	; 12d10 <free+0x820>
   12c8c:	e284504c 	add	r5, r4, #76	; 0x4c
   12c90:	e08f1001 	add	r1, pc, r1
   12c94:	e7910105 	ldr	r0, [r1, r5, lsl #2]
   12c98:	e150000c 	cmp	r0, ip
   12c9c:	13a00000 	movne	r0, #0
   12ca0:	1afffe92 	bne	126f0 <free+0x200>
   12ca4:	e5910004 	ldr	r0, [r1, #4]
   12ca8:	e3a0c001 	mov	ip, #1
   12cac:	e3a0e000 	mov	lr, #0
   12cb0:	e781e105 	str	lr, [r1, r5, lsl #2]
   12cb4:	e5915014 	ldr	r5, [r1, #20]
   12cb8:	e1c0041c 	bic	r0, r0, ip, lsl r4
   12cbc:	e5810004 	str	r0, [r1, #4]
   12cc0:	eafffea6 	b	12760 <free+0x270>
   12cc4:	00003bbc 	.word	0x00003bbc
   12cc8:	00003b48 	.word	0x00003b48
   12ccc:	00003aa0 	.word	0x00003aa0
   12cd0:	00003a64 	.word	0x00003a64
   12cd4:	000039e4 	.word	0x000039e4
   12cd8:	0000396c 	.word	0x0000396c
   12cdc:	00003948 	.word	0x00003948
   12ce0:	000038fc 	.word	0x000038fc
   12ce4:	000038c4 	.word	0x000038c4
   12ce8:	00003860 	.word	0x00003860
   12cec:	00003690 	.word	0x00003690
   12cf0:	0000363c 	.word	0x0000363c
   12cf4:	000035c8 	.word	0x000035c8
   12cf8:	0000359c 	.word	0x0000359c
   12cfc:	00003538 	.word	0x00003538
   12d00:	00003520 	.word	0x00003520
   12d04:	000034fc 	.word	0x000034fc
   12d08:	000034c0 	.word	0x000034c0
   12d0c:	00003470 	.word	0x00003470
   12d10:	00003430 	.word	0x00003430

00012d14 <_stdio_fgetc>:
}

static int _stdio_fgetc(void *ctx)
{
	return (unsigned char)0xff;
}
   12d14:	e3a000ff 	mov	r0, #255	; 0xff
   12d18:	e12fff1e 	bx	lr

00012d1c <_stdio_vfprintf>:
	return buffered_write(ctx, str, strnlen(str, len));
}

static int _stdio_vfprintf(void *ctx, const char *fmt, va_list ap)
{
	return _printf_engine(_output_func, ctx, fmt, ap);
   12d1c:	e1a03002 	mov	r3, r2
   12d20:	e1a02001 	mov	r2, r1
   12d24:	e1a01000 	mov	r1, r0
   12d28:	e59f0004 	ldr	r0, [pc, #4]	; 12d34 <_stdio_vfprintf+0x18>
   12d2c:	e08f0000 	add	r0, pc, r0
   12d30:	ea000388 	b	13b58 <_printf_engine>
   12d34:	000000c0 	.word	0x000000c0

00012d38 <_stdio_fputc>:
{
   12d38:	e92d4010 	push	{r4, lr}
	buffered_put(fctx->buffer, fctx->fd, (char)c);
   12d3c:	e6ef1071 	uxtb	r1, r1
   12d40:	e8900011 	ldm	r0, {r0, r4}
	buffer->data[buffer->pos++] = c;
   12d44:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   12d48:	e2832001 	add	r2, r3, #1
   12d4c:	e5842080 	str	r2, [r4, #128]	; 0x80
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
   12d50:	e351000a 	cmp	r1, #10
   12d54:	13520080 	cmpne	r2, #128	; 0x80
	buffer->data[buffer->pos++] = c;
   12d58:	e7c41003 	strb	r1, [r4, r3]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
   12d5c:	1a000003 	bne	12d70 <_stdio_fputc+0x38>
		result = write(fd, buffer->data, buffer->pos);
   12d60:	e1a01004 	mov	r1, r4
   12d64:	eb000092 	bl	12fb4 <write>
		buffer->pos = 0;
   12d68:	e3a03000 	mov	r3, #0
   12d6c:	e5843080 	str	r3, [r4, #128]	; 0x80
}
   12d70:	e3e00102 	mvn	r0, #-2147483648	; 0x80000000
   12d74:	e8bd8010 	pop	{r4, pc}

00012d78 <buffered_write.part.0>:
static int buffered_write(struct file_context *ctx, const char *str, size_t sz)
   12d78:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < sz; i++) {
   12d7c:	e2528000 	subs	r8, r2, #0
   12d80:	0a000019 	beq	12dec <buffered_write.part.0+0x74>
   12d84:	e2489001 	sub	r9, r8, #1
   12d88:	e1a06000 	mov	r6, r0
   12d8c:	e2415001 	sub	r5, r1, #1
   12d90:	e0819009 	add	r9, r1, r9
		buffer->pos = 0;
   12d94:	e3a07000 	mov	r7, #0
   12d98:	ea000001 	b	12da4 <buffered_write.part.0+0x2c>
	for (i = 0; i < sz; i++) {
   12d9c:	e1550009 	cmp	r5, r9
   12da0:	0a000011 	beq	12dec <buffered_write.part.0+0x74>
		int result = buffered_put(ctx->buffer, ctx->fd, str[i]);
   12da4:	e5964004 	ldr	r4, [r6, #4]
   12da8:	e5f5e001 	ldrb	lr, [r5, #1]!
   12dac:	e5960000 	ldr	r0, [r6]
		result = write(fd, buffer->data, buffer->pos);
   12db0:	e1a01004 	mov	r1, r4
	buffer->data[buffer->pos++] = c;
   12db4:	e594c080 	ldr	ip, [r4, #128]	; 0x80
   12db8:	e28c3001 	add	r3, ip, #1
   12dbc:	e5843080 	str	r3, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
   12dc0:	e1a02003 	mov	r2, r3
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
   12dc4:	e35e000a 	cmp	lr, #10
   12dc8:	13530080 	cmpne	r3, #128	; 0x80
	buffer->data[buffer->pos++] = c;
   12dcc:	e7c4e00c 	strb	lr, [r4, ip]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
   12dd0:	1afffff1 	bne	12d9c <buffered_write.part.0+0x24>
		result = write(fd, buffer->data, buffer->pos);
   12dd4:	eb000076 	bl	12fb4 <write>
		if (result < 0) {
   12dd8:	e3500000 	cmp	r0, #0
		buffer->pos = 0;
   12ddc:	e5847080 	str	r7, [r4, #128]	; 0x80
		if (result < 0) {
   12de0:	b8bd87f0 	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < sz; i++) {
   12de4:	e1550009 	cmp	r5, r9
   12de8:	1affffed 	bne	12da4 <buffered_write.part.0+0x2c>
	return sz;
   12dec:	e1a00008 	mov	r0, r8
}
   12df0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

00012df4 <_output_func>:
{
   12df4:	e92d4070 	push	{r4, r5, r6, lr}
   12df8:	e1a04002 	mov	r4, r2
   12dfc:	e1a05000 	mov	r5, r0
	return buffered_write(ctx, str, strnlen(str, len));
   12e00:	eb00064e 	bl	14740 <strnlen>
	if (!ctx->buffer) {
   12e04:	e5943004 	ldr	r3, [r4, #4]
   12e08:	e3530000 	cmp	r3, #0
   12e0c:	0a000004 	beq	12e24 <_output_func+0x30>
   12e10:	e1a02000 	mov	r2, r0
   12e14:	e1a01005 	mov	r1, r5
   12e18:	e1a00004 	mov	r0, r4
}
   12e1c:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e20:	eaffffd4 	b	12d78 <buffered_write.part.0>
   12e24:	e3e00007 	mvn	r0, #7
   12e28:	e8bd8070 	pop	{r4, r5, r6, pc}

00012e2c <_stdio_fputs>:
{
   12e2c:	e92d4070 	push	{r4, r5, r6, lr}
   12e30:	e1a04000 	mov	r4, r0
	return buffered_write(fctx, s, strlen(s));
   12e34:	e1a00001 	mov	r0, r1
{
   12e38:	e1a05001 	mov	r5, r1
	return buffered_write(fctx, s, strlen(s));
   12e3c:	eb000633 	bl	14710 <strlen>
	if (!ctx->buffer) {
   12e40:	e5943004 	ldr	r3, [r4, #4]
   12e44:	e3530000 	cmp	r3, #0
   12e48:	0a000004 	beq	12e60 <_stdio_fputs+0x34>
   12e4c:	e1a02000 	mov	r2, r0
   12e50:	e1a01005 	mov	r1, r5
   12e54:	e1a00004 	mov	r0, r4
}
   12e58:	e8bd4070 	pop	{r4, r5, r6, lr}
   12e5c:	eaffffc5 	b	12d78 <buffered_write.part.0>
   12e60:	e3e00007 	mvn	r0, #7
   12e64:	e8bd8070 	pop	{r4, r5, r6, pc}

00012e68 <__libc_fini>:
 * of the executable, if any.
 *
 * 'fini_array' points to a list of function addresses. The first
 * entry in the list has value -1, the last one has value 0.
 */
void __libc_fini(void* array) {
   12e68:	e92d4070 	push	{r4, r5, r6, lr}
  void** fini_array = (void **)array;
  const size_t minus1 = ~(size_t)0; /* ensure proper sign extension */

  /* Sanity check - first entry must be -1 */
  if (array == NULL || (size_t)fini_array[0] != minus1) {
   12e6c:	e2505000 	subs	r5, r0, #0
   12e70:	08bd8070 	popeq	{r4, r5, r6, pc}
   12e74:	e5953000 	ldr	r3, [r5]
   12e78:	e3730001 	cmn	r3, #1
   12e7c:	18bd8070 	popne	{r4, r5, r6, pc}
  /* skip over it */
  fini_array += 1;

  /* Count the number of destructors. */
  int count = 0;
  while (fini_array[count] != NULL) {
   12e80:	e5952004 	ldr	r2, [r5, #4]
  fini_array += 1;
   12e84:	e2853004 	add	r3, r5, #4
  while (fini_array[count] != NULL) {
   12e88:	e3520000 	cmp	r2, #0
   12e8c:	08bd8070 	popeq	{r4, r5, r6, pc}
  int count = 0;
   12e90:	e3a04000 	mov	r4, #0
  while (fini_array[count] != NULL) {
   12e94:	e5b32004 	ldr	r2, [r3, #4]!
    ++count;
   12e98:	e2844001 	add	r4, r4, #1
  while (fini_array[count] != NULL) {
   12e9c:	e3520000 	cmp	r2, #0
   12ea0:	1afffffb 	bne	12e94 <__libc_fini+0x2c>
   12ea4:	e0854104 	add	r4, r5, r4, lsl #2
  }

  /* Now call each destructor in reverse order. */
  while (count > 0) {
    void (*func)(void) = (void (*)(void)) fini_array[--count];
   12ea8:	e4143004 	ldr	r3, [r4], #-4

    /* Sanity check, any -1 in the list is ignored */
    if ((size_t)func == minus1) {
   12eac:	e3730001 	cmn	r3, #1
   12eb0:	0a000000 	beq	12eb8 <__libc_fini+0x50>
      continue;
    }

    func();
   12eb4:	e12fff33 	blx	r3
  while (count > 0) {
   12eb8:	e1550004 	cmp	r5, r4
   12ebc:	1afffff9 	bne	12ea8 <__libc_fini+0x40>
   12ec0:	e8bd8070 	pop	{r4, r5, r6, pc}

00012ec4 <__libc_init>:
	call_array(structors->preinit_array);
   12ec4:	e5923000 	ldr	r3, [r2]
{
   12ec8:	e1a05002 	mov	r5, r2
   12ecc:	e92d4010 	push	{r4, lr}
   12ed0:	e1a06001 	mov	r6, r1
  while (*++list) {
   12ed4:	e2834004 	add	r4, r3, #4
   12ed8:	e5933004 	ldr	r3, [r3, #4]
   12edc:	e3530000 	cmp	r3, #0
   12ee0:	0a000003 	beq	12ef4 <__libc_init+0x30>
    (*list)();
   12ee4:	e12fff33 	blx	r3
  while (*++list) {
   12ee8:	e5b43004 	ldr	r3, [r4, #4]!
   12eec:	e3530000 	cmp	r3, #0
   12ef0:	1afffffb 	bne	12ee4 <__libc_init+0x20>
	call_array(structors->init_array);
   12ef4:	e5953004 	ldr	r3, [r5, #4]
  while (*++list) {
   12ef8:	e2834004 	add	r4, r3, #4
   12efc:	e5933004 	ldr	r3, [r3, #4]
   12f00:	e3530000 	cmp	r3, #0
   12f04:	0a000003 	beq	12f18 <__libc_init+0x54>
    (*list)();
   12f08:	e12fff33 	blx	r3
  while (*++list) {
   12f0c:	e5b43004 	ldr	r3, [r4, #4]!
   12f10:	e3530000 	cmp	r3, #0
   12f14:	1afffffb 	bne	12f08 <__libc_init+0x44>
	if (structors->fini_array != NULL) {
   12f18:	e5951008 	ldr	r1, [r5, #8]
   12f1c:	e3510000 	cmp	r1, #0
   12f20:	1a000004 	bne	12f38 <__libc_init+0x74>
	exit(slingshot(0, NULL, NULL));
   12f24:	e3a02000 	mov	r2, #0
   12f28:	e1a01002 	mov	r1, r2
   12f2c:	e1a00002 	mov	r0, r2
   12f30:	e12fff36 	blx	r6
   12f34:	ebffd431 	bl	8000 <exit>
		ret = __cxa_atexit(__libc_fini, structors->fini_array);
   12f38:	e59f0018 	ldr	r0, [pc, #24]	; 12f58 <__libc_init+0x94>
   12f3c:	e08f0000 	add	r0, pc, r0
   12f40:	ebfff592 	bl	10590 <__cxa_atexit>
		if (ret)
   12f44:	e3500000 	cmp	r0, #0
   12f48:	0afffff5 	beq	12f24 <__libc_init+0x60>
			__libc_fatal("__cxa_atexit failed\n");
   12f4c:	e59f0008 	ldr	r0, [pc, #8]	; 12f5c <__libc_init+0x98>
   12f50:	e08f0000 	add	r0, pc, r0
   12f54:	eb000001 	bl	12f60 <__libc_fatal>
   12f58:	ffffff24 	.word	0xffffff24
   12f5c:	00002df4 	.word	0x00002df4

00012f60 <__libc_fatal>:
    __libc_log_fatal(format, args);
    va_end(args);
}

void __libc_fatal(const char* format, ...)
{
   12f60:	e92d000f 	push	{r0, r1, r2, r3}
   12f64:	e59f303c 	ldr	r3, [pc, #60]	; 12fa8 <__libc_fatal+0x48>
   12f68:	e59fc03c 	ldr	ip, [pc, #60]	; 12fac <__libc_fatal+0x4c>
   12f6c:	e08f3003 	add	r3, pc, r3
   12f70:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    vfprintf(stderr, format, args);
   12f74:	e59f0034 	ldr	r0, [pc, #52]	; 12fb0 <__libc_fatal+0x50>
{
   12f78:	e24dd00c 	sub	sp, sp, #12
   12f7c:	e793c00c 	ldr	ip, [r3, ip]
    va_list args;
    va_start(args, format);
   12f80:	e28de014 	add	lr, sp, #20
    vfprintf(stderr, format, args);
   12f84:	e1a0200e 	mov	r2, lr
    va_start(args, format);
   12f88:	e58de000 	str	lr, [sp]
{
   12f8c:	e59cc000 	ldr	ip, [ip]
   12f90:	e58dc004 	str	ip, [sp, #4]
   12f94:	e59d1010 	ldr	r1, [sp, #16]
    vfprintf(stderr, format, args);
   12f98:	e7930000 	ldr	r0, [r3, r0]
   12f9c:	e2800028 	add	r0, r0, #40	; 0x28
   12fa0:	eb000569 	bl	1454c <vfprintf>
    __libc_log_fatal(format, args);
    va_end(args);
    abort();
   12fa4:	ebfff576 	bl	10584 <abort>
   12fa8:	000030a8 	.word	0x000030a8
   12fac:	0000000c 	.word	0x0000000c
   12fb0:	00000010 	.word	0x00000010

00012fb4 <write>:
#include <asm.h>
#include <trusty_syscalls.h>

.section .text.write
FUNCTION(write)
    ldr     r12, =__NR_write
   12fb4:	e3a0c001 	mov	ip, #1
    swi     #0
   12fb8:	ef000000 	svc	0x00000000
    bx      lr
   12fbc:	e12fff1e 	bx	lr

00012fc0 <brk>:

.section .text.brk
FUNCTION(brk)
    ldr     r12, =__NR_brk
   12fc0:	e3a0c002 	mov	ip, #2
    swi     #0
   12fc4:	ef000000 	svc	0x00000000
    bx      lr
   12fc8:	e12fff1e 	bx	lr

00012fcc <exit_group>:

.section .text.exit_group
FUNCTION(exit_group)
    ldr     r12, =__NR_exit_group
   12fcc:	e3a0c003 	mov	ip, #3
    swi     #0
   12fd0:	ef000000 	svc	0x00000000
    bx      lr
   12fd4:	e12fff1e 	bx	lr

00012fd8 <nanosleep>:
    swi     #0
    bx      lr

.section .text.nanosleep
FUNCTION(nanosleep)
    ldr     r12, =__NR_nanosleep
   12fd8:	e3a0c006 	mov	ip, #6
    swi     #0
   12fdc:	ef000000 	svc	0x00000000
    bx      lr
   12fe0:	e12fff1e 	bx	lr

00012fe4 <port_create>:
    swi     #0
    bx      lr

.section .text.port_create
FUNCTION(port_create)
    ldr     r12, =__NR_port_create
   12fe4:	e3a0c010 	mov	ip, #16
    swi     #0
   12fe8:	ef000000 	svc	0x00000000
    bx      lr
   12fec:	e12fff1e 	bx	lr

00012ff0 <connect>:

.section .text.connect
FUNCTION(connect)
    ldr     r12, =__NR_connect
   12ff0:	e3a0c011 	mov	ip, #17
    swi     #0
   12ff4:	ef000000 	svc	0x00000000
    bx      lr
   12ff8:	e12fff1e 	bx	lr

00012ffc <accept>:

.section .text.accept
FUNCTION(accept)
    ldr     r12, =__NR_accept
   12ffc:	e3a0c012 	mov	ip, #18
    swi     #0
   13000:	ef000000 	svc	0x00000000
    bx      lr
   13004:	e12fff1e 	bx	lr

00013008 <close>:

.section .text.close
FUNCTION(close)
    ldr     r12, =__NR_close
   13008:	e3a0c013 	mov	ip, #19
    swi     #0
   1300c:	ef000000 	svc	0x00000000
    bx      lr
   13010:	e12fff1e 	bx	lr

00013014 <set_cookie>:

.section .text.set_cookie
FUNCTION(set_cookie)
    ldr     r12, =__NR_set_cookie
   13014:	e3a0c014 	mov	ip, #20
    swi     #0
   13018:	ef000000 	svc	0x00000000
    bx      lr
   1301c:	e12fff1e 	bx	lr

00013020 <wait>:

.section .text.wait
FUNCTION(wait)
    ldr     r12, =__NR_wait
   13020:	e3a0c018 	mov	ip, #24
    swi     #0
   13024:	ef000000 	svc	0x00000000
    bx      lr
   13028:	e12fff1e 	bx	lr

0001302c <wait_any>:

.section .text.wait_any
FUNCTION(wait_any)
    ldr     r12, =__NR_wait_any
   1302c:	e3a0c019 	mov	ip, #25
    swi     #0
   13030:	ef000000 	svc	0x00000000
    bx      lr
   13034:	e12fff1e 	bx	lr

00013038 <get_msg>:

.section .text.get_msg
FUNCTION(get_msg)
    ldr     r12, =__NR_get_msg
   13038:	e3a0c020 	mov	ip, #32
    swi     #0
   1303c:	ef000000 	svc	0x00000000
    bx      lr
   13040:	e12fff1e 	bx	lr

00013044 <read_msg>:

.section .text.read_msg
FUNCTION(read_msg)
    ldr     r12, =__NR_read_msg
   13044:	e3a0c021 	mov	ip, #33	; 0x21
    swi     #0
   13048:	ef000000 	svc	0x00000000
    bx      lr
   1304c:	e12fff1e 	bx	lr

00013050 <put_msg>:

.section .text.put_msg
FUNCTION(put_msg)
    ldr     r12, =__NR_put_msg
   13050:	e3a0c022 	mov	ip, #34	; 0x22
    swi     #0
   13054:	ef000000 	svc	0x00000000
    bx      lr
   13058:	e12fff1e 	bx	lr

0001305c <send_msg>:

.section .text.send_msg
FUNCTION(send_msg)
    ldr     r12, =__NR_send_msg
   1305c:	e3a0c023 	mov	ip, #35	; 0x23
    swi     #0
   13060:	ef000000 	svc	0x00000000
    bx      lr
   13064:	e12fff1e 	bx	lr

00013068 <longlong_to_string>:
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
   13068:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1306c:	e1a08000 	mov	r8, r0
   13070:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
   13074:	e1a04002 	mov	r4, r2
   13078:	e1a05003 	mov	r5, r3
	size_t pos = len;
	int negative = 0;

	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
   1307c:	e219ab01 	ands	sl, r9, #1024	; 0x400
{
   13080:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
   13084:	0a000003 	beq	13098 <longlong_to_string+0x30>
   13088:	e3520000 	cmp	r2, #0
   1308c:	e2d53000 	sbcs	r3, r5, #0
	int negative = 0;
   13090:	a3a0a000 	movge	sl, #0
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
   13094:	ba000030 	blt	1315c <longlong_to_string+0xf4>
		negative = 1;
		n = -n;
	}

	buf[--pos] = 0;
   13098:	e2477001 	sub	r7, r7, #1

	/* only do the math if the number is >= 10 */
	while (n >= 10) {
   1309c:	e3550000 	cmp	r5, #0
	buf[--pos] = 0;
   130a0:	e3a03000 	mov	r3, #0
	while (n >= 10) {
   130a4:	03540009 	cmpeq	r4, #9
	buf[--pos] = 0;
   130a8:	e088b007 	add	fp, r8, r7
   130ac:	e7c83007 	strb	r3, [r8, r7]
	while (n >= 10) {
   130b0:	9a000012 	bls	13100 <longlong_to_string+0x98>
		int digit = n % 10;
   130b4:	e1a00004 	mov	r0, r4
   130b8:	e1a01005 	mov	r1, r5
   130bc:	e3a0200a 	mov	r2, #10
   130c0:	e3a03000 	mov	r3, #0
   130c4:	fa000692 	blx	14b14 <__aeabi_uldivmod>

		n /= 10;
   130c8:	e1a00004 	mov	r0, r4
		int digit = n % 10;
   130cc:	e1a06002 	mov	r6, r2
		n /= 10;
   130d0:	e1a01005 	mov	r1, r5
   130d4:	e3a0200a 	mov	r2, #10
   130d8:	e3a03000 	mov	r3, #0
   130dc:	fa00068c 	blx	14b14 <__aeabi_uldivmod>
	while (n >= 10) {
   130e0:	e3510000 	cmp	r1, #0

		buf[--pos] = digit + '0';
   130e4:	e2866030 	add	r6, r6, #48	; 0x30
		n /= 10;
   130e8:	e1a04000 	mov	r4, r0
   130ec:	e1a05001 	mov	r5, r1
		buf[--pos] = digit + '0';
   130f0:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
   130f4:	03500009 	cmpeq	r0, #9
		buf[--pos] = digit + '0';
   130f8:	e56b6001 	strb	r6, [fp, #-1]!
	while (n >= 10) {
   130fc:	8affffec 	bhi	130b4 <longlong_to_string+0x4c>
	}
	buf[--pos] = n + '0';
   13100:	e2477001 	sub	r7, r7, #1
   13104:	e2844030 	add	r4, r4, #48	; 0x30
   13108:	e0880007 	add	r0, r8, r7

	if (negative)
   1310c:	e35a0000 	cmp	sl, #0
	buf[--pos] = n + '0';
   13110:	e7c84007 	strb	r4, [r8, r7]
	if (negative)
   13114:	1a00000c 	bne	1314c <longlong_to_string+0xe4>
		*signchar = '-';
	else if ((flag & SHOWSIGNFLAG))
   13118:	e3190c02 	tst	r9, #512	; 0x200
   1311c:	1a000006 	bne	1313c <longlong_to_string+0xd4>
		*signchar = '+';
	else if ((flag & BLANKPOSFLAG))
   13120:	e3190a02 	tst	r9, #8192	; 0x2000
		*signchar = ' ';
   13124:	13a03020 	movne	r3, #32
   13128:	159d2030 	ldrne	r2, [sp, #48]	; 0x30
	else
		*signchar = '\0';
   1312c:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
		*signchar = ' ';
   13130:	15c23000 	strbne	r3, [r2]
		*signchar = '\0';
   13134:	05c3a000 	strbeq	sl, [r3]

	return &buf[pos];
}
   13138:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '+';
   1313c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   13140:	e3a0302b 	mov	r3, #43	; 0x2b
   13144:	e5c23000 	strb	r3, [r2]
   13148:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '-';
   1314c:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
   13150:	e3a0302d 	mov	r3, #45	; 0x2d
   13154:	e5c23000 	strb	r3, [r2]
   13158:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n = -n;
   1315c:	e2724000 	rsbs	r4, r2, #0
		negative = 1;
   13160:	e3a0a001 	mov	sl, #1
		n = -n;
   13164:	e2e55000 	rsc	r5, r5, #0
   13168:	eaffffca 	b	13098 <longlong_to_string+0x30>

0001316c <exponent_to_string>:
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
	size_t pos = 0;

	/* handle sign */
	if (exponent < 0) {
   1316c:	e3510000 	cmp	r1, #0
{
   13170:	e92d40f0 	push	{r4, r5, r6, r7, lr}
		OUT('-');
		exponent = -exponent;
   13174:	b2611000 	rsblt	r1, r1, #0
		OUT('-');
   13178:	b3a0302d 	movlt	r3, #45	; 0x2d
	} else {
		OUT('+');
   1317c:	a3a0302b 	movge	r3, #43	; 0x2b
	}

	/* see how far we need to bump into the string to print from the right */
	if (exponent >= 1000) pos += 4;
   13180:	e3510ffa 	cmp	r1, #1000	; 0x3e8
{
   13184:	e1a0e000 	mov	lr, r0
		OUT('+');
   13188:	e5c03000 	strb	r3, [r0]
	if (exponent >= 1000) pos += 4;
   1318c:	a3a00005 	movge	r0, #5
   13190:	aa000002 	bge	131a0 <exponent_to_string+0x34>
	else if (exponent >= 100) pos += 3;
   13194:	e3510063 	cmp	r1, #99	; 0x63
   13198:	c3a00004 	movgt	r0, #4
   1319c:	da00000f 	ble	131e0 <exponent_to_string+0x74>
	else pos++;

	/* print decimal string, from the right */
	uint i = pos;
	do {
		uint digit = (uint32_t)exponent % 10;
   131a0:	e30c5ccd 	movw	r5, #52429	; 0xcccd
   131a4:	e34c5ccc 	movt	r5, #52428	; 0xcccc

		buf[--i] = digit + '0';

		exponent /= 10;
   131a8:	e3064667 	movw	r4, #26215	; 0x6667
   131ac:	e3464666 	movt	r4, #26214	; 0x6666
   131b0:	e08ee000 	add	lr, lr, r0
		uint digit = (uint32_t)exponent % 10;
   131b4:	e3a0600a 	mov	r6, #10
   131b8:	e0832195 	umull	r2, r3, r5, r1
		exponent /= 10;
   131bc:	e1a02fc1 	asr	r2, r1, #31
   131c0:	e0cc7194 	smull	r7, ip, r4, r1
		uint digit = (uint32_t)exponent % 10;
   131c4:	e1a031a3 	lsr	r3, r3, #3
   131c8:	e0631396 	mls	r3, r6, r3, r1
	} while (exponent != 0);
   131cc:	e072114c 	rsbs	r1, r2, ip, asr #2
		buf[--i] = digit + '0';
   131d0:	e2833030 	add	r3, r3, #48	; 0x30
   131d4:	e56e3001 	strb	r3, [lr, #-1]!
	} while (exponent != 0);
   131d8:	1afffff6 	bne	131b8 <exponent_to_string+0x4c>
   131dc:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	else pos++;
   131e0:	e3510009 	cmp	r1, #9
   131e4:	c3a00003 	movgt	r0, #3
   131e8:	d3a00002 	movle	r0, #2
   131ec:	eaffffeb 	b	131a0 <exponent_to_string+0x34>

000131f0 <_vsnprintf_output>:
	size_t len;
	size_t pos;
};

static int _vsnprintf_output(const char *str, size_t len, void *state)
{
   131f0:	e92d4010 	push	{r4, lr}
	struct _output_args *args = state;

	size_t count = 0;
	while (count < len && *str) {
   131f4:	e251e000 	subs	lr, r1, #0
   131f8:	0a000016 	beq	13258 <_vsnprintf_output+0x68>
   131fc:	e5d01000 	ldrb	r1, [r0]
   13200:	e3510000 	cmp	r1, #0
   13204:	0a000011 	beq	13250 <_vsnprintf_output+0x60>
   13208:	e24ee001 	sub	lr, lr, #1
	size_t count = 0;
   1320c:	e3a01000 	mov	r1, #0
   13210:	e080e00e 	add	lr, r0, lr
   13214:	ea000002 	b	13224 <_vsnprintf_output+0x34>
	while (count < len && *str) {
   13218:	e5f03001 	ldrb	r3, [r0, #1]!
   1321c:	e3530000 	cmp	r3, #0
   13220:	0a00000a 	beq	13250 <_vsnprintf_output+0x60>
		if (args->pos < args->len) {
   13224:	e5923008 	ldr	r3, [r2, #8]
			args->outstr[args->pos++] = *str;
		}

		str++;
		count++;
   13228:	e2811001 	add	r1, r1, #1
		if (args->pos < args->len) {
   1322c:	e592c004 	ldr	ip, [r2, #4]
			args->outstr[args->pos++] = *str;
   13230:	e2834001 	add	r4, r3, #1
		if (args->pos < args->len) {
   13234:	e153000c 	cmp	r3, ip
			args->outstr[args->pos++] = *str;
   13238:	35824008 	strcc	r4, [r2, #8]
   1323c:	3592c000 	ldrcc	ip, [r2]
   13240:	35d04000 	ldrbcc	r4, [r0]
   13244:	37cc4003 	strbcc	r4, [ip, r3]
	while (count < len && *str) {
   13248:	e150000e 	cmp	r0, lr
   1324c:	1afffff1 	bne	13218 <_vsnprintf_output+0x28>
   13250:	e1a00001 	mov	r0, r1
	}

	return count;
}
   13254:	e8bd8010 	pop	{r4, pc}
	while (count < len && *str) {
   13258:	e1a0000e 	mov	r0, lr
   1325c:	e8bd8010 	pop	{r4, pc}

00013260 <double_to_hexstring.isra.0>:
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
   13260:	ec532b10 	vmov	r2, r3, d0
   13264:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13268:	e201bc01 	and	fp, r1, #256	; 0x100
   1326c:	e24dd014 	sub	sp, sp, #20
	if (exponent == 0x7ff) {
   13270:	e30017ff 	movw	r1, #2047	; 0x7ff
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
   13274:	e1a05000 	mov	r5, r0
	union double_int u = { d };
   13278:	e1a09003 	mov	r9, r3
	if (neg) {
   1327c:	e2526000 	subs	r6, r2, #0
   13280:	e2d33000 	sbcs	r3, r3, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
   13284:	e7ea2a59 	ubfx	r2, r9, #20, #11
		OUT('-');
   13288:	b3a0302d 	movlt	r3, #45	; 0x2d
	size_t pos = 0;
   1328c:	a3a03000 	movge	r3, #0
		OUT('-');
   13290:	b5c03000 	strblt	r3, [r0]
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
   13294:	e7f37059 	ubfx	r7, r9, #0, #20
		OUT('-');
   13298:	b3a03001 	movlt	r3, #1
	if (exponent == 0x7ff) {
   1329c:	e1520001 	cmp	r2, r1
   132a0:	0a000073 	beq	13474 <double_to_hexstring.isra.0+0x214>
	} else if (exponent == 0) {
   132a4:	e3520000 	cmp	r2, #0
   132a8:	1a000019 	bne	13314 <double_to_hexstring.isra.0+0xb4>
		if (fraction == 0) {
   132ac:	e1962007 	orrs	r2, r6, r7
   132b0:	0a0000ab 	beq	13564 <double_to_hexstring.isra.0+0x304>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
   132b4:	e35b0000 	cmp	fp, #0
   132b8:	1a0000e1 	bne	13644 <double_to_hexstring.isra.0+0x3e4>
   132bc:	e0800003 	add	r0, r0, r3
   132c0:	e59f13f8 	ldr	r1, [pc, #1016]	; 136c0 <double_to_hexstring.isra.0+0x460>
   132c4:	e3a02065 	mov	r2, #101	; 0x65
   132c8:	e3a0c064 	mov	ip, #100	; 0x64
   132cc:	e08f1001 	add	r1, pc, r1
   132d0:	e2833001 	add	r3, r3, #1
   132d4:	e2811001 	add	r1, r1, #1
   132d8:	e4c0c001 	strb	ip, [r0], #1
   132dc:	e3520000 	cmp	r2, #0
   132e0:	0a000005 	beq	132fc <double_to_hexstring.isra.0+0x9c>
   132e4:	e1a0c002 	mov	ip, r2
   132e8:	e5f12001 	ldrb	r2, [r1, #1]!
   132ec:	e2833001 	add	r3, r3, #1
   132f0:	e4c0c001 	strb	ip, [r0], #1
   132f4:	e3520000 	cmp	r2, #0
   132f8:	1afffff9 	bne	132e4 <double_to_hexstring.isra.0+0x84>
   132fc:	e0853003 	add	r3, r5, r3
}
   13300:	e1a00005 	mov	r0, r5
	buf[pos] = 0;
   13304:	e3a02000 	mov	r2, #0
   13308:	e5c32000 	strb	r2, [r3]
}
   1330c:	e28dd014 	add	sp, sp, #20
   13310:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int exponent_signed = exponent - 1023;
   13314:	e2422fff 	sub	r2, r2, #1020	; 0x3fc
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
   13318:	e35b0000 	cmp	fp, #0
		int exponent_signed = exponent - 1023;
   1331c:	e2422003 	sub	r2, r2, #3
   13320:	e58d2008 	str	r2, [sp, #8]
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
   13324:	0a00007a 	beq	13514 <double_to_hexstring.isra.0+0x2b4>
   13328:	e0800003 	add	r0, r0, r3
   1332c:	e59f2390 	ldr	r2, [pc, #912]	; 136c4 <double_to_hexstring.isra.0+0x464>
   13330:	e3a01058 	mov	r1, #88	; 0x58
   13334:	e3a0c030 	mov	ip, #48	; 0x30
   13338:	e08f2002 	add	r2, pc, r2
   1333c:	e2833001 	add	r3, r3, #1
   13340:	e2822001 	add	r2, r2, #1
   13344:	e4c0c001 	strb	ip, [r0], #1
   13348:	e3510000 	cmp	r1, #0
   1334c:	0a000005 	beq	13368 <double_to_hexstring.isra.0+0x108>
   13350:	e1a0c001 	mov	ip, r1
   13354:	e5f21001 	ldrb	r1, [r2, #1]!
   13358:	e2833001 	add	r3, r3, #1
   1335c:	e4c0c001 	strb	ip, [r0], #1
   13360:	e3510000 	cmp	r1, #0
   13364:	1afffff9 	bne	13350 <double_to_hexstring.isra.0+0xf0>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
   13368:	e59f2358 	ldr	r2, [pc, #856]	; 136c8 <double_to_hexstring.isra.0+0x468>
   1336c:	e08f2002 	add	r2, pc, r2
   13370:	e58d2004 	str	r2, [sp, #4]
		bool output_dot = false;
   13374:	e3a0a000 	mov	sl, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
   13378:	e3a01030 	mov	r1, #48	; 0x30
		int zero_count = 0;
   1337c:	e1a0c00a 	mov	ip, sl
					OUT('0');
   13380:	e1a0e001 	mov	lr, r1
					OUT('.');
   13384:	e58db00c 	str	fp, [sp, #12]
   13388:	ea000002 	b	13398 <double_to_hexstring.isra.0+0x138>
		for (int i = 52 - 4; i >= 0; i -= 4) {
   1338c:	e2411004 	sub	r1, r1, #4
   13390:	e3710004 	cmn	r1, #4
   13394:	0a00002d 	beq	13450 <double_to_hexstring.isra.0+0x1f0>
			uint digit = (fraction >> i) & 0xf;
   13398:	e2610020 	rsb	r0, r1, #32
   1339c:	e2418020 	sub	r8, r1, #32
   133a0:	e1a02136 	lsr	r2, r6, r1
   133a4:	e2834001 	add	r4, r3, #1
   133a8:	e1822017 	orr	r2, r2, r7, lsl r0
   133ac:	e0850004 	add	r0, r5, r4
   133b0:	e1822837 	orr	r2, r2, r7, lsr r8
   133b4:	e0858003 	add	r8, r5, r3
			if (digit == 0) {
   133b8:	e212200f 	ands	r2, r2, #15
				zero_count++;
   133bc:	028cc001 	addeq	ip, ip, #1
			if (digit == 0) {
   133c0:	0afffff1 	beq	1338c <double_to_hexstring.isra.0+0x12c>
   133c4:	e2839002 	add	r9, r3, #2
				if (!output_dot) {
   133c8:	e35a0000 	cmp	sl, #0
   133cc:	e085a009 	add	sl, r5, r9
   133d0:	1a000008 	bne	133f8 <double_to_hexstring.isra.0+0x198>
   133d4:	e283b003 	add	fp, r3, #3
					OUT('.');
   133d8:	e3a0302e 	mov	r3, #46	; 0x2e
   133dc:	e5c83000 	strb	r3, [r8]
   133e0:	e1a03004 	mov	r3, r4
   133e4:	e1a08000 	mov	r8, r0
   133e8:	e1a04009 	mov	r4, r9
   133ec:	e1a0000a 	mov	r0, sl
   133f0:	e1a0900b 	mov	r9, fp
   133f4:	e085a00b 	add	sl, r5, fp
				while (zero_count > 0) {
   133f8:	e35c0000 	cmp	ip, #0
   133fc:	0a000068 	beq	135a4 <double_to_hexstring.isra.0+0x344>
   13400:	e085400c 	add	r4, r5, ip
   13404:	e0850003 	add	r0, r5, r3
   13408:	e0844003 	add	r4, r4, r3
					OUT('0');
   1340c:	e4c0e001 	strb	lr, [r0], #1
				while (zero_count > 0) {
   13410:	e1540000 	cmp	r4, r0
   13414:	1afffffc 	bne	1340c <double_to_hexstring.isra.0+0x1ac>
   13418:	e08cc003 	add	ip, ip, r3
   1341c:	e28c3001 	add	r3, ip, #1
   13420:	e28c4002 	add	r4, ip, #2
   13424:	e0858003 	add	r8, r5, r3
   13428:	e085c00c 	add	ip, r5, ip
   1342c:	e0850004 	add	r0, r5, r4
				buf[pos++] = table[digit];
   13430:	e59d9004 	ldr	r9, [sp, #4]
		for (int i = 52 - 4; i >= 0; i -= 4) {
   13434:	e2411004 	sub	r1, r1, #4
				buf[pos++] = table[digit];
   13438:	e3a0a001 	mov	sl, #1
		for (int i = 52 - 4; i >= 0; i -= 4) {
   1343c:	e3710004 	cmn	r1, #4
				buf[pos++] = table[digit];
   13440:	e7d92002 	ldrb	r2, [r9, r2]
   13444:	e5cc2000 	strb	r2, [ip]
   13448:	e3a0c000 	mov	ip, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
   1344c:	1affffd1 	bne	13398 <double_to_hexstring.isra.0+0x138>
   13450:	e59db00c 	ldr	fp, [sp, #12]
		pos += exponent_to_string(&buf[pos], exponent_signed);
   13454:	e59d1008 	ldr	r1, [sp, #8]
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
   13458:	e35b0000 	cmp	fp, #0
   1345c:	03a03070 	moveq	r3, #112	; 0x70
   13460:	13a03050 	movne	r3, #80	; 0x50
   13464:	e5c83000 	strb	r3, [r8]
		pos += exponent_to_string(&buf[pos], exponent_signed);
   13468:	ebffff3f 	bl	1316c <exponent_to_string>
   1346c:	e0803004 	add	r3, r0, r4
   13470:	eaffffa1 	b	132fc <double_to_hexstring.isra.0+0x9c>
		if (fraction == 0) {
   13474:	e1962007 	orrs	r2, r6, r7
   13478:	1a000012 	bne	134c8 <double_to_hexstring.isra.0+0x268>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
   1347c:	e35b0000 	cmp	fp, #0
   13480:	1a00004d 	bne	135bc <double_to_hexstring.isra.0+0x35c>
   13484:	e0800003 	add	r0, r0, r3
   13488:	e59f123c 	ldr	r1, [pc, #572]	; 136cc <double_to_hexstring.isra.0+0x46c>
   1348c:	e3a0206e 	mov	r2, #110	; 0x6e
   13490:	e3a0c069 	mov	ip, #105	; 0x69
   13494:	e08f1001 	add	r1, pc, r1
   13498:	e2833001 	add	r3, r3, #1
   1349c:	e2811001 	add	r1, r1, #1
   134a0:	e4c0c001 	strb	ip, [r0], #1
   134a4:	e3520000 	cmp	r2, #0
   134a8:	0affff93 	beq	132fc <double_to_hexstring.isra.0+0x9c>
   134ac:	e1a0c002 	mov	ip, r2
   134b0:	e5f12001 	ldrb	r2, [r1, #1]!
   134b4:	e2833001 	add	r3, r3, #1
   134b8:	e4c0c001 	strb	ip, [r0], #1
   134bc:	e3520000 	cmp	r2, #0
   134c0:	1afffff9 	bne	134ac <double_to_hexstring.isra.0+0x24c>
   134c4:	eaffff8c 	b	132fc <double_to_hexstring.isra.0+0x9c>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
   134c8:	e35b0000 	cmp	fp, #0
   134cc:	1a00004b 	bne	13600 <double_to_hexstring.isra.0+0x3a0>
   134d0:	e0800003 	add	r0, r0, r3
   134d4:	e59f11f4 	ldr	r1, [pc, #500]	; 136d0 <double_to_hexstring.isra.0+0x470>
   134d8:	e3a02061 	mov	r2, #97	; 0x61
   134dc:	e3a0c06e 	mov	ip, #110	; 0x6e
   134e0:	e08f1001 	add	r1, pc, r1
   134e4:	e2833001 	add	r3, r3, #1
   134e8:	e2811001 	add	r1, r1, #1
   134ec:	e4c0c001 	strb	ip, [r0], #1
   134f0:	e3520000 	cmp	r2, #0
   134f4:	0affff80 	beq	132fc <double_to_hexstring.isra.0+0x9c>
   134f8:	e1a0c002 	mov	ip, r2
   134fc:	e5f12001 	ldrb	r2, [r1, #1]!
   13500:	e2833001 	add	r3, r3, #1
   13504:	e4c0c001 	strb	ip, [r0], #1
   13508:	e3520000 	cmp	r2, #0
   1350c:	1afffff9 	bne	134f8 <double_to_hexstring.isra.0+0x298>
   13510:	eaffff79 	b	132fc <double_to_hexstring.isra.0+0x9c>
   13514:	e0800003 	add	r0, r0, r3
   13518:	e59f21b4 	ldr	r2, [pc, #436]	; 136d4 <double_to_hexstring.isra.0+0x474>
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
   1351c:	e3a01078 	mov	r1, #120	; 0x78
   13520:	e3a0c030 	mov	ip, #48	; 0x30
   13524:	e08f2002 	add	r2, pc, r2
   13528:	e2833001 	add	r3, r3, #1
   1352c:	e2822001 	add	r2, r2, #1
   13530:	e4c0c001 	strb	ip, [r0], #1
   13534:	e3510000 	cmp	r1, #0
   13538:	0a000005 	beq	13554 <double_to_hexstring.isra.0+0x2f4>
   1353c:	e1a0c001 	mov	ip, r1
   13540:	e5f21001 	ldrb	r1, [r2, #1]!
   13544:	e2833001 	add	r3, r3, #1
   13548:	e4c0c001 	strb	ip, [r0], #1
   1354c:	e3510000 	cmp	r1, #0
   13550:	1afffff9 	bne	1353c <double_to_hexstring.isra.0+0x2dc>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
   13554:	e59f217c 	ldr	r2, [pc, #380]	; 136d8 <double_to_hexstring.isra.0+0x478>
   13558:	e08f2002 	add	r2, pc, r2
   1355c:	e58d2004 	str	r2, [sp, #4]
   13560:	eaffff83 	b	13374 <double_to_hexstring.isra.0+0x114>
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
   13564:	e35b0000 	cmp	fp, #0
   13568:	1a000046 	bne	13688 <double_to_hexstring.isra.0+0x428>
   1356c:	e59f1168 	ldr	r1, [pc, #360]	; 136dc <double_to_hexstring.isra.0+0x47c>
   13570:	e0800003 	add	r0, r0, r3
   13574:	e3a02078 	mov	r2, #120	; 0x78
   13578:	e3a0c030 	mov	ip, #48	; 0x30
   1357c:	e08f1001 	add	r1, pc, r1
   13580:	e2811001 	add	r1, r1, #1
   13584:	ea000001 	b	13590 <double_to_hexstring.isra.0+0x330>
   13588:	e1a0c002 	mov	ip, r2
   1358c:	e5f12001 	ldrb	r2, [r1, #1]!
   13590:	e2833001 	add	r3, r3, #1
   13594:	e4c0c001 	strb	ip, [r0], #1
   13598:	e3520000 	cmp	r2, #0
   1359c:	1afffff9 	bne	13588 <double_to_hexstring.isra.0+0x328>
   135a0:	eaffff55 	b	132fc <double_to_hexstring.isra.0+0x9c>
				while (zero_count > 0) {
   135a4:	e1a0c008 	mov	ip, r8
   135a8:	e1a03004 	mov	r3, r4
   135ac:	e1a08000 	mov	r8, r0
   135b0:	e1a04009 	mov	r4, r9
   135b4:	e1a0000a 	mov	r0, sl
   135b8:	eaffff9c 	b	13430 <double_to_hexstring.isra.0+0x1d0>
   135bc:	e0800003 	add	r0, r0, r3
   135c0:	e59f1118 	ldr	r1, [pc, #280]	; 136e0 <double_to_hexstring.isra.0+0x480>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
   135c4:	e3a0204e 	mov	r2, #78	; 0x4e
   135c8:	e3a0c049 	mov	ip, #73	; 0x49
   135cc:	e08f1001 	add	r1, pc, r1
   135d0:	e2833001 	add	r3, r3, #1
   135d4:	e2811001 	add	r1, r1, #1
   135d8:	e4c0c001 	strb	ip, [r0], #1
   135dc:	e3520000 	cmp	r2, #0
   135e0:	0affff45 	beq	132fc <double_to_hexstring.isra.0+0x9c>
   135e4:	e1a0c002 	mov	ip, r2
   135e8:	e5f12001 	ldrb	r2, [r1, #1]!
   135ec:	e2833001 	add	r3, r3, #1
   135f0:	e4c0c001 	strb	ip, [r0], #1
   135f4:	e3520000 	cmp	r2, #0
   135f8:	1afffff9 	bne	135e4 <double_to_hexstring.isra.0+0x384>
   135fc:	eaffff3e 	b	132fc <double_to_hexstring.isra.0+0x9c>
   13600:	e0800003 	add	r0, r0, r3
   13604:	e59f10d8 	ldr	r1, [pc, #216]	; 136e4 <double_to_hexstring.isra.0+0x484>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
   13608:	e3a02041 	mov	r2, #65	; 0x41
   1360c:	e3a0c04e 	mov	ip, #78	; 0x4e
   13610:	e08f1001 	add	r1, pc, r1
   13614:	e2833001 	add	r3, r3, #1
   13618:	e2811001 	add	r1, r1, #1
   1361c:	e4c0c001 	strb	ip, [r0], #1
   13620:	e3520000 	cmp	r2, #0
   13624:	0affff34 	beq	132fc <double_to_hexstring.isra.0+0x9c>
   13628:	e1a0c002 	mov	ip, r2
   1362c:	e5f12001 	ldrb	r2, [r1, #1]!
   13630:	e2833001 	add	r3, r3, #1
   13634:	e4c0c001 	strb	ip, [r0], #1
   13638:	e3520000 	cmp	r2, #0
   1363c:	1afffff9 	bne	13628 <double_to_hexstring.isra.0+0x3c8>
   13640:	eaffff2d 	b	132fc <double_to_hexstring.isra.0+0x9c>
   13644:	e0800003 	add	r0, r0, r3
   13648:	e59f1098 	ldr	r1, [pc, #152]	; 136e8 <double_to_hexstring.isra.0+0x488>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
   1364c:	e3a02045 	mov	r2, #69	; 0x45
   13650:	e3a0c044 	mov	ip, #68	; 0x44
   13654:	e08f1001 	add	r1, pc, r1
   13658:	e2833001 	add	r3, r3, #1
   1365c:	e2811001 	add	r1, r1, #1
   13660:	e4c0c001 	strb	ip, [r0], #1
   13664:	e3520000 	cmp	r2, #0
   13668:	0affff23 	beq	132fc <double_to_hexstring.isra.0+0x9c>
   1366c:	e1a0c002 	mov	ip, r2
   13670:	e5f12001 	ldrb	r2, [r1, #1]!
   13674:	e2833001 	add	r3, r3, #1
   13678:	e4c0c001 	strb	ip, [r0], #1
   1367c:	e3520000 	cmp	r2, #0
   13680:	1afffff9 	bne	1366c <double_to_hexstring.isra.0+0x40c>
   13684:	eaffff1c 	b	132fc <double_to_hexstring.isra.0+0x9c>
   13688:	e59f105c 	ldr	r1, [pc, #92]	; 136ec <double_to_hexstring.isra.0+0x48c>
   1368c:	e0800003 	add	r0, r0, r3
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
   13690:	e3a02058 	mov	r2, #88	; 0x58
   13694:	e3a0c030 	mov	ip, #48	; 0x30
   13698:	e08f1001 	add	r1, pc, r1
   1369c:	e2811001 	add	r1, r1, #1
   136a0:	ea000001 	b	136ac <double_to_hexstring.isra.0+0x44c>
   136a4:	e1a0c002 	mov	ip, r2
   136a8:	e5f12001 	ldrb	r2, [r1, #1]!
   136ac:	e2833001 	add	r3, r3, #1
   136b0:	e4c0c001 	strb	ip, [r0], #1
   136b4:	e3520000 	cmp	r2, #0
   136b8:	1afffff9 	bne	136a4 <double_to_hexstring.isra.0+0x444>
   136bc:	eaffff0e 	b	132fc <double_to_hexstring.isra.0+0x9c>
   136c0:	00002ab8 	.word	0x00002ab8
   136c4:	00002a58 	.word	0x00002a58
   136c8:	00002a4c 	.word	0x00002a4c
   136cc:	000028d0 	.word	0x000028d0
   136d0:	0000288c 	.word	0x0000288c
   136d4:	00002868 	.word	0x00002868
   136d8:	00002850 	.word	0x00002850
   136dc:	000027f8 	.word	0x000027f8
   136e0:	0000279c 	.word	0x0000279c
   136e4:	00002760 	.word	0x00002760
   136e8:	00002734 	.word	0x00002734
   136ec:	000026e4 	.word	0x000026e4

000136f0 <longlong_to_hexstring.constprop.1>:
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
   136f0:	e92d4030 	push	{r4, r5, lr}
   136f4:	e59d100c 	ldr	r1, [sp, #12]
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
   136f8:	e3110c01 	tst	r1, #256	; 0x100
   136fc:	1a000010 	bne	13744 <longlong_to_hexstring.constprop.1+0x54>
   13700:	e59f5048 	ldr	r5, [pc, #72]	; 13750 <longlong_to_hexstring.constprop.1+0x60>
   13704:	e08f5005 	add	r5, pc, r5
   13708:	e280c01e 	add	ip, r0, #30
	buf[--pos] = 0;
   1370c:	e3a01000 	mov	r1, #0
   13710:	e5c0101f 	strb	r1, [r0, #31]
		unsigned int digit = u % 16;
   13714:	e202400f 	and	r4, r2, #15
		u /= 16;
   13718:	e1a01222 	lsr	r1, r2, #4
   1371c:	e1811e03 	orr	r1, r1, r3, lsl #28
   13720:	e1a0e223 	lsr	lr, r3, #4
   13724:	e1a02001 	mov	r2, r1
   13728:	e1a0300e 	mov	r3, lr
		buf[--pos] = table[digit];
   1372c:	e7d51004 	ldrb	r1, [r5, r4]
   13730:	e1a0000c 	mov	r0, ip
	} while (u != 0);
   13734:	e192e003 	orrs	lr, r2, r3
		buf[--pos] = table[digit];
   13738:	e44c1001 	strb	r1, [ip], #-1
	} while (u != 0);
   1373c:	1afffff4 	bne	13714 <longlong_to_hexstring.constprop.1+0x24>
   13740:	e8bd8030 	pop	{r4, r5, pc}
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
   13744:	e59f5008 	ldr	r5, [pc, #8]	; 13754 <longlong_to_hexstring.constprop.1+0x64>
   13748:	e08f5005 	add	r5, pc, r5
   1374c:	eaffffed 	b	13708 <longlong_to_hexstring.constprop.1+0x18>
   13750:	000026a4 	.word	0x000026a4
   13754:	00002670 	.word	0x00002670

00013758 <double_to_string.constprop.2>:
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
   13758:	e59fc3d0 	ldr	ip, [pc, #976]	; 13b30 <double_to_string.constprop.2+0x3d8>
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
   1375c:	ee102a10 	vmov	r2, s0
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
   13760:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13764:	ec598b10 	vmov	r8, r9, d0
   13768:	e59fe3c4 	ldr	lr, [pc, #964]	; 13b34 <double_to_string.constprop.2+0x3dc>
   1376c:	e08fc00c 	add	ip, pc, ip
   13770:	e1a04000 	mov	r4, r0
   13774:	e24dd01c 	sub	sp, sp, #28
   13778:	e1a0000c 	mov	r0, ip
	if (neg) {
   1377c:	e3580000 	cmp	r8, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
   13780:	e7ea0a59 	ubfx	r0, r9, #20, #11
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
   13784:	e79c500e 	ldr	r5, [ip, lr]
	if (neg) {
   13788:	e2d9e000 	sbcs	lr, r9, #0
	bool neg = !!(u.i & (1ULL << 63));
   1378c:	e1a07009 	mov	r7, r9
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
   13790:	e7f33059 	ubfx	r3, r9, #0, #20
	if (exponent == 0x7ff) {
   13794:	e300e7ff 	movw	lr, #2047	; 0x7ff
		d = -d;
   13798:	b2299102 	eorlt	r9, r9, #-2147483648	; 0x80000000
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
   1379c:	e595c000 	ldr	ip, [r5]
	bool neg = !!(u.i & (1ULL << 63));
   137a0:	ee106a10 	vmov	r6, s0
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
   137a4:	e58dc014 	str	ip, [sp, #20]
		OUT('-');
   137a8:	b3a0c02d 	movlt	ip, #45	; 0x2d
	size_t pos = 0;
   137ac:	a3a0c000 	movge	ip, #0
		OUT('-');
   137b0:	b5c4c000 	strblt	ip, [r4]
   137b4:	b3a0c001 	movlt	ip, #1
	if (exponent == 0x7ff) {
   137b8:	e150000e 	cmp	r0, lr
   137bc:	0a000030 	beq	13884 <double_to_string.constprop.2+0x12c>
	} else if (exponent == 0) {
   137c0:	e3500000 	cmp	r0, #0
   137c4:	1a00001c 	bne	1383c <double_to_string.constprop.2+0xe4>
		if (fraction == 0) {
   137c8:	e1923003 	orrs	r3, r2, r3
   137cc:	0a00004f 	beq	13910 <double_to_string.constprop.2+0x1b8>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
   137d0:	e3110c01 	tst	r1, #256	; 0x100
   137d4:	1a0000a5 	bne	13a70 <double_to_string.constprop.2+0x318>
   137d8:	e084100c 	add	r1, r4, ip
   137dc:	e59f3354 	ldr	r3, [pc, #852]	; 13b38 <double_to_string.constprop.2+0x3e0>
   137e0:	e3a02065 	mov	r2, #101	; 0x65
   137e4:	e3a00064 	mov	r0, #100	; 0x64
   137e8:	e08f3003 	add	r3, pc, r3
   137ec:	e28cc001 	add	ip, ip, #1
   137f0:	e2833001 	add	r3, r3, #1
   137f4:	e4c10001 	strb	r0, [r1], #1
   137f8:	e3520000 	cmp	r2, #0
   137fc:	0a000005 	beq	13818 <double_to_string.constprop.2+0xc0>
   13800:	e1a00002 	mov	r0, r2
   13804:	e5f32001 	ldrb	r2, [r3, #1]!
   13808:	e28cc001 	add	ip, ip, #1
   1380c:	e4c10001 	strb	r0, [r1], #1
   13810:	e3520000 	cmp	r2, #0
   13814:	1afffff9 	bne	13800 <double_to_string.constprop.2+0xa8>
	buf[pos] = 0;
   13818:	e1a00004 	mov	r0, r4
   1381c:	e3a03000 	mov	r3, #0
   13820:	e7c4300c 	strb	r3, [r4, ip]
}
   13824:	e59d2014 	ldr	r2, [sp, #20]
   13828:	e5953000 	ldr	r3, [r5]
   1382c:	e1520003 	cmp	r2, r3
   13830:	1a0000bb 	bne	13b24 <double_to_string.constprop.2+0x3cc>
   13834:	e28dd01c 	add	sp, sp, #28
   13838:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (exponent_signed < -52 || exponent_signed > 52) {
   1383c:	e240eff2 	sub	lr, r0, #968	; 0x3c8
   13840:	e24ee003 	sub	lr, lr, #3
   13844:	e35e0068 	cmp	lr, #104	; 0x68
   13848:	9a00003e 	bls	13948 <double_to_string.constprop.2+0x1f0>
   1384c:	e59f22e8 	ldr	r2, [pc, #744]	; 13b3c <double_to_string.constprop.2+0x3e4>
   13850:	e084100c 	add	r1, r4, ip
   13854:	e3a03072 	mov	r3, #114	; 0x72
			OUTSTR("<range>");
   13858:	e3a0003c 	mov	r0, #60	; 0x3c
   1385c:	e08f2002 	add	r2, pc, r2
   13860:	e2822001 	add	r2, r2, #1
   13864:	ea000001 	b	13870 <double_to_string.constprop.2+0x118>
   13868:	e1a00003 	mov	r0, r3
   1386c:	e5f23001 	ldrb	r3, [r2, #1]!
   13870:	e28cc001 	add	ip, ip, #1
   13874:	e4c10001 	strb	r0, [r1], #1
   13878:	e3530000 	cmp	r3, #0
   1387c:	1afffff9 	bne	13868 <double_to_string.constprop.2+0x110>
   13880:	eaffffe4 	b	13818 <double_to_string.constprop.2+0xc0>
   13884:	e2011c01 	and	r1, r1, #256	; 0x100
		if (fraction == 0) {
   13888:	e1923003 	orrs	r3, r2, r3
   1388c:	1a00000f 	bne	138d0 <double_to_string.constprop.2+0x178>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
   13890:	e3510000 	cmp	r1, #0
   13894:	1a000067 	bne	13a38 <double_to_string.constprop.2+0x2e0>
   13898:	e59f22a0 	ldr	r2, [pc, #672]	; 13b40 <double_to_string.constprop.2+0x3e8>
   1389c:	e084100c 	add	r1, r4, ip
   138a0:	e3a0306e 	mov	r3, #110	; 0x6e
   138a4:	e3a00069 	mov	r0, #105	; 0x69
   138a8:	e08f2002 	add	r2, pc, r2
   138ac:	e2822001 	add	r2, r2, #1
   138b0:	ea000001 	b	138bc <double_to_string.constprop.2+0x164>
   138b4:	e1a00003 	mov	r0, r3
   138b8:	e5f23001 	ldrb	r3, [r2, #1]!
   138bc:	e28cc001 	add	ip, ip, #1
   138c0:	e4c10001 	strb	r0, [r1], #1
   138c4:	e3530000 	cmp	r3, #0
   138c8:	1afffff9 	bne	138b4 <double_to_string.constprop.2+0x15c>
   138cc:	eaffffd1 	b	13818 <double_to_string.constprop.2+0xc0>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
   138d0:	e3510000 	cmp	r1, #0
   138d4:	1a000049 	bne	13a00 <double_to_string.constprop.2+0x2a8>
   138d8:	e59f2264 	ldr	r2, [pc, #612]	; 13b44 <double_to_string.constprop.2+0x3ec>
   138dc:	e084100c 	add	r1, r4, ip
   138e0:	e3a03061 	mov	r3, #97	; 0x61
   138e4:	e3a0006e 	mov	r0, #110	; 0x6e
   138e8:	e08f2002 	add	r2, pc, r2
   138ec:	e2822001 	add	r2, r2, #1
   138f0:	ea000001 	b	138fc <double_to_string.constprop.2+0x1a4>
   138f4:	e1a00003 	mov	r0, r3
   138f8:	e5f23001 	ldrb	r3, [r2, #1]!
   138fc:	e28cc001 	add	ip, ip, #1
   13900:	e4c10001 	strb	r0, [r1], #1
   13904:	e3530000 	cmp	r3, #0
   13908:	1afffff9 	bne	138f4 <double_to_string.constprop.2+0x19c>
   1390c:	eaffffc1 	b	13818 <double_to_string.constprop.2+0xc0>
   13910:	e59f2230 	ldr	r2, [pc, #560]	; 13b48 <double_to_string.constprop.2+0x3f0>
   13914:	e084100c 	add	r1, r4, ip
		if (fraction == 0) {
   13918:	e3a0302e 	mov	r3, #46	; 0x2e
			OUTSTR("0.000000");
   1391c:	e3a00030 	mov	r0, #48	; 0x30
   13920:	e08f2002 	add	r2, pc, r2
   13924:	e2822001 	add	r2, r2, #1
   13928:	ea000001 	b	13934 <double_to_string.constprop.2+0x1dc>
   1392c:	e1a00003 	mov	r0, r3
   13930:	e5f23001 	ldrb	r3, [r2, #1]!
   13934:	e28cc001 	add	ip, ip, #1
   13938:	e4c10001 	strb	r0, [r1], #1
   1393c:	e3530000 	cmp	r3, #0
   13940:	1afffff9 	bne	1392c <double_to_string.constprop.2+0x1d4>
   13944:	eaffffb3 	b	13818 <double_to_string.constprop.2+0xc0>
			OUTREV(0);
   13948:	e1a0c004 	mov	ip, r4
   1394c:	e284a018 	add	sl, r4, #24
				OUTREV('0');
   13950:	e3a0e030 	mov	lr, #48	; 0x30
			OUTREV(0);
   13954:	e3a0b000 	mov	fp, #0
   13958:	e5ecb01f 	strb	fp, [ip, #31]!
				OUTREV('0');
   1395c:	e56ce001 	strb	lr, [ip, #-1]!
			for (int i = 0; i <= 6; i++)
   13960:	e15c000a 	cmp	ip, sl
   13964:	1afffffc 	bne	1395c <double_to_string.constprop.2+0x204>
		int exponent_signed = exponent - 1023;
   13968:	e2400fff 	sub	r0, r0, #1020	; 0x3fc
   1396c:	e2400003 	sub	r0, r0, #3
			if (exponent_signed >= 0) {
   13970:	e3500000 	cmp	r0, #0
				OUTREV('0');
   13974:	b5c4e017 	strblt	lr, [r4, #23]
   13978:	b3a0b017 	movlt	fp, #23
			if (exponent_signed >= 0) {
   1397c:	aa00004c 	bge	13ab4 <double_to_string.constprop.2+0x35c>
				uint32_t frac = ((d - u) * 1000000) + .5;
   13980:	ed9f6b68 	vldr	d6, [pc, #416]	; 13b28 <double_to_string.constprop.2+0x3d0>
   13984:	ec498b15 	vmov	d5, r8, r9
   13988:	eeb67b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
			buf[decimal_spot] = '.';
   1398c:	e3a0302e 	mov	r3, #46	; 0x2e
   13990:	e5c43020 	strb	r3, [r4, #32]
				uint32_t frac = ((d - u) * 1000000) + .5;
   13994:	ee057b06 	vmla.f64	d7, d5, d6
   13998:	eefc7bc7 	vcvt.u32.f64	s15, d7
   1399c:	ee172a90 	vmov	r2, s15
				while (frac != 0) {
   139a0:	e3520000 	cmp	r2, #0
   139a4:	0a00000a 	beq	139d4 <double_to_string.constprop.2+0x27c>
					uint digit = frac % 10;
   139a8:	e30ccccd 	movw	ip, #52429	; 0xcccd
   139ac:	e34ccccc 	movt	ip, #52428	; 0xcccc
   139b0:	e2840027 	add	r0, r4, #39	; 0x27
   139b4:	e3a0e00a 	mov	lr, #10
   139b8:	e083129c 	umull	r1, r3, ip, r2
   139bc:	e1a031a3 	lsr	r3, r3, #3
   139c0:	e061239e 	mls	r1, lr, r3, r2
				while (frac != 0) {
   139c4:	e2532000 	subs	r2, r3, #0
					buf[--i] = digit + '0';
   139c8:	e2813030 	add	r3, r1, #48	; 0x30
   139cc:	e5603001 	strb	r3, [r0, #-1]!
				while (frac != 0) {
   139d0:	1afffff8 	bne	139b8 <double_to_string.constprop.2+0x260>
			if (neg)
   139d4:	e3560000 	cmp	r6, #0
   139d8:	e2d73000 	sbcs	r3, r7, #0
   139dc:	a084000b 	addge	r0, r4, fp
   139e0:	aaffff8f 	bge	13824 <double_to_string.constprop.2+0xcc>
				OUTREV('-');
   139e4:	e35b0000 	cmp	fp, #0
   139e8:	124bb001 	subne	fp, fp, #1
   139ec:	13a0302d 	movne	r3, #45	; 0x2d
   139f0:	1084000b 	addne	r0, r4, fp
   139f4:	01a00004 	moveq	r0, r4
   139f8:	17c4300b 	strbne	r3, [r4, fp]
   139fc:	eaffff88 	b	13824 <double_to_string.constprop.2+0xcc>
   13a00:	e59f2144 	ldr	r2, [pc, #324]	; 13b4c <double_to_string.constprop.2+0x3f4>
   13a04:	e084100c 	add	r1, r4, ip
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
   13a08:	e3a03041 	mov	r3, #65	; 0x41
   13a0c:	e3a0004e 	mov	r0, #78	; 0x4e
   13a10:	e08f2002 	add	r2, pc, r2
   13a14:	e2822001 	add	r2, r2, #1
   13a18:	ea000001 	b	13a24 <double_to_string.constprop.2+0x2cc>
   13a1c:	e1a00003 	mov	r0, r3
   13a20:	e5f23001 	ldrb	r3, [r2, #1]!
   13a24:	e28cc001 	add	ip, ip, #1
   13a28:	e4c10001 	strb	r0, [r1], #1
   13a2c:	e3530000 	cmp	r3, #0
   13a30:	1afffff9 	bne	13a1c <double_to_string.constprop.2+0x2c4>
   13a34:	eaffff77 	b	13818 <double_to_string.constprop.2+0xc0>
   13a38:	e59f2110 	ldr	r2, [pc, #272]	; 13b50 <double_to_string.constprop.2+0x3f8>
   13a3c:	e084100c 	add	r1, r4, ip
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
   13a40:	e3a0304e 	mov	r3, #78	; 0x4e
   13a44:	e3a00049 	mov	r0, #73	; 0x49
   13a48:	e08f2002 	add	r2, pc, r2
   13a4c:	e2822001 	add	r2, r2, #1
   13a50:	ea000001 	b	13a5c <double_to_string.constprop.2+0x304>
   13a54:	e1a00003 	mov	r0, r3
   13a58:	e5f23001 	ldrb	r3, [r2, #1]!
   13a5c:	e28cc001 	add	ip, ip, #1
   13a60:	e4c10001 	strb	r0, [r1], #1
   13a64:	e3530000 	cmp	r3, #0
   13a68:	1afffff9 	bne	13a54 <double_to_string.constprop.2+0x2fc>
   13a6c:	eaffff69 	b	13818 <double_to_string.constprop.2+0xc0>
   13a70:	e084100c 	add	r1, r4, ip
   13a74:	e59f30d8 	ldr	r3, [pc, #216]	; 13b54 <double_to_string.constprop.2+0x3fc>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
   13a78:	e3a02045 	mov	r2, #69	; 0x45
   13a7c:	e3a00044 	mov	r0, #68	; 0x44
   13a80:	e08f3003 	add	r3, pc, r3
   13a84:	e28cc001 	add	ip, ip, #1
   13a88:	e2833001 	add	r3, r3, #1
   13a8c:	e4c10001 	strb	r0, [r1], #1
   13a90:	e3520000 	cmp	r2, #0
   13a94:	0affff5f 	beq	13818 <double_to_string.constprop.2+0xc0>
   13a98:	e1a00002 	mov	r0, r2
   13a9c:	e5f32001 	ldrb	r2, [r3, #1]!
   13aa0:	e28cc001 	add	ip, ip, #1
   13aa4:	e4c10001 	strb	r0, [r1], #1
   13aa8:	e3520000 	cmp	r2, #0
   13aac:	1afffff9 	bne	13a98 <double_to_string.constprop.2+0x340>
   13ab0:	eaffff58 	b	13818 <double_to_string.constprop.2+0xc0>
				u >>= (52 - exponent_signed);
   13ab4:	e2600034 	rsb	r0, r0, #52	; 0x34
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
   13ab8:	e28dc018 	add	ip, sp, #24
				u >>= (52 - exponent_signed);
   13abc:	e260e020 	rsb	lr, r0, #32
				u |= (1ULL<<52);
   13ac0:	e383b601 	orr	fp, r3, #1048576	; 0x100000
				u >>= (52 - exponent_signed);
   13ac4:	e1a0a032 	lsr	sl, r2, r0
   13ac8:	e2403020 	sub	r3, r0, #32
   13acc:	e18aae1b 	orr	sl, sl, fp, lsl lr
				u |= (1ULL<<52);
   13ad0:	e3a02000 	mov	r2, #0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
   13ad4:	e56c2005 	strb	r2, [ip, #-5]!
				u >>= (52 - exponent_signed);
   13ad8:	e18aa33b 	orr	sl, sl, fp, lsr r3
   13adc:	e1a0b03b 	lsr	fp, fp, r0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
   13ae0:	e58d1004 	str	r1, [sp, #4]
   13ae4:	e1a0300b 	mov	r3, fp
   13ae8:	e3a01019 	mov	r1, #25
   13aec:	e1a0200a 	mov	r2, sl
   13af0:	e58dc008 	str	ip, [sp, #8]
   13af4:	e58d1000 	str	r1, [sp]
   13af8:	e1a00004 	mov	r0, r4
   13afc:	ebfffd59 	bl	13068 <longlong_to_string>
   13b00:	e1a0100b 	mov	r1, fp
				pos = s - buf;
   13b04:	e040b004 	sub	fp, r0, r4
   13b08:	e1a0000a 	mov	r0, sl
   13b0c:	fa0003e5 	blx	14aa8 <__aeabi_ul2d>
   13b10:	ec498b17 	vmov	d7, r8, r9
   13b14:	ec410b16 	vmov	d6, r0, r1
   13b18:	ee377b46 	vsub.f64	d7, d7, d6
   13b1c:	ec598b17 	vmov	r8, r9, d7
   13b20:	eaffff96 	b	13980 <double_to_string.constprop.2+0x228>
}
   13b24:	eb0002a7 	bl	145c8 <__stack_chk_fail>
   13b28:	00000000 	.word	0x00000000
   13b2c:	412e8480 	.word	0x412e8480
   13b30:	000028a8 	.word	0x000028a8
   13b34:	0000000c 	.word	0x0000000c
   13b38:	0000259c 	.word	0x0000259c
   13b3c:	00002544 	.word	0x00002544
   13b40:	000024bc 	.word	0x000024bc
   13b44:	00002484 	.word	0x00002484
   13b48:	00002474 	.word	0x00002474
   13b4c:	00002360 	.word	0x00002360
   13b50:	00002320 	.word	0x00002320
   13b54:	00002308 	.word	0x00002308

00013b58 <_printf_engine>:
		str[wlen] = '\0';
	return wlen;
}

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
   13b58:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b5c:	e1a0b000 	mov	fp, r0
   13b60:	e59fc8c0 	ldr	ip, [pc, #2240]	; 14428 <_printf_engine+0x8d0>
   13b64:	e24dd05c 	sub	sp, sp, #92	; 0x5c
   13b68:	e59fe8bc 	ldr	lr, [pc, #2236]	; 1442c <_printf_engine+0x8d4>
   13b6c:	e1a00002 	mov	r0, r2
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if (s == 0)
					s = "<null>";
   13b70:	e59f28b8 	ldr	r2, [pc, #2232]	; 14430 <_printf_engine+0x8d8>
{
   13b74:	e08fc00c 	add	ip, pc, ip
   13b78:	e1a0a001 	mov	sl, r1
   13b7c:	e58d3014 	str	r3, [sp, #20]
					s = "<null>";
   13b80:	e08f2002 	add	r2, pc, r2
   13b84:	e58d201c 	str	r2, [sp, #28]
{
   13b88:	e1a0300c 	mov	r3, ip
	size_t chars_written = 0;
   13b8c:	e3a06000 	mov	r6, #0
{
   13b90:	e79c300e 	ldr	r3, [ip, lr]
   13b94:	e58d3018 	str	r3, [sp, #24]
   13b98:	e5933000 	ldr	r3, [r3]
   13b9c:	e58d3054 	str	r3, [sp, #84]	; 0x54
		while ((c = *fmt++) != 0) {
   13ba0:	e5d03000 	ldrb	r3, [r0]
		signchar = '\0';
   13ba4:	e3a01000 	mov	r1, #0
		while ((c = *fmt++) != 0) {
   13ba8:	e2804001 	add	r4, r0, #1
		signchar = '\0';
   13bac:	e5cd102f 	strb	r1, [sp, #47]	; 0x2f
		while ((c = *fmt++) != 0) {
   13bb0:	e1530001 	cmp	r3, r1
   13bb4:	1a000004 	bne	13bcc <_printf_engine+0x74>
   13bb8:	ea00006e 	b	13d78 <_printf_engine+0x220>
   13bbc:	e0441000 	sub	r1, r4, r0
   13bc0:	e4d43001 	ldrb	r3, [r4], #1
   13bc4:	e3530000 	cmp	r3, #0
   13bc8:	0a00006b 	beq	13d7c <_printf_engine+0x224>
			if (c == '%')
   13bcc:	e3530025 	cmp	r3, #37	; 0x25
   13bd0:	1afffff9 	bne	13bbc <_printf_engine+0x64>
		OUTPUT_STRING(s, string_len);
   13bd4:	e1a0200a 	mov	r2, sl
   13bd8:	e12fff3b 	blx	fp
   13bdc:	e2503000 	subs	r3, r0, #0
   13be0:	ba00006b 	blt	13d94 <_printf_engine+0x23c>
		format_num = 0;
   13be4:	e3a05000 	mov	r5, #0
		OUTPUT_STRING(s, string_len);
   13be8:	e0866003 	add	r6, r6, r3
		flags = 0;
   13bec:	e1a09005 	mov	r9, r5
		c = *fmt++;
   13bf0:	e4d48001 	ldrb	r8, [r4], #1
		if (c == 0)
   13bf4:	e3580000 	cmp	r8, #0
   13bf8:	0a000064 	beq	13d90 <_printf_engine+0x238>
		switch (c) {
   13bfc:	e2483020 	sub	r3, r8, #32
   13c00:	e353005a 	cmp	r3, #90	; 0x5a
   13c04:	908ff103 	addls	pc, pc, r3, lsl #2
   13c08:	ea000168 	b	141b0 <_printf_engine+0x658>
   13c0c:	ea000119 	b	14078 <_printf_engine+0x520>
   13c10:	ea000166 	b	141b0 <_printf_engine+0x658>
   13c14:	ea000165 	b	141b0 <_printf_engine+0x658>
   13c18:	ea000108 	b	14040 <_printf_engine+0x4e8>
   13c1c:	ea000163 	b	141b0 <_printf_engine+0x658>
   13c20:	ea000108 	b	14048 <_printf_engine+0x4f0>
   13c24:	ea000161 	b	141b0 <_printf_engine+0x658>
   13c28:	ea000160 	b	141b0 <_printf_engine+0x658>
   13c2c:	ea00015f 	b	141b0 <_printf_engine+0x658>
   13c30:	ea00015e 	b	141b0 <_printf_engine+0x658>
   13c34:	ea00015d 	b	141b0 <_printf_engine+0x658>
   13c38:	ea000110 	b	14080 <_printf_engine+0x528>
   13c3c:	ea00015b 	b	141b0 <_printf_engine+0x658>
   13c40:	ea000110 	b	14088 <_printf_engine+0x530>
   13c44:	eaffffe9 	b	13bf0 <_printf_engine+0x98>
   13c48:	ea000158 	b	141b0 <_printf_engine+0x658>
   13c4c:	ea00010f 	b	14090 <_printf_engine+0x538>
   13c50:	ea00010e 	b	14090 <_printf_engine+0x538>
   13c54:	ea00010d 	b	14090 <_printf_engine+0x538>
   13c58:	ea00010c 	b	14090 <_printf_engine+0x538>
   13c5c:	ea00010b 	b	14090 <_printf_engine+0x538>
   13c60:	ea00010a 	b	14090 <_printf_engine+0x538>
   13c64:	ea000109 	b	14090 <_printf_engine+0x538>
   13c68:	ea000108 	b	14090 <_printf_engine+0x538>
   13c6c:	ea000107 	b	14090 <_printf_engine+0x538>
   13c70:	ea000106 	b	14090 <_printf_engine+0x538>
   13c74:	ea00014d 	b	141b0 <_printf_engine+0x658>
   13c78:	ea00014c 	b	141b0 <_printf_engine+0x658>
   13c7c:	ea00014b 	b	141b0 <_printf_engine+0x658>
   13c80:	ea00014a 	b	141b0 <_printf_engine+0x658>
   13c84:	ea000149 	b	141b0 <_printf_engine+0x658>
   13c88:	ea000148 	b	141b0 <_printf_engine+0x658>
   13c8c:	ea000147 	b	141b0 <_printf_engine+0x658>
   13c90:	ea0000c1 	b	13f9c <_printf_engine+0x444>
   13c94:	ea000145 	b	141b0 <_printf_engine+0x658>
   13c98:	ea000144 	b	141b0 <_printf_engine+0x658>
   13c9c:	ea000143 	b	141b0 <_printf_engine+0x658>
   13ca0:	ea000142 	b	141b0 <_printf_engine+0x658>
   13ca4:	ea000096 	b	13f04 <_printf_engine+0x3ac>
   13ca8:	ea000140 	b	141b0 <_printf_engine+0x658>
   13cac:	ea00013f 	b	141b0 <_printf_engine+0x658>
   13cb0:	ea00013e 	b	141b0 <_printf_engine+0x658>
   13cb4:	ea00013d 	b	141b0 <_printf_engine+0x658>
   13cb8:	ea00013c 	b	141b0 <_printf_engine+0x658>
   13cbc:	ea00013b 	b	141b0 <_printf_engine+0x658>
   13cc0:	ea00013a 	b	141b0 <_printf_engine+0x658>
   13cc4:	ea000139 	b	141b0 <_printf_engine+0x658>
   13cc8:	ea000138 	b	141b0 <_printf_engine+0x658>
   13ccc:	ea000137 	b	141b0 <_printf_engine+0x658>
   13cd0:	ea000136 	b	141b0 <_printf_engine+0x658>
   13cd4:	ea000135 	b	141b0 <_printf_engine+0x658>
   13cd8:	ea000134 	b	141b0 <_printf_engine+0x658>
   13cdc:	ea000133 	b	141b0 <_printf_engine+0x658>
   13ce0:	ea000132 	b	141b0 <_printf_engine+0x658>
   13ce4:	ea000131 	b	141b0 <_printf_engine+0x658>
   13ce8:	ea000130 	b	141b0 <_printf_engine+0x658>
   13cec:	ea0000ee 	b	140ac <_printf_engine+0x554>
   13cf0:	ea00012e 	b	141b0 <_printf_engine+0x658>
   13cf4:	ea00012d 	b	141b0 <_printf_engine+0x658>
   13cf8:	ea00012c 	b	141b0 <_printf_engine+0x658>
   13cfc:	ea00012b 	b	141b0 <_printf_engine+0x658>
   13d00:	ea00012a 	b	141b0 <_printf_engine+0x658>
   13d04:	ea000129 	b	141b0 <_printf_engine+0x658>
   13d08:	ea000128 	b	141b0 <_printf_engine+0x658>
   13d0c:	ea000127 	b	141b0 <_printf_engine+0x658>
   13d10:	ea0000a2 	b	13fa0 <_printf_engine+0x448>
   13d14:	ea000125 	b	141b0 <_printf_engine+0x658>
   13d18:	ea0000e8 	b	140c0 <_printf_engine+0x568>
   13d1c:	ea00010a 	b	1414c <_printf_engine+0x5f4>
   13d20:	ea000122 	b	141b0 <_printf_engine+0x658>
   13d24:	ea000077 	b	13f08 <_printf_engine+0x3b0>
   13d28:	ea000120 	b	141b0 <_printf_engine+0x658>
   13d2c:	ea00011b 	b	141a0 <_printf_engine+0x648>
   13d30:	ea000105 	b	1414c <_printf_engine+0x5f4>
   13d34:	ea0000f3 	b	14108 <_printf_engine+0x5b0>
   13d38:	ea00011c 	b	141b0 <_printf_engine+0x658>
   13d3c:	ea0000ed 	b	140f8 <_printf_engine+0x5a0>
   13d40:	ea00011a 	b	141b0 <_printf_engine+0x658>
   13d44:	ea0000a0 	b	13fcc <_printf_engine+0x474>
   13d48:	ea000118 	b	141b0 <_printf_engine+0x658>
   13d4c:	ea000018 	b	13db4 <_printf_engine+0x25c>
   13d50:	ea000116 	b	141b0 <_printf_engine+0x658>
   13d54:	ea000115 	b	141b0 <_printf_engine+0x658>
   13d58:	ea000107 	b	1417c <_printf_engine+0x624>
   13d5c:	ea0000eb 	b	14110 <_printf_engine+0x5b8>
   13d60:	ea0000ec 	b	14118 <_printf_engine+0x5c0>
   13d64:	ea000111 	b	141b0 <_printf_engine+0x658>
   13d68:	ea000110 	b	141b0 <_printf_engine+0x658>
   13d6c:	ea000011 	b	13db8 <_printf_engine+0x260>
   13d70:	ea00010e 	b	141b0 <_printf_engine+0x658>
   13d74:	ea0000af 	b	14038 <_printf_engine+0x4e0>
   13d78:	e1a01003 	mov	r1, r3
		OUTPUT_STRING(s, string_len);
   13d7c:	e1a0200a 	mov	r2, sl
   13d80:	e12fff3b 	blx	fp
   13d84:	e2503000 	subs	r3, r0, #0
   13d88:	ba000001 	blt	13d94 <_printf_engine+0x23c>
   13d8c:	e0866003 	add	r6, r6, r3

#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
	return (err < 0) ? err : (int)chars_written;
   13d90:	e1a03006 	mov	r3, r6
}
   13d94:	e1a00003 	mov	r0, r3
   13d98:	e59d3018 	ldr	r3, [sp, #24]
   13d9c:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
   13da0:	e5933000 	ldr	r3, [r3]
   13da4:	e1520003 	cmp	r2, r3
   13da8:	1a00019d 	bne	14424 <_printf_engine+0x8cc>
   13dac:	e28dd05c 	add	sp, sp, #92	; 0x5c
   13db0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= LONGFLAG | ALTFLAG;
   13db4:	e3899081 	orr	r9, r9, #129	; 0x81
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
   13db8:	e3190002 	tst	r9, #2
   13dbc:	159d3014 	ldrne	r3, [sp, #20]
   13dc0:	0a00008c 	beq	13ff8 <_printf_engine+0x4a0>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   13dc4:	e2833007 	add	r3, r3, #7
   13dc8:	e3c33007 	bic	r3, r3, #7
   13dcc:	e2832008 	add	r2, r3, #8
   13dd0:	e58d2014 	str	r2, [sp, #20]
   13dd4:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
   13dd8:	e58d9000 	str	r9, [sp]
   13ddc:	e28d0034 	add	r0, sp, #52	; 0x34
   13de0:	ebfffe42 	bl	136f0 <longlong_to_hexstring.constprop.1>
				if (flags & ALTFLAG) {
   13de4:	e3190080 	tst	r9, #128	; 0x80
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
   13de8:	e1a08000 	mov	r8, r0
				if (flags & ALTFLAG) {
   13dec:	0a00004f 	beq	13f30 <_printf_engine+0x3d8>
					OUTPUT_CHAR('0');
   13df0:	e28d7058 	add	r7, sp, #88	; 0x58
   13df4:	e3a03030 	mov	r3, #48	; 0x30
   13df8:	e1a0200a 	mov	r2, sl
   13dfc:	e3a01001 	mov	r1, #1
   13e00:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
   13e04:	e1a00007 	mov	r0, r7
   13e08:	e12fff3b 	blx	fp
   13e0c:	e2503000 	subs	r3, r0, #0
   13e10:	baffffdf 	blt	13d94 <_printf_engine+0x23c>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
   13e14:	e3190c01 	tst	r9, #256	; 0x100
					OUTPUT_CHAR('0');
   13e18:	e0836006 	add	r6, r3, r6
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
   13e1c:	e1a00007 	mov	r0, r7
   13e20:	03a03078 	moveq	r3, #120	; 0x78
   13e24:	13a03058 	movne	r3, #88	; 0x58
   13e28:	e1a0200a 	mov	r2, sl
   13e2c:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
   13e30:	e3a01001 	mov	r1, #1
   13e34:	e12fff3b 	blx	fp
   13e38:	e2503000 	subs	r3, r0, #0
   13e3c:	baffffd4 	blt	13d94 <_printf_engine+0x23c>
   13e40:	e0836006 	add	r6, r3, r6
			OUTPUT_STRING(s, SIZE_MAX);
   13e44:	e1a00008 	mov	r0, r8
		if (flags & LEFTFORMATFLAG) {
   13e48:	e3190b02 	tst	r9, #2048	; 0x800
   13e4c:	1a00003a 	bne	13f3c <_printf_engine+0x3e4>
   13e50:	e2097a01 	and	r7, r9, #4096	; 0x1000
   13e54:	e58d7020 	str	r7, [sp, #32]
			string_len = strlen(s);
   13e58:	eb00022c 	bl	14710 <strlen>
			if (signchar != '\0' && format_num > 0)
   13e5c:	e5dd302f 	ldrb	r3, [sp, #47]	; 0x2f
			string_len = strlen(s);
   13e60:	e1a09000 	mov	r9, r0
			if (signchar != '\0' && format_num > 0)
   13e64:	e3530000 	cmp	r3, #0
   13e68:	0a00006e 	beq	14028 <_printf_engine+0x4d0>
   13e6c:	e3550000 	cmp	r5, #0
   13e70:	0a0000fd 	beq	1426c <_printf_engine+0x714>
				format_num--;
   13e74:	e2455001 	sub	r5, r5, #1
			if (flags & LEADZEROFLAG && signchar != '\0')
   13e78:	e3570000 	cmp	r7, #0
   13e7c:	0a000165 	beq	14418 <_printf_engine+0x8c0>
				OUTPUT_CHAR(signchar);
   13e80:	e28d7058 	add	r7, sp, #88	; 0x58
   13e84:	e1a0200a 	mov	r2, sl
   13e88:	e3a01001 	mov	r1, #1
   13e8c:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
   13e90:	e1a00007 	mov	r0, r7
   13e94:	e12fff3b 	blx	fp
   13e98:	e2503000 	subs	r3, r0, #0
   13e9c:	baffffbc 	blt	13d94 <_printf_engine+0x23c>
   13ea0:	e0866003 	add	r6, r6, r3
			for (; format_num > string_len; format_num--)
   13ea4:	e1590005 	cmp	r9, r5
   13ea8:	2a0000e2 	bcs	14238 <_printf_engine+0x6e0>
   13eac:	e59d3020 	ldr	r3, [sp, #32]
   13eb0:	e58d4024 	str	r4, [sp, #36]	; 0x24
   13eb4:	e1a04009 	mov	r4, r9
   13eb8:	e3530000 	cmp	r3, #0
   13ebc:	e1a09007 	mov	r9, r7
   13ec0:	13a03030 	movne	r3, #48	; 0x30
   13ec4:	03a03020 	moveq	r3, #32
   13ec8:	e1a07003 	mov	r7, r3
   13ecc:	ea000003 	b	13ee0 <_printf_engine+0x388>
   13ed0:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
   13ed4:	e0866000 	add	r6, r6, r0
			for (; format_num > string_len; format_num--)
   13ed8:	e1540005 	cmp	r4, r5
   13edc:	0a0000c5 	beq	141f8 <_printf_engine+0x6a0>
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
   13ee0:	e1a0200a 	mov	r2, sl
   13ee4:	e3a01001 	mov	r1, #1
   13ee8:	e1a00009 	mov	r0, r9
   13eec:	e5cd7030 	strb	r7, [sp, #48]	; 0x30
   13ef0:	e12fff3b 	blx	fp
   13ef4:	e3500000 	cmp	r0, #0
   13ef8:	aafffff4 	bge	13ed0 <_printf_engine+0x378>
   13efc:	e1a03000 	mov	r3, r0
   13f00:	eaffffa3 	b	13d94 <_printf_engine+0x23c>
				flags |= CAPSFLAG;
   13f04:	e3899c01 	orr	r9, r9, #256	; 0x100
				double d = va_arg(ap, double);
   13f08:	e59d3014 	ldr	r3, [sp, #20]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
   13f0c:	e1a01009 	mov	r1, r9
   13f10:	e28d0034 	add	r0, sp, #52	; 0x34
				double d = va_arg(ap, double);
   13f14:	e2833007 	add	r3, r3, #7
   13f18:	e3c33007 	bic	r3, r3, #7
   13f1c:	e2832008 	add	r2, r3, #8
   13f20:	e58d2014 	str	r2, [sp, #20]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
   13f24:	ed930b00 	vldr	d0, [r3]
   13f28:	ebfffe0a 	bl	13758 <double_to_string.constprop.2>
   13f2c:	e1a08000 	mov	r8, r0
			OUTPUT_STRING(s, SIZE_MAX);
   13f30:	e1a00008 	mov	r0, r8
		if (flags & LEFTFORMATFLAG) {
   13f34:	e3190b02 	tst	r9, #2048	; 0x800
   13f38:	0affffc4 	beq	13e50 <_printf_engine+0x2f8>
			OUTPUT_STRING(s, SIZE_MAX);
   13f3c:	e1a0200a 	mov	r2, sl
   13f40:	e3e01000 	mvn	r1, #0
   13f44:	e12fff3b 	blx	fp
   13f48:	e2503000 	subs	r3, r0, #0
   13f4c:	baffff90 	blt	13d94 <_printf_engine+0x23c>
   13f50:	e1a08003 	mov	r8, r3
   13f54:	e0866003 	add	r6, r6, r3
			for (; format_num > written; format_num--)
   13f58:	e1530005 	cmp	r3, r5
   13f5c:	2a000023 	bcs	13ff0 <_printf_engine+0x498>
   13f60:	e28d7030 	add	r7, sp, #48	; 0x30
				OUTPUT_CHAR(' ');
   13f64:	e3a09020 	mov	r9, #32
   13f68:	ea000003 	b	13f7c <_printf_engine+0x424>
			for (; format_num > written; format_num--)
   13f6c:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(' ');
   13f70:	e0866000 	add	r6, r6, r0
			for (; format_num > written; format_num--)
   13f74:	e1580005 	cmp	r8, r5
   13f78:	0a00001c 	beq	13ff0 <_printf_engine+0x498>
				OUTPUT_CHAR(' ');
   13f7c:	e1a0200a 	mov	r2, sl
   13f80:	e3a01001 	mov	r1, #1
   13f84:	e1a00007 	mov	r0, r7
   13f88:	e5cd9030 	strb	r9, [sp, #48]	; 0x30
   13f8c:	e12fff3b 	blx	fp
   13f90:	e3500000 	cmp	r0, #0
   13f94:	aafffff4 	bge	13f6c <_printf_engine+0x414>
   13f98:	eaffffd7 	b	13efc <_printf_engine+0x3a4>
				flags |= CAPSFLAG;
   13f9c:	e3899c01 	orr	r9, r9, #256	; 0x100
				double d = va_arg(ap, double);
   13fa0:	e59d3014 	ldr	r3, [sp, #20]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
   13fa4:	e1a01009 	mov	r1, r9
   13fa8:	e28d0034 	add	r0, sp, #52	; 0x34
				double d = va_arg(ap, double);
   13fac:	e2833007 	add	r3, r3, #7
   13fb0:	e3c33007 	bic	r3, r3, #7
   13fb4:	e2832008 	add	r2, r3, #8
   13fb8:	e58d2014 	str	r2, [sp, #20]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
   13fbc:	ed930b00 	vldr	d0, [r3]
   13fc0:	ebfffca6 	bl	13260 <double_to_hexstring.isra.0>
   13fc4:	e1a08000 	mov	r8, r0
				goto _output_string;
   13fc8:	eaffffd8 	b	13f30 <_printf_engine+0x3d8>
				ptr = va_arg(ap, void *);
   13fcc:	e59d3014 	ldr	r3, [sp, #20]
				if (flags & LONGLONGFLAG)
   13fd0:	e3190002 	tst	r9, #2
				ptr = va_arg(ap, void *);
   13fd4:	e2832004 	add	r2, r3, #4
   13fd8:	e5933000 	ldr	r3, [r3]
				if (flags & LONGLONGFLAG)
   13fdc:	0a0000bc 	beq	142d4 <_printf_engine+0x77c>
				ptr = va_arg(ap, void *);
   13fe0:	e58d2014 	str	r2, [sp, #20]
					*(long long *)ptr = chars_written;
   13fe4:	e3a02000 	mov	r2, #0
   13fe8:	e5836000 	str	r6, [r3]
   13fec:	e5832004 	str	r2, [r3, #4]
				ptr = va_arg(ap, void *);
   13ff0:	e1a00004 	mov	r0, r4
   13ff4:	eafffee9 	b	13ba0 <_printf_engine+0x48>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   13ff8:	e3190001 	tst	r9, #1
   13ffc:	1a000094 	bne	14254 <_printf_engine+0x6fc>
   14000:	e3190008 	tst	r9, #8
   14004:	1a0000bf 	bne	14308 <_printf_engine+0x7b0>
   14008:	e3190004 	tst	r9, #4
   1400c:	0a0000d0 	beq	14354 <_printf_engine+0x7fc>
   14010:	e59d1014 	ldr	r1, [sp, #20]
   14014:	e3a03000 	mov	r3, #0
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
   14018:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   1401c:	e15120b4 	ldrh	r2, [r1, #-4]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
   14020:	e58d1014 	str	r1, [sp, #20]
   14024:	eaffff6b 	b	13dd8 <_printf_engine+0x280>
			for (; format_num > string_len; format_num--)
   14028:	e1550000 	cmp	r5, r0
   1402c:	9a000072 	bls	141fc <_printf_engine+0x6a4>
   14030:	e28d7030 	add	r7, sp, #48	; 0x30
   14034:	eaffff9c 	b	13eac <_printf_engine+0x354>
				flags |= SIZETFLAG;
   14038:	e3899010 	orr	r9, r9, #16
				goto next_format;
   1403c:	eafffeeb 	b	13bf0 <_printf_engine+0x98>
				flags |= ALTFLAG;
   14040:	e3899080 	orr	r9, r9, #128	; 0x80
				goto next_format;
   14044:	eafffee9 	b	13bf0 <_printf_engine+0x98>
				OUTPUT_CHAR('%');
   14048:	e28d7058 	add	r7, sp, #88	; 0x58
   1404c:	e3a03025 	mov	r3, #37	; 0x25
   14050:	e1a0200a 	mov	r2, sl
   14054:	e3a01001 	mov	r1, #1
   14058:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
   1405c:	e1a00007 	mov	r0, r7
   14060:	e12fff3b 	blx	fp
   14064:	e2503000 	subs	r3, r0, #0
   14068:	baffff49 	blt	13d94 <_printf_engine+0x23c>
				OUTPUT_CHAR(c);
   1406c:	e0836006 	add	r6, r3, r6
				ptr = va_arg(ap, void *);
   14070:	e1a00004 	mov	r0, r4
   14074:	eafffec9 	b	13ba0 <_printf_engine+0x48>
				flags |= BLANKPOSFLAG;
   14078:	e3899a02 	orr	r9, r9, #8192	; 0x2000
				goto next_format;
   1407c:	eafffedb 	b	13bf0 <_printf_engine+0x98>
				flags |= SHOWSIGNFLAG;
   14080:	e3899c02 	orr	r9, r9, #512	; 0x200
				goto next_format;
   14084:	eafffed9 	b	13bf0 <_printf_engine+0x98>
				flags |= LEFTFORMATFLAG;
   14088:	e3899b02 	orr	r9, r9, #2048	; 0x800
				goto next_format;
   1408c:	eafffed7 	b	13bf0 <_printf_engine+0x98>
				if (c == '0' && format_num == 0)
   14090:	e3580030 	cmp	r8, #48	; 0x30
   14094:	03550000 	cmpeq	r5, #0
				format_num += c - '0';
   14098:	e3a0300a 	mov	r3, #10
   1409c:	e2488030 	sub	r8, r8, #48	; 0x30
					flags |= LEADZEROFLAG;
   140a0:	03899a01 	orreq	r9, r9, #4096	; 0x1000
				format_num += c - '0';
   140a4:	e0258593 	mla	r5, r3, r5, r8
				goto next_format;
   140a8:	eafffed0 	b	13bf0 <_printf_engine+0x98>
				flags |= CAPSFLAG;
   140ac:	e3899c01 	orr	r9, r9, #256	; 0x100
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
   140b0:	e3190002 	tst	r9, #2
   140b4:	159d3014 	ldrne	r3, [sp, #20]
   140b8:	1affff41 	bne	13dc4 <_printf_engine+0x26c>
   140bc:	eaffffcd 	b	13ff8 <_printf_engine+0x4a0>
				uc = va_arg(ap, unsigned int);
   140c0:	e59d5014 	ldr	r5, [sp, #20]
   140c4:	e28d7058 	add	r7, sp, #88	; 0x58
				OUTPUT_CHAR(uc);
   140c8:	e1a0200a 	mov	r2, sl
   140cc:	e3a01001 	mov	r1, #1
				uc = va_arg(ap, unsigned int);
   140d0:	e5953000 	ldr	r3, [r5]
   140d4:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
				OUTPUT_CHAR(uc);
   140d8:	e1a00007 	mov	r0, r7
   140dc:	e12fff3b 	blx	fp
   140e0:	e2503000 	subs	r3, r0, #0
   140e4:	baffff2a 	blt	13d94 <_printf_engine+0x23c>
				uc = va_arg(ap, unsigned int);
   140e8:	e2852004 	add	r2, r5, #4
				OUTPUT_CHAR(uc);
   140ec:	e0866003 	add	r6, r6, r3
				uc = va_arg(ap, unsigned int);
   140f0:	e58d2014 	str	r2, [sp, #20]
				break;
   140f4:	eaffffbd 	b	13ff0 <_printf_engine+0x498>
				if (flags & LONGFLAG)
   140f8:	e3190001 	tst	r9, #1
					flags |= LONGLONGFLAG;
   140fc:	13899002 	orrne	r9, r9, #2
				flags |= LONGFLAG;
   14100:	e3899001 	orr	r9, r9, #1
				goto next_format;
   14104:	eafffeb9 	b	13bf0 <_printf_engine+0x98>
				flags |= INTMAXFLAG;
   14108:	e3899020 	orr	r9, r9, #32
				goto next_format;
   1410c:	eafffeb7 	b	13bf0 <_printf_engine+0x98>
				flags |= PTRDIFFFLAG;
   14110:	e3899040 	orr	r9, r9, #64	; 0x40
				goto next_format;
   14114:	eafffeb5 	b	13bf0 <_printf_engine+0x98>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
   14118:	e3190002 	tst	r9, #2
   1411c:	159d3014 	ldrne	r3, [sp, #20]
   14120:	1a000055 	bne	1427c <_printf_engine+0x724>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14124:	e3190001 	tst	r9, #1
   14128:	1a000082 	bne	14338 <_printf_engine+0x7e0>
   1412c:	e3190008 	tst	r9, #8
   14130:	0a000098 	beq	14398 <_printf_engine+0x840>
   14134:	e59d1014 	ldr	r1, [sp, #20]
   14138:	e3a03000 	mov	r3, #0
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
   1413c:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14140:	e5512004 	ldrb	r2, [r1, #-4]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
   14144:	e58d1014 	str	r1, [sp, #20]
   14148:	ea000050 	b	14290 <_printf_engine+0x738>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   1414c:	e3190002 	tst	r9, #2
   14150:	1a000057 	bne	142b4 <_printf_engine+0x75c>
   14154:	e3190001 	tst	r9, #1
   14158:	1a000070 	bne	14320 <_printf_engine+0x7c8>
   1415c:	e3190008 	tst	r9, #8
   14160:	0a000084 	beq	14378 <_printf_engine+0x820>
   14164:	e59d1014 	ldr	r1, [sp, #20]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
   14168:	e2811004 	add	r1, r1, #4
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   1416c:	e15120d4 	ldrsb	r2, [r1, #-4]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
   14170:	e58d1014 	str	r1, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14174:	e1a03fc2 	asr	r3, r2, #31
   14178:	ea000053 	b	142cc <_printf_engine+0x774>
				s = va_arg(ap, const char *);
   1417c:	e59d3014 	ldr	r3, [sp, #20]
				flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
   14180:	e3c99a01 	bic	r9, r9, #4096	; 0x1000
				s = va_arg(ap, const char *);
   14184:	e2833004 	add	r3, r3, #4
   14188:	e5138004 	ldr	r8, [r3, #-4]
   1418c:	e58d3014 	str	r3, [sp, #20]
					s = "<null>";
   14190:	e59d301c 	ldr	r3, [sp, #28]
				if (s == 0)
   14194:	e3580000 	cmp	r8, #0
					s = "<null>";
   14198:	01a08003 	moveq	r8, r3
				goto _output_string;
   1419c:	eaffff63 	b	13f30 <_printf_engine+0x3d8>
				if (flags & HALFFLAG)
   141a0:	e3190004 	tst	r9, #4
					flags |= HALFHALFFLAG;
   141a4:	13899008 	orrne	r9, r9, #8
				flags |= HALFFLAG;
   141a8:	e3899004 	orr	r9, r9, #4
				goto next_format;
   141ac:	eafffe8f 	b	13bf0 <_printf_engine+0x98>
				OUTPUT_CHAR('%');
   141b0:	e28d7058 	add	r7, sp, #88	; 0x58
   141b4:	e3a03025 	mov	r3, #37	; 0x25
   141b8:	e1a0200a 	mov	r2, sl
   141bc:	e3a01001 	mov	r1, #1
   141c0:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
   141c4:	e1a00007 	mov	r0, r7
   141c8:	e12fff3b 	blx	fp
   141cc:	e2505000 	subs	r5, r0, #0
   141d0:	ba00008e 	blt	14410 <_printf_engine+0x8b8>
				OUTPUT_CHAR(c);
   141d4:	e1a00007 	mov	r0, r7
   141d8:	e1a0200a 	mov	r2, sl
   141dc:	e3a01001 	mov	r1, #1
   141e0:	e5cd8030 	strb	r8, [sp, #48]	; 0x30
   141e4:	e12fff3b 	blx	fp
   141e8:	e2503000 	subs	r3, r0, #0
   141ec:	bafffee8 	blt	13d94 <_printf_engine+0x23c>
				OUTPUT_CHAR('%');
   141f0:	e0856006 	add	r6, r5, r6
   141f4:	eaffff9c 	b	1406c <_printf_engine+0x514>
   141f8:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
   141fc:	e59d3020 	ldr	r3, [sp, #32]
   14200:	e3530000 	cmp	r3, #0
   14204:	1a00000b 	bne	14238 <_printf_engine+0x6e0>
   14208:	e5dd302f 	ldrb	r3, [sp, #47]	; 0x2f
   1420c:	e3530000 	cmp	r3, #0
   14210:	0a000008 	beq	14238 <_printf_engine+0x6e0>
				OUTPUT_CHAR(signchar);
   14214:	e28d7058 	add	r7, sp, #88	; 0x58
   14218:	e1a0200a 	mov	r2, sl
   1421c:	e3a01001 	mov	r1, #1
   14220:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
   14224:	e1a00007 	mov	r0, r7
   14228:	e12fff3b 	blx	fp
   1422c:	e2503000 	subs	r3, r0, #0
   14230:	bafffed7 	blt	13d94 <_printf_engine+0x23c>
   14234:	e0866003 	add	r6, r6, r3
			OUTPUT_STRING(s, SIZE_MAX);
   14238:	e1a00008 	mov	r0, r8
   1423c:	e1a0200a 	mov	r2, sl
   14240:	e3e01000 	mvn	r1, #0
   14244:	e12fff3b 	blx	fp
   14248:	e2503000 	subs	r3, r0, #0
   1424c:	bafffed0 	blt	13d94 <_printf_engine+0x23c>
   14250:	eaffff85 	b	1406c <_printf_engine+0x514>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14254:	e59d3014 	ldr	r3, [sp, #20]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
   14258:	e2833004 	add	r3, r3, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   1425c:	e5132004 	ldr	r2, [r3, #-4]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
   14260:	e58d3014 	str	r3, [sp, #20]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14264:	e3a03000 	mov	r3, #0
   14268:	eafffeda 	b	13dd8 <_printf_engine+0x280>
			if (flags & LEADZEROFLAG && signchar != '\0')
   1426c:	e59d2020 	ldr	r2, [sp, #32]
   14270:	e3520000 	cmp	r2, #0
   14274:	1affff01 	bne	13e80 <_printf_engine+0x328>
   14278:	eaffffe5 	b	14214 <_printf_engine+0x6bc>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   1427c:	e2833007 	add	r3, r3, #7
   14280:	e3c33007 	bic	r3, r3, #7
   14284:	e2832008 	add	r2, r3, #8
   14288:	e58d2014 	str	r2, [sp, #20]
   1428c:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
   14290:	e28d102f 	add	r1, sp, #47	; 0x2f
   14294:	e58d9004 	str	r9, [sp, #4]
   14298:	e28d0034 	add	r0, sp, #52	; 0x34
   1429c:	e58d1008 	str	r1, [sp, #8]
   142a0:	e3a01020 	mov	r1, #32
   142a4:	e58d1000 	str	r1, [sp]
   142a8:	ebfffb6e 	bl	13068 <longlong_to_string>
   142ac:	e1a08000 	mov	r8, r0
				goto _output_string;
   142b0:	eaffff1e 	b	13f30 <_printf_engine+0x3d8>
				    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
   142b4:	e59d3014 	ldr	r3, [sp, #20]
   142b8:	e2833007 	add	r3, r3, #7
   142bc:	e3c33007 	bic	r3, r3, #7
   142c0:	e2832008 	add	r2, r3, #8
   142c4:	e58d2014 	str	r2, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   142c8:	e1c320d0 	ldrd	r2, [r3]
				flags |= SIGNEDFLAG;
   142cc:	e3899b01 	orr	r9, r9, #1024	; 0x400
   142d0:	eaffffee 	b	14290 <_printf_engine+0x738>
				else if (flags & LONGFLAG)
   142d4:	e3190001 	tst	r9, #1
   142d8:	1a000007 	bne	142fc <_printf_engine+0x7a4>
				else if (flags & HALFHALFFLAG)
   142dc:	e3190008 	tst	r9, #8
					*(signed char *)ptr = chars_written;
   142e0:	15c36000 	strbne	r6, [r3]
				ptr = va_arg(ap, void *);
   142e4:	158d2014 	strne	r2, [sp, #20]
				else if (flags & HALFHALFFLAG)
   142e8:	1affff40 	bne	13ff0 <_printf_engine+0x498>
				else if (flags & HALFFLAG)
   142ec:	e3190004 	tst	r9, #4
					*(short *)ptr = chars_written;
   142f0:	11c360b0 	strhne	r6, [r3]
				ptr = va_arg(ap, void *);
   142f4:	158d2014 	strne	r2, [sp, #20]
				else if (flags & HALFFLAG)
   142f8:	1affff3c 	bne	13ff0 <_printf_engine+0x498>
					*(int *)ptr = chars_written;
   142fc:	e5836000 	str	r6, [r3]
				ptr = va_arg(ap, void *);
   14300:	e58d2014 	str	r2, [sp, #20]
   14304:	eaffff39 	b	13ff0 <_printf_engine+0x498>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14308:	e59d1014 	ldr	r1, [sp, #20]
   1430c:	e3a03000 	mov	r3, #0
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
   14310:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14314:	e5512004 	ldrb	r2, [r1, #-4]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
   14318:	e58d1014 	str	r1, [sp, #20]
   1431c:	eafffead 	b	13dd8 <_printf_engine+0x280>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14320:	e59d3014 	ldr	r3, [sp, #20]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
   14324:	e2833004 	add	r3, r3, #4
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14328:	e5132004 	ldr	r2, [r3, #-4]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
   1432c:	e58d3014 	str	r3, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14330:	e1a03fc2 	asr	r3, r2, #31
   14334:	eaffffe4 	b	142cc <_printf_engine+0x774>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14338:	e59d3014 	ldr	r3, [sp, #20]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
   1433c:	e2833004 	add	r3, r3, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14340:	e5130004 	ldr	r0, [r3, #-4]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
   14344:	e58d3014 	str	r3, [sp, #20]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14348:	e3a03000 	mov	r3, #0
   1434c:	e1a02000 	mov	r2, r0
   14350:	eaffffce 	b	14290 <_printf_engine+0x738>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14354:	e3190010 	tst	r9, #16
   14358:	1affffbd 	bne	14254 <_printf_engine+0x6fc>
   1435c:	e59d3014 	ldr	r3, [sp, #20]
   14360:	e3190020 	tst	r9, #32
   14364:	1afffe96 	bne	13dc4 <_printf_engine+0x26c>
   14368:	e4932004 	ldr	r2, [r3], #4
   1436c:	e58d3014 	str	r3, [sp, #20]
   14370:	e3a03000 	mov	r3, #0
   14374:	eafffe97 	b	13dd8 <_printf_engine+0x280>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14378:	e3190004 	tst	r9, #4
   1437c:	0a00000d 	beq	143b8 <_printf_engine+0x860>
   14380:	e59d1014 	ldr	r1, [sp, #20]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
   14384:	e2811004 	add	r1, r1, #4
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14388:	e15120f4 	ldrsh	r2, [r1, #-4]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
   1438c:	e58d1014 	str	r1, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   14390:	e1a03fc2 	asr	r3, r2, #31
   14394:	eaffffcc 	b	142cc <_printf_engine+0x774>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   14398:	e3190004 	tst	r9, #4
   1439c:	0a000011 	beq	143e8 <_printf_engine+0x890>
   143a0:	e59d1014 	ldr	r1, [sp, #20]
   143a4:	e3a03000 	mov	r3, #0
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
   143a8:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   143ac:	e15120b4 	ldrh	r2, [r1, #-4]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
   143b0:	e58d1014 	str	r1, [sp, #20]
   143b4:	eaffffb5 	b	14290 <_printf_engine+0x738>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   143b8:	e3190010 	tst	r9, #16
   143bc:	1affffd7 	bne	14320 <_printf_engine+0x7c8>
   143c0:	e3190020 	tst	r9, #32
   143c4:	1affffba 	bne	142b4 <_printf_engine+0x75c>
   143c8:	e3190040 	tst	r9, #64	; 0x40
   143cc:	e59d2014 	ldr	r2, [sp, #20]
   143d0:	e2823004 	add	r3, r2, #4
   143d4:	059d2014 	ldreq	r2, [sp, #20]
   143d8:	e5922000 	ldr	r2, [r2]
				    va_arg(ap, int);
   143dc:	e58d3014 	str	r3, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
   143e0:	e1a03fc2 	asr	r3, r2, #31
   143e4:	eaffffb8 	b	142cc <_printf_engine+0x774>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
   143e8:	e3190010 	tst	r9, #16
   143ec:	1affffd1 	bne	14338 <_printf_engine+0x7e0>
   143f0:	e59d3014 	ldr	r3, [sp, #20]
   143f4:	e3190020 	tst	r9, #32
   143f8:	1affff9f 	bne	1427c <_printf_engine+0x724>
   143fc:	e4930004 	ldr	r0, [r3], #4
   14400:	e58d3014 	str	r3, [sp, #20]
   14404:	e3a03000 	mov	r3, #0
   14408:	e1a02000 	mov	r2, r0
   1440c:	eaffff9f 	b	14290 <_printf_engine+0x738>
				OUTPUT_CHAR('%');
   14410:	e1a03005 	mov	r3, r5
   14414:	eafffe5e 	b	13d94 <_printf_engine+0x23c>
			for (; format_num > string_len; format_num--)
   14418:	e1500005 	cmp	r0, r5
   1441c:	3affff03 	bcc	14030 <_printf_engine+0x4d8>
   14420:	eaffff79 	b	1420c <_printf_engine+0x6b4>
}
   14424:	eb000067 	bl	145c8 <__stack_chk_fail>
   14428:	000024a0 	.word	0x000024a0
   1442c:	0000000c 	.word	0x0000000c
   14430:	000021dc 	.word	0x000021dc

00014434 <vsnprintf>:
{
   14434:	e59fc070 	ldr	ip, [pc, #112]	; 144ac <vsnprintf+0x78>
   14438:	e92d40f0 	push	{r4, r5, r6, r7, lr}
   1443c:	e1a06000 	mov	r6, r0
   14440:	e59fe068 	ldr	lr, [pc, #104]	; 144b0 <vsnprintf+0x7c>
   14444:	e08fc00c 	add	ip, pc, ip
   14448:	e24dd014 	sub	sp, sp, #20
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
   1444c:	e59f0060 	ldr	r0, [pc, #96]	; 144b4 <vsnprintf+0x80>
{
   14450:	e1a04001 	mov	r4, r1
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
   14454:	e1a0100d 	mov	r1, sp
	args.pos = 0;
   14458:	e3a07000 	mov	r7, #0
{
   1445c:	e79c500e 	ldr	r5, [ip, lr]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
   14460:	e08f0000 	add	r0, pc, r0
	args.len = len;
   14464:	e58d4004 	str	r4, [sp, #4]
	args.outstr = str;
   14468:	e58d6000 	str	r6, [sp]
{
   1446c:	e595c000 	ldr	ip, [r5]
   14470:	e58dc00c 	str	ip, [sp, #12]
	args.pos = 0;
   14474:	e58d7008 	str	r7, [sp, #8]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
   14478:	ebfffdb6 	bl	13b58 <_printf_engine>
	if (args.pos >= len)
   1447c:	e59d3008 	ldr	r3, [sp, #8]
}
   14480:	e59d200c 	ldr	r2, [sp, #12]
	if (args.pos >= len)
   14484:	e1530004 	cmp	r3, r4
		str[wlen] = '\0';
   14488:	37c67000 	strbcc	r7, [r6, r0]
		str[len-1] = '\0';
   1448c:	20864004 	addcs	r4, r6, r4
   14490:	25447001 	strbcs	r7, [r4, #-1]
}
   14494:	e5953000 	ldr	r3, [r5]
   14498:	e1520003 	cmp	r2, r3
   1449c:	1a000001 	bne	144a8 <vsnprintf+0x74>
   144a0:	e28dd014 	add	sp, sp, #20
   144a4:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
   144a8:	eb000046 	bl	145c8 <__stack_chk_fail>
   144ac:	00001bd0 	.word	0x00001bd0
   144b0:	0000000c 	.word	0x0000000c
   144b4:	ffffed88 	.word	0xffffed88

000144b8 <sprintf>:
{
   144b8:	e92d000e 	push	{r1, r2, r3}
	return vsnprintf(str, INT_MAX, fmt, ap);
   144bc:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
{
   144c0:	e59fc050 	ldr	ip, [pc, #80]	; 14518 <sprintf+0x60>
   144c4:	e92d4030 	push	{r4, r5, lr}
   144c8:	e59fe04c 	ldr	lr, [pc, #76]	; 1451c <sprintf+0x64>
   144cc:	e08fc00c 	add	ip, pc, ip
   144d0:	e24dd008 	sub	sp, sp, #8
	va_start(ap, fmt);
   144d4:	e28d5018 	add	r5, sp, #24
	return vsnprintf(str, INT_MAX, fmt, ap);
   144d8:	e1a03005 	mov	r3, r5
{
   144dc:	e79c400e 	ldr	r4, [ip, lr]
   144e0:	e59d2014 	ldr	r2, [sp, #20]
	va_start(ap, fmt);
   144e4:	e58d5000 	str	r5, [sp]
{
   144e8:	e594c000 	ldr	ip, [r4]
   144ec:	e58dc004 	str	ip, [sp, #4]
	return vsnprintf(str, INT_MAX, fmt, ap);
   144f0:	ebffffcf 	bl	14434 <vsnprintf>
}
   144f4:	e59d2004 	ldr	r2, [sp, #4]
   144f8:	e5943000 	ldr	r3, [r4]
   144fc:	e1520003 	cmp	r2, r3
   14500:	1a000003 	bne	14514 <sprintf+0x5c>
   14504:	e28dd008 	add	sp, sp, #8
   14508:	e8bd4030 	pop	{r4, r5, lr}
   1450c:	e28dd00c 	add	sp, sp, #12
   14510:	e12fff1e 	bx	lr
   14514:	eb00002b 	bl	145c8 <__stack_chk_fail>
   14518:	00001b48 	.word	0x00001b48
   1451c:	0000000c 	.word	0x0000000c

00014520 <rand>:
	randseed ^= enp;
}

int rand(void)
{
	return (randseed = randseed * 1664525 + 1013904223);
   14520:	e59f3020 	ldr	r3, [pc, #32]	; 14548 <rand+0x28>
   14524:	e306160d 	movw	r1, #26125	; 0x660d
   14528:	e3401019 	movt	r1, #25
   1452c:	e08f3003 	add	r3, pc, r3
   14530:	e30f235f 	movw	r2, #62303	; 0xf35f
   14534:	e3432c6e 	movt	r2, #15470	; 0x3c6e
   14538:	e5930000 	ldr	r0, [r3]
   1453c:	e0202091 	mla	r0, r1, r0, r2
   14540:	e5830000 	str	r0, [r3]
}
   14544:	e12fff1e 	bx	lr
   14548:	00001b5c 	.word	0x00001b5c

0001454c <vfprintf>:
	return getc(stdin);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
	return fp->vfprintf(fp->ctx, fmt, ap);
   1454c:	e5903010 	ldr	r3, [r0, #16]
   14550:	e5900000 	ldr	r0, [r0]
   14554:	e12fff13 	bx	r3

00014558 <fprintf>:
}

int fprintf(FILE *fp, const char *fmt, ...)
{
   14558:	e92d000e 	push	{r1, r2, r3}
   1455c:	e59f3058 	ldr	r3, [pc, #88]	; 145bc <fprintf+0x64>
   14560:	e59fc058 	ldr	ip, [pc, #88]	; 145c0 <fprintf+0x68>
   14564:	e08f3003 	add	r3, pc, r3
   14568:	e92d4010 	push	{r4, lr}
   1456c:	e24dd00c 	sub	sp, sp, #12
   14570:	e793400c 	ldr	r4, [r3, ip]
	va_list ap;
	int err;

	va_start(ap, fmt);
   14574:	e28de018 	add	lr, sp, #24
	return fp->vfprintf(fp->ctx, fmt, ap);
   14578:	e5903010 	ldr	r3, [r0, #16]
   1457c:	e1a0200e 	mov	r2, lr
{
   14580:	e59d1014 	ldr	r1, [sp, #20]
   14584:	e594c000 	ldr	ip, [r4]
	return fp->vfprintf(fp->ctx, fmt, ap);
   14588:	e5900000 	ldr	r0, [r0]
	va_start(ap, fmt);
   1458c:	e58de000 	str	lr, [sp]
{
   14590:	e58dc004 	str	ip, [sp, #4]
	return fp->vfprintf(fp->ctx, fmt, ap);
   14594:	e12fff33 	blx	r3
	err = vfprintf(fp, fmt, ap);
	va_end(ap);
	return err;
}
   14598:	e59d2004 	ldr	r2, [sp, #4]
   1459c:	e5943000 	ldr	r3, [r4]
   145a0:	e1520003 	cmp	r2, r3
   145a4:	1a000003 	bne	145b8 <fprintf+0x60>
   145a8:	e28dd00c 	add	sp, sp, #12
   145ac:	e8bd4010 	pop	{r4, lr}
   145b0:	e28dd00c 	add	sp, sp, #12
   145b4:	e12fff1e 	bx	lr
   145b8:	eb000002 	bl	145c8 <__stack_chk_fail>
   145bc:	00001ab0 	.word	0x00001ab0
   145c0:	0000000c 	.word	0x0000000c

000145c4 <raise>:
#endif

/* needed by some piece of EABI */
void raise(void)
{
}
   145c4:	e12fff1e 	bx	lr

000145c8 <__stack_chk_fail>:
		while (*_px == *_px) { }				\
	} while (1);

void __attribute__((noreturn)) __stack_chk_fail(void);
void __attribute__((noreturn)) __stack_chk_fail(void)
{
   145c8:	e59f3030 	ldr	r3, [pc, #48]	; 14600 <__stack_chk_fail+0x38>
   145cc:	e24dd008 	sub	sp, sp, #8
   145d0:	e59f202c 	ldr	r2, [pc, #44]	; 14604 <__stack_chk_fail+0x3c>
	TRUSTY_LIBC_BREAK()
   145d4:	e3a01030 	mov	r1, #48	; 0x30
{
   145d8:	e08f3003 	add	r3, pc, r3
   145dc:	e7933002 	ldr	r3, [r3, r2]
   145e0:	e5933000 	ldr	r3, [r3]
   145e4:	e58d3004 	str	r3, [sp, #4]
	TRUSTY_LIBC_BREAK()
   145e8:	e58d1000 	str	r1, [sp]
   145ec:	e59d2000 	ldr	r2, [sp]
   145f0:	e59d3000 	ldr	r3, [sp]
   145f4:	e1520003 	cmp	r2, r3
   145f8:	0afffffb 	beq	145ec <__stack_chk_fail+0x24>
   145fc:	eafffff9 	b	145e8 <__stack_chk_fail+0x20>
   14600:	00001a3c 	.word	0x00001a3c
   14604:	0000000c 	.word	0x0000000c

00014608 <memcmp>:
memcmp(const void *cs, const void *ct, size_t count)
{
	const unsigned char *su1, *su2;
	signed char res = 0;

	for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
   14608:	e3520000 	cmp	r2, #0
   1460c:	0a000012 	beq	1465c <memcmp+0x54>
		if ((res = *su1 - *su2) != 0)
   14610:	e5d1c000 	ldrb	ip, [r1]
   14614:	e5d03000 	ldrb	r3, [r0]
   14618:	e043300c 	sub	r3, r3, ip
   1461c:	e6af3073 	sxtb	r3, r3
   14620:	e3530000 	cmp	r3, #0
   14624:	02422001 	subeq	r2, r2, #1
   14628:	0081c002 	addeq	ip, r1, r2
   1462c:	0a000006 	beq	1464c <memcmp+0x44>
   14630:	ea00000b 	b	14664 <memcmp+0x5c>
   14634:	e5f02001 	ldrb	r2, [r0, #1]!
   14638:	e5f13001 	ldrb	r3, [r1, #1]!
   1463c:	e0422003 	sub	r2, r2, r3
   14640:	e6af2072 	sxtb	r2, r2
   14644:	e3520000 	cmp	r2, #0
   14648:	1a000003 	bne	1465c <memcmp+0x54>
	for (su1 = cs, su2 = ct; 0 < count; ++su1, ++su2, count--)
   1464c:	e151000c 	cmp	r1, ip
   14650:	1afffff7 	bne	14634 <memcmp+0x2c>
   14654:	e3a00000 	mov	r0, #0
   14658:	e12fff1e 	bx	lr
   1465c:	e1a00002 	mov	r0, r2
			break;
	return res;
}
   14660:	e12fff1e 	bx	lr
   14664:	e1a00003 	mov	r0, r3
   14668:	e12fff1e 	bx	lr

0001466c <memset>:

void *
memset(void *s, int c, size_t count)
{
	char *xs = (char *) s;
	size_t len = (-(size_t)s) & (sizeof(size_t)-1);
   1466c:	e2603000 	rsb	r3, r0, #0
   14670:	e2033003 	and	r3, r3, #3
	size_t cc = c & 0xff;

	if ( count > len ) {
   14674:	e1530002 	cmp	r3, r2
   14678:	2a00001b 	bcs	146ec <memset+0x80>
{
   1467c:	e92d4010 	push	{r4, lr}
	size_t cc = c & 0xff;
   14680:	e6ef4071 	uxtb	r4, r1
		cc |= cc << 16;
		if (sizeof(size_t) == 8)
			cc |= (uint64_t)cc << 32; // should be optimized out on 32 bit machines

		// write to non-aligned memory byte-wise
		for ( ; len > 0; len-- )
   14684:	e3530000 	cmp	r3, #0
		cc |= cc << 8;
   14688:	e184e404 	orr	lr, r4, r4, lsl #8
		count -= len;
   1468c:	e0422003 	sub	r2, r2, r3
	char *xs = (char *) s;
   14690:	01a03000 	moveq	r3, r0
		cc |= cc << 16;
   14694:	e18ee80e 	orr	lr, lr, lr, lsl #16
		for ( ; len > 0; len-- )
   14698:	0a000004 	beq	146b0 <memset+0x44>
   1469c:	e080c003 	add	ip, r0, r3
	char *xs = (char *) s;
   146a0:	e1a03000 	mov	r3, r0
			*xs++ = c;
   146a4:	e4c34001 	strb	r4, [r3], #1
		for ( ; len > 0; len-- )
   146a8:	e15c0003 	cmp	ip, r3
   146ac:	1afffffc 	bne	146a4 <memset+0x38>

		// write to aligned memory dword-wise
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
   146b0:	e1b0c122 	lsrs	ip, r2, #2
   146b4:	0a000003 	beq	146c8 <memset+0x5c>
   146b8:	e083c10c 	add	ip, r3, ip, lsl #2
			*((size_t *)xs) = (size_t)cc;
   146bc:	e483e004 	str	lr, [r3], #4
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
   146c0:	e15c0003 	cmp	ip, r3
   146c4:	1afffffc 	bne	146bc <memset+0x50>
			xs += sizeof(size_t);
		}

		count &= sizeof(size_t)-1;
   146c8:	e2022003 	and	r2, r2, #3
	}

	// write remaining bytes
	for ( ; count > 0; count-- )
   146cc:	e3520000 	cmp	r2, #0
   146d0:	08bd8010 	popeq	{r4, pc}
   146d4:	e6ef1071 	uxtb	r1, r1
   146d8:	e0832002 	add	r2, r3, r2
		*xs++ = c;
   146dc:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
   146e0:	e1520003 	cmp	r2, r3
   146e4:	1afffffc 	bne	146dc <memset+0x70>
   146e8:	e8bd8010 	pop	{r4, pc}
   146ec:	e3520000 	cmp	r2, #0
	char *xs = (char *) s;
   146f0:	e1a03000 	mov	r3, r0
	for ( ; count > 0; count-- )
   146f4:	012fff1e 	bxeq	lr
   146f8:	e6ef1071 	uxtb	r1, r1
   146fc:	e0802002 	add	r2, r0, r2
		*xs++ = c;
   14700:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
   14704:	e1520003 	cmp	r2, r3
   14708:	1afffffc 	bne	14700 <memset+0x94>
   1470c:	e12fff1e 	bx	lr

00014710 <strlen>:
strlen(char const *s)
{
	size_t i;

	i= 0;
	while (s[i]) {
   14710:	e5d03000 	ldrb	r3, [r0]
   14714:	e3530000 	cmp	r3, #0
   14718:	0a000006 	beq	14738 <strlen+0x28>
   1471c:	e1a03000 	mov	r3, r0
	i= 0;
   14720:	e3a00000 	mov	r0, #0
	while (s[i]) {
   14724:	e5f32001 	ldrb	r2, [r3, #1]!
		i+= 1;
   14728:	e2800001 	add	r0, r0, #1
	while (s[i]) {
   1472c:	e3520000 	cmp	r2, #0
   14730:	1afffffb 	bne	14724 <strlen+0x14>
   14734:	e12fff1e 	bx	lr
	i= 0;
   14738:	e1a00003 	mov	r0, r3
	}

	return i;
}
   1473c:	e12fff1e 	bx	lr

00014740 <strnlen>:
size_t
strnlen(char const *s, size_t count)
{
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
   14740:	e3510000 	cmp	r1, #0
   14744:	0a000010 	beq	1478c <strnlen+0x4c>
   14748:	e5d03000 	ldrb	r3, [r0]
   1474c:	e3530000 	cmp	r3, #0
   14750:	0a00000f 	beq	14794 <strnlen+0x54>
   14754:	e0801001 	add	r1, r0, r1
   14758:	e2803001 	add	r3, r0, #1
   1475c:	ea000004 	b	14774 <strnlen+0x34>
   14760:	e5d32000 	ldrb	r2, [r3]
   14764:	e283c001 	add	ip, r3, #1
   14768:	e3520000 	cmp	r2, #0
   1476c:	0a000004 	beq	14784 <strnlen+0x44>
   14770:	e1a0300c 	mov	r3, ip
   14774:	e1510003 	cmp	r1, r3
   14778:	1afffff8 	bne	14760 <strnlen+0x20>
   1477c:	e0410000 	sub	r0, r1, r0
   14780:	e12fff1e 	bx	lr
   14784:	e0430000 	sub	r0, r3, r0
   14788:	e12fff1e 	bx	lr
   1478c:	e1a00001 	mov	r0, r1
   14790:	e12fff1e 	bx	lr
   14794:	e1a00003 	mov	r0, r3
		;
	return sc - s;
}
   14798:	e12fff1e 	bx	lr

0001479c <__aeabi_drsub>:
   1479c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   147a0:	e002      	b.n	147a8 <__adddf3>
   147a2:	bf00      	nop

000147a4 <__aeabi_dsub>:
   147a4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000147a8 <__adddf3>:
   147a8:	b530      	push	{r4, r5, lr}
   147aa:	ea4f 0441 	mov.w	r4, r1, lsl #1
   147ae:	ea4f 0543 	mov.w	r5, r3, lsl #1
   147b2:	ea94 0f05 	teq	r4, r5
   147b6:	bf08      	it	eq
   147b8:	ea90 0f02 	teqeq	r0, r2
   147bc:	bf1f      	itttt	ne
   147be:	ea54 0c00 	orrsne.w	ip, r4, r0
   147c2:	ea55 0c02 	orrsne.w	ip, r5, r2
   147c6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   147ca:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   147ce:	f000 80e2 	beq.w	14996 <__adddf3+0x1ee>
   147d2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   147d6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   147da:	bfb8      	it	lt
   147dc:	426d      	neglt	r5, r5
   147de:	dd0c      	ble.n	147fa <__adddf3+0x52>
   147e0:	442c      	add	r4, r5
   147e2:	ea80 0202 	eor.w	r2, r0, r2
   147e6:	ea81 0303 	eor.w	r3, r1, r3
   147ea:	ea82 0000 	eor.w	r0, r2, r0
   147ee:	ea83 0101 	eor.w	r1, r3, r1
   147f2:	ea80 0202 	eor.w	r2, r0, r2
   147f6:	ea81 0303 	eor.w	r3, r1, r3
   147fa:	2d36      	cmp	r5, #54	; 0x36
   147fc:	bf88      	it	hi
   147fe:	bd30      	pophi	{r4, r5, pc}
   14800:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   14804:	ea4f 3101 	mov.w	r1, r1, lsl #12
   14808:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   1480c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   14810:	d002      	beq.n	14818 <__adddf3+0x70>
   14812:	4240      	negs	r0, r0
   14814:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14818:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   1481c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   14820:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   14824:	d002      	beq.n	1482c <__adddf3+0x84>
   14826:	4252      	negs	r2, r2
   14828:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1482c:	ea94 0f05 	teq	r4, r5
   14830:	f000 80a7 	beq.w	14982 <__adddf3+0x1da>
   14834:	f1a4 0401 	sub.w	r4, r4, #1
   14838:	f1d5 0e20 	rsbs	lr, r5, #32
   1483c:	db0d      	blt.n	1485a <__adddf3+0xb2>
   1483e:	fa02 fc0e 	lsl.w	ip, r2, lr
   14842:	fa22 f205 	lsr.w	r2, r2, r5
   14846:	1880      	adds	r0, r0, r2
   14848:	f141 0100 	adc.w	r1, r1, #0
   1484c:	fa03 f20e 	lsl.w	r2, r3, lr
   14850:	1880      	adds	r0, r0, r2
   14852:	fa43 f305 	asr.w	r3, r3, r5
   14856:	4159      	adcs	r1, r3
   14858:	e00e      	b.n	14878 <__adddf3+0xd0>
   1485a:	f1a5 0520 	sub.w	r5, r5, #32
   1485e:	f10e 0e20 	add.w	lr, lr, #32
   14862:	2a01      	cmp	r2, #1
   14864:	fa03 fc0e 	lsl.w	ip, r3, lr
   14868:	bf28      	it	cs
   1486a:	f04c 0c02 	orrcs.w	ip, ip, #2
   1486e:	fa43 f305 	asr.w	r3, r3, r5
   14872:	18c0      	adds	r0, r0, r3
   14874:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   14878:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   1487c:	d507      	bpl.n	1488e <__adddf3+0xe6>
   1487e:	f04f 0e00 	mov.w	lr, #0
   14882:	f1dc 0c00 	rsbs	ip, ip, #0
   14886:	eb7e 0000 	sbcs.w	r0, lr, r0
   1488a:	eb6e 0101 	sbc.w	r1, lr, r1
   1488e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   14892:	d31b      	bcc.n	148cc <__adddf3+0x124>
   14894:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   14898:	d30c      	bcc.n	148b4 <__adddf3+0x10c>
   1489a:	0849      	lsrs	r1, r1, #1
   1489c:	ea5f 0030 	movs.w	r0, r0, rrx
   148a0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   148a4:	f104 0401 	add.w	r4, r4, #1
   148a8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   148ac:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   148b0:	f080 809a 	bcs.w	149e8 <__adddf3+0x240>
   148b4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   148b8:	bf08      	it	eq
   148ba:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   148be:	f150 0000 	adcs.w	r0, r0, #0
   148c2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   148c6:	ea41 0105 	orr.w	r1, r1, r5
   148ca:	bd30      	pop	{r4, r5, pc}
   148cc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   148d0:	4140      	adcs	r0, r0
   148d2:	eb41 0101 	adc.w	r1, r1, r1
   148d6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   148da:	f1a4 0401 	sub.w	r4, r4, #1
   148de:	d1e9      	bne.n	148b4 <__adddf3+0x10c>
   148e0:	f091 0f00 	teq	r1, #0
   148e4:	bf04      	itt	eq
   148e6:	4601      	moveq	r1, r0
   148e8:	2000      	moveq	r0, #0
   148ea:	fab1 f381 	clz	r3, r1
   148ee:	bf08      	it	eq
   148f0:	3320      	addeq	r3, #32
   148f2:	f1a3 030b 	sub.w	r3, r3, #11
   148f6:	f1b3 0220 	subs.w	r2, r3, #32
   148fa:	da0c      	bge.n	14916 <__adddf3+0x16e>
   148fc:	320c      	adds	r2, #12
   148fe:	dd08      	ble.n	14912 <__adddf3+0x16a>
   14900:	f102 0c14 	add.w	ip, r2, #20
   14904:	f1c2 020c 	rsb	r2, r2, #12
   14908:	fa01 f00c 	lsl.w	r0, r1, ip
   1490c:	fa21 f102 	lsr.w	r1, r1, r2
   14910:	e00c      	b.n	1492c <__adddf3+0x184>
   14912:	f102 0214 	add.w	r2, r2, #20
   14916:	bfd8      	it	le
   14918:	f1c2 0c20 	rsble	ip, r2, #32
   1491c:	fa01 f102 	lsl.w	r1, r1, r2
   14920:	fa20 fc0c 	lsr.w	ip, r0, ip
   14924:	bfdc      	itt	le
   14926:	ea41 010c 	orrle.w	r1, r1, ip
   1492a:	4090      	lslle	r0, r2
   1492c:	1ae4      	subs	r4, r4, r3
   1492e:	bfa2      	ittt	ge
   14930:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   14934:	4329      	orrge	r1, r5
   14936:	bd30      	popge	{r4, r5, pc}
   14938:	ea6f 0404 	mvn.w	r4, r4
   1493c:	3c1f      	subs	r4, #31
   1493e:	da1c      	bge.n	1497a <__adddf3+0x1d2>
   14940:	340c      	adds	r4, #12
   14942:	dc0e      	bgt.n	14962 <__adddf3+0x1ba>
   14944:	f104 0414 	add.w	r4, r4, #20
   14948:	f1c4 0220 	rsb	r2, r4, #32
   1494c:	fa20 f004 	lsr.w	r0, r0, r4
   14950:	fa01 f302 	lsl.w	r3, r1, r2
   14954:	ea40 0003 	orr.w	r0, r0, r3
   14958:	fa21 f304 	lsr.w	r3, r1, r4
   1495c:	ea45 0103 	orr.w	r1, r5, r3
   14960:	bd30      	pop	{r4, r5, pc}
   14962:	f1c4 040c 	rsb	r4, r4, #12
   14966:	f1c4 0220 	rsb	r2, r4, #32
   1496a:	fa20 f002 	lsr.w	r0, r0, r2
   1496e:	fa01 f304 	lsl.w	r3, r1, r4
   14972:	ea40 0003 	orr.w	r0, r0, r3
   14976:	4629      	mov	r1, r5
   14978:	bd30      	pop	{r4, r5, pc}
   1497a:	fa21 f004 	lsr.w	r0, r1, r4
   1497e:	4629      	mov	r1, r5
   14980:	bd30      	pop	{r4, r5, pc}
   14982:	f094 0f00 	teq	r4, #0
   14986:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   1498a:	bf06      	itte	eq
   1498c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   14990:	3401      	addeq	r4, #1
   14992:	3d01      	subne	r5, #1
   14994:	e74e      	b.n	14834 <__adddf3+0x8c>
   14996:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   1499a:	bf18      	it	ne
   1499c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   149a0:	d029      	beq.n	149f6 <__adddf3+0x24e>
   149a2:	ea94 0f05 	teq	r4, r5
   149a6:	bf08      	it	eq
   149a8:	ea90 0f02 	teqeq	r0, r2
   149ac:	d005      	beq.n	149ba <__adddf3+0x212>
   149ae:	ea54 0c00 	orrs.w	ip, r4, r0
   149b2:	bf04      	itt	eq
   149b4:	4619      	moveq	r1, r3
   149b6:	4610      	moveq	r0, r2
   149b8:	bd30      	pop	{r4, r5, pc}
   149ba:	ea91 0f03 	teq	r1, r3
   149be:	bf1e      	ittt	ne
   149c0:	2100      	movne	r1, #0
   149c2:	2000      	movne	r0, #0
   149c4:	bd30      	popne	{r4, r5, pc}
   149c6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   149ca:	d105      	bne.n	149d8 <__adddf3+0x230>
   149cc:	0040      	lsls	r0, r0, #1
   149ce:	4149      	adcs	r1, r1
   149d0:	bf28      	it	cs
   149d2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   149d6:	bd30      	pop	{r4, r5, pc}
   149d8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   149dc:	bf3c      	itt	cc
   149de:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   149e2:	bd30      	popcc	{r4, r5, pc}
   149e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   149e8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   149ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   149f0:	f04f 0000 	mov.w	r0, #0
   149f4:	bd30      	pop	{r4, r5, pc}
   149f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   149fa:	bf1a      	itte	ne
   149fc:	4619      	movne	r1, r3
   149fe:	4610      	movne	r0, r2
   14a00:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   14a04:	bf1c      	itt	ne
   14a06:	460b      	movne	r3, r1
   14a08:	4602      	movne	r2, r0
   14a0a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   14a0e:	bf06      	itte	eq
   14a10:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   14a14:	ea91 0f03 	teqeq	r1, r3
   14a18:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   14a1c:	bd30      	pop	{r4, r5, pc}
   14a1e:	bf00      	nop

00014a20 <__aeabi_ui2d>:
   14a20:	f090 0f00 	teq	r0, #0
   14a24:	bf04      	itt	eq
   14a26:	2100      	moveq	r1, #0
   14a28:	4770      	bxeq	lr
   14a2a:	b530      	push	{r4, r5, lr}
   14a2c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14a30:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14a34:	f04f 0500 	mov.w	r5, #0
   14a38:	f04f 0100 	mov.w	r1, #0
   14a3c:	e750      	b.n	148e0 <__adddf3+0x138>
   14a3e:	bf00      	nop

00014a40 <__aeabi_i2d>:
   14a40:	f090 0f00 	teq	r0, #0
   14a44:	bf04      	itt	eq
   14a46:	2100      	moveq	r1, #0
   14a48:	4770      	bxeq	lr
   14a4a:	b530      	push	{r4, r5, lr}
   14a4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14a50:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14a54:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   14a58:	bf48      	it	mi
   14a5a:	4240      	negmi	r0, r0
   14a5c:	f04f 0100 	mov.w	r1, #0
   14a60:	e73e      	b.n	148e0 <__adddf3+0x138>
   14a62:	bf00      	nop

00014a64 <__aeabi_f2d>:
   14a64:	0042      	lsls	r2, r0, #1
   14a66:	ea4f 01e2 	mov.w	r1, r2, asr #3
   14a6a:	ea4f 0131 	mov.w	r1, r1, rrx
   14a6e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   14a72:	bf1f      	itttt	ne
   14a74:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   14a78:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   14a7c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   14a80:	4770      	bxne	lr
   14a82:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   14a86:	bf08      	it	eq
   14a88:	4770      	bxeq	lr
   14a8a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   14a8e:	bf04      	itt	eq
   14a90:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   14a94:	4770      	bxeq	lr
   14a96:	b530      	push	{r4, r5, lr}
   14a98:	f44f 7460 	mov.w	r4, #896	; 0x380
   14a9c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   14aa0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   14aa4:	e71c      	b.n	148e0 <__adddf3+0x138>
   14aa6:	bf00      	nop

00014aa8 <__aeabi_ul2d>:
   14aa8:	ea50 0201 	orrs.w	r2, r0, r1
   14aac:	bf08      	it	eq
   14aae:	4770      	bxeq	lr
   14ab0:	b530      	push	{r4, r5, lr}
   14ab2:	f04f 0500 	mov.w	r5, #0
   14ab6:	e00a      	b.n	14ace <__aeabi_l2d+0x16>

00014ab8 <__aeabi_l2d>:
   14ab8:	ea50 0201 	orrs.w	r2, r0, r1
   14abc:	bf08      	it	eq
   14abe:	4770      	bxeq	lr
   14ac0:	b530      	push	{r4, r5, lr}
   14ac2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   14ac6:	d502      	bpl.n	14ace <__aeabi_l2d+0x16>
   14ac8:	4240      	negs	r0, r0
   14aca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   14ace:	f44f 6480 	mov.w	r4, #1024	; 0x400
   14ad2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   14ad6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   14ada:	f43f aed8 	beq.w	1488e <__adddf3+0xe6>
   14ade:	f04f 0203 	mov.w	r2, #3
   14ae2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   14ae6:	bf18      	it	ne
   14ae8:	3203      	addne	r2, #3
   14aea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   14aee:	bf18      	it	ne
   14af0:	3203      	addne	r2, #3
   14af2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   14af6:	f1c2 0320 	rsb	r3, r2, #32
   14afa:	fa00 fc03 	lsl.w	ip, r0, r3
   14afe:	fa20 f002 	lsr.w	r0, r0, r2
   14b02:	fa01 fe03 	lsl.w	lr, r1, r3
   14b06:	ea40 000e 	orr.w	r0, r0, lr
   14b0a:	fa21 f102 	lsr.w	r1, r1, r2
   14b0e:	4414      	add	r4, r2
   14b10:	e6bd      	b.n	1488e <__adddf3+0xe6>
   14b12:	bf00      	nop

00014b14 <__aeabi_uldivmod>:
   14b14:	b953      	cbnz	r3, 14b2c <__aeabi_uldivmod+0x18>
   14b16:	b94a      	cbnz	r2, 14b2c <__aeabi_uldivmod+0x18>
   14b18:	2900      	cmp	r1, #0
   14b1a:	bf08      	it	eq
   14b1c:	2800      	cmpeq	r0, #0
   14b1e:	bf1c      	itt	ne
   14b20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   14b24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   14b28:	f000 b80c 	b.w	14b44 <__aeabi_idiv0>
   14b2c:	f1ad 0c08 	sub.w	ip, sp, #8
   14b30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   14b34:	f000 f80c 	bl	14b50 <__udivmoddi4>
   14b38:	f8dd e004 	ldr.w	lr, [sp, #4]
   14b3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   14b40:	b004      	add	sp, #16
   14b42:	4770      	bx	lr

00014b44 <__aeabi_idiv0>:
   14b44:	b502      	push	{r1, lr}
   14b46:	f04f 0008 	mov.w	r0, #8
   14b4a:	f7ff ed3c 	blx	145c4 <raise>
   14b4e:	bd02      	pop	{r1, pc}

00014b50 <__udivmoddi4>:
   14b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14b54:	460d      	mov	r5, r1
   14b56:	429d      	cmp	r5, r3
   14b58:	4604      	mov	r4, r0
   14b5a:	bf08      	it	eq
   14b5c:	4290      	cmpeq	r0, r2
   14b5e:	4611      	mov	r1, r2
   14b60:	f8dd e020 	ldr.w	lr, [sp, #32]
   14b64:	bf3c      	itt	cc
   14b66:	2000      	movcc	r0, #0
   14b68:	4601      	movcc	r1, r0
   14b6a:	d368      	bcc.n	14c3e <__udivmoddi4+0xee>
   14b6c:	461a      	mov	r2, r3
   14b6e:	fab3 fc83 	clz	ip, r3
   14b72:	2b00      	cmp	r3, #0
   14b74:	d06e      	beq.n	14c54 <__udivmoddi4+0x104>
   14b76:	fab5 f085 	clz	r0, r5
   14b7a:	2d00      	cmp	r5, #0
   14b7c:	d066      	beq.n	14c4c <__udivmoddi4+0xfc>
   14b7e:	ebac 0c00 	sub.w	ip, ip, r0
   14b82:	f1ac 0820 	sub.w	r8, ip, #32
   14b86:	fa02 f70c 	lsl.w	r7, r2, ip
   14b8a:	fa01 f308 	lsl.w	r3, r1, r8
   14b8e:	f1cc 0920 	rsb	r9, ip, #32
   14b92:	431f      	orrs	r7, r3
   14b94:	fa21 f309 	lsr.w	r3, r1, r9
   14b98:	431f      	orrs	r7, r3
   14b9a:	fa01 f60c 	lsl.w	r6, r1, ip
   14b9e:	42bd      	cmp	r5, r7
   14ba0:	bf08      	it	eq
   14ba2:	42b4      	cmpeq	r4, r6
   14ba4:	bf3c      	itt	cc
   14ba6:	2000      	movcc	r0, #0
   14ba8:	4601      	movcc	r1, r0
   14baa:	d30a      	bcc.n	14bc2 <__udivmoddi4+0x72>
   14bac:	2001      	movs	r0, #1
   14bae:	1ba4      	subs	r4, r4, r6
   14bb0:	fa00 f108 	lsl.w	r1, r0, r8
   14bb4:	fa20 f309 	lsr.w	r3, r0, r9
   14bb8:	eb65 0507 	sbc.w	r5, r5, r7
   14bbc:	4319      	orrs	r1, r3
   14bbe:	fa00 f00c 	lsl.w	r0, r0, ip
   14bc2:	f1bc 0f00 	cmp.w	ip, #0
   14bc6:	d03a      	beq.n	14c3e <__udivmoddi4+0xee>
   14bc8:	087f      	lsrs	r7, r7, #1
   14bca:	ea4f 0636 	mov.w	r6, r6, rrx
   14bce:	4662      	mov	r2, ip
   14bd0:	e00a      	b.n	14be8 <__udivmoddi4+0x98>
   14bd2:	1ba3      	subs	r3, r4, r6
   14bd4:	eb65 0a07 	sbc.w	sl, r5, r7
   14bd8:	18db      	adds	r3, r3, r3
   14bda:	eb4a 0a0a 	adc.w	sl, sl, sl
   14bde:	1c5c      	adds	r4, r3, #1
   14be0:	f14a 0500 	adc.w	r5, sl, #0
   14be4:	3a01      	subs	r2, #1
   14be6:	d007      	beq.n	14bf8 <__udivmoddi4+0xa8>
   14be8:	42bd      	cmp	r5, r7
   14bea:	bf08      	it	eq
   14bec:	42b4      	cmpeq	r4, r6
   14bee:	d2f0      	bcs.n	14bd2 <__udivmoddi4+0x82>
   14bf0:	1924      	adds	r4, r4, r4
   14bf2:	416d      	adcs	r5, r5
   14bf4:	3a01      	subs	r2, #1
   14bf6:	d1f7      	bne.n	14be8 <__udivmoddi4+0x98>
   14bf8:	fa24 f30c 	lsr.w	r3, r4, ip
   14bfc:	fa05 f909 	lsl.w	r9, r5, r9
   14c00:	fa25 f808 	lsr.w	r8, r5, r8
   14c04:	ea43 0309 	orr.w	r3, r3, r9
   14c08:	1900      	adds	r0, r0, r4
   14c0a:	fa25 f70c 	lsr.w	r7, r5, ip
   14c0e:	ea43 0408 	orr.w	r4, r3, r8
   14c12:	f1ac 0620 	sub.w	r6, ip, #32
   14c16:	f1cc 0220 	rsb	r2, ip, #32
   14c1a:	fa07 f30c 	lsl.w	r3, r7, ip
   14c1e:	fa04 f606 	lsl.w	r6, r4, r6
   14c22:	fa04 fc0c 	lsl.w	ip, r4, ip
   14c26:	ea43 0306 	orr.w	r3, r3, r6
   14c2a:	fa24 f202 	lsr.w	r2, r4, r2
   14c2e:	eb45 0101 	adc.w	r1, r5, r1
   14c32:	4313      	orrs	r3, r2
   14c34:	ebb0 000c 	subs.w	r0, r0, ip
   14c38:	463d      	mov	r5, r7
   14c3a:	eb61 0103 	sbc.w	r1, r1, r3
   14c3e:	f1be 0f00 	cmp.w	lr, #0
   14c42:	d001      	beq.n	14c48 <__udivmoddi4+0xf8>
   14c44:	e9ce 4500 	strd	r4, r5, [lr]
   14c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14c4c:	fab4 f084 	clz	r0, r4
   14c50:	3020      	adds	r0, #32
   14c52:	e794      	b.n	14b7e <__udivmoddi4+0x2e>
   14c54:	fab1 fc81 	clz	ip, r1
   14c58:	fab5 f085 	clz	r0, r5
   14c5c:	f10c 0c20 	add.w	ip, ip, #32
   14c60:	2d00      	cmp	r5, #0
   14c62:	d18c      	bne.n	14b7e <__udivmoddi4+0x2e>
   14c64:	e7f2      	b.n	14c4c <__udivmoddi4+0xfc>
   14c66:	bf00      	nop
