
t186ref/build-t186/user_tasks/sample/ipc-unittest/srv/srv.syms.elf:     file format elf32-littlearm


Disassembly of section .text:

00008000 <exit>:
/* HACK: needed temporarily until the syscalls file gets the
 * __NO_RETURN annotation */
__NO_RETURN long exit_group (void);

__NO_RETURN void exit(int status)
{
    8000:	e92d4010 	push	{r4, lr}
	__cxa_finalize();
    8004:	eb00051e 	bl	9484 <__cxa_finalize>
	exit_group();
    8008:	eb000f93 	bl	be5c <exit_group>

0000800c <main>:

/*
 *  Main entry point of service task
 */
int main(void)
{
    800c:	e59f0204 	ldr	r0, [pc, #516]	; 8218 <main+0x20c>
	TLOGI ("Init unittest services!!!\n");
    8010:	e3003149 	movw	r3, #329	; 0x149
{
    8014:	e59f1200 	ldr	r1, [pc, #512]	; 821c <main+0x210>
    8018:	e08f0000 	add	r0, pc, r0
    801c:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
	TLOGI ("Init unittest services!!!\n");
    8020:	e59fc1f8 	ldr	ip, [pc, #504]	; 8220 <main+0x214>
{
    8024:	e24dd01c 	sub	sp, sp, #28
	TLOGI ("Init unittest services!!!\n");
    8028:	e59f21f4 	ldr	r2, [pc, #500]	; 8224 <main+0x218>
{
    802c:	e7909001 	ldr	r9, [r0, r1]
	for (uint i = 0; i < countof(_services); i++) {
    8030:	e3a04000 	mov	r4, #0
    8034:	e59f61ec 	ldr	r6, [pc, #492]	; 8228 <main+0x21c>
	TLOGI ("Init unittest services!!!\n");
    8038:	e08f2002 	add	r2, pc, r2
    803c:	e59f51e8 	ldr	r5, [pc, #488]	; 822c <main+0x220>
{
    8040:	e5991000 	ldr	r1, [r9]
    8044:	e08f6006 	add	r6, pc, r6
    8048:	e58d1014 	str	r1, [sp, #20]
    804c:	e08f5005 	add	r5, pc, r5
	TLOGI ("Init unittest services!!!\n");
    8050:	e59f11d8 	ldr	r1, [pc, #472]	; 8230 <main+0x224>
    8054:	e790700c 	ldr	r7, [r0, ip]
    8058:	e08f1001 	add	r1, pc, r1
    805c:	e2870028 	add	r0, r7, #40	; 0x28
    8060:	eb0014e0 	bl	d3e8 <fprintf>
		int rc = _create_service(&_services[i], &_srv_states[i]);
    8064:	e1a01005 	mov	r1, r5
    8068:	e1a00006 	mov	r0, r6
    806c:	eb0000d9 	bl	83d8 <_create_service>
		if (rc < 0) {
    8070:	e2508000 	subs	r8, r0, #0
    8074:	ba000025 	blt	8110 <main+0x104>
	for (uint i = 0; i < countof(_services); i++) {
    8078:	e2844001 	add	r4, r4, #1
    807c:	e2866020 	add	r6, r6, #32
    8080:	e3540009 	cmp	r4, #9
    8084:	e2855014 	add	r5, r5, #20
    8088:	1afffff5 	bne	8064 <main+0x58>
	TLOGI("no handler for event (0x%x) with handle %d\n",
    808c:	e59f61a0 	ldr	r6, [pc, #416]	; 8234 <main+0x228>
    8090:	e28d4008 	add	r4, sp, #8
    8094:	e59f519c 	ldr	r5, [pc, #412]	; 8238 <main+0x22c>
		TLOGI("got an event (0x%x) with invalid handle (%d)",
    8098:	e59f819c 	ldr	r8, [pc, #412]	; 823c <main+0x230>
	TLOGI("no handler for event (0x%x) with handle %d\n",
    809c:	e08f6006 	add	r6, pc, r6
    80a0:	e08f5005 	add	r5, pc, r5
		TLOGI("got an event (0x%x) with invalid handle (%d)",
    80a4:	e08f8008 	add	r8, pc, r8
		return -1;
	}

	/* handle events */
	while (!stopped) {
		event.handle = INVALID_IPC_HANDLE;
    80a8:	e3e03000 	mvn	r3, #0
		event.event  = 0;
		event.cookie = NULL;
		rc = wait_any(&event, -1);
    80ac:	e1a00004 	mov	r0, r4
    80b0:	e1a01003 	mov	r1, r3
		event.handle = INVALID_IPC_HANDLE;
    80b4:	e58d3008 	str	r3, [sp, #8]
		event.event  = 0;
    80b8:	e3a03000 	mov	r3, #0
    80bc:	e58d300c 	str	r3, [sp, #12]
		event.cookie = NULL;
    80c0:	e58d3010 	str	r3, [sp, #16]
		rc = wait_any(&event, -1);
    80c4:	eb000f7c 	bl	bebc <wait_any>
		if (rc < 0) {
    80c8:	e3500000 	cmp	r0, #0
    80cc:	ba00002c 	blt	8184 <main+0x178>
			TLOGI("wait_any failed (%d)", rc);
			continue;
		}
		if (rc == NO_ERROR) { /* got an event */
    80d0:	1afffff4 	bne	80a8 <main+0x9c>
	if (ev->event == IPC_HANDLE_POLL_NONE) {
    80d4:	e59d200c 	ldr	r2, [sp, #12]
    80d8:	e3520000 	cmp	r2, #0
    80dc:	0a000031 	beq	81a8 <main+0x19c>
	if (ev->handle == INVALID_IPC_HANDLE) {
    80e0:	e59d3008 	ldr	r3, [sp, #8]
    80e4:	e3730001 	cmn	r3, #1
    80e8:	0a000040 	beq	81f0 <main+0x1e4>
	struct tipc_event_handler *handler = ev->cookie;
    80ec:	e59d1010 	ldr	r1, [sp, #16]
	if (handler && handler->proc) {
    80f0:	e3510000 	cmp	r1, #0
    80f4:	0a000033 	beq	81c8 <main+0x1bc>
    80f8:	e5911000 	ldr	r1, [r1]
    80fc:	e3510000 	cmp	r1, #0
    8100:	0a000030 	beq	81c8 <main+0x1bc>
		handler->proc(ev);
    8104:	e1a00004 	mov	r0, r4
    8108:	e12fff31 	blx	r1
    810c:	eaffffe5 	b	80a8 <main+0x9c>
			TLOGI("Failed (%d) to create service %s\n",
    8110:	e59f1128 	ldr	r1, [pc, #296]	; 8240 <main+0x234>
    8114:	e2877028 	add	r7, r7, #40	; 0x28
    8118:	e59f5124 	ldr	r5, [pc, #292]	; 8244 <main+0x238>
    811c:	e300314f 	movw	r3, #335	; 0x14f
    8120:	e08f1001 	add	r1, pc, r1
    8124:	e1a00007 	mov	r0, r7
    8128:	e08f5005 	add	r5, pc, r5
    812c:	e58d8000 	str	r8, [sp]
    8130:	e1a02005 	mov	r2, r5
    8134:	e7911284 	ldr	r1, [r1, r4, lsl #5]
    8138:	e58d1004 	str	r1, [sp, #4]
    813c:	e59f1104 	ldr	r1, [pc, #260]	; 8248 <main+0x23c>
    8140:	e08f1001 	add	r1, pc, r1
    8144:	eb0014a7 	bl	d3e8 <fprintf>
		TLOGI("Failed (%d) to init service", rc);
    8148:	e59f10fc 	ldr	r1, [pc, #252]	; 824c <main+0x240>
    814c:	e1a02005 	mov	r2, r5
    8150:	e3003365 	movw	r3, #869	; 0x365
    8154:	e08f1001 	add	r1, pc, r1
    8158:	e1a00007 	mov	r0, r7
    815c:	e58d8000 	str	r8, [sp]
    8160:	eb0014a0 	bl	d3e8 <fprintf>
		kill_services();
    8164:	eb000081 	bl	8370 <kill_services>
		}
	}

	kill_services();
	return 0;
}
    8168:	e59d2014 	ldr	r2, [sp, #20]
    816c:	e5993000 	ldr	r3, [r9]
    8170:	e3e00000 	mvn	r0, #0
    8174:	e1520003 	cmp	r2, r3
    8178:	1a000025 	bne	8214 <main+0x208>
    817c:	e28dd01c 	add	sp, sp, #28
    8180:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
			TLOGI("wait_any failed (%d)", rc);
    8184:	e59f20c4 	ldr	r2, [pc, #196]	; 8250 <main+0x244>
    8188:	e3003371 	movw	r3, #881	; 0x371
    818c:	e59f10c0 	ldr	r1, [pc, #192]	; 8254 <main+0x248>
    8190:	e58d0000 	str	r0, [sp]
    8194:	e08f2002 	add	r2, pc, r2
    8198:	e2870028 	add	r0, r7, #40	; 0x28
    819c:	e08f1001 	add	r1, pc, r1
    81a0:	eb001490 	bl	d3e8 <fprintf>
			continue;
    81a4:	eaffffbf 	b	80a8 <main+0x9c>
		TLOGI("got an empty event\n");
    81a8:	e59f20a8 	ldr	r2, [pc, #168]	; 8258 <main+0x24c>
    81ac:	e300333f 	movw	r3, #831	; 0x33f
    81b0:	e59f10a4 	ldr	r1, [pc, #164]	; 825c <main+0x250>
    81b4:	e2870028 	add	r0, r7, #40	; 0x28
    81b8:	e08f2002 	add	r2, pc, r2
    81bc:	e08f1001 	add	r1, pc, r1
    81c0:	eb001488 	bl	d3e8 <fprintf>
    81c4:	eaffffb7 	b	80a8 <main+0x9c>
	TLOGI("no handler for event (0x%x) with handle %d\n",
    81c8:	e58d3004 	str	r3, [sp, #4]
    81cc:	e1a01005 	mov	r1, r5
    81d0:	e58d2000 	str	r2, [sp]
    81d4:	e3a03fd5 	mov	r3, #852	; 0x354
    81d8:	e1a02006 	mov	r2, r6
    81dc:	e2870028 	add	r0, r7, #40	; 0x28
    81e0:	eb001480 	bl	d3e8 <fprintf>
	close(ev->handle);
    81e4:	e59d0008 	ldr	r0, [sp, #8]
    81e8:	eb000f2a 	bl	be98 <close>
    81ec:	eaffffad 	b	80a8 <main+0x9c>
		TLOGI("got an event (0x%x) with invalid handle (%d)",
    81f0:	e59f1068 	ldr	r1, [pc, #104]	; 8260 <main+0x254>
    81f4:	e2870028 	add	r0, r7, #40	; 0x28
    81f8:	e58d3004 	str	r3, [sp, #4]
    81fc:	e3003346 	movw	r3, #838	; 0x346
    8200:	e58d2000 	str	r2, [sp]
    8204:	e08f1001 	add	r1, pc, r1
    8208:	e1a02008 	mov	r2, r8
    820c:	eb001475 	bl	d3e8 <fprintf>
    8210:	eaffffa4 	b	80a8 <main+0x9c>
}
    8214:	eb00148f 	bl	d458 <__stack_chk_fail>
    8218:	0000711c 	.word	0x0000711c
    821c:	0000000c 	.word	0x0000000c
    8220:	00000010 	.word	0x00000010
    8224:	00005acc 	.word	0x00005acc
    8228:	00006fd0 	.word	0x00006fd0
    822c:	00007104 	.word	0x00007104
    8230:	00005d24 	.word	0x00005d24
    8234:	00005a68 	.word	0x00005a68
    8238:	00005dc4 	.word	0x00005dc4
    823c:	00005a60 	.word	0x00005a60
    8240:	00006ef4 	.word	0x00006ef4
    8244:	000059dc 	.word	0x000059dc
    8248:	00005c60 	.word	0x00005c60
    824c:	00005c78 	.word	0x00005c78
    8250:	00005970 	.word	0x00005970
    8254:	00005c54 	.word	0x00005c54
    8258:	0000594c 	.word	0x0000594c
    825c:	00005c54 	.word	0x00005c54
    8260:	00005c28 	.word	0x00005c28

00008264 <__guard_setup>:

#include <rand.h>

unsigned int __stack_chk_guard = 0xaff;

static void __attribute__((constructor)) __guard_setup (void){
    8264:	e92d4010 	push	{r4, lr}
        /* 
         * included for future use. rand.h must be seeded and -fstack_protector must be disabled in
         * stack contexts preceeding this call.
         */
  	if ( __stack_chk_guard == 0U )
    8268:	e59f4018 	ldr	r4, [pc, #24]	; 8288 <__guard_setup+0x24>
    826c:	e08f4004 	add	r4, pc, r4
    8270:	e5943000 	ldr	r3, [r4]
    8274:	e3530000 	cmp	r3, #0
    8278:	18bd8010 	popne	{r4, pc}
  		__stack_chk_guard = rand();
    827c:	eb00144b 	bl	d3b0 <rand>
    8280:	e5840000 	str	r0, [r4]
}
    8284:	e8bd8010 	pop	{r4, pc}
    8288:	00006ffc 	.word	0x00006ffc

0000828c <_destroy_service>:
{
    828c:	e92d4030 	push	{r4, r5, lr}
	if (!state) {
    8290:	e2504000 	subs	r4, r0, #0
{
    8294:	e59f50bc 	ldr	r5, [pc, #188]	; 8358 <_destroy_service+0xcc>
    8298:	e24dd00c 	sub	sp, sp, #12
    829c:	e08f5005 	add	r5, pc, r5
	if (!state) {
    82a0:	0a000014 	beq	82f8 <_destroy_service+0x6c>
	if (state->priv) {
    82a4:	e5940008 	ldr	r0, [r4, #8]
    82a8:	e3500000 	cmp	r0, #0
    82ac:	0a000002 	beq	82bc <_destroy_service+0x30>
		free(state->priv);
    82b0:	eb000c15 	bl	b30c <free>
		state->priv = NULL;
    82b4:	e3a03000 	mov	r3, #0
    82b8:	e5843008 	str	r3, [r4, #8]
	if (state->port != INVALID_IPC_HANDLE) {
    82bc:	e5940004 	ldr	r0, [r4, #4]
    82c0:	e3700001 	cmn	r0, #1
    82c4:	1a000005 	bne	82e0 <_destroy_service+0x54>
	state->service = NULL;
    82c8:	e3a03000 	mov	r3, #0
    82cc:	e5843000 	str	r3, [r4]
	state->handler.proc = NULL;
    82d0:	e584300c 	str	r3, [r4, #12]
	state->handler.priv = NULL;
    82d4:	e5843010 	str	r3, [r4, #16]
}
    82d8:	e28dd00c 	add	sp, sp, #12
    82dc:	e8bd8030 	pop	{r4, r5, pc}
		int rc = close(state->port);
    82e0:	eb000eec 	bl	be98 <close>
		if (rc != NO_ERROR) {
    82e4:	e2501000 	subs	r1, r0, #0
    82e8:	1a00000d 	bne	8324 <_destroy_service+0x98>
		state->port = INVALID_IPC_HANDLE;
    82ec:	e3e03000 	mvn	r3, #0
    82f0:	e5843004 	str	r3, [r4, #4]
    82f4:	eafffff3 	b	82c8 <_destroy_service+0x3c>
		TLOGI("non-null state expected\n");
    82f8:	e59f005c 	ldr	r0, [pc, #92]	; 835c <_destroy_service+0xd0>
    82fc:	e3a030d9 	mov	r3, #217	; 0xd9
    8300:	e59f2058 	ldr	r2, [pc, #88]	; 8360 <_destroy_service+0xd4>
    8304:	e59f1058 	ldr	r1, [pc, #88]	; 8364 <_destroy_service+0xd8>
    8308:	e08f2002 	add	r2, pc, r2
    830c:	e7950000 	ldr	r0, [r5, r0]
    8310:	e08f1001 	add	r1, pc, r1
    8314:	e2800028 	add	r0, r0, #40	; 0x28
}
    8318:	e28dd00c 	add	sp, sp, #12
    831c:	e8bd4030 	pop	{r4, r5, lr}
		TLOGI("non-null state expected\n");
    8320:	ea001430 	b	d3e8 <fprintf>
			TLOGI("Failed (%d) to close port %d\n",
    8324:	e59f0030 	ldr	r0, [pc, #48]	; 835c <_destroy_service+0xd0>
    8328:	e3a030e8 	mov	r3, #232	; 0xe8
    832c:	e594c004 	ldr	ip, [r4, #4]
    8330:	e59f2030 	ldr	r2, [pc, #48]	; 8368 <_destroy_service+0xdc>
    8334:	e7950000 	ldr	r0, [r5, r0]
    8338:	e08f2002 	add	r2, pc, r2
    833c:	e58d1000 	str	r1, [sp]
    8340:	e59f1024 	ldr	r1, [pc, #36]	; 836c <_destroy_service+0xe0>
    8344:	e2800028 	add	r0, r0, #40	; 0x28
    8348:	e58dc004 	str	ip, [sp, #4]
    834c:	e08f1001 	add	r1, pc, r1
    8350:	eb001424 	bl	d3e8 <fprintf>
    8354:	eaffffe4 	b	82ec <_destroy_service+0x60>
    8358:	00006e98 	.word	0x00006e98
    835c:	00000010 	.word	0x00000010
    8360:	000057fc 	.word	0x000057fc
    8364:	00005808 	.word	0x00005808
    8368:	000057cc 	.word	0x000057cc
    836c:	000057f0 	.word	0x000057f0

00008370 <kill_services>:
{
    8370:	e59f104c 	ldr	r1, [pc, #76]	; 83c4 <kill_services+0x54>
	TLOGI ("Terminating unittest services\n");
    8374:	e3a03f4f 	mov	r3, #316	; 0x13c
    8378:	e59f0048 	ldr	r0, [pc, #72]	; 83c8 <kill_services+0x58>
{
    837c:	e08f1001 	add	r1, pc, r1
    8380:	e92d4070 	push	{r4, r5, r6, lr}
    8384:	e59f4040 	ldr	r4, [pc, #64]	; 83cc <kill_services+0x5c>
	TLOGI ("Terminating unittest services\n");
    8388:	e59f2040 	ldr	r2, [pc, #64]	; 83d0 <kill_services+0x60>
    838c:	e7910000 	ldr	r0, [r1, r0]
    8390:	e08f4004 	add	r4, pc, r4
    8394:	e59f1038 	ldr	r1, [pc, #56]	; 83d4 <kill_services+0x64>
    8398:	e08f2002 	add	r2, pc, r2
    839c:	e2800028 	add	r0, r0, #40	; 0x28
    83a0:	e28450b4 	add	r5, r4, #180	; 0xb4
    83a4:	e08f1001 	add	r1, pc, r1
    83a8:	eb00140e 	bl	d3e8 <fprintf>
		_destroy_service(&_srv_states[i]);
    83ac:	e1a00004 	mov	r0, r4
    83b0:	e2844014 	add	r4, r4, #20
    83b4:	ebffffb4 	bl	828c <_destroy_service>
	for (uint i = 0; i < countof(_services); i++) {
    83b8:	e1540005 	cmp	r4, r5
    83bc:	1afffffa 	bne	83ac <kill_services+0x3c>
    83c0:	e8bd8070 	pop	{r4, r5, r6, pc}
    83c4:	00006db8 	.word	0x00006db8
    83c8:	00000010 	.word	0x00000010
    83cc:	00006dc0 	.word	0x00006dc0
    83d0:	0000576c 	.word	0x0000576c
    83d4:	000059b0 	.word	0x000059b0

000083d8 <_create_service>:
	if (!srv || !state) {
    83d8:	e16f3f11 	clz	r3, r1
{
    83dc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (!srv || !state) {
    83e0:	e3500000 	cmp	r0, #0
{
    83e4:	e59f8140 	ldr	r8, [pc, #320]	; 852c <_create_service+0x154>
	if (!srv || !state) {
    83e8:	e1a032a3 	lsr	r3, r3, #5
    83ec:	11a07003 	movne	r7, r3
    83f0:	03a07001 	moveq	r7, #1
{
    83f4:	e08f8008 	add	r8, pc, r8
    83f8:	e24dd008 	sub	sp, sp, #8
	if (!srv || !state) {
    83fc:	e3570000 	cmp	r7, #0
    8400:	1a00003e 	bne	8500 <_create_service+0x128>
	int rc = port_create(srv->name, srv->msg_num, srv->msg_size,
    8404:	e1c020d8 	ldrd	r2, [r0, #8]
    8408:	e1a04000 	mov	r4, r0
    840c:	e1a05001 	mov	r5, r1
    8410:	e1c000d0 	ldrd	r0, [r0]
    8414:	eb000e96 	bl	be74 <port_create>
	if (rc < 0) {
    8418:	e2506000 	subs	r6, r0, #0
    841c:	ba000017 	blt	8480 <_create_service+0xa8>
	if (srv->port_state_size) {
    8420:	e5941010 	ldr	r1, [r4, #16]
	state->port = (handle_t)rc;
    8424:	e1a00006 	mov	r0, r6
	state->handler.proc = srv->port_handler;
    8428:	e5943018 	ldr	r3, [r4, #24]
	if (srv->port_state_size) {
    842c:	e3510000 	cmp	r1, #0
	state->port = (handle_t)rc;
    8430:	e5856004 	str	r6, [r5, #4]
	state->handler.proc = srv->port_handler;
    8434:	e585300c 	str	r3, [r5, #12]
	state->handler.priv = state;
    8438:	e5855010 	str	r5, [r5, #16]
	state->service = srv;
    843c:	e5854000 	str	r4, [r5]
	state->priv = NULL;
    8440:	e5857008 	str	r7, [r5, #8]
	if (srv->port_state_size) {
    8444:	0a000005 	beq	8460 <_create_service+0x88>
		state->priv = calloc(1, srv->port_state_size);
    8448:	e3a00001 	mov	r0, #1
    844c:	eb000db7 	bl	bb30 <calloc>
		if (!state->priv) {
    8450:	e3500000 	cmp	r0, #0
		state->priv = calloc(1, srv->port_state_size);
    8454:	e5850008 	str	r0, [r5, #8]
		if (!state->priv) {
    8458:	0a000026 	beq	84f8 <_create_service+0x120>
    845c:	e5950004 	ldr	r0, [r5, #4]
	rc = set_cookie(state->port, &state->handler);
    8460:	e285100c 	add	r1, r5, #12
    8464:	eb000e8e 	bl	bea4 <set_cookie>
	if (rc < 0) {
    8468:	e2506000 	subs	r6, r0, #0
	return NO_ERROR;
    846c:	a3a06000 	movge	r6, #0
	if (rc < 0) {
    8470:	ba00000f 	blt	84b4 <_create_service+0xdc>
}
    8474:	e1a00006 	mov	r0, r6
    8478:	e28dd008 	add	sp, sp, #8
    847c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		TLOGI("Failed (%d) to create port\n", rc);
    8480:	e59f00a8 	ldr	r0, [pc, #168]	; 8530 <_create_service+0x158>
    8484:	e3003103 	movw	r3, #259	; 0x103
    8488:	e59f20a4 	ldr	r2, [pc, #164]	; 8534 <_create_service+0x15c>
    848c:	e59f10a4 	ldr	r1, [pc, #164]	; 8538 <_create_service+0x160>
    8490:	e08f2002 	add	r2, pc, r2
    8494:	e7980000 	ldr	r0, [r8, r0]
    8498:	e08f1001 	add	r1, pc, r1
    849c:	e58d6000 	str	r6, [sp]
    84a0:	e2800028 	add	r0, r0, #40	; 0x28
    84a4:	eb0013cf 	bl	d3e8 <fprintf>
}
    84a8:	e1a00006 	mov	r0, r6
    84ac:	e28dd008 	add	sp, sp, #8
    84b0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		TLOGI("Failed (%d) to set cookie on port %d\n",
    84b4:	e59f1074 	ldr	r1, [pc, #116]	; 8530 <_create_service+0x158>
    84b8:	e300311b 	movw	r3, #283	; 0x11b
    84bc:	e59f2078 	ldr	r2, [pc, #120]	; 853c <_create_service+0x164>
    84c0:	e595c004 	ldr	ip, [r5, #4]
    84c4:	e08f2002 	add	r2, pc, r2
    84c8:	e7980001 	ldr	r0, [r8, r1]
    84cc:	e59f106c 	ldr	r1, [pc, #108]	; 8540 <_create_service+0x168>
    84d0:	e58dc004 	str	ip, [sp, #4]
    84d4:	e2800028 	add	r0, r0, #40	; 0x28
    84d8:	e58d6000 	str	r6, [sp]
    84dc:	e08f1001 	add	r1, pc, r1
    84e0:	eb0013c0 	bl	d3e8 <fprintf>
	_destroy_service(state);
    84e4:	e1a00005 	mov	r0, r5
    84e8:	ebffff67 	bl	828c <_destroy_service>
}
    84ec:	e1a00006 	mov	r0, r6
    84f0:	e28dd008 	add	sp, sp, #8
    84f4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			rc = ERR_NO_MEMORY;
    84f8:	e3e06004 	mvn	r6, #4
    84fc:	eafffff8 	b	84e4 <_create_service+0x10c>
		TLOGI("null services specified\n");
    8500:	e59f0028 	ldr	r0, [pc, #40]	; 8530 <_create_service+0x158>
    8504:	e3a030fb 	mov	r3, #251	; 0xfb
    8508:	e59f2034 	ldr	r2, [pc, #52]	; 8544 <_create_service+0x16c>
		return ERR_INVALID_ARGS;
    850c:	e3e06007 	mvn	r6, #7
		TLOGI("null services specified\n");
    8510:	e59f1030 	ldr	r1, [pc, #48]	; 8548 <_create_service+0x170>
    8514:	e08f2002 	add	r2, pc, r2
    8518:	e7980000 	ldr	r0, [r8, r0]
    851c:	e08f1001 	add	r1, pc, r1
    8520:	e2800028 	add	r0, r0, #40	; 0x28
    8524:	eb0013af 	bl	d3e8 <fprintf>
		return ERR_INVALID_ARGS;
    8528:	eaffffd1 	b	8474 <_create_service+0x9c>
    852c:	00006d40 	.word	0x00006d40
    8530:	00000010 	.word	0x00000010
    8534:	00005674 	.word	0x00005674
    8538:	00005618 	.word	0x00005618
    853c:	00005640 	.word	0x00005640
    8540:	000055f8 	.word	0x000055f8
    8544:	000055f0 	.word	0x000055f0
    8548:	00005570 	.word	0x00005570

0000854c <datasink_handle_chan>:
{
    854c:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8550:	e1a04000 	mov	r4, r0
    8554:	e59f5138 	ldr	r5, [pc, #312]	; 8694 <datasink_handle_chan+0x148>
    8558:	e59f3138 	ldr	r3, [pc, #312]	; 8698 <datasink_handle_chan+0x14c>
    855c:	e24dd01c 	sub	sp, sp, #28
    8560:	e08f5005 	add	r5, pc, r5
	if ((ev->event & IPC_HANDLE_POLL_ERROR) ||
    8564:	e5901004 	ldr	r1, [r0, #4]
    8568:	e3110012 	tst	r1, #18
{
    856c:	e7956003 	ldr	r6, [r5, r3]
    8570:	e5963000 	ldr	r3, [r6]
    8574:	e58d3014 	str	r3, [sp, #20]
	if ((ev->event & IPC_HANDLE_POLL_ERROR) ||
    8578:	1a000028 	bne	8620 <datasink_handle_chan+0xd4>
	if (ev->event & IPC_HANDLE_POLL_MSG) {
    857c:	e3110008 	tst	r1, #8
    8580:	1a000015 	bne	85dc <datasink_handle_chan+0x90>
	if (ev->event & IPC_HANDLE_POLL_HUP) {
    8584:	e3110004 	tst	r1, #4
    8588:	1a000010 	bne	85d0 <datasink_handle_chan+0x84>
}
    858c:	e59d2014 	ldr	r2, [sp, #20]
    8590:	e5963000 	ldr	r3, [r6]
    8594:	e1520003 	cmp	r2, r3
    8598:	1a00003c 	bne	8690 <datasink_handle_chan+0x144>
    859c:	e28dd01c 	add	sp, sp, #28
    85a0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
			TLOGI("failed (%d) to get_msg for chan (%d)\n",
    85a4:	e59fc0f0 	ldr	ip, [pc, #240]	; 869c <datasink_handle_chan+0x150>
    85a8:	e3003215 	movw	r3, #533	; 0x215
    85ac:	e59f20ec 	ldr	r2, [pc, #236]	; 86a0 <datasink_handle_chan+0x154>
    85b0:	e08f2002 	add	r2, pc, r2
    85b4:	e795c00c 	ldr	ip, [r5, ip]
    85b8:	e58d1000 	str	r1, [sp]
    85bc:	e59f10e0 	ldr	r1, [pc, #224]	; 86a4 <datasink_handle_chan+0x158>
    85c0:	e58d0004 	str	r0, [sp, #4]
    85c4:	e28c0028 	add	r0, ip, #40	; 0x28
    85c8:	e08f1001 	add	r1, pc, r1
    85cc:	eb001385 	bl	d3e8 <fprintf>
			close(ev->handle);
    85d0:	e5940000 	ldr	r0, [r4]
    85d4:	eb000e2f 	bl	be98 <close>
			return;
    85d8:	eaffffeb 	b	858c <datasink_handle_chan+0x40>
    85dc:	e28d700c 	add	r7, sp, #12
    85e0:	ea000006 	b	8600 <datasink_handle_chan+0xb4>
		if (rc != NO_ERROR) {
    85e4:	e3500000 	cmp	r0, #0
    85e8:	e5940000 	ldr	r0, [r4]
    85ec:	1affffec 	bne	85a4 <datasink_handle_chan+0x58>
		rc = put_msg(ev->handle, inf.id);
    85f0:	e59d1010 	ldr	r1, [sp, #16]
    85f4:	eb000e39 	bl	bee0 <put_msg>
		if (rc != NO_ERROR) {
    85f8:	e3500000 	cmp	r0, #0
    85fc:	1a000016 	bne	865c <datasink_handle_chan+0x110>
		rc = get_msg(ev->handle, &inf);
    8600:	e1a01007 	mov	r1, r7
    8604:	e5940000 	ldr	r0, [r4]
    8608:	eb000e2e 	bl	bec8 <get_msg>
    860c:	e1a01000 	mov	r1, r0
		if (rc == ERR_NO_MSG)
    8610:	e3700004 	cmn	r0, #4
    8614:	1afffff2 	bne	85e4 <datasink_handle_chan+0x98>
    8618:	e5941004 	ldr	r1, [r4, #4]
    861c:	eaffffd8 	b	8584 <datasink_handle_chan+0x38>
		TLOGI("error event (0x%x) for chan (%d)\n",
    8620:	e59f0074 	ldr	r0, [pc, #116]	; 869c <datasink_handle_chan+0x150>
    8624:	e300322e 	movw	r3, #558	; 0x22e
    8628:	e594c000 	ldr	ip, [r4]
    862c:	e59f2074 	ldr	r2, [pc, #116]	; 86a8 <datasink_handle_chan+0x15c>
    8630:	e7950000 	ldr	r0, [r5, r0]
    8634:	e08f2002 	add	r2, pc, r2
    8638:	e58d1000 	str	r1, [sp]
    863c:	e59f1068 	ldr	r1, [pc, #104]	; 86ac <datasink_handle_chan+0x160>
    8640:	e2800028 	add	r0, r0, #40	; 0x28
    8644:	e58dc004 	str	ip, [sp, #4]
    8648:	e08f1001 	add	r1, pc, r1
    864c:	eb001365 	bl	d3e8 <fprintf>
		close(ev->handle);
    8650:	e5940000 	ldr	r0, [r4]
    8654:	eb000e0f 	bl	be98 <close>
		return;
    8658:	eaffffcb 	b	858c <datasink_handle_chan+0x40>
			TLOGI("failed (%d) to putt_msg for chan (%d)\n",
    865c:	e59f1038 	ldr	r1, [pc, #56]	; 869c <datasink_handle_chan+0x150>
    8660:	e300321d 	movw	r3, #541	; 0x21d
    8664:	e594c000 	ldr	ip, [r4]
    8668:	e59f2040 	ldr	r2, [pc, #64]	; 86b0 <datasink_handle_chan+0x164>
    866c:	e7951001 	ldr	r1, [r5, r1]
    8670:	e08f2002 	add	r2, pc, r2
    8674:	e58d0000 	str	r0, [sp]
    8678:	e2810028 	add	r0, r1, #40	; 0x28
    867c:	e59f1030 	ldr	r1, [pc, #48]	; 86b4 <datasink_handle_chan+0x168>
    8680:	e58dc004 	str	ip, [sp, #4]
    8684:	e08f1001 	add	r1, pc, r1
    8688:	eb001356 	bl	d3e8 <fprintf>
    868c:	eaffffcf 	b	85d0 <datasink_handle_chan+0x84>
}
    8690:	eb001370 	bl	d458 <__stack_chk_fail>
    8694:	00006bd4 	.word	0x00006bd4
    8698:	0000000c 	.word	0x0000000c
    869c:	00000010 	.word	0x00000010
    86a0:	00005554 	.word	0x00005554
    86a4:	0000563c 	.word	0x0000563c
    86a8:	000054d0 	.word	0x000054d0
    86ac:	00005590 	.word	0x00005590
    86b0:	00005494 	.word	0x00005494
    86b4:	000055b0 	.word	0x000055b0

000086b8 <restart_service>:
{
    86b8:	e59fc050 	ldr	ip, [pc, #80]	; 8710 <restart_service+0x58>
    86bc:	e92d4070 	push	{r4, r5, r6, lr}
	if (!state) {
    86c0:	e2504000 	subs	r4, r0, #0
{
    86c4:	e08fc00c 	add	ip, pc, ip
	if (!state) {
    86c8:	0a000005 	beq	86e4 <restart_service+0x2c>
	const struct tipc_srv *srv = state->service;
    86cc:	e5945000 	ldr	r5, [r4]
	_destroy_service(state);
    86d0:	ebfffeed 	bl	828c <_destroy_service>
	return _create_service(srv, state);
    86d4:	e1a01004 	mov	r1, r4
    86d8:	e1a00005 	mov	r0, r5
}
    86dc:	e8bd4070 	pop	{r4, r5, r6, lr}
	return _create_service(srv, state);
    86e0:	eaffff3c 	b	83d8 <_create_service>
		TLOGI("non-null state expected\n");
    86e4:	e59f0028 	ldr	r0, [pc, #40]	; 8714 <restart_service+0x5c>
    86e8:	e300312e 	movw	r3, #302	; 0x12e
    86ec:	e59f2024 	ldr	r2, [pc, #36]	; 8718 <restart_service+0x60>
    86f0:	e59f1024 	ldr	r1, [pc, #36]	; 871c <restart_service+0x64>
    86f4:	e08f2002 	add	r2, pc, r2
    86f8:	e79c0000 	ldr	r0, [ip, r0]
    86fc:	e08f1001 	add	r1, pc, r1
    8700:	e2800028 	add	r0, r0, #40	; 0x28
    8704:	eb001337 	bl	d3e8 <fprintf>
}
    8708:	e3e00007 	mvn	r0, #7
    870c:	e8bd8070 	pop	{r4, r5, r6, pc}
    8710:	00006a70 	.word	0x00006a70
    8714:	00000010 	.word	0x00000010
    8718:	00005410 	.word	0x00005410
    871c:	0000541c 	.word	0x0000541c

00008720 <handle_port_errors>:
{
    8720:	e59fc068 	ldr	ip, [pc, #104]	; 8790 <handle_port_errors+0x70>
	    (ev->event & IPC_HANDLE_POLL_MSG) ||
    8724:	e5901004 	ldr	r1, [r0, #4]
{
    8728:	e08fc00c 	add	ip, pc, ip
	if ((ev->event & IPC_HANDLE_POLL_ERROR) ||
    872c:	e211301e 	ands	r3, r1, #30
    8730:	1a000001 	bne	873c <handle_port_errors+0x1c>
	return false;
    8734:	e1a00003 	mov	r0, r3
}
    8738:	e12fff1e 	bx	lr
{
    873c:	e92d4010 	push	{r4, lr}
    8740:	e1a04000 	mov	r4, r0
		TLOGI("error event (0x%x) for port (%d)\n",
    8744:	e59f0048 	ldr	r0, [pc, #72]	; 8794 <handle_port_errors+0x74>
{
    8748:	e24dd008 	sub	sp, sp, #8
		TLOGI("error event (0x%x) for port (%d)\n",
    874c:	e59f2044 	ldr	r2, [pc, #68]	; 8798 <handle_port_errors+0x78>
    8750:	e594e000 	ldr	lr, [r4]
    8754:	e3003162 	movw	r3, #354	; 0x162
    8758:	e08f2002 	add	r2, pc, r2
    875c:	e79c0000 	ldr	r0, [ip, r0]
    8760:	e58d1000 	str	r1, [sp]
    8764:	e59f1030 	ldr	r1, [pc, #48]	; 879c <handle_port_errors+0x7c>
    8768:	e2800028 	add	r0, r0, #40	; 0x28
    876c:	e58de004 	str	lr, [sp, #4]
    8770:	e08f1001 	add	r1, pc, r1
    8774:	eb00131b 	bl	d3e8 <fprintf>
	return containerof(ev->cookie, struct tipc_srv_state, handler);
    8778:	e5940008 	ldr	r0, [r4, #8]
		restart_service(get_srv_state(ev));
    877c:	e240000c 	sub	r0, r0, #12
    8780:	ebffffcc 	bl	86b8 <restart_service>
		return true;
    8784:	e3a00001 	mov	r0, #1
}
    8788:	e28dd008 	add	sp, sp, #8
    878c:	e8bd8010 	pop	{r4, pc}
    8790:	00006a0c 	.word	0x00006a0c
    8794:	00000010 	.word	0x00000010
    8798:	000053ac 	.word	0x000053ac
    879c:	000055b8 	.word	0x000055b8

000087a0 <uuid_handle_port>:
{
    87a0:	e92d43f0 	push	{r4, r5, r6, r7, r8, r9, lr}
    87a4:	e1a06000 	mov	r6, r0
    87a8:	e59f4100 	ldr	r4, [pc, #256]	; 88b0 <uuid_handle_port+0x110>
    87ac:	e59f3100 	ldr	r3, [pc, #256]	; 88b4 <uuid_handle_port+0x114>
    87b0:	e24dd03c 	sub	sp, sp, #60	; 0x3c
    87b4:	e08f4004 	add	r4, pc, r4
    87b8:	e7945003 	ldr	r5, [r4, r3]
    87bc:	e5953000 	ldr	r3, [r5]
    87c0:	e58d3034 	str	r3, [sp, #52]	; 0x34
	if (handle_port_errors(ev))
    87c4:	ebffffd5 	bl	8720 <handle_port_errors>
    87c8:	e2507000 	subs	r7, r0, #0
    87cc:	1a000002 	bne	87dc <uuid_handle_port+0x3c>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    87d0:	e5963004 	ldr	r3, [r6, #4]
    87d4:	e3130001 	tst	r3, #1
    87d8:	1a000005 	bne	87f4 <uuid_handle_port+0x54>
}
    87dc:	e59d2034 	ldr	r2, [sp, #52]	; 0x34
    87e0:	e5953000 	ldr	r3, [r5]
    87e4:	e1520003 	cmp	r2, r3
    87e8:	1a00002f 	bne	88ac <uuid_handle_port+0x10c>
    87ec:	e28dd03c 	add	sp, sp, #60	; 0x3c
    87f0:	e8bd83f0 	pop	{r4, r5, r6, r7, r8, r9, pc}
		int rc = accept(ev->handle, &peer_uuid);
    87f4:	e28d8024 	add	r8, sp, #36	; 0x24
    87f8:	e5960000 	ldr	r0, [r6]
    87fc:	e1a01008 	mov	r1, r8
    8800:	eb000da1 	bl	be8c <accept>
		if (rc < 0) {
    8804:	e2509000 	subs	r9, r0, #0
    8808:	ba00000e 	blt	8848 <uuid_handle_port+0xa8>
		rc = send_msg(chan, &msg);
    880c:	e28d1014 	add	r1, sp, #20
		iov.len  = sizeof(peer_uuid);
    8810:	e3a02010 	mov	r2, #16
		msg.num_iov = 1;
    8814:	e3a03001 	mov	r3, #1
		iov.base = &peer_uuid;
    8818:	e58d800c 	str	r8, [sp, #12]
		msg.num_iov = 1;
    881c:	e1cd21f0 	strd	r2, [sp, #16]
		msg.iov     = &iov;
    8820:	e28d300c 	add	r3, sp, #12
		msg.num_handles = 0;
    8824:	e58d701c 	str	r7, [sp, #28]
		msg.handles  = NULL;
    8828:	e58d7020 	str	r7, [sp, #32]
		msg.iov     = &iov;
    882c:	e58d3018 	str	r3, [sp, #24]
		rc = send_msg(chan, &msg);
    8830:	eb000dad 	bl	beec <send_msg>
		if (rc < 0) {
    8834:	e250c000 	subs	ip, r0, #0
    8838:	ba00000f 	blt	887c <uuid_handle_port+0xdc>
		close(chan);
    883c:	e1a00009 	mov	r0, r9
    8840:	eb000d94 	bl	be98 <close>
    8844:	eaffffe4 	b	87dc <uuid_handle_port+0x3c>
			TLOGI("failed (%d) to accept on port %d\n",
    8848:	e59f1068 	ldr	r1, [pc, #104]	; 88b8 <uuid_handle_port+0x118>
    884c:	e300331d 	movw	r3, #797	; 0x31d
    8850:	e59f2064 	ldr	r2, [pc, #100]	; 88bc <uuid_handle_port+0x11c>
    8854:	e596c000 	ldr	ip, [r6]
    8858:	e08f2002 	add	r2, pc, r2
    885c:	e7940001 	ldr	r0, [r4, r1]
    8860:	e59f1058 	ldr	r1, [pc, #88]	; 88c0 <uuid_handle_port+0x120>
    8864:	e58dc004 	str	ip, [sp, #4]
    8868:	e2800028 	add	r0, r0, #40	; 0x28
    886c:	e58d9000 	str	r9, [sp]
    8870:	e08f1001 	add	r1, pc, r1
    8874:	eb0012db 	bl	d3e8 <fprintf>
			return;
    8878:	eaffffd7 	b	87dc <uuid_handle_port+0x3c>
			TLOGI("failed (%d) to send_msg for chan (%d)\n",
    887c:	e59f0034 	ldr	r0, [pc, #52]	; 88b8 <uuid_handle_port+0x118>
    8880:	e3a03fcb 	mov	r3, #812	; 0x32c
    8884:	e59f2038 	ldr	r2, [pc, #56]	; 88c4 <uuid_handle_port+0x124>
    8888:	e59f1038 	ldr	r1, [pc, #56]	; 88c8 <uuid_handle_port+0x128>
    888c:	e08f2002 	add	r2, pc, r2
    8890:	e7940000 	ldr	r0, [r4, r0]
    8894:	e08f1001 	add	r1, pc, r1
    8898:	e58d9004 	str	r9, [sp, #4]
    889c:	e58dc000 	str	ip, [sp]
    88a0:	e2800028 	add	r0, r0, #40	; 0x28
    88a4:	eb0012cf 	bl	d3e8 <fprintf>
    88a8:	eaffffe3 	b	883c <uuid_handle_port+0x9c>
}
    88ac:	eb0012e9 	bl	d458 <__stack_chk_fail>
    88b0:	00006980 	.word	0x00006980
    88b4:	0000000c 	.word	0x0000000c
    88b8:	00000010 	.word	0x00000010
    88bc:	000052ac 	.word	0x000052ac
    88c0:	00005788 	.word	0x00005788
    88c4:	00005278 	.word	0x00005278
    88c8:	00005790 	.word	0x00005790

000088cc <echo_handle_port>:
{
    88cc:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    88d0:	e1a06000 	mov	r6, r0
    88d4:	e59f4150 	ldr	r4, [pc, #336]	; 8a2c <echo_handle_port+0x160>
    88d8:	e59f3150 	ldr	r3, [pc, #336]	; 8a30 <echo_handle_port+0x164>
    88dc:	e24dd020 	sub	sp, sp, #32
    88e0:	e08f4004 	add	r4, pc, r4
	const struct tipc_srv *srv = get_srv_state(ev)->service;
    88e4:	e5902008 	ldr	r2, [r0, #8]
{
    88e8:	e7945003 	ldr	r5, [r4, r3]
	const struct tipc_srv *srv = get_srv_state(ev)->service;
    88ec:	e512700c 	ldr	r7, [r2, #-12]
{
    88f0:	e5953000 	ldr	r3, [r5]
    88f4:	e58d301c 	str	r3, [sp, #28]
	if (handle_port_errors(ev))
    88f8:	ebffff88 	bl	8720 <handle_port_errors>
    88fc:	e3500000 	cmp	r0, #0
    8900:	1a000002 	bne	8910 <echo_handle_port+0x44>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8904:	e5963004 	ldr	r3, [r6, #4]
    8908:	e3130001 	tst	r3, #1
    890c:	1a000005 	bne	8928 <echo_handle_port+0x5c>
}
    8910:	e59d201c 	ldr	r2, [sp, #28]
    8914:	e5953000 	ldr	r3, [r5]
    8918:	e1520003 	cmp	r2, r3
    891c:	1a000041 	bne	8a28 <echo_handle_port+0x15c>
    8920:	e28dd020 	add	sp, sp, #32
    8924:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		int rc = accept(ev->handle, &peer_uuid);
    8928:	e28d100c 	add	r1, sp, #12
    892c:	e5960000 	ldr	r0, [r6]
    8930:	eb000d55 	bl	be8c <accept>
		if (rc < 0) {
    8934:	e2508000 	subs	r8, r0, #0
    8938:	ba00001f 	blt	89bc <echo_handle_port+0xf0>
		chan_st = calloc(1, sizeof(struct echo_chan_state) +
    893c:	e5971004 	ldr	r1, [r7, #4]
    8940:	e3a00001 	mov	r0, #1
    8944:	e2811003 	add	r1, r1, #3
    8948:	e1a01181 	lsl	r1, r1, #3
    894c:	eb000c77 	bl	bb30 <calloc>
		if (!chan_st) {
    8950:	e2506000 	subs	r6, r0, #0
    8954:	0a000025 	beq	89f0 <echo_handle_port+0x124>
		chan_st->msg_max_num  = srv->msg_num;
    8958:	e5972004 	ldr	r2, [r7, #4]
		rc = set_cookie(chan, &chan_st->handler);
    895c:	e1a01006 	mov	r1, r6
		chan_st->handler.proc = srv->chan_handler;
    8960:	e597301c 	ldr	r3, [r7, #28]
		rc = set_cookie(chan, &chan_st->handler);
    8964:	e1a00008 	mov	r0, r8
		chan_st->msg_max_num  = srv->msg_num;
    8968:	e5862008 	str	r2, [r6, #8]
		chan_st->handler.priv = chan_st;
    896c:	e8860048 	stm	r6, {r3, r6}
		rc = set_cookie(chan, &chan_st->handler);
    8970:	eb000d4b 	bl	bea4 <set_cookie>
		if (rc) {
    8974:	e250c000 	subs	ip, r0, #0
    8978:	0affffe4 	beq	8910 <echo_handle_port+0x44>
			TLOGI("failed (%d) to set_cookie on chan %d\n",
    897c:	e59f00b0 	ldr	r0, [pc, #176]	; 8a34 <echo_handle_port+0x168>
    8980:	e30032ff 	movw	r3, #767	; 0x2ff
    8984:	e59f20ac 	ldr	r2, [pc, #172]	; 8a38 <echo_handle_port+0x16c>
    8988:	e59f10ac 	ldr	r1, [pc, #172]	; 8a3c <echo_handle_port+0x170>
    898c:	e08f2002 	add	r2, pc, r2
    8990:	e7940000 	ldr	r0, [r4, r0]
    8994:	e08f1001 	add	r1, pc, r1
    8998:	e58dc000 	str	ip, [sp]
    899c:	e58d8004 	str	r8, [sp, #4]
    89a0:	e2800028 	add	r0, r0, #40	; 0x28
    89a4:	eb00128f 	bl	d3e8 <fprintf>
			free(chan_st);
    89a8:	e1a00006 	mov	r0, r6
    89ac:	eb000a56 	bl	b30c <free>
			close(chan);
    89b0:	e1a00008 	mov	r0, r8
    89b4:	eb000d37 	bl	be98 <close>
			return;
    89b8:	eaffffd4 	b	8910 <echo_handle_port+0x44>
			TLOGI("failed (%d) to accept on port %d\n",
    89bc:	e59f1070 	ldr	r1, [pc, #112]	; 8a34 <echo_handle_port+0x168>
    89c0:	e3a03fba 	mov	r3, #744	; 0x2e8
    89c4:	e59f2074 	ldr	r2, [pc, #116]	; 8a40 <echo_handle_port+0x174>
    89c8:	e596c000 	ldr	ip, [r6]
    89cc:	e08f2002 	add	r2, pc, r2
    89d0:	e7940001 	ldr	r0, [r4, r1]
    89d4:	e59f1068 	ldr	r1, [pc, #104]	; 8a44 <echo_handle_port+0x178>
    89d8:	e58dc004 	str	ip, [sp, #4]
    89dc:	e2800028 	add	r0, r0, #40	; 0x28
    89e0:	e58d8000 	str	r8, [sp]
    89e4:	e08f1001 	add	r1, pc, r1
    89e8:	eb00127e 	bl	d3e8 <fprintf>
			return;
    89ec:	eaffffc7 	b	8910 <echo_handle_port+0x44>
			TLOGI("failed (%d) to callocate state for chan %d\n",
    89f0:	e59f003c 	ldr	r0, [pc, #60]	; 8a34 <echo_handle_port+0x168>
    89f4:	e30032f1 	movw	r3, #753	; 0x2f1
    89f8:	e59f2048 	ldr	r2, [pc, #72]	; 8a48 <echo_handle_port+0x17c>
    89fc:	e59f1048 	ldr	r1, [pc, #72]	; 8a4c <echo_handle_port+0x180>
    8a00:	e08f2002 	add	r2, pc, r2
    8a04:	e7940000 	ldr	r0, [r4, r0]
    8a08:	e08f1001 	add	r1, pc, r1
    8a0c:	e58d8004 	str	r8, [sp, #4]
    8a10:	e58d8000 	str	r8, [sp]
    8a14:	e2800028 	add	r0, r0, #40	; 0x28
    8a18:	eb001272 	bl	d3e8 <fprintf>
			close(chan);
    8a1c:	e1a00008 	mov	r0, r8
    8a20:	eb000d1c 	bl	be98 <close>
			return;
    8a24:	eaffffb9 	b	8910 <echo_handle_port+0x44>
}
    8a28:	eb00128a 	bl	d458 <__stack_chk_fail>
    8a2c:	00006854 	.word	0x00006854
    8a30:	0000000c 	.word	0x0000000c
    8a34:	00000010 	.word	0x00000010
    8a38:	00005178 	.word	0x00005178
    8a3c:	00005364 	.word	0x00005364
    8a40:	00005138 	.word	0x00005138
    8a44:	00005614 	.word	0x00005614
    8a48:	00005104 	.word	0x00005104
    8a4c:	000052bc 	.word	0x000052bc

00008a50 <datasink_handle_port>:
{
    8a50:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    8a54:	e1a06000 	mov	r6, r0
    8a58:	e59f40d4 	ldr	r4, [pc, #212]	; 8b34 <datasink_handle_port+0xe4>
    8a5c:	e59f30d4 	ldr	r3, [pc, #212]	; 8b38 <datasink_handle_port+0xe8>
    8a60:	e24dd024 	sub	sp, sp, #36	; 0x24
    8a64:	e08f4004 	add	r4, pc, r4
    8a68:	e7945003 	ldr	r5, [r4, r3]
    8a6c:	e5953000 	ldr	r3, [r5]
    8a70:	e58d301c 	str	r3, [sp, #28]
	if (handle_port_errors(ev))
    8a74:	ebffff29 	bl	8720 <handle_port_errors>
    8a78:	e3500000 	cmp	r0, #0
    8a7c:	1a000002 	bne	8a8c <datasink_handle_port+0x3c>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8a80:	e5963004 	ldr	r3, [r6, #4]
    8a84:	e3130001 	tst	r3, #1
    8a88:	1a000005 	bne	8aa4 <datasink_handle_port+0x54>
}
    8a8c:	e59d201c 	ldr	r2, [sp, #28]
    8a90:	e5953000 	ldr	r3, [r5]
    8a94:	e1520003 	cmp	r2, r3
    8a98:	1a000024 	bne	8b30 <datasink_handle_port+0xe0>
    8a9c:	e28dd024 	add	sp, sp, #36	; 0x24
    8aa0:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
		int rc = accept(ev->handle, &peer_uuid);
    8aa4:	e28d100c 	add	r1, sp, #12
    8aa8:	e5960000 	ldr	r0, [r6]
    8aac:	eb000cf6 	bl	be8c <accept>
		if (rc < 0) {
    8ab0:	e2507000 	subs	r7, r0, #0
    8ab4:	ba000010 	blt	8afc <datasink_handle_port+0xac>
		rc = set_cookie(chan, &_datasink_chan_handler);
    8ab8:	e59f107c 	ldr	r1, [pc, #124]	; 8b3c <datasink_handle_port+0xec>
    8abc:	e08f1001 	add	r1, pc, r1
    8ac0:	eb000cf7 	bl	bea4 <set_cookie>
		if (rc) {
    8ac4:	e250c000 	subs	ip, r0, #0
    8ac8:	0affffef 	beq	8a8c <datasink_handle_port+0x3c>
			TLOGI("failed (%d) to set_cookie on chan %d\n",
    8acc:	e59f106c 	ldr	r1, [pc, #108]	; 8b40 <datasink_handle_port+0xf0>
    8ad0:	e3a03f96 	mov	r3, #600	; 0x258
    8ad4:	e59f2068 	ldr	r2, [pc, #104]	; 8b44 <datasink_handle_port+0xf4>
    8ad8:	e08f2002 	add	r2, pc, r2
    8adc:	e7940001 	ldr	r0, [r4, r1]
    8ae0:	e59f1060 	ldr	r1, [pc, #96]	; 8b48 <datasink_handle_port+0xf8>
    8ae4:	e58d7004 	str	r7, [sp, #4]
    8ae8:	e2800028 	add	r0, r0, #40	; 0x28
    8aec:	e58dc000 	str	ip, [sp]
    8af0:	e08f1001 	add	r1, pc, r1
    8af4:	eb00123b 	bl	d3e8 <fprintf>
    8af8:	eaffffe3 	b	8a8c <datasink_handle_port+0x3c>
			TLOGI("failed (%d) to accept on port %d\n",
    8afc:	e59f103c 	ldr	r1, [pc, #60]	; 8b40 <datasink_handle_port+0xf0>
    8b00:	e3a03e25 	mov	r3, #592	; 0x250
    8b04:	e59f2040 	ldr	r2, [pc, #64]	; 8b4c <datasink_handle_port+0xfc>
    8b08:	e596c000 	ldr	ip, [r6]
    8b0c:	e08f2002 	add	r2, pc, r2
    8b10:	e7940001 	ldr	r0, [r4, r1]
    8b14:	e59f1034 	ldr	r1, [pc, #52]	; 8b50 <datasink_handle_port+0x100>
    8b18:	e58dc004 	str	ip, [sp, #4]
    8b1c:	e2800028 	add	r0, r0, #40	; 0x28
    8b20:	e58d7000 	str	r7, [sp]
    8b24:	e08f1001 	add	r1, pc, r1
    8b28:	eb00122e 	bl	d3e8 <fprintf>
			return;
    8b2c:	eaffffd6 	b	8a8c <datasink_handle_port+0x3c>
}
    8b30:	eb001248 	bl	d458 <__stack_chk_fail>
    8b34:	000066d0 	.word	0x000066d0
    8b38:	0000000c 	.word	0x0000000c
    8b3c:	00006748 	.word	0x00006748
    8b40:	00000010 	.word	0x00000010
    8b44:	0000502c 	.word	0x0000502c
    8b48:	00005208 	.word	0x00005208
    8b4c:	00004ff8 	.word	0x00004ff8
    8b50:	000054d4 	.word	0x000054d4
    8b54:	00000000 	.word	0x00000000

00008b58 <closer3_handle_port>:
{
    8b58:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8b5c:	e1a06000 	mov	r6, r0
    8b60:	e59f4108 	ldr	r4, [pc, #264]	; 8c70 <closer3_handle_port+0x118>
    8b64:	e59f3108 	ldr	r3, [pc, #264]	; 8c74 <closer3_handle_port+0x11c>
    8b68:	e24dd020 	sub	sp, sp, #32
    8b6c:	e08f4004 	add	r4, pc, r4
	struct closer3_state *st = get_srv_state(ev)->priv;
    8b70:	e5902008 	ldr	r2, [r0, #8]
{
    8b74:	e7945003 	ldr	r5, [r4, r3]
	struct closer3_state *st = get_srv_state(ev)->priv;
    8b78:	e5127004 	ldr	r7, [r2, #-4]
{
    8b7c:	e5953000 	ldr	r3, [r5]
    8b80:	e58d301c 	str	r3, [sp, #28]
	if (handle_port_errors(ev))
    8b84:	ebfffee5 	bl	8720 <handle_port_errors>
    8b88:	e2508000 	subs	r8, r0, #0
    8b8c:	1a000002 	bne	8b9c <closer3_handle_port+0x44>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8b90:	e5963004 	ldr	r3, [r6, #4]
    8b94:	e3130001 	tst	r3, #1
    8b98:	1a000005 	bne	8bb4 <closer3_handle_port+0x5c>
}
    8b9c:	e59d201c 	ldr	r2, [sp, #28]
    8ba0:	e5953000 	ldr	r3, [r5]
    8ba4:	e1520003 	cmp	r2, r3
    8ba8:	1a00002d 	bne	8c64 <closer3_handle_port+0x10c>
    8bac:	e28dd020 	add	sp, sp, #32
    8bb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		int rc = accept(ev->handle, &peer_uuid);
    8bb4:	e5960000 	ldr	r0, [r6]
    8bb8:	e28d100c 	add	r1, sp, #12
    8bbc:	eb000cb2 	bl	be8c <accept>
		if (rc < 0) {
    8bc0:	e250c000 	subs	ip, r0, #0
    8bc4:	ba00001b 	blt	8c38 <closer3_handle_port+0xe0>
		st->chans[st->chan_cnt++] = (handle_t) rc;
    8bc8:	e5973010 	ldr	r3, [r7, #16]
		set_cookie((handle_t)rc, &_datasink_chan_handler);
    8bcc:	e59f10a4 	ldr	r1, [pc, #164]	; 8c78 <closer3_handle_port+0x120>
		st->chans[st->chan_cnt++] = (handle_t) rc;
    8bd0:	e2832001 	add	r2, r3, #1
    8bd4:	e5872010 	str	r2, [r7, #16]
		set_cookie((handle_t)rc, &_datasink_chan_handler);
    8bd8:	e08f1001 	add	r1, pc, r1
		st->chans[st->chan_cnt++] = (handle_t) rc;
    8bdc:	e787c103 	str	ip, [r7, r3, lsl #2]
		set_cookie((handle_t)rc, &_datasink_chan_handler);
    8be0:	eb000caf 	bl	bea4 <set_cookie>
		if (st->chan_cnt == countof(st->chans)) {
    8be4:	e5973010 	ldr	r3, [r7, #16]
    8be8:	e3530004 	cmp	r3, #4
    8bec:	1affffea 	bne	8b9c <closer3_handle_port+0x44>
			nanosleep (0, 0, 100 * MSEC);
    8bf0:	e28f3070 	add	r3, pc, #112	; 0x70
    8bf4:	e1c320d0 	ldrd	r2, [r3]
    8bf8:	e1a01008 	mov	r1, r8
    8bfc:	e1a00008 	mov	r0, r8
    8c00:	eb000c98 	bl	be68 <nanosleep>
			for (uint i = 0; i < st->chan_cnt; i++ )
    8c04:	e5973010 	ldr	r3, [r7, #16]
    8c08:	e3530000 	cmp	r3, #0
    8c0c:	0a000006 	beq	8c2c <closer3_handle_port+0xd4>
    8c10:	e2474004 	sub	r4, r7, #4
				close(st->chans[i]);
    8c14:	e5b40004 	ldr	r0, [r4, #4]!
			for (uint i = 0; i < st->chan_cnt; i++ )
    8c18:	e2888001 	add	r8, r8, #1
				close(st->chans[i]);
    8c1c:	eb000c9d 	bl	be98 <close>
			for (uint i = 0; i < st->chan_cnt; i++ )
    8c20:	e5973010 	ldr	r3, [r7, #16]
    8c24:	e1530008 	cmp	r3, r8
    8c28:	8afffff9 	bhi	8c14 <closer3_handle_port+0xbc>
			st->chan_cnt = 0;
    8c2c:	e3a03000 	mov	r3, #0
    8c30:	e5873010 	str	r3, [r7, #16]
    8c34:	eaffffd8 	b	8b9c <closer3_handle_port+0x44>
			TLOGI("accept failed (%d)\n", rc);
    8c38:	e59f003c 	ldr	r0, [pc, #60]	; 8c7c <closer3_handle_port+0x124>
    8c3c:	e30031ed 	movw	r3, #493	; 0x1ed
    8c40:	e59f2038 	ldr	r2, [pc, #56]	; 8c80 <closer3_handle_port+0x128>
    8c44:	e59f1038 	ldr	r1, [pc, #56]	; 8c84 <closer3_handle_port+0x12c>
    8c48:	e08f2002 	add	r2, pc, r2
    8c4c:	e7940000 	ldr	r0, [r4, r0]
    8c50:	e08f1001 	add	r1, pc, r1
    8c54:	e58dc000 	str	ip, [sp]
    8c58:	e2800028 	add	r0, r0, #40	; 0x28
    8c5c:	eb0011e1 	bl	d3e8 <fprintf>
			return;
    8c60:	eaffffcd 	b	8b9c <closer3_handle_port+0x44>
}
    8c64:	eb0011fb 	bl	d458 <__stack_chk_fail>
    8c68:	05f5e100 	.word	0x05f5e100
    8c6c:	00000000 	.word	0x00000000
    8c70:	000065c8 	.word	0x000065c8
    8c74:	0000000c 	.word	0x0000000c
    8c78:	0000662c 	.word	0x0000662c
    8c7c:	00000010 	.word	0x00000010
    8c80:	00004ebc 	.word	0x00004ebc
    8c84:	00004f3c 	.word	0x00004f3c

00008c88 <closer1_handle_port>:
{
    8c88:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    8c8c:	e1a06000 	mov	r6, r0
    8c90:	e59f4108 	ldr	r4, [pc, #264]	; 8da0 <closer1_handle_port+0x118>
    8c94:	e59f3108 	ldr	r3, [pc, #264]	; 8da4 <closer1_handle_port+0x11c>
    8c98:	e24dd020 	sub	sp, sp, #32
    8c9c:	e08f4004 	add	r4, pc, r4
	struct closer1_state *st = get_srv_state(ev)->priv;
    8ca0:	e5902008 	ldr	r2, [r0, #8]
{
    8ca4:	e7945003 	ldr	r5, [r4, r3]
	struct closer1_state *st = get_srv_state(ev)->priv;
    8ca8:	e5127004 	ldr	r7, [r2, #-4]
{
    8cac:	e5953000 	ldr	r3, [r5]
    8cb0:	e58d301c 	str	r3, [sp, #28]
	if (handle_port_errors(ev))
    8cb4:	ebfffe99 	bl	8720 <handle_port_errors>
    8cb8:	e2508000 	subs	r8, r0, #0
    8cbc:	1a000002 	bne	8ccc <closer1_handle_port+0x44>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8cc0:	e5963004 	ldr	r3, [r6, #4]
    8cc4:	e3130001 	tst	r3, #1
    8cc8:	1a000005 	bne	8ce4 <closer1_handle_port+0x5c>
}
    8ccc:	e59d201c 	ldr	r2, [sp, #28]
    8cd0:	e5953000 	ldr	r3, [r5]
    8cd4:	e1520003 	cmp	r2, r3
    8cd8:	1a00002d 	bne	8d94 <closer1_handle_port+0x10c>
    8cdc:	e28dd020 	add	sp, sp, #32
    8ce0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		st->conn_cnt++;
    8ce4:	e5973000 	ldr	r3, [r7]
		int rc = accept(ev->handle, &peer_uuid);
    8ce8:	e28d100c 	add	r1, sp, #12
    8cec:	e5960000 	ldr	r0, [r6]
		st->conn_cnt++;
    8cf0:	e2833001 	add	r3, r3, #1
    8cf4:	e5873000 	str	r3, [r7]
		int rc = accept(ev->handle, &peer_uuid);
    8cf8:	eb000c63 	bl	be8c <accept>
		if (rc < 0) {
    8cfc:	e2506000 	subs	r6, r0, #0
    8d00:	ba000018 	blt	8d68 <closer1_handle_port+0xe0>
		if (st->conn_cnt & 1) {
    8d04:	e5973000 	ldr	r3, [r7]
    8d08:	e3130001 	tst	r3, #1
    8d0c:	1a00000f 	bne	8d50 <closer1_handle_port+0xc8>
		rc = close(chan);
    8d10:	e1a00006 	mov	r0, r6
    8d14:	eb000c5f 	bl	be98 <close>
		if (rc != NO_ERROR) {
    8d18:	e250c000 	subs	ip, r0, #0
    8d1c:	0affffea 	beq	8ccc <closer1_handle_port+0x44>
			TLOGI("Failed (%d) to close chan %d\n", rc, chan);
    8d20:	e59f1080 	ldr	r1, [pc, #128]	; 8da8 <closer1_handle_port+0x120>
    8d24:	e30031c5 	movw	r3, #453	; 0x1c5
    8d28:	e59f207c 	ldr	r2, [pc, #124]	; 8dac <closer1_handle_port+0x124>
    8d2c:	e08f2002 	add	r2, pc, r2
    8d30:	e7940001 	ldr	r0, [r4, r1]
    8d34:	e59f1074 	ldr	r1, [pc, #116]	; 8db0 <closer1_handle_port+0x128>
    8d38:	e58d6004 	str	r6, [sp, #4]
    8d3c:	e2800028 	add	r0, r0, #40	; 0x28
    8d40:	e58dc000 	str	ip, [sp]
    8d44:	e08f1001 	add	r1, pc, r1
    8d48:	eb0011a6 	bl	d3e8 <fprintf>
    8d4c:	eaffffde 	b	8ccc <closer1_handle_port+0x44>
			nanosleep (0, 0, 100 * MSEC);
    8d50:	e28f3040 	add	r3, pc, #64	; 0x40
    8d54:	e1c320d0 	ldrd	r2, [r3]
    8d58:	e1a01008 	mov	r1, r8
    8d5c:	e1a00008 	mov	r0, r8
    8d60:	eb000c40 	bl	be68 <nanosleep>
    8d64:	eaffffe9 	b	8d10 <closer1_handle_port+0x88>
			TLOGI("accept failed (%d)\n", rc);
    8d68:	e59f0038 	ldr	r0, [pc, #56]	; 8da8 <closer1_handle_port+0x120>
    8d6c:	e30031b9 	movw	r3, #441	; 0x1b9
    8d70:	e59f203c 	ldr	r2, [pc, #60]	; 8db4 <closer1_handle_port+0x12c>
    8d74:	e59f103c 	ldr	r1, [pc, #60]	; 8db8 <closer1_handle_port+0x130>
    8d78:	e08f2002 	add	r2, pc, r2
    8d7c:	e7940000 	ldr	r0, [r4, r0]
    8d80:	e08f1001 	add	r1, pc, r1
    8d84:	e58d6000 	str	r6, [sp]
    8d88:	e2800028 	add	r0, r0, #40	; 0x28
    8d8c:	eb001195 	bl	d3e8 <fprintf>
			return;
    8d90:	eaffffcd 	b	8ccc <closer1_handle_port+0x44>
}
    8d94:	eb0011af 	bl	d458 <__stack_chk_fail>
    8d98:	05f5e100 	.word	0x05f5e100
    8d9c:	00000000 	.word	0x00000000
    8da0:	00006498 	.word	0x00006498
    8da4:	0000000c 	.word	0x0000000c
    8da8:	00000010 	.word	0x00000010
    8dac:	00004dd8 	.word	0x00004dd8
    8db0:	00004e20 	.word	0x00004e20
    8db4:	00004d8c 	.word	0x00004d8c
    8db8:	00004e0c 	.word	0x00004e0c
    8dbc:	00000000 	.word	0x00000000

00008dc0 <closer2_handle_port>:
	struct closer2_state *st = get_srv_state(ev)->priv;
    8dc0:	e5903008 	ldr	r3, [r0, #8]
{
    8dc4:	e92d4070 	push	{r4, r5, r6, lr}
    8dc8:	e1a04000 	mov	r4, r0
	struct closer2_state *st = get_srv_state(ev)->priv;
    8dcc:	e5135004 	ldr	r5, [r3, #-4]
	if (handle_port_errors(ev))
    8dd0:	ebfffe52 	bl	8720 <handle_port_errors>
    8dd4:	e2501000 	subs	r1, r0, #0
    8dd8:	18bd8070 	popne	{r4, r5, r6, pc}
	if (ev->event & IPC_HANDLE_POLL_READY) {
    8ddc:	e5943004 	ldr	r3, [r4, #4]
    8de0:	e3130001 	tst	r3, #1
    8de4:	08bd8070 	popeq	{r4, r5, r6, pc}
		st->conn_cnt++;
    8de8:	e5953000 	ldr	r3, [r5]
    8dec:	e2833001 	add	r3, r3, #1
    8df0:	e5853000 	str	r3, [r5]
		if (st->conn_cnt & 1) {
    8df4:	e3130001 	tst	r3, #1
    8df8:	1a000003 	bne	8e0c <closer2_handle_port+0x4c>
	return containerof(ev->cookie, struct tipc_srv_state, handler);
    8dfc:	e5940008 	ldr	r0, [r4, #8]
}
    8e00:	e8bd4070 	pop	{r4, r5, r6, lr}
		restart_service(get_srv_state(ev));
    8e04:	e240000c 	sub	r0, r0, #12
    8e08:	eafffe2a 	b	86b8 <restart_service>
			nanosleep (0, 0, 100 * MSEC);
    8e0c:	e28f300c 	add	r3, pc, #12
    8e10:	e1c320d0 	ldrd	r2, [r3]
    8e14:	eb000c13 	bl	be68 <nanosleep>
    8e18:	eafffff7 	b	8dfc <closer2_handle_port+0x3c>
    8e1c:	e320f000 	nop	{0}
    8e20:	05f5e100 	.word	0x05f5e100
    8e24:	00000000 	.word	0x00000000

00008e28 <echo_handle_chan>:
{
    8e28:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e2c:	e1a05000 	mov	r5, r0
    8e30:	e59f62c4 	ldr	r6, [pc, #708]	; 90fc <echo_handle_chan+0x2d4>
    8e34:	e59f32c4 	ldr	r3, [pc, #708]	; 9100 <echo_handle_chan+0x2d8>
    8e38:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    8e3c:	e08f6006 	add	r6, pc, r6
	if (ev->event & IPC_HANDLE_POLL_ERROR) {
    8e40:	e5901004 	ldr	r1, [r0, #4]
    8e44:	e3110002 	tst	r1, #2
{
    8e48:	e7967003 	ldr	r7, [r6, r3]
    8e4c:	e5973000 	ldr	r3, [r7]
    8e50:	e58d3024 	str	r3, [sp, #36]	; 0x24
	if (ev->event & IPC_HANDLE_POLL_ERROR) {
    8e54:	1a000059 	bne	8fc0 <echo_handle_chan+0x198>
	if (ev->event & (IPC_HANDLE_POLL_MSG |
    8e58:	e3110018 	tst	r1, #24
    8e5c:	1a00000b 	bne	8e90 <echo_handle_chan+0x68>
	if (ev->event & IPC_HANDLE_POLL_HUP) {
    8e60:	e3110004 	tst	r1, #4
    8e64:	0a000003 	beq	8e78 <echo_handle_chan+0x50>
	free(ev->cookie);
    8e68:	e5950008 	ldr	r0, [r5, #8]
    8e6c:	eb000926 	bl	b30c <free>
	close(ev->handle);
    8e70:	e5950000 	ldr	r0, [r5]
    8e74:	eb000c07 	bl	be98 <close>
}
    8e78:	e59d2024 	ldr	r2, [sp, #36]	; 0x24
    8e7c:	e5973000 	ldr	r3, [r7]
    8e80:	e1520003 	cmp	r2, r3
    8e84:	1a00009b 	bne	90f8 <echo_handle_chan+0x2d0>
    8e88:	e28dd02c 	add	sp, sp, #44	; 0x2c
    8e8c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return _echo_handle_msg(ev, false);
    8e90:	e5904008 	ldr	r4, [r0, #8]
    8e94:	e594300c 	ldr	r3, [r4, #12]
    8e98:	e5941008 	ldr	r1, [r4, #8]
    8e9c:	ea000011 	b	8ee8 <echo_handle_chan+0xc0>
		rc = get_msg(ev->handle, &st->msg_queue[st->msg_next_w]);
    8ea0:	e5941014 	ldr	r1, [r4, #20]
    8ea4:	e5950000 	ldr	r0, [r5]
    8ea8:	e2811003 	add	r1, r1, #3
    8eac:	e0841181 	add	r1, r4, r1, lsl #3
    8eb0:	eb000c04 	bl	bec8 <get_msg>
		if (rc == ERR_NO_MSG)
    8eb4:	e3700004 	cmn	r0, #4
    8eb8:	0a00004d 	beq	8ff4 <echo_handle_chan+0x1cc>
		if (rc != NO_ERROR) {
    8ebc:	e3500000 	cmp	r0, #0
    8ec0:	1a00004d 	bne	8ffc <echo_handle_chan+0x1d4>
		st->msg_next_w++;
    8ec4:	e5942014 	ldr	r2, [r4, #20]
		st->msg_cnt++;
    8ec8:	e594300c 	ldr	r3, [r4, #12]
		if (st->msg_next_w == st->msg_max_num)
    8ecc:	e5941008 	ldr	r1, [r4, #8]
		st->msg_next_w++;
    8ed0:	e2822001 	add	r2, r2, #1
		st->msg_cnt++;
    8ed4:	e2833001 	add	r3, r3, #1
		st->msg_next_w++;
    8ed8:	e5842014 	str	r2, [r4, #20]
		if (st->msg_next_w == st->msg_max_num)
    8edc:	e1520001 	cmp	r2, r1
		st->msg_cnt++;
    8ee0:	e584300c 	str	r3, [r4, #12]
			st->msg_next_w = 0;
    8ee4:	05840014 	streq	r0, [r4, #20]
	while (st->msg_cnt != st->msg_max_num) {
    8ee8:	e1530001 	cmp	r3, r1
    8eec:	1affffeb 	bne	8ea0 <echo_handle_chan+0x78>
		iov.base = echo_msg_buf;
    8ef0:	e59fa20c 	ldr	sl, [pc, #524]	; 9104 <echo_handle_chan+0x2dc>
		iov.len  = sizeof(echo_msg_buf);
    8ef4:	e3a09a01 	mov	r9, #4096	; 0x1000
		iov.base = echo_msg_buf;
    8ef8:	e08fa00a 	add	sl, pc, sl
		msg.num_iov = 1;
    8efc:	e3a08001 	mov	r8, #1
    8f00:	ea00002a 	b	8fb0 <echo_handle_chan+0x188>
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8f04:	e5941010 	ldr	r1, [r4, #16]
		msg.num_handles = 0;
    8f08:	e3a0c000 	mov	ip, #0
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8f0c:	e28db014 	add	fp, sp, #20
    8f10:	e1a0200c 	mov	r2, ip
    8f14:	e1a0300b 	mov	r3, fp
    8f18:	e5950000 	ldr	r0, [r5]
    8f1c:	e0841181 	add	r1, r4, r1, lsl #3
		msg.num_handles = 0;
    8f20:	e58dc01c 	str	ip, [sp, #28]
		msg.handles  = NULL;
    8f24:	e58dc020 	str	ip, [sp, #32]
		msg.iov     = &iov;
    8f28:	e28dc00c 	add	ip, sp, #12
		iov.base = echo_msg_buf;
    8f2c:	e58da00c 	str	sl, [sp, #12]
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8f30:	e591101c 	ldr	r1, [r1, #28]
		msg.iov     = &iov;
    8f34:	e58dc018 	str	ip, [sp, #24]
		iov.len  = sizeof(echo_msg_buf);
    8f38:	e58d9010 	str	r9, [sp, #16]
		msg.num_iov = 1;
    8f3c:	e58d8014 	str	r8, [sp, #20]
		rc = read_msg(ev->handle, st->msg_queue[st->msg_next_r].id, 0, &msg);
    8f40:	eb000be3 	bl	bed4 <read_msg>
		if (rc < 0) {
    8f44:	e250c000 	subs	ip, r0, #0
    8f48:	ba000043 	blt	905c <echo_handle_chan+0x234>
		rc = send_msg(ev->handle, &msg);
    8f4c:	e1a0100b 	mov	r1, fp
    8f50:	e5950000 	ldr	r0, [r5]
		iov.len = (size_t) rc;
    8f54:	e58dc010 	str	ip, [sp, #16]
		rc = send_msg(ev->handle, &msg);
    8f58:	eb000be3 	bl	beec <send_msg>
		if (rc == ERR_NOT_ENOUGH_BUFFER)
    8f5c:	e3700009 	cmn	r0, #9
    8f60:	0a000014 	beq	8fb8 <echo_handle_chan+0x190>
		if (rc < 0) {
    8f64:	e3500000 	cmp	r0, #0
    8f68:	e595c000 	ldr	ip, [r5]
    8f6c:	ba000047 	blt	9090 <echo_handle_chan+0x268>
		rc = put_msg(ev->handle, st->msg_queue[st->msg_next_r].id);
    8f70:	e5943010 	ldr	r3, [r4, #16]
    8f74:	e1a0000c 	mov	r0, ip
    8f78:	e0843183 	add	r3, r4, r3, lsl #3
    8f7c:	e593101c 	ldr	r1, [r3, #28]
    8f80:	eb000bd6 	bl	bee0 <put_msg>
		if (rc != NO_ERROR) {
    8f84:	e3500000 	cmp	r0, #0
    8f88:	1a00004b 	bne	90bc <echo_handle_chan+0x294>
		st->msg_next_r++;
    8f8c:	e5942010 	ldr	r2, [r4, #16]
		st->msg_cnt--;
    8f90:	e594300c 	ldr	r3, [r4, #12]
		if (st->msg_next_r == st->msg_max_num)
    8f94:	e5941008 	ldr	r1, [r4, #8]
		st->msg_next_r++;
    8f98:	e2822001 	add	r2, r2, #1
		st->msg_cnt--;
    8f9c:	e2433001 	sub	r3, r3, #1
		st->msg_next_r++;
    8fa0:	e5842010 	str	r2, [r4, #16]
		if (st->msg_next_r == st->msg_max_num)
    8fa4:	e1520001 	cmp	r2, r1
		st->msg_cnt--;
    8fa8:	e584300c 	str	r3, [r4, #12]
		if (st->msg_next_r == st->msg_max_num)
    8fac:	0a00004f 	beq	90f0 <echo_handle_chan+0x2c8>
	while (st->msg_cnt) {
    8fb0:	e3530000 	cmp	r3, #0
    8fb4:	1affffd2 	bne	8f04 <echo_handle_chan+0xdc>
    8fb8:	e5951004 	ldr	r1, [r5, #4]
    8fbc:	eaffffa7 	b	8e60 <echo_handle_chan+0x38>
		TLOGI("error event (0x%x) for chan (%d)\n",
    8fc0:	e59f0140 	ldr	r0, [pc, #320]	; 9108 <echo_handle_chan+0x2e0>
    8fc4:	e30032bd 	movw	r3, #701	; 0x2bd
    8fc8:	e595c000 	ldr	ip, [r5]
    8fcc:	e59f2138 	ldr	r2, [pc, #312]	; 910c <echo_handle_chan+0x2e4>
    8fd0:	e7960000 	ldr	r0, [r6, r0]
    8fd4:	e08f2002 	add	r2, pc, r2
    8fd8:	e58d1000 	str	r1, [sp]
    8fdc:	e59f112c 	ldr	r1, [pc, #300]	; 9110 <echo_handle_chan+0x2e8>
    8fe0:	e2800028 	add	r0, r0, #40	; 0x28
    8fe4:	e58dc004 	str	ip, [sp, #4]
    8fe8:	e08f1001 	add	r1, pc, r1
    8fec:	eb0010fd 	bl	d3e8 <fprintf>
		goto close_it;
    8ff0:	eaffff9c 	b	8e68 <echo_handle_chan+0x40>
    8ff4:	e594300c 	ldr	r3, [r4, #12]
    8ff8:	eaffffbc 	b	8ef0 <echo_handle_chan+0xc8>
			TLOGI("failed (%d) to get_msg for chan (%d)\n",
    8ffc:	e59f1104 	ldr	r1, [pc, #260]	; 9108 <echo_handle_chan+0x2e0>
    9000:	e3a03e27 	mov	r3, #624	; 0x270
    9004:	e59f2108 	ldr	r2, [pc, #264]	; 9114 <echo_handle_chan+0x2ec>
    9008:	e595c000 	ldr	ip, [r5]
    900c:	e08f2002 	add	r2, pc, r2
    9010:	e7964001 	ldr	r4, [r6, r1]
    9014:	e59f10fc 	ldr	r1, [pc, #252]	; 9118 <echo_handle_chan+0x2f0>
    9018:	e58d0000 	str	r0, [sp]
    901c:	e2840028 	add	r0, r4, #40	; 0x28
    9020:	e58dc004 	str	ip, [sp, #4]
    9024:	e08f1001 	add	r1, pc, r1
    9028:	eb0010ee 	bl	d3e8 <fprintf>
			TLOGI("error event (0x%x) for chan (%d)\n",
    902c:	e5951000 	ldr	r1, [r5]
    9030:	e2840028 	add	r0, r4, #40	; 0x28
    9034:	e5952004 	ldr	r2, [r5, #4]
    9038:	e30032c5 	movw	r3, #709	; 0x2c5
    903c:	e58d1004 	str	r1, [sp, #4]
    9040:	e58d2000 	str	r2, [sp]
    9044:	e59f10d0 	ldr	r1, [pc, #208]	; 911c <echo_handle_chan+0x2f4>
    9048:	e59f20d0 	ldr	r2, [pc, #208]	; 9120 <echo_handle_chan+0x2f8>
    904c:	e08f1001 	add	r1, pc, r1
    9050:	e08f2002 	add	r2, pc, r2
    9054:	eb0010e3 	bl	d3e8 <fprintf>
			goto close_it;
    9058:	eaffff82 	b	8e68 <echo_handle_chan+0x40>
			TLOGI("failed (%d) to read_msg for chan (%d)\n",
    905c:	e59f10a4 	ldr	r1, [pc, #164]	; 9108 <echo_handle_chan+0x2e0>
    9060:	e3a03fa2 	mov	r3, #648	; 0x288
    9064:	e59f20b8 	ldr	r2, [pc, #184]	; 9124 <echo_handle_chan+0x2fc>
    9068:	e595e000 	ldr	lr, [r5]
    906c:	e08f2002 	add	r2, pc, r2
    9070:	e7964001 	ldr	r4, [r6, r1]
    9074:	e59f10ac 	ldr	r1, [pc, #172]	; 9128 <echo_handle_chan+0x300>
    9078:	e58dc000 	str	ip, [sp]
    907c:	e2840028 	add	r0, r4, #40	; 0x28
    9080:	e58de004 	str	lr, [sp, #4]
    9084:	e08f1001 	add	r1, pc, r1
    9088:	eb0010d6 	bl	d3e8 <fprintf>
    908c:	eaffffe6 	b	902c <echo_handle_chan+0x204>
			TLOGI("failed (%d) to send_msg for chan (%d)\n",
    9090:	e59fe070 	ldr	lr, [pc, #112]	; 9108 <echo_handle_chan+0x2e0>
    9094:	e300329b 	movw	r3, #667	; 0x29b
    9098:	e59f208c 	ldr	r2, [pc, #140]	; 912c <echo_handle_chan+0x304>
    909c:	e59f108c 	ldr	r1, [pc, #140]	; 9130 <echo_handle_chan+0x308>
    90a0:	e08f2002 	add	r2, pc, r2
    90a4:	e796400e 	ldr	r4, [r6, lr]
    90a8:	e08f1001 	add	r1, pc, r1
    90ac:	e88d1001 	stm	sp, {r0, ip}
    90b0:	e2840028 	add	r0, r4, #40	; 0x28
    90b4:	eb0010cb 	bl	d3e8 <fprintf>
    90b8:	eaffffdb 	b	902c <echo_handle_chan+0x204>
			TLOGI("failed (%d) to put_msg for chan (%d)\n",
    90bc:	e59f1044 	ldr	r1, [pc, #68]	; 9108 <echo_handle_chan+0x2e0>
    90c0:	e30032a3 	movw	r3, #675	; 0x2a3
    90c4:	e59f2068 	ldr	r2, [pc, #104]	; 9134 <echo_handle_chan+0x30c>
    90c8:	e595c000 	ldr	ip, [r5]
    90cc:	e08f2002 	add	r2, pc, r2
    90d0:	e7964001 	ldr	r4, [r6, r1]
    90d4:	e59f105c 	ldr	r1, [pc, #92]	; 9138 <echo_handle_chan+0x310>
    90d8:	e58d0000 	str	r0, [sp]
    90dc:	e2840028 	add	r0, r4, #40	; 0x28
    90e0:	e58dc004 	str	ip, [sp, #4]
    90e4:	e08f1001 	add	r1, pc, r1
    90e8:	eb0010be 	bl	d3e8 <fprintf>
    90ec:	eaffffce 	b	902c <echo_handle_chan+0x204>
			st->msg_next_r = 0;
    90f0:	e5840010 	str	r0, [r4, #16]
    90f4:	eaffff80 	b	8efc <echo_handle_chan+0xd4>
}
    90f8:	eb0010d6 	bl	d458 <__stack_chk_fail>
    90fc:	000062f8 	.word	0x000062f8
    9100:	0000000c 	.word	0x0000000c
    9104:	00006394 	.word	0x00006394
    9108:	00000010 	.word	0x00000010
    910c:	00004b30 	.word	0x00004b30
    9110:	00004bf0 	.word	0x00004bf0
    9114:	00004af8 	.word	0x00004af8
    9118:	00004be0 	.word	0x00004be0
    911c:	00004b8c 	.word	0x00004b8c
    9120:	00004ab4 	.word	0x00004ab4
    9124:	00004a98 	.word	0x00004a98
    9128:	00004be0 	.word	0x00004be0
    912c:	00004a64 	.word	0x00004a64
    9130:	00004f7c 	.word	0x00004f7c
    9134:	00004a38 	.word	0x00004a38
    9138:	00004bb0 	.word	0x00004bb0

0000913c <sync_connect>:
{
    913c:	e59f30a0 	ldr	r3, [pc, #160]	; 91e4 <sync_connect+0xa8>
    9140:	e59f20a0 	ldr	r2, [pc, #160]	; 91e8 <sync_connect+0xac>
    9144:	e08f3003 	add	r3, pc, r3
    9148:	e92d4070 	push	{r4, r5, r6, lr}
    914c:	e1a06001 	mov	r6, r1
    9150:	e24dd010 	sub	sp, sp, #16
	rc = connect(path, IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    9154:	e3a01003 	mov	r1, #3
{
    9158:	e7935002 	ldr	r5, [r3, r2]
    915c:	e5953000 	ldr	r3, [r5]
    9160:	e58d300c 	str	r3, [sp, #12]
	rc = connect(path, IPC_CONNECT_ASYNC | IPC_CONNECT_WAIT_FOR_PORT);
    9164:	eb000b45 	bl	be80 <connect>
	if (rc >= 0) {
    9168:	e2504000 	subs	r4, r0, #0
    916c:	ba00000b 	blt	91a0 <sync_connect+0x64>
		rc = wait(chan, &evt, timeout);
    9170:	e1a02006 	mov	r2, r6
    9174:	e1a0100d 	mov	r1, sp
    9178:	eb000b4c 	bl	beb0 <wait>
		chan = (handle_t) rc;
    917c:	e1a03004 	mov	r3, r4
		if (rc == 0) {
    9180:	e3500000 	cmp	r0, #0
    9184:	1a00000c 	bne	91bc <sync_connect+0x80>
			if (evt.handle == chan) {
    9188:	e59d2000 	ldr	r2, [sp]
    918c:	e1520004 	cmp	r2, r4
			rc = ERR_BAD_STATE;
    9190:	13e0401e 	mvnne	r4, #30
			if (evt.handle == chan) {
    9194:	0a00000a 	beq	91c4 <sync_connect+0x88>
		close(chan);
    9198:	e1a00003 	mov	r0, r3
    919c:	eb000b3d 	bl	be98 <close>
}
    91a0:	e59d200c 	ldr	r2, [sp, #12]
    91a4:	e1a00004 	mov	r0, r4
    91a8:	e5953000 	ldr	r3, [r5]
    91ac:	e1520003 	cmp	r2, r3
    91b0:	1a00000a 	bne	91e0 <sync_connect+0xa4>
    91b4:	e28dd010 	add	sp, sp, #16
    91b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    91bc:	e1a04000 	mov	r4, r0
    91c0:	eafffff4 	b	9198 <sync_connect+0x5c>
				if (evt.event & IPC_HANDLE_POLL_READY)
    91c4:	e59d2004 	ldr	r2, [sp, #4]
    91c8:	e3120001 	tst	r2, #1
    91cc:	1afffff3 	bne	91a0 <sync_connect+0x64>
				if (evt.event & IPC_HANDLE_POLL_HUP)
    91d0:	e3120004 	tst	r2, #4
					rc = ERR_CHANNEL_CLOSED;
    91d4:	03e0401e 	mvneq	r4, #30
    91d8:	13e0400e 	mvnne	r4, #14
    91dc:	eaffffed 	b	9198 <sync_connect+0x5c>
}
    91e0:	eb00109c 	bl	d458 <__stack_chk_fail>
    91e4:	00005ff0 	.word	0x00005ff0
    91e8:	0000000c 	.word	0x0000000c

000091ec <connect_handle_port>:
{
    91ec:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    91f0:	e1a05000 	mov	r5, r0
    91f4:	e59f40ec 	ldr	r4, [pc, #236]	; 92e8 <connect_handle_port+0xfc>
    91f8:	e59f30ec 	ldr	r3, [pc, #236]	; 92ec <connect_handle_port+0x100>
    91fc:	e24dd060 	sub	sp, sp, #96	; 0x60
    9200:	e08f4004 	add	r4, pc, r4
    9204:	e7948003 	ldr	r8, [r4, r3]
    9208:	e5983000 	ldr	r3, [r8]
    920c:	e58d305c 	str	r3, [sp, #92]	; 0x5c
	if (handle_port_errors(ev))
    9210:	ebfffd42 	bl	8720 <handle_port_errors>
    9214:	e3500000 	cmp	r0, #0
    9218:	1a000002 	bne	9228 <connect_handle_port+0x3c>
	if (ev->event & IPC_HANDLE_POLL_READY) {
    921c:	e5953004 	ldr	r3, [r5, #4]
    9220:	e3130001 	tst	r3, #1
    9224:	1a000005 	bne	9240 <connect_handle_port+0x54>
}
    9228:	e59d205c 	ldr	r2, [sp, #92]	; 0x5c
    922c:	e5983000 	ldr	r3, [r8]
    9230:	e1520003 	cmp	r2, r3
    9234:	1a00002a 	bne	92e4 <connect_handle_port+0xf8>
    9238:	e28dd060 	add	sp, sp, #96	; 0x60
    923c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
		int rc = accept(ev->handle, &peer_uuid);
    9240:	e5950000 	ldr	r0, [r5]
    9244:	e28d100c 	add	r1, sp, #12
    9248:	eb000b0f 	bl	be8c <accept>
		if (rc < 0 && rc != ERR_CHANNEL_CLOSED) {
    924c:	e290300f 	adds	r3, r0, #15
    9250:	13a03001 	movne	r3, #1
		int rc = accept(ev->handle, &peer_uuid);
    9254:	e1a0c000 	mov	ip, r0
		if (rc < 0 && rc != ERR_CHANNEL_CLOSED) {
    9258:	e0133fa0 	ands	r3, r3, r0, lsr #31
    925c:	1a000015 	bne	92b8 <connect_handle_port+0xcc>
		if (rc >= 0) {
    9260:	e3500000 	cmp	r0, #0
    9264:	ba000000 	blt	926c <connect_handle_port+0x80>
			close ((handle_t)rc);
    9268:	eb000b0a 	bl	be98 <close>
			sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    926c:	e59f707c 	ldr	r7, [pc, #124]	; 92f0 <connect_handle_port+0x104>
{
    9270:	e3a04002 	mov	r4, #2
			sprintf(path, "%s.port.accept%d", SRV_PATH_BASE, i);
    9274:	e59f6078 	ldr	r6, [pc, #120]	; 92f4 <connect_handle_port+0x108>
    9278:	e28d501c 	add	r5, sp, #28
    927c:	e08f7007 	add	r7, pc, r7
    9280:	e08f6006 	add	r6, pc, r6
    9284:	e1a03004 	mov	r3, r4
    9288:	e1a02007 	mov	r2, r7
    928c:	e1a01006 	mov	r1, r6
    9290:	e1a00005 	mov	r0, r5
    9294:	eb00102b 	bl	d348 <sprintf>
			rc = sync_connect(path, 1000);
    9298:	e3a01ffa 	mov	r1, #1000	; 0x3e8
    929c:	e1a00005 	mov	r0, r5
		for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    92a0:	e2844001 	add	r4, r4, #1
			rc = sync_connect(path, 1000);
    92a4:	ebffffa4 	bl	913c <sync_connect>
			close(rc);
    92a8:	eb000afa 	bl	be98 <close>
		for (uint i = 2; i < MAX_USER_HANDLES; i++) {
    92ac:	e3540080 	cmp	r4, #128	; 0x80
    92b0:	1afffff3 	bne	9284 <connect_handle_port+0x98>
    92b4:	eaffffdb 	b	9228 <connect_handle_port+0x3c>
			TLOGI("accept failed (%d)\n", rc);
    92b8:	e59f0038 	ldr	r0, [pc, #56]	; 92f8 <connect_handle_port+0x10c>
    92bc:	e3a03f66 	mov	r3, #408	; 0x198
    92c0:	e59f2034 	ldr	r2, [pc, #52]	; 92fc <connect_handle_port+0x110>
    92c4:	e59f1034 	ldr	r1, [pc, #52]	; 9300 <connect_handle_port+0x114>
    92c8:	e08f2002 	add	r2, pc, r2
    92cc:	e7940000 	ldr	r0, [r4, r0]
    92d0:	e08f1001 	add	r1, pc, r1
    92d4:	e58dc000 	str	ip, [sp]
    92d8:	e2800028 	add	r0, r0, #40	; 0x28
    92dc:	eb001041 	bl	d3e8 <fprintf>
    92e0:	eaffffd0 	b	9228 <connect_handle_port+0x3c>
}
    92e4:	eb00105b 	bl	d458 <__stack_chk_fail>
    92e8:	00005f34 	.word	0x00005f34
    92ec:	0000000c 	.word	0x0000000c
    92f0:	0000492c 	.word	0x0000492c
    92f4:	00004944 	.word	0x00004944
    92f8:	00000010 	.word	0x00000010
    92fc:	0000483c 	.word	0x0000483c
    9300:	000048bc 	.word	0x000048bc

00009304 <_start>:

__attribute__ ((section (".bss")))
void *__dso_handle = (void *) 0;

/* Arguments are supplied in memory pointed by r0 */
void _start(void *args) {
    9304:	e92d4800 	push	{fp, lr}
    9308:	e28db004 	add	fp, sp, #4
    930c:	e24dd018 	sub	sp, sp, #24
    9310:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    9314:	e59f3068 	ldr	r3, [pc, #104]	; 9384 <_start+0x80>
    9318:	e08f3003 	add	r3, pc, r3
    931c:	e59f2064 	ldr	r2, [pc, #100]	; 9388 <_start+0x84>
    9320:	e7932002 	ldr	r2, [r3, r2]
    9324:	e5922000 	ldr	r2, [r2]
    9328:	e50b2008 	str	r2, [fp, #-8]
  structors_array_t array;
  array.preinit_array = &__PREINIT_ARRAY__;
    932c:	e59f2058 	ldr	r2, [pc, #88]	; 938c <_start+0x88>
    9330:	e08f2002 	add	r2, pc, r2
    9334:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
  array.init_array = &__INIT_ARRAY__;
    9338:	e59f2050 	ldr	r2, [pc, #80]	; 9390 <_start+0x8c>
    933c:	e08f2002 	add	r2, pc, r2
    9340:	e50b2010 	str	r2, [fp, #-16]
  array.fini_array = (&__FINI_ARRAY__)[0] ? &__FINI_ARRAY__ : 0;
    9344:	e59f2048 	ldr	r2, [pc, #72]	; 9394 <_start+0x90>
    9348:	e08f2002 	add	r2, pc, r2
    934c:	e5922000 	ldr	r2, [r2]
    9350:	e3520000 	cmp	r2, #0
    9354:	0a000002 	beq	9364 <_start+0x60>
    9358:	e59f2038 	ldr	r2, [pc, #56]	; 9398 <_start+0x94>
    935c:	e08f2002 	add	r2, pc, r2
    9360:	ea000000 	b	9368 <_start+0x64>
    9364:	e3a02000 	mov	r2, #0
    9368:	e50b200c 	str	r2, [fp, #-12]

  __libc_init(args, &main, &array);
    936c:	e24b2014 	sub	r2, fp, #20
    9370:	e59f1024 	ldr	r1, [pc, #36]	; 939c <_start+0x98>
    9374:	e7933001 	ldr	r3, [r3, r1]
    9378:	e1a01003 	mov	r1, r3
    937c:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
    9380:	eb000a73 	bl	bd54 <__libc_init>
    9384:	00005e1c 	.word	0x00005e1c
    9388:	0000000c 	.word	0x0000000c
    938c:	00005cc8 	.word	0x00005cc8
    9390:	00005cc4 	.word	0x00005cc4
    9394:	00005cc4 	.word	0x00005cc4
    9398:	00005cb0 	.word	0x00005cb0
    939c:	00000018 	.word	0x00000018

000093a0 <abort>:

#include <stdlib.h>
#include <trusty_std.h>

void abort(void)
{
    93a0:	e92d4010 	push	{r4, lr}
	exit(1);
    93a4:	e3a00001 	mov	r0, #1
    93a8:	ebfffb14 	bl	8000 <exit>

000093ac <__cxa_atexit>:
 *
 *	http://www.codesourcery.com/cxx-abi/abi.html#dso-dtor
 */
int
__cxa_atexit(void (*func)(void *), void *arg)
{
    93ac:	e59f30c4 	ldr	r3, [pc, #196]	; 9478 <__cxa_atexit+0xcc>
	struct atexit *p = __atexit;
    93b0:	e59f20c4 	ldr	r2, [pc, #196]	; 947c <__cxa_atexit+0xd0>
{
    93b4:	e08f3003 	add	r3, pc, r3
    93b8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    93bc:	e1a06000 	mov	r6, r0
    93c0:	e1a05001 	mov	r5, r1
	struct atexit *p = __atexit;
    93c4:	e7937002 	ldr	r7, [r3, r2]
    93c8:	e5974000 	ldr	r4, [r7]
	struct atexit_fn *fnp;
	int size = 64;
	int ret = -1;

	if (p != NULL) {
    93cc:	e3540000 	cmp	r4, #0
    93d0:	0a000004 	beq	93e8 <__cxa_atexit+0x3c>
		if (p->ind + 1 >= p->max)
    93d4:	e5943004 	ldr	r3, [r4, #4]
    93d8:	e5941008 	ldr	r1, [r4, #8]
    93dc:	e2832001 	add	r2, r3, #1
    93e0:	e1520001 	cmp	r2, r1
    93e4:	ba000014 	blt	943c <__cxa_atexit+0x90>
			p = NULL;
	}
	if (p == NULL) {
		p = malloc(size);
    93e8:	e3a00040 	mov	r0, #64	; 0x40
    93ec:	eb00011c 	bl	9864 <malloc>
		if (!p)
    93f0:	e2504000 	subs	r4, r0, #0
    93f4:	0a00001d 	beq	9470 <__cxa_atexit+0xc4>
			goto done;
		if (__atexit == NULL) {
    93f8:	e5971000 	ldr	r1, [r7]
    93fc:	e3510000 	cmp	r1, #0
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
			p->ind = 1;
		} else
			p->ind = 0;
    9400:	13a03000 	movne	r3, #0
    9404:	15843004 	strne	r3, [r4, #4]
		if (__atexit == NULL) {
    9408:	0a000011 	beq	9454 <__cxa_atexit+0xa8>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
		    sizeof(p->fns[0]);
		p->next = __atexit;
		__atexit = p;
		if (__atexit_invalid)
    940c:	e59f206c 	ldr	r2, [pc, #108]	; 9480 <__cxa_atexit+0xd4>
		p->max = (size - ((char *)&p->fns[0] - (char *)p)) /
    9410:	e3a03006 	mov	r3, #6
    9414:	e5843008 	str	r3, [r4, #8]
		if (__atexit_invalid)
    9418:	e08f2002 	add	r2, pc, r2
		p->next = __atexit;
    941c:	e5841000 	str	r1, [r4]
		__atexit = p;
    9420:	e5874000 	str	r4, [r7]
		if (__atexit_invalid)
    9424:	e5923000 	ldr	r3, [r2]
    9428:	e3530000 	cmp	r3, #0
    942c:	e5943004 	ldr	r3, [r4, #4]
			__atexit_invalid = 0;
    9430:	13a01000 	movne	r1, #0
    9434:	15821000 	strne	r1, [r2]
    9438:	e2832001 	add	r2, r3, #1
    943c:	e0843183 	add	r3, r4, r3, lsl #3
	}
	fnp = &p->fns[p->ind++];
    9440:	e5842004 	str	r2, [r4, #4]
	fnp->fn_ptr.cxa_func = func;
	fnp->fn_arg = arg;
	ret = 0;
    9444:	e3a00000 	mov	r0, #0
	fnp->fn_ptr.cxa_func = func;
    9448:	e583600c 	str	r6, [r3, #12]
	fnp->fn_arg = arg;
    944c:	e5835010 	str	r5, [r3, #16]
    9450:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
			memset(&p->fns[0], 0, sizeof(p->fns[0]));
    9454:	e3a02008 	mov	r2, #8
    9458:	e284000c 	add	r0, r4, #12
    945c:	eb00100d 	bl	d498 <memset>
			p->ind = 1;
    9460:	e3a03001 	mov	r3, #1
    9464:	e5971000 	ldr	r1, [r7]
    9468:	e5843004 	str	r3, [r4, #4]
    946c:	eaffffe6 	b	940c <__cxa_atexit+0x60>
	int ret = -1;
    9470:	e3e00000 	mvn	r0, #0
done:
	return (ret);
}
    9474:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9478:	00005d80 	.word	0x00005d80
    947c:	00000014 	.word	0x00000014
    9480:	00005df4 	.word	0x00005df4

00009484 <__cxa_finalize>:
	struct atexit *p, *q;
	struct atexit_fn fn;
	int n;
	static int call_depth;

	if (__atexit_invalid)
    9484:	e59f30c8 	ldr	r3, [pc, #200]	; 9554 <__cxa_finalize+0xd0>
{
    9488:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	if (__atexit_invalid)
    948c:	e08f3003 	add	r3, pc, r3
{
    9490:	e59f20c0 	ldr	r2, [pc, #192]	; 9558 <__cxa_finalize+0xd4>
	if (__atexit_invalid)
    9494:	e5936000 	ldr	r6, [r3]
{
    9498:	e08f2002 	add	r2, pc, r2
	if (__atexit_invalid)
    949c:	e3560000 	cmp	r6, #0
    94a0:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
		return;

	call_depth++;
    94a4:	e59f00b0 	ldr	r0, [pc, #176]	; 955c <__cxa_finalize+0xd8>

	for (p = __atexit; p != NULL; p = p->next) {
    94a8:	e59f10b0 	ldr	r1, [pc, #176]	; 9560 <__cxa_finalize+0xdc>
	call_depth++;
    94ac:	e08f0000 	add	r0, pc, r0
    94b0:	e5903000 	ldr	r3, [r0]
    94b4:	e2833001 	add	r3, r3, #1
    94b8:	e5803000 	str	r3, [r0]
	for (p = __atexit; p != NULL; p = p->next) {
    94bc:	e7928001 	ldr	r8, [r2, r1]
    94c0:	e5987000 	ldr	r7, [r8]
    94c4:	e3570000 	cmp	r7, #0
    94c8:	0a000011 	beq	9514 <__cxa_finalize+0x90>
		for (n = p->ind; --n >= 0;) {
    94cc:	e5975004 	ldr	r5, [r7, #4]
    94d0:	e0874185 	add	r4, r7, r5, lsl #3
    94d4:	ea000006 	b	94f4 <__cxa_finalize+0x70>
			if (p->fns[n].fn_ptr.cxa_func == NULL)
    94d8:	e5943004 	ldr	r3, [r4, #4]
    94dc:	e3530000 	cmp	r3, #0
    94e0:	0a000002 	beq	94f0 <__cxa_finalize+0x6c>

			/*
			 * Mark handler as having been already called to avoid
			 * dupes and loops, then call the appropriate function.
			 */
			fn = p->fns[n];
    94e4:	e5940008 	ldr	r0, [r4, #8]
			p->fns[n].fn_ptr.cxa_func = NULL;
    94e8:	e5846004 	str	r6, [r4, #4]
                        (*fn.fn_ptr.cxa_func)(fn.fn_arg);
    94ec:	e12fff33 	blx	r3
    94f0:	e2444008 	sub	r4, r4, #8
		for (n = p->ind; --n >= 0;) {
    94f4:	e2555001 	subs	r5, r5, #1
    94f8:	5afffff6 	bpl	94d8 <__cxa_finalize+0x54>
	for (p = __atexit; p != NULL; p = p->next) {
    94fc:	e5977000 	ldr	r7, [r7]
    9500:	e3570000 	cmp	r7, #0
    9504:	1afffff0 	bne	94cc <__cxa_finalize+0x48>
    9508:	e59f3054 	ldr	r3, [pc, #84]	; 9564 <__cxa_finalize+0xe0>
    950c:	e08f3003 	add	r3, pc, r3
    9510:	e5933000 	ldr	r3, [r3]
	/*
	 * If called via exit(), unmap the pages since we have now run
	 * all the handlers.  We defer this until calldepth == 0 so that
	 * we don't unmap things prematurely if called recursively.
	 */
	if (--call_depth == 0) {
    9514:	e59f204c 	ldr	r2, [pc, #76]	; 9568 <__cxa_finalize+0xe4>
    9518:	e2433001 	sub	r3, r3, #1
    951c:	e3530000 	cmp	r3, #0
    9520:	e08f2002 	add	r2, pc, r2
    9524:	e5823000 	str	r3, [r2]
    9528:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
		for (p = __atexit; p != NULL; ) {
    952c:	e5980000 	ldr	r0, [r8]
    9530:	e3500000 	cmp	r0, #0
    9534:	0a000003 	beq	9548 <__cxa_finalize+0xc4>
			q = p;
			p = p->next;
    9538:	e5904000 	ldr	r4, [r0]
			free(q);
    953c:	eb000772 	bl	b30c <free>
		for (p = __atexit; p != NULL; ) {
    9540:	e2540000 	subs	r0, r4, #0
    9544:	1afffffb 	bne	9538 <__cxa_finalize+0xb4>
		}
		__atexit = NULL;
    9548:	e3a03000 	mov	r3, #0
    954c:	e5883000 	str	r3, [r8]
	}
}
    9550:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    9554:	00005d80 	.word	0x00005d80
    9558:	00005c9c 	.word	0x00005c9c
    955c:	00006de0 	.word	0x00006de0
    9560:	00000014 	.word	0x00000014
    9564:	00006d80 	.word	0x00006d80
    9568:	00006d6c 	.word	0x00006d6c

0000956c <sbrk>:

static char *__libc_brk;

#define SBRK_ALIGN	32
static void *sbrk(ptrdiff_t increment)
{
    956c:	e92d4070 	push	{r4, r5, r6, lr}
    9570:	e1a04000 	mov	r4, r0
	char *new_brk;
	char *start;
	char *end;

	if (!__libc_brk)
    9574:	e59f5050 	ldr	r5, [pc, #80]	; 95cc <sbrk+0x60>
    9578:	e08f5005 	add	r5, pc, r5
    957c:	e5950000 	ldr	r0, [r5]
    9580:	e3500000 	cmp	r0, #0
    9584:	0a00000d 	beq	95c0 <sbrk+0x54>
		__libc_brk = (char *)brk(0);

	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    9588:	e280001f 	add	r0, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    958c:	e284401f 	add	r4, r4, #31
	start = (char *)ROUNDUP((long)__libc_brk, SBRK_ALIGN);
    9590:	e3c0501f 	bic	r5, r0, #31
	end   = start + ROUNDUP((long)increment, SBRK_ALIGN);
    9594:	e3c4401f 	bic	r4, r4, #31
    9598:	e0854004 	add	r4, r5, r4

	new_brk = (char *)brk((uint32_t)end);
    959c:	e1a00004 	mov	r0, r4
    95a0:	eb000a2a 	bl	be50 <brk>
	if (new_brk < end)
    95a4:	e1540000 	cmp	r4, r0
		return (void *)-1;
    95a8:	83e05000 	mvnhi	r5, #0

	__libc_brk = new_brk;
    95ac:	959f301c 	ldrls	r3, [pc, #28]	; 95d0 <sbrk+0x64>
    95b0:	908f3003 	addls	r3, pc, r3
    95b4:	95830000 	strls	r0, [r3]
	return start;
}
    95b8:	e1a00005 	mov	r0, r5
    95bc:	e8bd8070 	pop	{r4, r5, r6, pc}
		__libc_brk = (char *)brk(0);
    95c0:	eb000a22 	bl	be50 <brk>
    95c4:	e5850000 	str	r0, [r5]
    95c8:	eaffffee 	b	9588 <sbrk+0x1c>
    95cc:	00006d18 	.word	0x00006d18
    95d0:	00006ce0 	.word	0x00006ce0

000095d4 <init_mparams.part.2>:
static void post_fork_parent(void) { RELEASE_LOCK(&(gm)->mutex); }
static void post_fork_child(void)  { INITIAL_LOCK(&(gm)->mutex); }
#endif /* LOCK_AT_FORK */

/* Initialize mparams */
static int init_mparams(void) {
    95d4:	e59f1084 	ldr	r1, [pc, #132]	; 9660 <init_mparams.part.2+0x8c>
      magic = (size_t)&magic ^ (size_t)0x55555555U;
#else
      magic = (size_t)(time(0) ^ (size_t)0x55555555U);
#endif
      magic |= (size_t)8U;    /* ensure nonzero */
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    95d8:	e3052550 	movw	r2, #21840	; 0x5550
    95dc:	e3452555 	movt	r2, #21845	; 0x5555
static int init_mparams(void) {
    95e0:	e59fc07c 	ldr	ip, [pc, #124]	; 9664 <init_mparams.part.2+0x90>
    95e4:	e08f1001 	add	r1, pc, r1
    95e8:	e92d4010 	push	{r4, lr}
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    95ec:	e3e04000 	mvn	r4, #0
    mparams.granularity = gsize;
    95f0:	e59f3070 	ldr	r3, [pc, #112]	; 9668 <init_mparams.part.2+0x94>
static int init_mparams(void) {
    95f4:	e24dd008 	sub	sp, sp, #8
    95f8:	e791e00c 	ldr	lr, [r1, ip]
    mparams.granularity = gsize;
    95fc:	e08f3003 	add	r3, pc, r3
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    9600:	e1a0000d 	mov	r0, sp
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    9604:	e3a01602 	mov	r1, #2097152	; 0x200000
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    9608:	e0222000 	eor	r2, r2, r0
    gm->mflags = mparams.default_mflags;
    960c:	e59f0058 	ldr	r0, [pc, #88]	; 966c <init_mparams.part.2+0x98>
    mparams.trim_threshold = DEFAULT_TRIM_THRESHOLD;
    9610:	e5831010 	str	r1, [r3, #16]
      magic &= ~(size_t)7U;   /* improve chances of fault for bad values */
    9614:	e3822008 	orr	r2, r2, #8
static int init_mparams(void) {
    9618:	e59e1000 	ldr	r1, [lr]
    gm->mflags = mparams.default_mflags;
    961c:	e08f0000 	add	r0, pc, r0
static int init_mparams(void) {
    9620:	e58d1004 	str	r1, [sp, #4]
    mparams.granularity = gsize;
    9624:	e3a0ca01 	mov	ip, #4096	; 0x1000
      /* Until memory modes commonly available, use volatile-write */
      (*(volatile size_t *)(&(mparams.magic))) = magic;
    9628:	e5832000 	str	r2, [r3]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    962c:	e3a01000 	mov	r1, #0
    mparams.mmap_threshold = DEFAULT_MMAP_THRESHOLD;
    9630:	e583400c 	str	r4, [r3, #12]
    }
  }

  RELEASE_MALLOC_GLOBAL_LOCK();
  return 1;
}
    9634:	e59d4004 	ldr	r4, [sp, #4]
    9638:	e59e2000 	ldr	r2, [lr]
    mparams.granularity = gsize;
    963c:	e583c008 	str	ip, [r3, #8]
}
    9640:	e1540002 	cmp	r4, r2
    mparams.page_size = psize;
    9644:	e583c004 	str	ip, [r3, #4]
    mparams.default_mflags = USE_LOCK_BIT|USE_MMAP_BIT;
    9648:	e5831014 	str	r1, [r3, #20]
    gm->mflags = mparams.default_mflags;
    964c:	e58011bc 	str	r1, [r0, #444]	; 0x1bc
}
    9650:	1a000001 	bne	965c <init_mparams.part.2+0x88>
    9654:	e28dd008 	add	sp, sp, #8
    9658:	e8bd8010 	pop	{r4, pc}
    965c:	eb000f7d 	bl	d458 <__stack_chk_fail>
    9660:	00005b50 	.word	0x00005b50
    9664:	0000000c 	.word	0x0000000c
    9668:	00006e70 	.word	0x00006e70
    966c:	00006c78 	.word	0x00006c78

00009670 <sys_trim.constprop.7>:
  return released;
}

static int sys_trim(mstate m, size_t pad) {
  size_t released = 0;
  ensure_initialization();
    9670:	e59f31c8 	ldr	r3, [pc, #456]	; 9840 <sys_trim.constprop.7+0x1d0>
static int sys_trim(mstate m, size_t pad) {
    9674:	e92d4070 	push	{r4, r5, r6, lr}
    9678:	e1a05000 	mov	r5, r0
  ensure_initialization();
    967c:	e08f3003 	add	r3, pc, r3
    9680:	e5933000 	ldr	r3, [r3]
    9684:	e3530000 	cmp	r3, #0
    9688:	0a000036 	beq	9768 <sys_trim.constprop.7+0xf8>
  if (pad < MAX_REQUEST && is_initialized(m)) {
    968c:	e3750041 	cmn	r5, #65	; 0x41
    9690:	8a000032 	bhi	9760 <sys_trim.constprop.7+0xf0>
    9694:	e59f41a8 	ldr	r4, [pc, #424]	; 9844 <sys_trim.constprop.7+0x1d4>
    9698:	e08f4004 	add	r4, pc, r4
    969c:	e5942018 	ldr	r2, [r4, #24]
    96a0:	e3520000 	cmp	r2, #0
    96a4:	0a00002d 	beq	9760 <sys_trim.constprop.7+0xf0>
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */

    if (m->topsize > pad) {
    96a8:	e594100c 	ldr	r1, [r4, #12]
    pad += TOP_FOOT_SIZE; /* ensure enough room for segment overhead */
    96ac:	e2855028 	add	r5, r5, #40	; 0x28
    if (m->topsize > pad) {
    96b0:	e1550001 	cmp	r5, r1
    96b4:	2a000024 	bcs	974c <sys_trim.constprop.7+0xdc>
  msegmentptr sp = &m->seg;
    96b8:	e2844d07 	add	r4, r4, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
    96bc:	e5943000 	ldr	r3, [r4]
    96c0:	e1520003 	cmp	r2, r3
    96c4:	3a000003 	bcc	96d8 <sys_trim.constprop.7+0x68>
    96c8:	e5940004 	ldr	r0, [r4, #4]
    96cc:	e0833000 	add	r3, r3, r0
    96d0:	e1520003 	cmp	r2, r3
    96d4:	3a000004 	bcc	96ec <sys_trim.constprop.7+0x7c>
    if ((sp = sp->next) == 0)
    96d8:	e5944008 	ldr	r4, [r4, #8]
    96dc:	e3540000 	cmp	r4, #0
    96e0:	1afffff5 	bne	96bc <sys_trim.constprop.7+0x4c>
      size_t unit = mparams.granularity;
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
                      SIZE_T_ONE) * unit;
      msegmentptr sp = segment_holding(m, (char*)m->top);

      if (!is_extern_segment(sp)) {
    96e4:	e594300c 	ldr	r3, [r4, #12]
    96e8:	e7f000f0 	udf	#0
    96ec:	e594300c 	ldr	r3, [r4, #12]
    96f0:	e3130008 	tst	r3, #8
    96f4:	1a000014 	bne	974c <sys_trim.constprop.7+0xdc>
      size_t unit = mparams.granularity;
    96f8:	e59f3148 	ldr	r3, [pc, #328]	; 9848 <sys_trim.constprop.7+0x1d8>
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
          ACQUIRE_MALLOC_GLOBAL_LOCK();
          {
            /* Make sure end of memory is where we last set it. */
            char* old_br = (char*)(CALL_MORECORE(0));
    96fc:	e3a00000 	mov	r0, #0
      size_t unit = mparams.granularity;
    9700:	e08f3003 	add	r3, pc, r3
    9704:	e5933008 	ldr	r3, [r3, #8]
      size_t extra = ((m->topsize - pad + (unit - SIZE_T_ONE)) / unit -
    9708:	e0811003 	add	r1, r1, r3
    970c:	e2411001 	sub	r1, r1, #1
    9710:	e0415005 	sub	r5, r1, r5
    9714:	e735f315 	udiv	r5, r5, r3
    9718:	e2455001 	sub	r5, r5, #1
    971c:	e0050593 	mul	r5, r3, r5
          if (extra >= HALF_MAX_SIZE_T) /* Avoid wrapping negative */
    9720:	e375010a 	cmn	r5, #-2147483646	; 0x80000002
            extra = (HALF_MAX_SIZE_T) + SIZE_T_ONE - unit;
    9724:	82635102 	rsbhi	r5, r3, #-2147483648	; 0x80000000
            char* old_br = (char*)(CALL_MORECORE(0));
    9728:	ebffff8f 	bl	956c <sbrk>
            if (old_br == sp->base + sp->size) {
    972c:	e1c420d0 	ldrd	r2, [r4]
            char* old_br = (char*)(CALL_MORECORE(0));
    9730:	e1a06000 	mov	r6, r0
            if (old_br == sp->base + sp->size) {
    9734:	e0833002 	add	r3, r3, r2
    9738:	e1500003 	cmp	r0, r3
    973c:	0a00000f 	beq	9780 <sys_trim.constprop.7+0x110>
    9740:	e59f3104 	ldr	r3, [pc, #260]	; 984c <sys_trim.constprop.7+0x1dc>
    9744:	e08f3003 	add	r3, pc, r3
    9748:	e593100c 	ldr	r1, [r3, #12]
    /* Unmap any unused mmapped segments */
    if (HAVE_MMAP)
      released += release_unused_segments(m);

    /* On failure, disable autotrim to avoid repeated failed future calls */
    if (released == 0 && m->topsize > m->trim_check)
    974c:	e59f30fc 	ldr	r3, [pc, #252]	; 9850 <sys_trim.constprop.7+0x1e0>
    9750:	e08f3003 	add	r3, pc, r3
    9754:	e593201c 	ldr	r2, [r3, #28]
    9758:	e1520001 	cmp	r2, r1
    975c:	3a000003 	bcc	9770 <sys_trim.constprop.7+0x100>
  size_t offset = align_offset(chunk2mem(p));
    9760:	e3a00000 	mov	r0, #0
    9764:	e8bd8070 	pop	{r4, r5, r6, pc}
    9768:	ebffff99 	bl	95d4 <init_mparams.part.2>
    976c:	eaffffc6 	b	968c <sys_trim.constprop.7+0x1c>
      m->trim_check = MAX_SIZE_T;
    9770:	e3e02000 	mvn	r2, #0
    9774:	e3a00000 	mov	r0, #0
    9778:	e583201c 	str	r2, [r3, #28]
  }

  return (released != 0)? 1 : 0;
}
    977c:	e8bd8070 	pop	{r4, r5, r6, pc}
              char* rel_br = (char*)(CALL_MORECORE(-extra));
    9780:	e2650000 	rsb	r0, r5, #0
    9784:	ebffff78 	bl	956c <sbrk>
    9788:	e1a05000 	mov	r5, r0
              char* new_br = (char*)(CALL_MORECORE(0));
    978c:	e3a00000 	mov	r0, #0
    9790:	ebffff75 	bl	956c <sbrk>
              if (rel_br != CMFAIL && new_br < old_br)
    9794:	e3750001 	cmn	r5, #1
    9798:	11560000 	cmpne	r6, r0
    979c:	9a000023 	bls	9830 <sys_trim.constprop.7+0x1c0>
      if (released != 0) {
    97a0:	e0566000 	subs	r6, r6, r0
    97a4:	0a000021 	beq	9830 <sys_trim.constprop.7+0x1c0>
        m->footprint -= released;
    97a8:	e59f00a4 	ldr	r0, [pc, #164]	; 9854 <sys_trim.constprop.7+0x1e4>
        sp->size -= released;
    97ac:	e5943004 	ldr	r3, [r4, #4]
        m->footprint -= released;
    97b0:	e08f0000 	add	r0, pc, r0
        sp->size -= released;
    97b4:	e0433006 	sub	r3, r3, r6
    97b8:	e5843004 	str	r3, [r4, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    97bc:	e3a04028 	mov	r4, #40	; 0x28
        init_top(m, m->top, m->topsize - released);
    97c0:	e5902018 	ldr	r2, [r0, #24]
    97c4:	e590100c 	ldr	r1, [r0, #12]
  size_t offset = align_offset(chunk2mem(p));
    97c8:	e2823008 	add	r3, r2, #8
        m->footprint -= released;
    97cc:	e590c1b0 	ldr	ip, [r0, #432]	; 0x1b0
  size_t offset = align_offset(chunk2mem(p));
    97d0:	e3130007 	tst	r3, #7
    97d4:	12633000 	rsbne	r3, r3, #0
        m->footprint -= released;
    97d8:	e04cc006 	sub	ip, ip, r6
  size_t offset = align_offset(chunk2mem(p));
    97dc:	12033007 	andne	r3, r3, #7
        m->footprint -= released;
    97e0:	e580c1b0 	str	ip, [r0, #432]	; 0x1b0
        init_top(m, m->top, m->topsize - released);
    97e4:	e0416006 	sub	r6, r1, r6
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    97e8:	e59f0068 	ldr	r0, [pc, #104]	; 9858 <sys_trim.constprop.7+0x1e8>
    97ec:	1082c003 	addne	ip, r2, r3
  size_t offset = align_offset(chunk2mem(p));
    97f0:	01a0c002 	moveq	ip, r2
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    97f4:	e0821006 	add	r1, r2, r6
  m->top = p;
    97f8:	e59f205c 	ldr	r2, [pc, #92]	; 985c <sys_trim.constprop.7+0x1ec>
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    97fc:	e08f0000 	add	r0, pc, r0
    9800:	10463003 	subne	r3, r6, r3
  m->top = p;
    9804:	e08f2002 	add	r2, pc, r2
  size_t offset = align_offset(chunk2mem(p));
    9808:	01a03006 	moveq	r3, r6
  p->head = psize | PINUSE_BIT;
    980c:	e3835001 	orr	r5, r3, #1
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9810:	e590e010 	ldr	lr, [r0, #16]
    9814:	e3a00001 	mov	r0, #1
  m->top = p;
    9818:	e582c018 	str	ip, [r2, #24]
  m->topsize = psize;
    981c:	e582300c 	str	r3, [r2, #12]
  p->head = psize | PINUSE_BIT;
    9820:	e58c5004 	str	r5, [ip, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    9824:	e5814004 	str	r4, [r1, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    9828:	e582e01c 	str	lr, [r2, #28]
    982c:	e8bd8070 	pop	{r4, r5, r6, pc}
    9830:	e59f3028 	ldr	r3, [pc, #40]	; 9860 <sys_trim.constprop.7+0x1f0>
    9834:	e08f3003 	add	r3, pc, r3
    9838:	e593100c 	ldr	r1, [r3, #12]
    983c:	eaffffc2 	b	974c <sys_trim.constprop.7+0xdc>
    9840:	00006df0 	.word	0x00006df0
    9844:	00006bfc 	.word	0x00006bfc
    9848:	00006d6c 	.word	0x00006d6c
    984c:	00006b50 	.word	0x00006b50
    9850:	00006b44 	.word	0x00006b44
    9854:	00006ae4 	.word	0x00006ae4
    9858:	00006c70 	.word	0x00006c70
    985c:	00006a90 	.word	0x00006a90
    9860:	00006a60 	.word	0x00006a60

00009864 <malloc>:
  return 0;
}

#if !ONLY_MSPACES

void* dlmalloc(size_t bytes) {
    9864:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
#endif

  if (!PREACTION(gm)) {
    void* mem;
    size_t nb;
    if (bytes <= MAX_SMALL_REQUEST) {
    9868:	e35000f4 	cmp	r0, #244	; 0xf4
void* dlmalloc(size_t bytes) {
    986c:	e24dd00c 	sub	sp, sp, #12
    if (bytes <= MAX_SMALL_REQUEST) {
    9870:	8a00002d 	bhi	992c <malloc+0xc8>
      bindex_t idx;
      binmap_t smallbits;
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
      idx = small_index(nb);
      smallbits = gm->smallmap >> idx;
    9874:	e59fefdc 	ldr	lr, [pc, #4060]	; a858 <malloc+0xff4>
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    9878:	e350000a 	cmp	r0, #10
    987c:	8280400b 	addhi	r4, r0, #11
    9880:	93a01002 	movls	r1, #2
      smallbits = gm->smallmap >> idx;
    9884:	e08fe00e 	add	lr, pc, lr
      nb = (bytes < MIN_REQUEST)? MIN_CHUNK_SIZE : pad_request(bytes);
    9888:	83c44007 	bichi	r4, r4, #7
    988c:	93a04010 	movls	r4, #16
    9890:	81a011a4 	lsrhi	r1, r4, #3
      smallbits = gm->smallmap >> idx;
    9894:	e59ec000 	ldr	ip, [lr]
    9898:	e1a0313c 	lsr	r3, ip, r1

      if ((smallbits & 0x3U) != 0) { /* Remainderless fit to a smallbin. */
    989c:	e3130003 	tst	r3, #3
    98a0:	0a00004e 	beq	99e0 <malloc+0x17c>
        mchunkptr b, p;
        idx += ~smallbits & 1;       /* Uses next bin if idx empty */
    98a4:	e1e03003 	mvn	r3, r3
    98a8:	e2033001 	and	r3, r3, #1
    98ac:	e0833001 	add	r3, r3, r1
        b = smallbin_at(gm, idx);
    98b0:	e08e1183 	add	r1, lr, r3, lsl #3
    98b4:	e2811028 	add	r1, r1, #40	; 0x28
        p = b->fd;
    98b8:	e5910008 	ldr	r0, [r1, #8]
        assert(chunksize(p) == small_index2size(idx));
    98bc:	e5902004 	ldr	r2, [r0, #4]
    98c0:	e3c22007 	bic	r2, r2, #7
    98c4:	e1520183 	cmp	r2, r3, lsl #3
    98c8:	1a0001e9 	bne	a074 <malloc+0x810>
        unlink_first_small_chunk(gm, b, p, idx);
    98cc:	e1510000 	cmp	r1, r0
    98d0:	e5904008 	ldr	r4, [r0, #8]
    98d4:	0a0001e6 	beq	a074 <malloc+0x810>
    98d8:	e1500004 	cmp	r0, r4
    98dc:	0a0001e4 	beq	a074 <malloc+0x810>
    98e0:	e1510004 	cmp	r1, r4
    98e4:	0a00019c 	beq	9f5c <malloc+0x6f8>
    98e8:	e59e3010 	ldr	r3, [lr, #16]
    98ec:	e1530004 	cmp	r3, r4
    98f0:	8a0001df 	bhi	a074 <malloc+0x810>
    98f4:	e594300c 	ldr	r3, [r4, #12]
    98f8:	e1530000 	cmp	r3, r0
    98fc:	1a0001dc 	bne	a074 <malloc+0x810>
    9900:	e584100c 	str	r1, [r4, #12]
    9904:	e5814008 	str	r4, [r1, #8]
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    9908:	e0801002 	add	r1, r0, r2
    990c:	e3822003 	orr	r2, r2, #3
    9910:	e5802004 	str	r2, [r0, #4]
        mem = chunk2mem(p);
    9914:	e2800008 	add	r0, r0, #8
        set_inuse_and_pinuse(gm, p, small_index2size(idx));
    9918:	e5913004 	ldr	r3, [r1, #4]
    991c:	e3833001 	orr	r3, r3, #1
    9920:	e5813004 	str	r3, [r1, #4]
    POSTACTION(gm);
    return mem;
  }

  return 0;
}
    9924:	e28dd00c 	add	sp, sp, #12
    9928:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    992c:	e59f3f28 	ldr	r3, [pc, #3880]	; a85c <malloc+0xff8>
    else if (bytes >= MAX_REQUEST)
    9930:	e3700041 	cmn	r0, #65	; 0x41
    9934:	e08f3003 	add	r3, pc, r3
    9938:	e5932008 	ldr	r2, [r3, #8]
    993c:	9a00000f 	bls	9980 <malloc+0x11c>
    if (nb <= gm->dvsize) {
    9940:	e3720001 	cmn	r2, #1
    9944:	1a000090 	bne	9b8c <malloc+0x328>
      mchunkptr p = gm->dv;
    9948:	e5930014 	ldr	r0, [r3, #20]
    994c:	e240c001 	sub	ip, r0, #1
        gm->dvsize = 0;
    9950:	e59f3f08 	ldr	r3, [pc, #3848]	; a860 <malloc+0xffc>
    9954:	e3a01000 	mov	r1, #0
    9958:	e08f3003 	add	r3, pc, r3
    995c:	e5831008 	str	r1, [r3, #8]
        gm->dv = 0;
    9960:	e5831014 	str	r1, [r3, #20]
        set_inuse_and_pinuse(gm, p, dvs);
    9964:	e5802004 	str	r2, [r0, #4]
    9968:	e59c3004 	ldr	r3, [ip, #4]
    996c:	e3833001 	orr	r3, r3, #1
    9970:	e58c3004 	str	r3, [ip, #4]
      mem = chunk2mem(p);
    9974:	e2800008 	add	r0, r0, #8
}
    9978:	e28dd00c 	add	sp, sp, #12
    997c:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    9980:	e5931004 	ldr	r1, [r3, #4]
      nb = pad_request(bytes);
    9984:	e280400b 	add	r4, r0, #11
    9988:	e3c44007 	bic	r4, r4, #7
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    998c:	e3510000 	cmp	r1, #0
    9990:	1a0000ea 	bne	9d40 <malloc+0x4dc>
    if (nb <= gm->dvsize) {
    9994:	e1540002 	cmp	r4, r2
    9998:	9a00006b 	bls	9b4c <malloc+0x2e8>
    else if (nb < gm->topsize) { /* Split top */
    999c:	e59f2ec0 	ldr	r2, [pc, #3776]	; a864 <malloc+0x1000>
    99a0:	e08f2002 	add	r2, pc, r2
    99a4:	e592300c 	ldr	r3, [r2, #12]
    99a8:	e1530004 	cmp	r3, r4
    99ac:	9a00064c 	bls	b2e4 <malloc+0x1a80>
      mchunkptr p = gm->top;
    99b0:	e5921018 	ldr	r1, [r2, #24]
      size_t rsize = gm->topsize -= nb;
    99b4:	e0433004 	sub	r3, r3, r4
      r->head = rsize | PINUSE_BIT;
    99b8:	e383c001 	orr	ip, r3, #1
      size_t rsize = gm->topsize -= nb;
    99bc:	e582300c 	str	r3, [r2, #12]
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
    99c0:	e0813004 	add	r3, r1, r4
      mem = chunk2mem(p);
    99c4:	e2810008 	add	r0, r1, #8
      mchunkptr r = gm->top = chunk_plus_offset(p, nb);
    99c8:	e5823018 	str	r3, [r2, #24]
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    99cc:	e3844003 	orr	r4, r4, #3
      r->head = rsize | PINUSE_BIT;
    99d0:	e583c004 	str	ip, [r3, #4]
      set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    99d4:	e5814004 	str	r4, [r1, #4]
}
    99d8:	e28dd00c 	add	sp, sp, #12
    99dc:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else if (nb > gm->dvsize) {
    99e0:	e59e2008 	ldr	r2, [lr, #8]
    99e4:	e1520004 	cmp	r2, r4
    99e8:	2a000057 	bcs	9b4c <malloc+0x2e8>
        if (smallbits != 0) { /* Use chunk in next nonempty smallbin */
    99ec:	e3530000 	cmp	r3, #0
    99f0:	0a0001a1 	beq	a07c <malloc+0x818>
          binmap_t leftbits = (smallbits << idx) & left_bits(idx2bit(idx));
    99f4:	e3a05001 	mov	r5, #1
    99f8:	e1a00115 	lsl	r0, r5, r1
    99fc:	e1a06510 	lsl	r6, r0, r5
    9a00:	e2660000 	rsb	r0, r6, #0
    9a04:	e1800006 	orr	r0, r0, r6
    9a08:	e0001113 	and	r1, r0, r3, lsl r1
          binmap_t leastbit = least_bit(leftbits);
    9a0c:	e2613000 	rsb	r3, r1, #0
    9a10:	e0033001 	and	r3, r3, r1
          compute_bit2idx(leastbit, i);
    9a14:	e2433001 	sub	r3, r3, #1
    9a18:	e1a01623 	lsr	r1, r3, #12
    9a1c:	e2011010 	and	r1, r1, #16
    9a20:	e1a03133 	lsr	r3, r3, r1
    9a24:	e1a002a3 	lsr	r0, r3, #5
    9a28:	e2000008 	and	r0, r0, #8
    9a2c:	e1811000 	orr	r1, r1, r0
    9a30:	e1a03033 	lsr	r3, r3, r0
    9a34:	e1a00123 	lsr	r0, r3, #2
    9a38:	e2000004 	and	r0, r0, #4
    9a3c:	e0811000 	add	r1, r1, r0
    9a40:	e1a03033 	lsr	r3, r3, r0
    9a44:	e1a00533 	lsr	r0, r3, r5
    9a48:	e2000002 	and	r0, r0, #2
    9a4c:	e0811000 	add	r1, r1, r0
    9a50:	e1a03033 	lsr	r3, r3, r0
    9a54:	e7e000d3 	ubfx	r0, r3, #1, #1
    9a58:	e0811000 	add	r1, r1, r0
    9a5c:	e0813033 	add	r3, r1, r3, lsr r0
          b = smallbin_at(gm, i);
    9a60:	e08e1183 	add	r1, lr, r3, lsl #3
    9a64:	e2811028 	add	r1, r1, #40	; 0x28
          p = b->fd;
    9a68:	e5910008 	ldr	r0, [r1, #8]
          assert(chunksize(p) == small_index2size(i));
    9a6c:	e5907004 	ldr	r7, [r0, #4]
    9a70:	e3c77007 	bic	r7, r7, #7
    9a74:	e1570183 	cmp	r7, r3, lsl #3
    9a78:	1a00017d 	bne	a074 <malloc+0x810>
          unlink_first_small_chunk(gm, b, p, i);
    9a7c:	e1510000 	cmp	r1, r0
    9a80:	e5906008 	ldr	r6, [r0, #8]
    9a84:	0a00017a 	beq	a074 <malloc+0x810>
    9a88:	e1500006 	cmp	r0, r6
    9a8c:	0a000178 	beq	a074 <malloc+0x810>
    9a90:	e1510006 	cmp	r1, r6
    9a94:	01cc3315 	biceq	r3, ip, r5, lsl r3
    9a98:	058e3000 	streq	r3, [lr]
    9a9c:	0a000007 	beq	9ac0 <malloc+0x25c>
    9aa0:	e59e3010 	ldr	r3, [lr, #16]
    9aa4:	e1530006 	cmp	r3, r6
    9aa8:	8a000171 	bhi	a074 <malloc+0x810>
    9aac:	e596300c 	ldr	r3, [r6, #12]
    9ab0:	e1530000 	cmp	r3, r0
    9ab4:	1a00016e 	bne	a074 <malloc+0x810>
    9ab8:	e586100c 	str	r1, [r6, #12]
    9abc:	e5816008 	str	r6, [r1, #8]
            r = chunk_plus_offset(p, nb);
    9ac0:	e080e004 	add	lr, r0, r4
          rsize = small_index2size(i) - nb;
    9ac4:	e047c004 	sub	ip, r7, r4
            set_size_and_pinuse_of_free_chunk(r, rsize);
    9ac8:	e38c3001 	orr	r3, ip, #1
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9acc:	e3844003 	orr	r4, r4, #3
            replace_dv(gm, r, rsize);
    9ad0:	e3520000 	cmp	r2, #0
            set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9ad4:	e5804004 	str	r4, [r0, #4]
            replace_dv(gm, r, rsize);
    9ad8:	e1a051a2 	lsr	r5, r2, #3
            set_size_and_pinuse_of_free_chunk(r, rsize);
    9adc:	e58e3004 	str	r3, [lr, #4]
    9ae0:	e780c007 	str	ip, [r0, r7]
            replace_dv(gm, r, rsize);
    9ae4:	0a000012 	beq	9b34 <malloc+0x2d0>
    9ae8:	e59f1d78 	ldr	r1, [pc, #3448]	; a868 <malloc+0x1004>
    9aec:	e352000f 	cmp	r2, #15
    9af0:	e08f1001 	add	r1, pc, r1
    9af4:	e0813185 	add	r3, r1, r5, lsl #3
    9af8:	e2833028 	add	r3, r3, #40	; 0x28
    9afc:	e5912014 	ldr	r2, [r1, #20]
    9b00:	9a00015b 	bls	a074 <malloc+0x810>
    9b04:	e3a04001 	mov	r4, #1
    9b08:	e5916000 	ldr	r6, [r1]
    9b0c:	e1a04514 	lsl	r4, r4, r5
    9b10:	e1160004 	tst	r6, r4
    9b14:	1a0003da 	bne	aa84 <malloc+0x1220>
    9b18:	e1a05003 	mov	r5, r3
    9b1c:	e1864004 	orr	r4, r6, r4
    9b20:	e5814000 	str	r4, [r1]
    9b24:	e5832008 	str	r2, [r3, #8]
    9b28:	e585200c 	str	r2, [r5, #12]
    9b2c:	e5825008 	str	r5, [r2, #8]
    9b30:	e582300c 	str	r3, [r2, #12]
    9b34:	e59f3d30 	ldr	r3, [pc, #3376]	; a86c <malloc+0x1008>
          mem = chunk2mem(p);
    9b38:	e2800008 	add	r0, r0, #8
            replace_dv(gm, r, rsize);
    9b3c:	e08f3003 	add	r3, pc, r3
    9b40:	e583c008 	str	ip, [r3, #8]
    9b44:	e583e014 	str	lr, [r3, #20]
          goto postaction;
    9b48:	eaffff75 	b	9924 <malloc+0xc0>
      mchunkptr p = gm->dv;
    9b4c:	e59f1d1c 	ldr	r1, [pc, #3356]	; a870 <malloc+0x100c>
      size_t rsize = gm->dvsize - nb;
    9b50:	e0423004 	sub	r3, r2, r4
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
    9b54:	e353000f 	cmp	r3, #15
      mchunkptr p = gm->dv;
    9b58:	e08f1001 	add	r1, pc, r1
    9b5c:	e5910014 	ldr	r0, [r1, #20]
    9b60:	e080c002 	add	ip, r0, r2
      if (rsize >= MIN_CHUNK_SIZE) { /* split dv */
    9b64:	9a000408 	bls	ab8c <malloc+0x1328>
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    9b68:	e080c004 	add	ip, r0, r4
        gm->dvsize = rsize;
    9b6c:	e5813008 	str	r3, [r1, #8]
        mchunkptr r = gm->dv = chunk_plus_offset(p, nb);
    9b70:	e581c014 	str	ip, [r1, #20]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9b74:	e3844003 	orr	r4, r4, #3
        set_size_and_pinuse_of_free_chunk(r, rsize);
    9b78:	e3831001 	orr	r1, r3, #1
    9b7c:	e58c1004 	str	r1, [ip, #4]
    9b80:	e7803002 	str	r3, [r0, r2]
        set_size_and_pinuse_of_inuse_chunk(gm, p, nb);
    9b84:	e5804004 	str	r4, [r0, #4]
    9b88:	eaffff79 	b	9974 <malloc+0x110>
  ensure_initialization();
    9b8c:	e59f3ce0 	ldr	r3, [pc, #3296]	; a874 <malloc+0x1010>
    9b90:	e08f3003 	add	r3, pc, r3
    9b94:	e5933000 	ldr	r3, [r3]
    9b98:	e3530000 	cmp	r3, #0
    9b9c:	1a00012a 	bne	a04c <malloc+0x7e8>
      nb = MAX_SIZE_T; /* Too big to allocate. Force failure (in sys alloc) */
    9ba0:	e3e04000 	mvn	r4, #0
    9ba4:	ebfffe8a 	bl	95d4 <init_mparams.part.2>
  asize = granularity_align(nb + SYS_ALLOC_PADDING);
    9ba8:	e59f3cc8 	ldr	r3, [pc, #3272]	; a878 <malloc+0x1014>
    9bac:	e08f3003 	add	r3, pc, r3
    9bb0:	e5936008 	ldr	r6, [r3, #8]
    9bb4:	e286002f 	add	r0, r6, #47	; 0x2f
    9bb8:	e266c000 	rsb	ip, r6, #0
    9bbc:	e0848000 	add	r8, r4, r0
    9bc0:	e008800c 	and	r8, r8, ip
  if (asize <= nb)
    9bc4:	e1580004 	cmp	r8, r4
    9bc8:	9a00011f 	bls	a04c <malloc+0x7e8>
  if (m->footprint_limit != 0) {
    9bcc:	e59f3ca8 	ldr	r3, [pc, #3240]	; a87c <malloc+0x1018>
    9bd0:	e08f3003 	add	r3, pc, r3
    9bd4:	e59321b8 	ldr	r2, [r3, #440]	; 0x1b8
    9bd8:	e3520000 	cmp	r2, #0
    9bdc:	0a000008 	beq	9c04 <malloc+0x3a0>
    size_t fp = m->footprint + asize;
    9be0:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
    9be4:	e0881003 	add	r1, r8, r3
    if (fp <= m->footprint || fp > m->footprint_limit)
    9be8:	e1530001 	cmp	r3, r1
    9bec:	33a03000 	movcc	r3, #0
    9bf0:	23a03001 	movcs	r3, #1
    9bf4:	e1520001 	cmp	r2, r1
    9bf8:	33833001 	orrcc	r3, r3, #1
    9bfc:	e3530000 	cmp	r3, #0
    9c00:	1a000111 	bne	a04c <malloc+0x7e8>
  if (MORECORE_CONTIGUOUS && !use_noncontiguous(m)) {
    9c04:	e59f7c74 	ldr	r7, [pc, #3188]	; a880 <malloc+0x101c>
    9c08:	e08f7007 	add	r7, pc, r7
    9c0c:	e597e1bc 	ldr	lr, [r7, #444]	; 0x1bc
    9c10:	e31e0004 	tst	lr, #4
    9c14:	0a0000d4 	beq	9f6c <malloc+0x708>
    if (asize < HALF_MAX_SIZE_T) {
    9c18:	e378010a 	cmn	r8, #-2147483646	; 0x80000002
    9c1c:	8a00010a 	bhi	a04c <malloc+0x7e8>
      br = (char*)(CALL_MORECORE(asize));
    9c20:	e1a00008 	mov	r0, r8
    9c24:	ebfffe50 	bl	956c <sbrk>
    9c28:	e1a05000 	mov	r5, r0
      end = (char*)(CALL_MORECORE(0));
    9c2c:	e3a00000 	mov	r0, #0
    9c30:	ebfffe4d 	bl	956c <sbrk>
      if (br != CMFAIL && end != CMFAIL && br < end) {
    9c34:	e3700001 	cmn	r0, #1
    9c38:	13750001 	cmnne	r5, #1
    9c3c:	13a03001 	movne	r3, #1
    9c40:	03a03000 	moveq	r3, #0
    9c44:	e1550000 	cmp	r5, r0
    9c48:	23a03000 	movcs	r3, #0
    9c4c:	32033001 	andcc	r3, r3, #1
    9c50:	e3530000 	cmp	r3, #0
    9c54:	0a0000fc 	beq	a04c <malloc+0x7e8>
        size_t ssize = end - br;
    9c58:	e0406005 	sub	r6, r0, r5
        if (ssize > nb + TOP_FOOT_SIZE) {
    9c5c:	e2843028 	add	r3, r4, #40	; 0x28
    9c60:	e1560003 	cmp	r6, r3
    9c64:	9a0000f8 	bls	a04c <malloc+0x7e8>
  if (tbase != CMFAIL) {
    9c68:	e3750001 	cmn	r5, #1
    9c6c:	0a0000f6 	beq	a04c <malloc+0x7e8>
    if ((m->footprint += tsize) > m->max_footprint)
    9c70:	e59f2c0c 	ldr	r2, [pc, #3084]	; a884 <malloc+0x1020>
    9c74:	e08f2002 	add	r2, pc, r2
    9c78:	e59231b0 	ldr	r3, [r2, #432]	; 0x1b0
    9c7c:	e59211b4 	ldr	r1, [r2, #436]	; 0x1b4
    9c80:	e0863003 	add	r3, r6, r3
    9c84:	e58231b0 	str	r3, [r2, #432]	; 0x1b0
    9c88:	e1530001 	cmp	r3, r1
      m->max_footprint = m->footprint;
    9c8c:	858231b4 	strhi	r3, [r2, #436]	; 0x1b4
    if (!is_initialized(m)) { /* first-time initialization */
    9c90:	e59f3bf0 	ldr	r3, [pc, #3056]	; a888 <malloc+0x1024>
    9c94:	e08f3003 	add	r3, pc, r3
    9c98:	e593e018 	ldr	lr, [r3, #24]
    9c9c:	e35e0000 	cmp	lr, #0
      msegmentptr sp = &m->seg;
    9ca0:	12833d07 	addne	r3, r3, #448	; 0x1c0
    if (!is_initialized(m)) { /* first-time initialization */
    9ca4:	0a000271 	beq	a670 <malloc+0xe0c>
      while (sp != 0 && tbase != sp->base + sp->size)
    9ca8:	e5932000 	ldr	r2, [r3]
    9cac:	e5931004 	ldr	r1, [r3, #4]
    9cb0:	e0820001 	add	r0, r2, r1
    9cb4:	e1500005 	cmp	r0, r5
    9cb8:	0a00018e 	beq	a2f8 <malloc+0xa94>
        sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    9cbc:	e5933008 	ldr	r3, [r3, #8]
      while (sp != 0 && tbase != sp->base + sp->size)
    9cc0:	e3530000 	cmp	r3, #0
    9cc4:	1afffff7 	bne	9ca8 <malloc+0x444>
        if (tbase < m->least_addr)
    9cc8:	e59f3bbc 	ldr	r3, [pc, #3004]	; a88c <malloc+0x1028>
    9ccc:	e0851006 	add	r1, r5, r6
    9cd0:	e08f3003 	add	r3, pc, r3
    9cd4:	e5932010 	ldr	r2, [r3, #16]
    9cd8:	e1520005 	cmp	r2, r5
          m->least_addr = tbase;
    9cdc:	85835010 	strhi	r5, [r3, #16]
  size_t offset = align_offset(chunk2mem(p));
    9ce0:	e59f3ba8 	ldr	r3, [pc, #2984]	; a890 <malloc+0x102c>
    9ce4:	e08f3003 	add	r3, pc, r3
    9ce8:	e2833d07 	add	r3, r3, #448	; 0x1c0
        while (sp != 0 && sp->base != tbase + tsize)
    9cec:	e5932000 	ldr	r2, [r3]
    9cf0:	e1520001 	cmp	r2, r1
    9cf4:	0a000178 	beq	a2dc <malloc+0xa78>
          sp = (NO_SEGMENT_TRAVERSAL) ? 0 : sp->next;
    9cf8:	e5933008 	ldr	r3, [r3, #8]
        while (sp != 0 && sp->base != tbase + tsize)
    9cfc:	e3530000 	cmp	r3, #0
    9d00:	1afffff9 	bne	9cec <malloc+0x488>
    9d04:	e59f3b88 	ldr	r3, [pc, #2952]	; a894 <malloc+0x1030>
    9d08:	e08f3003 	add	r3, pc, r3
    9d0c:	e2833d07 	add	r3, r3, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
    9d10:	e5932000 	ldr	r2, [r3]
    9d14:	e15e0002 	cmp	lr, r2
    9d18:	3a000003 	bcc	9d2c <malloc+0x4c8>
    9d1c:	e5931004 	ldr	r1, [r3, #4]
    9d20:	e0822001 	add	r2, r2, r1
    9d24:	e15e0002 	cmp	lr, r2
    9d28:	3a0001a3 	bcc	a3bc <malloc+0xb58>
    if ((sp = sp->next) == 0)
    9d2c:	e5933008 	ldr	r3, [r3, #8]
    9d30:	e3530000 	cmp	r3, #0
    9d34:	1afffff5 	bne	9d10 <malloc+0x4ac>
  char* old_end = oldsp->base + oldsp->size;
    9d38:	e5933000 	ldr	r3, [r3]
    9d3c:	e7f000f0 	udf	#0
  size_t rsize = -nb; /* Unsigned negation */
    9d40:	e2646000 	rsb	r6, r4, #0
  compute_tree_index(nb, idx);
    9d44:	e1b07424 	lsrs	r7, r4, #8
    9d48:	1a00015b 	bne	a2bc <malloc+0xa58>
  if ((t = *treebin_at(m, idx)) != 0) {
    9d4c:	e593c130 	ldr	ip, [r3, #304]	; 0x130
    9d50:	e35c0000 	cmp	ip, #0
    9d54:	01a08006 	moveq	r8, r6
    9d58:	03e07001 	mvneq	r7, #1
    9d5c:	0a0001f4 	beq	a534 <malloc+0xcd0>
    9d60:	e3a0e019 	mov	lr, #25
    9d64:	e1a0ee14 	lsl	lr, r4, lr
    tchunkptr rst = 0;  /* The deepest untaken right subtree */
    9d68:	e3a05000 	mov	r5, #0
  tchunkptr v = 0;
    9d6c:	e1a00005 	mov	r0, r5
    9d70:	ea000000 	b	9d78 <malloc+0x514>
      sizebits <<= 1;
    9d74:	e1a0e08e 	lsl	lr, lr, #1
      size_t trem = chunksize(t) - nb;
    9d78:	e59c8004 	ldr	r8, [ip, #4]
    9d7c:	e3c88007 	bic	r8, r8, #7
    9d80:	e0488004 	sub	r8, r8, r4
      if (trem < rsize) {
    9d84:	e1580006 	cmp	r8, r6
    9d88:	2a000003 	bcs	9d9c <malloc+0x538>
        if ((rsize = trem) == 0)
    9d8c:	e3580000 	cmp	r8, #0
    9d90:	0a00027e 	beq	a790 <malloc+0xf2c>
    9d94:	e1a06008 	mov	r6, r8
    9d98:	e1a0000c 	mov	r0, ip
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    9d9c:	e1a03fae 	lsr	r3, lr, #31
      rt = t->child[1];
    9da0:	e59c8014 	ldr	r8, [ip, #20]
      t = t->child[(sizebits >> (SIZE_T_BITSIZE-SIZE_T_ONE)) & 1];
    9da4:	e2833004 	add	r3, r3, #4
    9da8:	e79cc103 	ldr	ip, [ip, r3, lsl #2]
      if (rt != 0 && rt != t)
    9dac:	e3580000 	cmp	r8, #0
    9db0:	1158000c 	cmpne	r8, ip
    9db4:	11a05008 	movne	r5, r8
      if (t == 0) {
    9db8:	e35c0000 	cmp	ip, #0
    9dbc:	1affffec 	bne	9d74 <malloc+0x510>
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    9dc0:	e3550000 	cmp	r5, #0
    9dc4:	03500000 	cmpeq	r0, #0
    9dc8:	0a0001d6 	beq	a528 <malloc+0xcc4>
  while (t != 0) { /* find smallest of tree or subtree */
    9dcc:	e3550000 	cmp	r5, #0
    9dd0:	e1a08006 	mov	r8, r6
    9dd4:	11a0c005 	movne	ip, r5
    9dd8:	1a000001 	bne	9de4 <malloc+0x580>
    9ddc:	ea00000c 	b	9e14 <malloc+0x5b0>
    9de0:	e1a0c00e 	mov	ip, lr
    size_t trem = chunksize(t) - nb;
    9de4:	e59c3004 	ldr	r3, [ip, #4]
    t = leftmost_child(t);
    9de8:	e59ce010 	ldr	lr, [ip, #16]
    size_t trem = chunksize(t) - nb;
    9dec:	e3c33007 	bic	r3, r3, #7
    9df0:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
    9df4:	e1530008 	cmp	r3, r8
    9df8:	31a08003 	movcc	r8, r3
    9dfc:	31a0000c 	movcc	r0, ip
    t = leftmost_child(t);
    9e00:	e35e0000 	cmp	lr, #0
    9e04:	1afffff5 	bne	9de0 <malloc+0x57c>
    9e08:	e59ce014 	ldr	lr, [ip, #20]
  while (t != 0) { /* find smallest of tree or subtree */
    9e0c:	e35e0000 	cmp	lr, #0
    9e10:	1afffff2 	bne	9de0 <malloc+0x57c>
  if (v != 0 && rsize < (size_t)(m->dvsize - nb)) {
    9e14:	e3500000 	cmp	r0, #0
    9e18:	0afffedd 	beq	9994 <malloc+0x130>
    9e1c:	e0423004 	sub	r3, r2, r4
    9e20:	e1530008 	cmp	r3, r8
    9e24:	9afffeda 	bls	9994 <malloc+0x130>
    if (RTCHECK(ok_address(m, v))) { /* split */
    9e28:	e59fca68 	ldr	ip, [pc, #2664]	; a898 <malloc+0x1034>
    9e2c:	e08fc00c 	add	ip, pc, ip
    9e30:	e59c6010 	ldr	r6, [ip, #16]
    9e34:	e1560000 	cmp	r6, r0
    9e38:	8a00008d 	bhi	a074 <malloc+0x810>
      assert(chunksize(v) == rsize + nb);
    9e3c:	e5905004 	ldr	r5, [r0, #4]
    9e40:	e0843008 	add	r3, r4, r8
      mchunkptr r = chunk_plus_offset(v, nb);
    9e44:	e0807004 	add	r7, r0, r4
      assert(chunksize(v) == rsize + nb);
    9e48:	e3c55007 	bic	r5, r5, #7
    9e4c:	e1550003 	cmp	r5, r3
    9e50:	1a000087 	bne	a074 <malloc+0x810>
      if (RTCHECK(ok_next(v, r))) {
    9e54:	e1570000 	cmp	r7, r0
    9e58:	9a000085 	bls	a074 <malloc+0x810>
        unlink_large_chunk(m, v);
    9e5c:	e590200c 	ldr	r2, [r0, #12]
    9e60:	e5909018 	ldr	r9, [r0, #24]
    9e64:	e1520000 	cmp	r2, r0
    9e68:	0a000262 	beq	a7f8 <malloc+0xf94>
    9e6c:	e5903008 	ldr	r3, [r0, #8]
    9e70:	e1560003 	cmp	r6, r3
    9e74:	8a00007e 	bhi	a074 <malloc+0x810>
    9e78:	e593100c 	ldr	r1, [r3, #12]
    9e7c:	e1510000 	cmp	r1, r0
    9e80:	1a00007b 	bne	a074 <malloc+0x810>
    9e84:	e5921008 	ldr	r1, [r2, #8]
    9e88:	e1510000 	cmp	r1, r0
    9e8c:	1a000078 	bne	a074 <malloc+0x810>
    9e90:	e583200c 	str	r2, [r3, #12]
    9e94:	e5823008 	str	r3, [r2, #8]
    9e98:	e3590000 	cmp	r9, #0
    9e9c:	0a000020 	beq	9f24 <malloc+0x6c0>
    9ea0:	e590301c 	ldr	r3, [r0, #28]
    9ea4:	e59f19f0 	ldr	r1, [pc, #2544]	; a89c <malloc+0x1038>
    9ea8:	e283304c 	add	r3, r3, #76	; 0x4c
    9eac:	e08f1001 	add	r1, pc, r1
    9eb0:	e791c103 	ldr	ip, [r1, r3, lsl #2]
    9eb4:	e15c0000 	cmp	ip, r0
    9eb8:	07812103 	streq	r2, [r1, r3, lsl #2]
    9ebc:	0a000007 	beq	9ee0 <malloc+0x67c>
    9ec0:	e1560009 	cmp	r6, r9
    9ec4:	8a00006a 	bhi	a074 <malloc+0x810>
    9ec8:	e5993010 	ldr	r3, [r9, #16]
    9ecc:	e1530000 	cmp	r3, r0
    9ed0:	05892010 	streq	r2, [r9, #16]
    9ed4:	15892014 	strne	r2, [r9, #20]
    9ed8:	e3520000 	cmp	r2, #0
    9edc:	0a000010 	beq	9f24 <malloc+0x6c0>
    9ee0:	e1560002 	cmp	r6, r2
    9ee4:	8a000062 	bhi	a074 <malloc+0x810>
    9ee8:	e5903010 	ldr	r3, [r0, #16]
    9eec:	e5829018 	str	r9, [r2, #24]
    9ef0:	e3530000 	cmp	r3, #0
    9ef4:	0a000003 	beq	9f08 <malloc+0x6a4>
    9ef8:	e1560003 	cmp	r6, r3
    9efc:	8a00005c 	bhi	a074 <malloc+0x810>
    9f00:	e5823010 	str	r3, [r2, #16]
    9f04:	e5832018 	str	r2, [r3, #24]
    9f08:	e5903014 	ldr	r3, [r0, #20]
    9f0c:	e3530000 	cmp	r3, #0
    9f10:	0a000003 	beq	9f24 <malloc+0x6c0>
    9f14:	e1560003 	cmp	r6, r3
    9f18:	8a000055 	bhi	a074 <malloc+0x810>
    9f1c:	e5823014 	str	r3, [r2, #20]
    9f20:	e5832018 	str	r2, [r3, #24]
        if (rsize < MIN_CHUNK_SIZE)
    9f24:	e358000f 	cmp	r8, #15
    9f28:	8a00021a 	bhi	a798 <malloc+0xf34>
          set_inuse_and_pinuse(m, v, (rsize + nb));
    9f2c:	e0802005 	add	r2, r0, r5
    9f30:	e3855003 	orr	r5, r5, #3
    9f34:	e5805004 	str	r5, [r0, #4]
    9f38:	e5923004 	ldr	r3, [r2, #4]
    9f3c:	e3833001 	orr	r3, r3, #1
    9f40:	e5823004 	str	r3, [r2, #4]
      if (gm->treemap != 0 && (mem = tmalloc_large(gm, nb)) != 0) {
    9f44:	e2900008 	adds	r0, r0, #8
    9f48:	1afffe75 	bne	9924 <malloc+0xc0>
    9f4c:	e59f394c 	ldr	r3, [pc, #2380]	; a8a0 <malloc+0x103c>
    9f50:	e08f3003 	add	r3, pc, r3
    9f54:	e5932008 	ldr	r2, [r3, #8]
    9f58:	eafffe8d 	b	9994 <malloc+0x130>
        unlink_first_small_chunk(gm, b, p, idx);
    9f5c:	e3a01001 	mov	r1, #1
    9f60:	e1cc3311 	bic	r3, ip, r1, lsl r3
    9f64:	e58e3000 	str	r3, [lr]
    9f68:	eafffe66 	b	9908 <malloc+0xa4>
    msegmentptr ss = (m->top == 0)? 0 : segment_holding(m, (char*)m->top);
    9f6c:	e5971018 	ldr	r1, [r7, #24]
    9f70:	e3510000 	cmp	r1, #0
    9f74:	0a00000a 	beq	9fa4 <malloc+0x740>
  msegmentptr sp = &m->seg;
    9f78:	e2877d07 	add	r7, r7, #448	; 0x1c0
    if (addr >= sp->base && addr < sp->base + sp->size)
    9f7c:	e5973000 	ldr	r3, [r7]
    9f80:	e1510003 	cmp	r1, r3
    9f84:	3a000003 	bcc	9f98 <malloc+0x734>
    9f88:	e5972004 	ldr	r2, [r7, #4]
    9f8c:	e0833002 	add	r3, r3, r2
    9f90:	e1510003 	cmp	r1, r3
    9f94:	3a000185 	bcc	a5b0 <malloc+0xd4c>
    if ((sp = sp->next) == 0)
    9f98:	e5977008 	ldr	r7, [r7, #8]
    9f9c:	e3570000 	cmp	r7, #0
    9fa0:	1afffff5 	bne	9f7c <malloc+0x718>
      char* base = (char*)CALL_MORECORE(0);
    9fa4:	e3a00000 	mov	r0, #0
    9fa8:	ebfffd6f 	bl	956c <sbrk>
    9fac:	e1a07000 	mov	r7, r0
      if (base != CMFAIL) {
    9fb0:	e3700001 	cmn	r0, #1
    9fb4:	0a00001b 	beq	a028 <malloc+0x7c4>
        if (!is_page_aligned(base))
    9fb8:	e59f38e4 	ldr	r3, [pc, #2276]	; a8a4 <malloc+0x1040>
    9fbc:	e08f3003 	add	r3, pc, r3
    9fc0:	e5932004 	ldr	r2, [r3, #4]
    9fc4:	e2423001 	sub	r3, r2, #1
    9fc8:	e1100003 	tst	r0, r3
          ssize += (page_align((size_t)base) - (size_t)base);
    9fcc:	10836000 	addne	r6, r3, r0
    9fd0:	12622000 	rsbne	r2, r2, #0
    9fd4:	10483000 	subne	r3, r8, r0
    9fd8:	10066002 	andne	r6, r6, r2
    9fdc:	10866003 	addne	r6, r6, r3
        if (!is_page_aligned(base))
    9fe0:	01a06008 	moveq	r6, r8
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    9fe4:	e1560004 	cmp	r6, r4
    9fe8:	83a03001 	movhi	r3, #1
    9fec:	93a03000 	movls	r3, #0
    9ff0:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
    9ff4:	83a03000 	movhi	r3, #0
    9ff8:	e3530000 	cmp	r3, #0
    9ffc:	0a000009 	beq	a028 <malloc+0x7c4>
        fp = m->footprint + ssize; /* recheck limits */
    a000:	e59f38a0 	ldr	r3, [pc, #2208]	; a8a8 <malloc+0x1044>
    a004:	e08f3003 	add	r3, pc, r3
            (m->footprint_limit == 0 ||
    a008:	e59321b8 	ldr	r2, [r3, #440]	; 0x1b8
        fp = m->footprint + ssize; /* recheck limits */
    a00c:	e59331b0 	ldr	r3, [r3, #432]	; 0x1b0
        if (ssize > nb && ssize < HALF_MAX_SIZE_T &&
    a010:	e3520000 	cmp	r2, #0
    a014:	0a0003bd 	beq	af10 <malloc+0x16ac>
        fp = m->footprint + ssize; /* recheck limits */
    a018:	e0831006 	add	r1, r3, r6
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    a01c:	e1510002 	cmp	r1, r2
    a020:	91530001 	cmpls	r3, r1
    a024:	3a0003b9 	bcc	af10 <malloc+0x16ac>
    a028:	e59f387c 	ldr	r3, [pc, #2172]	; a8ac <malloc+0x1048>
    a02c:	e08f3003 	add	r3, pc, r3
    a030:	e593e1bc 	ldr	lr, [r3, #444]	; 0x1bc
        disable_contiguous(m); /* Don't try contiguous path in the future */
    a034:	e59f3874 	ldr	r3, [pc, #2164]	; a8b0 <malloc+0x104c>
    a038:	e38ee004 	orr	lr, lr, #4
    if (asize < HALF_MAX_SIZE_T) {
    a03c:	e378010a 	cmn	r8, #-2147483646	; 0x80000002
        disable_contiguous(m); /* Don't try contiguous path in the future */
    a040:	e08f3003 	add	r3, pc, r3
    a044:	e583e1bc 	str	lr, [r3, #444]	; 0x1bc
    if (asize < HALF_MAX_SIZE_T) {
    a048:	9afffef4 	bls	9c20 <malloc+0x3bc>
    return 0; /* wraparound */
    a04c:	e3a00000 	mov	r0, #0
    a050:	eafffe33 	b	9924 <malloc+0xc0>
      unlink_chunk(m, oldfirst, nsize);
    a054:	e59f7858 	ldr	r7, [pc, #2136]	; a8b4 <malloc+0x1050>
    a058:	e08f7007 	add	r7, pc, r7
    a05c:	e5977010 	ldr	r7, [r7, #16]
    a060:	e1540007 	cmp	r4, r7
    a064:	3a000002 	bcc	a074 <malloc+0x810>
    a068:	e594700c 	ldr	r7, [r4, #12]
    a06c:	e1570002 	cmp	r7, r2
    a070:	0a0003c2 	beq	af80 <malloc+0x171c>
        assert(chunksize(p) == small_index2size(idx));
    a074:	e3e00000 	mvn	r0, #0
    a078:	ebfff7e0 	bl	8000 <exit>
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
    a07c:	e59e5004 	ldr	r5, [lr, #4]
    a080:	e3550000 	cmp	r5, #0
    a084:	0afffe44 	beq	999c <malloc+0x138>
  binmap_t leastbit = least_bit(m->treemap);
    a088:	e2653000 	rsb	r3, r5, #0
    a08c:	e0033005 	and	r3, r3, r5
  compute_bit2idx(leastbit, i);
    a090:	e2433001 	sub	r3, r3, #1
    a094:	e1a01623 	lsr	r1, r3, #12
    a098:	e2011010 	and	r1, r1, #16
    a09c:	e1a03133 	lsr	r3, r3, r1
    a0a0:	e1a002a3 	lsr	r0, r3, #5
    a0a4:	e2000008 	and	r0, r0, #8
    a0a8:	e1811000 	orr	r1, r1, r0
    a0ac:	e1a03033 	lsr	r3, r3, r0
    a0b0:	e1a00123 	lsr	r0, r3, #2
    a0b4:	e2000004 	and	r0, r0, #4
    a0b8:	e0811000 	add	r1, r1, r0
    a0bc:	e1a03033 	lsr	r3, r3, r0
    a0c0:	e1a000a3 	lsr	r0, r3, #1
    a0c4:	e2000002 	and	r0, r0, #2
    a0c8:	e0811000 	add	r1, r1, r0
    a0cc:	e1a03033 	lsr	r3, r3, r0
    a0d0:	e7e000d3 	ubfx	r0, r3, #1, #1
  v = t = *treebin_at(m, i);
    a0d4:	e0811000 	add	r1, r1, r0
    a0d8:	e0813033 	add	r3, r1, r3, lsr r0
    a0dc:	e283304c 	add	r3, r3, #76	; 0x4c
    a0e0:	e79e6103 	ldr	r6, [lr, r3, lsl #2]
  rsize = chunksize(t) - nb;
    a0e4:	e1a00006 	mov	r0, r6
    a0e8:	e596e004 	ldr	lr, [r6, #4]
    a0ec:	e3cee007 	bic	lr, lr, #7
    a0f0:	e04ee004 	sub	lr, lr, r4
    a0f4:	ea000006 	b	a114 <malloc+0x8b0>
    size_t trem = chunksize(t) - nb;
    a0f8:	e5913004 	ldr	r3, [r1, #4]
    if (trem < rsize) {
    a0fc:	e1a06001 	mov	r6, r1
    size_t trem = chunksize(t) - nb;
    a100:	e3c33007 	bic	r3, r3, #7
    a104:	e0433004 	sub	r3, r3, r4
    if (trem < rsize) {
    a108:	e153000e 	cmp	r3, lr
    a10c:	31a0e003 	movcc	lr, r3
    a110:	31a00001 	movcc	r0, r1
  while ((t = leftmost_child(t)) != 0) {
    a114:	e5961010 	ldr	r1, [r6, #16]
    a118:	e3510000 	cmp	r1, #0
    a11c:	1afffff5 	bne	a0f8 <malloc+0x894>
    a120:	e5961014 	ldr	r1, [r6, #20]
    a124:	e3510000 	cmp	r1, #0
    a128:	1afffff2 	bne	a0f8 <malloc+0x894>
  if (RTCHECK(ok_address(m, v))) {
    a12c:	e59fb784 	ldr	fp, [pc, #1924]	; a8b8 <malloc+0x1054>
    a130:	e08fb00b 	add	fp, pc, fp
    a134:	e59b9010 	ldr	r9, [fp, #16]
    a138:	e1590000 	cmp	r9, r0
    a13c:	8affffcc 	bhi	a074 <malloc+0x810>
    assert(chunksize(v) == rsize + nb);
    a140:	e5907004 	ldr	r7, [r0, #4]
    a144:	e084300e 	add	r3, r4, lr
    mchunkptr r = chunk_plus_offset(v, nb);
    a148:	e0808004 	add	r8, r0, r4
    assert(chunksize(v) == rsize + nb);
    a14c:	e3c77007 	bic	r7, r7, #7
    a150:	e1570003 	cmp	r7, r3
    a154:	1affffc6 	bne	a074 <malloc+0x810>
    if (RTCHECK(ok_next(v, r))) {
    a158:	e1580000 	cmp	r8, r0
    a15c:	9affffc4 	bls	a074 <malloc+0x810>
      unlink_large_chunk(m, v);
    a160:	e590600c 	ldr	r6, [r0, #12]
    a164:	e590a018 	ldr	sl, [r0, #24]
    a168:	e1560000 	cmp	r6, r0
    a16c:	0a0002d7 	beq	acd0 <malloc+0x146c>
    a170:	e5903008 	ldr	r3, [r0, #8]
    a174:	e1590003 	cmp	r9, r3
    a178:	8affffbd 	bhi	a074 <malloc+0x810>
    a17c:	e593100c 	ldr	r1, [r3, #12]
    a180:	e1510000 	cmp	r1, r0
    a184:	1affffba 	bne	a074 <malloc+0x810>
    a188:	e5961008 	ldr	r1, [r6, #8]
    a18c:	e1510000 	cmp	r1, r0
    a190:	1affffb7 	bne	a074 <malloc+0x810>
    a194:	e583600c 	str	r6, [r3, #12]
    a198:	e5863008 	str	r3, [r6, #8]
    a19c:	e35a0000 	cmp	sl, #0
    a1a0:	0a000020 	beq	a228 <malloc+0x9c4>
    a1a4:	e590301c 	ldr	r3, [r0, #28]
    a1a8:	e59f170c 	ldr	r1, [pc, #1804]	; a8bc <malloc+0x1058>
    a1ac:	e283304c 	add	r3, r3, #76	; 0x4c
    a1b0:	e08f1001 	add	r1, pc, r1
    a1b4:	e7915103 	ldr	r5, [r1, r3, lsl #2]
    a1b8:	e1550000 	cmp	r5, r0
    a1bc:	07816103 	streq	r6, [r1, r3, lsl #2]
    a1c0:	0a000007 	beq	a1e4 <malloc+0x980>
    a1c4:	e159000a 	cmp	r9, sl
    a1c8:	8affffa9 	bhi	a074 <malloc+0x810>
    a1cc:	e59a3010 	ldr	r3, [sl, #16]
    a1d0:	e1530000 	cmp	r3, r0
    a1d4:	058a6010 	streq	r6, [sl, #16]
    a1d8:	158a6014 	strne	r6, [sl, #20]
    a1dc:	e3560000 	cmp	r6, #0
    a1e0:	0a000010 	beq	a228 <malloc+0x9c4>
    a1e4:	e1590006 	cmp	r9, r6
    a1e8:	8affffa1 	bhi	a074 <malloc+0x810>
    a1ec:	e5903010 	ldr	r3, [r0, #16]
    a1f0:	e586a018 	str	sl, [r6, #24]
    a1f4:	e3530000 	cmp	r3, #0
    a1f8:	0a000003 	beq	a20c <malloc+0x9a8>
    a1fc:	e1590003 	cmp	r9, r3
    a200:	8affff9b 	bhi	a074 <malloc+0x810>
    a204:	e5863010 	str	r3, [r6, #16]
    a208:	e5836018 	str	r6, [r3, #24]
    a20c:	e5903014 	ldr	r3, [r0, #20]
    a210:	e3530000 	cmp	r3, #0
    a214:	0a000003 	beq	a228 <malloc+0x9c4>
    a218:	e1590003 	cmp	r9, r3
    a21c:	8affff94 	bhi	a074 <malloc+0x810>
    a220:	e5863014 	str	r3, [r6, #20]
    a224:	e5836018 	str	r6, [r3, #24]
      if (rsize < MIN_CHUNK_SIZE)
    a228:	e35e000f 	cmp	lr, #15
    a22c:	9a0002a0 	bls	acb4 <malloc+0x1450>
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    a230:	e3843003 	orr	r3, r4, #3
        replace_dv(m, r, rsize);
    a234:	e3520000 	cmp	r2, #0
        set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    a238:	e5803004 	str	r3, [r0, #4]
        set_size_and_pinuse_of_free_chunk(r, rsize);
    a23c:	e38e3001 	orr	r3, lr, #1
    a240:	e5883004 	str	r3, [r8, #4]
    a244:	e788e00e 	str	lr, [r8, lr]
        replace_dv(m, r, rsize);
    a248:	0a000011 	beq	a294 <malloc+0xa30>
    a24c:	e59f566c 	ldr	r5, [pc, #1644]	; a8c0 <malloc+0x105c>
    a250:	e1a061a2 	lsr	r6, r2, #3
    a254:	e352000f 	cmp	r2, #15
    a258:	e08f5005 	add	r5, pc, r5
    a25c:	e0853186 	add	r3, r5, r6, lsl #3
    a260:	e2833028 	add	r3, r3, #40	; 0x28
    a264:	e5951014 	ldr	r1, [r5, #20]
    a268:	9affff81 	bls	a074 <malloc+0x810>
    a26c:	e3a02001 	mov	r2, #1
    a270:	e1a02612 	lsl	r2, r2, r6
    a274:	e11c0002 	tst	ip, r2
    a278:	1a000382 	bne	b088 <malloc+0x1824>
    a27c:	e18cc002 	orr	ip, ip, r2
    a280:	e1a02003 	mov	r2, r3
    a284:	e585c000 	str	ip, [r5]
    a288:	e5831008 	str	r1, [r3, #8]
    a28c:	e582100c 	str	r1, [r2, #12]
    a290:	e1c120f8 	strd	r2, [r1, #8]
    a294:	e59f3628 	ldr	r3, [pc, #1576]	; a8c4 <malloc+0x1060>
    a298:	e08f3003 	add	r3, pc, r3
    a29c:	e583e008 	str	lr, [r3, #8]
    a2a0:	e5838014 	str	r8, [r3, #20]
        else if (gm->treemap != 0 && (mem = tmalloc_small(gm, nb)) != 0) {
    a2a4:	e2900008 	adds	r0, r0, #8
    a2a8:	1afffd9d 	bne	9924 <malloc+0xc0>
    a2ac:	e59f3614 	ldr	r3, [pc, #1556]	; a8c8 <malloc+0x1064>
    a2b0:	e08f3003 	add	r3, pc, r3
    a2b4:	e5932008 	ldr	r2, [r3, #8]
    a2b8:	eafffdb5 	b	9994 <malloc+0x130>
  compute_tree_index(nb, idx);
    a2bc:	e3570801 	cmp	r7, #65536	; 0x10000
    a2c0:	3a000114 	bcc	a718 <malloc+0xeb4>
  if ((t = *treebin_at(m, idx)) != 0) {
    a2c4:	e593c1ac 	ldr	ip, [r3, #428]	; 0x1ac
    a2c8:	e35c0000 	cmp	ip, #0
    a2cc:	11a0e004 	movne	lr, r4
  compute_tree_index(nb, idx);
    a2d0:	13a0701f 	movne	r7, #31
  if ((t = *treebin_at(m, idx)) != 0) {
    a2d4:	1afffea3 	bne	9d68 <malloc+0x504>
    a2d8:	eafffdad 	b	9994 <malloc+0x130>
            !is_extern_segment(sp) &&
    a2dc:	e593100c 	ldr	r1, [r3, #12]
    a2e0:	e3110008 	tst	r1, #8
    a2e4:	0a0001eb 	beq	aa98 <malloc+0x1234>
    a2e8:	e59f35dc 	ldr	r3, [pc, #1500]	; a8cc <malloc+0x1068>
    a2ec:	e08f3003 	add	r3, pc, r3
    a2f0:	e2833d07 	add	r3, r3, #448	; 0x1c0
    a2f4:	eafffe85 	b	9d10 <malloc+0x4ac>
          !is_extern_segment(sp) &&
    a2f8:	e593000c 	ldr	r0, [r3, #12]
    a2fc:	e3100008 	tst	r0, #8
    a300:	1afffe70 	bne	9cc8 <malloc+0x464>
          (sp->sflags & USE_MMAP_BIT) == mmap_flag &&
    a304:	e15e0002 	cmp	lr, r2
    a308:	3afffe6e 	bcc	9cc8 <malloc+0x464>
          segment_holds(sp, m->top)) { /* append */
    a30c:	e15e0005 	cmp	lr, r5
    a310:	2afffe6c 	bcs	9cc8 <malloc+0x464>
        init_top(m, m->top, m->topsize + tsize);
    a314:	e59f05b4 	ldr	r0, [pc, #1460]	; a8d0 <malloc+0x106c>
  size_t offset = align_offset(chunk2mem(p));
    a318:	e28e2008 	add	r2, lr, #8
        sp->size += tsize;
    a31c:	e0811006 	add	r1, r1, r6
    a320:	e5831004 	str	r1, [r3, #4]
        init_top(m, m->top, m->topsize + tsize);
    a324:	e08f0000 	add	r0, pc, r0
  size_t offset = align_offset(chunk2mem(p));
    a328:	e3120007 	tst	r2, #7
    a32c:	01a0c00e 	moveq	ip, lr
        init_top(m, m->top, m->topsize + tsize);
    a330:	e590300c 	ldr	r3, [r0, #12]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a334:	e59f0598 	ldr	r0, [pc, #1432]	; a8d4 <malloc+0x1070>
        init_top(m, m->top, m->topsize + tsize);
    a338:	e0866003 	add	r6, r6, r3
  size_t offset = align_offset(chunk2mem(p));
    a33c:	12623000 	rsbne	r3, r2, #0
  m->top = p;
    a340:	e59f2590 	ldr	r2, [pc, #1424]	; a8d8 <malloc+0x1074>
  size_t offset = align_offset(chunk2mem(p));
    a344:	12033007 	andne	r3, r3, #7
    a348:	108ec003 	addne	ip, lr, r3
    a34c:	01a03006 	moveq	r3, r6
    a350:	10463003 	subne	r3, r6, r3
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a354:	e08f0000 	add	r0, pc, r0
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a358:	e08e6006 	add	r6, lr, r6
  m->top = p;
    a35c:	e08f2002 	add	r2, pc, r2
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a360:	e5900010 	ldr	r0, [r0, #16]
  p->head = psize | PINUSE_BIT;
    a364:	e3831001 	orr	r1, r3, #1
  m->top = p;
    a368:	e582c018 	str	ip, [r2, #24]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a36c:	e3a0e028 	mov	lr, #40	; 0x28
  m->topsize = psize;
    a370:	e582300c 	str	r3, [r2, #12]
  p->head = psize | PINUSE_BIT;
    a374:	e58c1004 	str	r1, [ip, #4]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a378:	e586e004 	str	lr, [r6, #4]
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a37c:	e582001c 	str	r0, [r2, #28]
    if (nb < m->topsize) { /* Allocate from new or extended top space */
    a380:	e1540003 	cmp	r4, r3
    a384:	2affff30 	bcs	a04c <malloc+0x7e8>
      size_t rsize = m->topsize -= nb;
    a388:	e59f154c 	ldr	r1, [pc, #1356]	; a8dc <malloc+0x1078>
    a38c:	e0433004 	sub	r3, r3, r4
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    a390:	e384c003 	orr	ip, r4, #3
      r->head = rsize | PINUSE_BIT;
    a394:	e383e001 	orr	lr, r3, #1
      size_t rsize = m->topsize -= nb;
    a398:	e08f1001 	add	r1, pc, r1
      mchunkptr p = m->top;
    a39c:	e5912018 	ldr	r2, [r1, #24]
      size_t rsize = m->topsize -= nb;
    a3a0:	e581300c 	str	r3, [r1, #12]
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    a3a4:	e0824004 	add	r4, r2, r4
      return chunk2mem(p);
    a3a8:	e2820008 	add	r0, r2, #8
      mchunkptr r = m->top = chunk_plus_offset(p, nb);
    a3ac:	e5814018 	str	r4, [r1, #24]
      r->head = rsize | PINUSE_BIT;
    a3b0:	e584e004 	str	lr, [r4, #4]
      set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    a3b4:	e582c004 	str	ip, [r2, #4]
    a3b8:	eafffd59 	b	9924 <malloc+0xc0>
  size_t offset = align_offset(chunk2mem(rawsp));
    a3bc:	e2423027 	sub	r3, r2, #39	; 0x27
    a3c0:	e1a0c002 	mov	ip, r2
    a3c4:	e3130007 	tst	r3, #7
  m->top = p;
    a3c8:	e59fa510 	ldr	sl, [pc, #1296]	; a8e0 <malloc+0x107c>
  size_t offset = align_offset(chunk2mem(rawsp));
    a3cc:	12638000 	rsbne	r8, r3, #0
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    a3d0:	e28e3010 	add	r3, lr, #16
  size_t offset = align_offset(chunk2mem(rawsp));
    a3d4:	12088007 	andne	r8, r8, #7
    a3d8:	03e0802e 	mvneq	r8, #46	; 0x2e
    a3dc:	1248802f 	subne	r8, r8, #47	; 0x2f
  init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    a3e0:	e2461028 	sub	r1, r6, #40	; 0x28
  char* asp = rawsp + offset;
    a3e4:	e0828008 	add	r8, r2, r8
  m->top = p;
    a3e8:	e08fa00a 	add	sl, pc, sl
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    a3ec:	e1580003 	cmp	r8, r3
  size_t offset = align_offset(chunk2mem(p));
    a3f0:	e2853008 	add	r3, r5, #8
  char* csp = (asp < (old_top + MIN_CHUNK_SIZE))? old_top : asp;
    a3f4:	31a0800e 	movcc	r8, lr
  size_t offset = align_offset(chunk2mem(p));
    a3f8:	e3130007 	tst	r3, #7
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    a3fc:	e2882008 	add	r2, r8, #8
  size_t offset = align_offset(chunk2mem(p));
    a400:	12633000 	rsbne	r3, r3, #0
  msegmentptr ss = (msegmentptr)(chunk2mem(sp));
    a404:	e1a09002 	mov	r9, r2
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a408:	e59f24d4 	ldr	r2, [pc, #1236]	; a8e4 <malloc+0x1080>
  size_t offset = align_offset(chunk2mem(p));
    a40c:	12033007 	andne	r3, r3, #7
    a410:	01a03001 	moveq	r3, r1
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a414:	e08f2002 	add	r2, pc, r2
    a418:	10850003 	addne	r0, r5, r3
  size_t offset = align_offset(chunk2mem(p));
    a41c:	01a00005 	moveq	r0, r5
    a420:	10413003 	subne	r3, r1, r3
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a424:	e0851001 	add	r1, r5, r1
  p->head = psize | PINUSE_BIT;
    a428:	e3837001 	orr	r7, r3, #1
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a42c:	e5922010 	ldr	r2, [r2, #16]
  m->topsize = psize;
    a430:	e58a300c 	str	r3, [sl, #12]
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a434:	e3a03028 	mov	r3, #40	; 0x28
  m->top = p;
    a438:	e58a0018 	str	r0, [sl, #24]
  p->head = psize | PINUSE_BIT;
    a43c:	e5807004 	str	r7, [r0, #4]
  assert(is_aligned(ss));
    a440:	e1a07009 	mov	r7, r9
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a444:	e5813004 	str	r3, [r1, #4]
  assert(is_aligned(ss));
    a448:	e2191007 	ands	r1, r9, #7
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a44c:	e58a201c 	str	r2, [sl, #28]
  assert(is_aligned(ss));
    a450:	1affff07 	bne	a074 <malloc+0x810>
  *ss = m->seg; /* Push current record */
    a454:	e28a3d07 	add	r3, sl, #448	; 0x1c0
  int nfences = 0;
    a458:	e1a09001 	mov	r9, r1
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    a45c:	e3a0201b 	mov	r2, #27
  int nfences = 0;
    a460:	e58d1004 	str	r1, [sp, #4]
  set_size_and_pinuse_of_inuse_chunk(m, sp, ssize);
    a464:	e5882004 	str	r2, [r8, #4]
    p->head = FENCEPOST_HEAD;
    a468:	e3a0b007 	mov	fp, #7
  *ss = m->seg; /* Push current record */
    a46c:	e893000f 	ldm	r3, {r0, r1, r2, r3}
    a470:	e887000f 	stm	r7, {r0, r1, r2, r3}
  m->seg.next = ss;
    a474:	e58a71c8 	str	r7, [sl, #456]	; 0x1c8
    a478:	e288701c 	add	r7, r8, #28
  m->seg.base = tbase;
    a47c:	e58a51c0 	str	r5, [sl, #448]	; 0x1c0
  m->seg.size = tsize;
    a480:	e58a61c4 	str	r6, [sl, #452]	; 0x1c4
  m->seg.sflags = mmapped;
    a484:	e58a91cc 	str	r9, [sl, #460]	; 0x1cc
    p->head = FENCEPOST_HEAD;
    a488:	e487b004 	str	fp, [r7], #4
    ++nfences;
    a48c:	e2899001 	add	r9, r9, #1
    if ((char*)(&(nextp->head)) < old_end)
    a490:	e15c0007 	cmp	ip, r7
    a494:	8afffffb 	bhi	a488 <malloc+0xc24>
  assert(nfences >= 2);
    a498:	e3590001 	cmp	r9, #1
    a49c:	0afffef4 	beq	a074 <malloc+0x810>
  if (csp != old_top) {
    a4a0:	e15e0008 	cmp	lr, r8
    a4a4:	0a0001ba 	beq	ab94 <malloc+0x1330>
    size_t psize = csp - old_top;
    a4a8:	e048100e 	sub	r1, r8, lr
    set_free_with_pinuse(q, psize, tn);
    a4ac:	e5983004 	ldr	r3, [r8, #4]
    a4b0:	e3812001 	orr	r2, r1, #1
    a4b4:	e3c33001 	bic	r3, r3, #1
    a4b8:	e5883004 	str	r3, [r8, #4]
    insert_chunk(m, q, psize);
    a4bc:	e1a031a1 	lsr	r3, r1, #3
    set_free_with_pinuse(q, psize, tn);
    a4c0:	e58e2004 	str	r2, [lr, #4]
    insert_chunk(m, q, psize);
    a4c4:	e353001f 	cmp	r3, #31
    set_free_with_pinuse(q, psize, tn);
    a4c8:	e5881000 	str	r1, [r8]
    insert_chunk(m, q, psize);
    a4cc:	8a000127 	bhi	a970 <malloc+0x110c>
    a4d0:	e59f0410 	ldr	r0, [pc, #1040]	; a8e8 <malloc+0x1084>
    a4d4:	e351000f 	cmp	r1, #15
    a4d8:	e08f0000 	add	r0, pc, r0
    a4dc:	e0802183 	add	r2, r0, r3, lsl #3
    a4e0:	e2822028 	add	r2, r2, #40	; 0x28
    a4e4:	9afffee2 	bls	a074 <malloc+0x810>
    a4e8:	e3a01001 	mov	r1, #1
    a4ec:	e590c000 	ldr	ip, [r0]
    a4f0:	e1a03311 	lsl	r3, r1, r3
    a4f4:	e11c0003 	tst	ip, r3
    a4f8:	1a0001da 	bne	ac68 <malloc+0x1404>
    a4fc:	e1a01002 	mov	r1, r2
    a500:	e18c3003 	orr	r3, ip, r3
    a504:	e5803000 	str	r3, [r0]
    a508:	e59f33dc 	ldr	r3, [pc, #988]	; a8ec <malloc+0x1088>
    a50c:	e582e008 	str	lr, [r2, #8]
    a510:	e08f3003 	add	r3, pc, r3
    a514:	e581e00c 	str	lr, [r1, #12]
    a518:	e58e1008 	str	r1, [lr, #8]
    a51c:	e58e200c 	str	r2, [lr, #12]
    a520:	e593300c 	ldr	r3, [r3, #12]
    a524:	eaffff95 	b	a380 <malloc+0xb1c>
    a528:	e3e03001 	mvn	r3, #1
  if (t == 0 && v == 0) { /* set t to root of next non-empty treebin */
    a52c:	e1a08006 	mov	r8, r6
    a530:	e1a07713 	lsl	r7, r3, r7
    if (leftbits != 0) {
    a534:	e0117007 	ands	r7, r1, r7
    a538:	0afffd15 	beq	9994 <malloc+0x130>
      binmap_t leastbit = least_bit(leftbits);
    a53c:	e2673000 	rsb	r3, r7, #0
      t = *treebin_at(m, i);
    a540:	e59fc3a8 	ldr	ip, [pc, #936]	; a8f0 <malloc+0x108c>
      binmap_t leastbit = least_bit(leftbits);
    a544:	e0033007 	and	r3, r3, r7
      compute_bit2idx(leastbit, i);
    a548:	e2433001 	sub	r3, r3, #1
      t = *treebin_at(m, i);
    a54c:	e08fc00c 	add	ip, pc, ip
      compute_bit2idx(leastbit, i);
    a550:	e1a00623 	lsr	r0, r3, #12
    a554:	e2000010 	and	r0, r0, #16
    a558:	e1a03033 	lsr	r3, r3, r0
    a55c:	e1a0e2a3 	lsr	lr, r3, #5
    a560:	e20ee008 	and	lr, lr, #8
    a564:	e180000e 	orr	r0, r0, lr
    a568:	e1a03e33 	lsr	r3, r3, lr
    a56c:	e1a0e123 	lsr	lr, r3, #2
    a570:	e20ee004 	and	lr, lr, #4
    a574:	e080000e 	add	r0, r0, lr
    a578:	e1a03e33 	lsr	r3, r3, lr
    a57c:	e1a0e0a3 	lsr	lr, r3, #1
    a580:	e20ee002 	and	lr, lr, #2
    a584:	e080000e 	add	r0, r0, lr
    a588:	e1a03e33 	lsr	r3, r3, lr
    a58c:	e7e0e0d3 	ubfx	lr, r3, #1, #1
      t = *treebin_at(m, i);
    a590:	e080000e 	add	r0, r0, lr
    a594:	e0803e33 	add	r3, r0, r3, lsr lr
    a598:	e283304c 	add	r3, r3, #76	; 0x4c
    a59c:	e79cc103 	ldr	ip, [ip, r3, lsl #2]
  while (t != 0) { /* find smallest of tree or subtree */
    a5a0:	e35c0000 	cmp	ip, #0
    a5a4:	13a00000 	movne	r0, #0
    a5a8:	1afffe0d 	bne	9de4 <malloc+0x580>
    a5ac:	eafffcf8 	b	9994 <malloc+0x130>
      ssize = granularity_align(nb - m->topsize + SYS_ALLOC_PADDING);
    a5b0:	e59f333c 	ldr	r3, [pc, #828]	; a8f4 <malloc+0x1090>
    a5b4:	e08f3003 	add	r3, pc, r3
    a5b8:	e593600c 	ldr	r6, [r3, #12]
    a5bc:	e0406006 	sub	r6, r0, r6
    a5c0:	e0866004 	add	r6, r6, r4
    a5c4:	e006600c 	and	r6, r6, ip
      if (ssize < HALF_MAX_SIZE_T &&
    a5c8:	e376010a 	cmn	r6, #-2147483646	; 0x80000002
    a5cc:	8afffe98 	bhi	a034 <malloc+0x7d0>
    a5d0:	e1a00006 	mov	r0, r6
    a5d4:	ebfffbe4 	bl	956c <sbrk>
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    a5d8:	e5972000 	ldr	r2, [r7]
    a5dc:	e5971004 	ldr	r1, [r7, #4]
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    a5e0:	e3700001 	cmn	r0, #1
    a5e4:	13a03000 	movne	r3, #0
    a5e8:	03a03001 	moveq	r3, #1
          (br = (char*)(CALL_MORECORE(ssize))) == ss->base+ss->size) {
    a5ec:	e0822001 	add	r2, r2, r1
      if (ssize < HALF_MAX_SIZE_T &&
    a5f0:	e1a05000 	mov	r5, r0
    if (tbase == CMFAIL) {    /* Cope with partial failure */
    a5f4:	e1500002 	cmp	r0, r2
    a5f8:	13833001 	orrne	r3, r3, #1
    a5fc:	e3530000 	cmp	r3, #0
    a600:	0afffd9a 	beq	9c70 <malloc+0x40c>
      if (br != CMFAIL) {    /* Try to use/extend the space we did get */
    a604:	e3750001 	cmn	r5, #1
    a608:	0a00033b 	beq	b2fc <malloc+0x1a98>
            ssize < nb + SYS_ALLOC_PADDING) {
    a60c:	e2843030 	add	r3, r4, #48	; 0x30
        if (ssize < HALF_MAX_SIZE_T &&
    a610:	e1530006 	cmp	r3, r6
    a614:	9afffd95 	bls	9c70 <malloc+0x40c>
          size_t esize = granularity_align(nb + SYS_ALLOC_PADDING - ssize);
    a618:	e59f32d8 	ldr	r3, [pc, #728]	; a8f8 <malloc+0x1094>
    a61c:	e2669000 	rsb	r9, r6, #0
    a620:	e08f3003 	add	r3, pc, r3
    a624:	e5933008 	ldr	r3, [r3, #8]
    a628:	e283702f 	add	r7, r3, #47	; 0x2f
    a62c:	e2633000 	rsb	r3, r3, #0
    a630:	e0877004 	add	r7, r7, r4
    a634:	e0477006 	sub	r7, r7, r6
    a638:	e0077003 	and	r7, r7, r3
          if (esize < HALF_MAX_SIZE_T) {
    a63c:	e377010a 	cmn	r7, #-2147483646	; 0x80000002
    a640:	8afffd8a 	bhi	9c70 <malloc+0x40c>
            char* end = (char*)CALL_MORECORE(esize);
    a644:	e1a00007 	mov	r0, r7
    a648:	ebfffbc7 	bl	956c <sbrk>
            if (end != CMFAIL)
    a64c:	e3700001 	cmn	r0, #1
              ssize += esize;
    a650:	10866007 	addne	r6, r6, r7
            if (end != CMFAIL)
    a654:	1afffd85 	bne	9c70 <malloc+0x40c>
              (void) CALL_MORECORE(-ssize);
    a658:	e1a00009 	mov	r0, r9
    a65c:	ebfffbc2 	bl	956c <sbrk>
    a660:	e59f3294 	ldr	r3, [pc, #660]	; a8fc <malloc+0x1098>
    a664:	e08f3003 	add	r3, pc, r3
    a668:	e593e1bc 	ldr	lr, [r3, #444]	; 0x1bc
    a66c:	eafffe70 	b	a034 <malloc+0x7d0>
      if (m->least_addr == 0 || tbase < m->least_addr)
    a670:	e5931010 	ldr	r1, [r3, #16]
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    a674:	e3e00000 	mvn	r0, #0
      if (m->least_addr == 0 || tbase < m->least_addr)
    a678:	e1510005 	cmp	r1, r5
    a67c:	93a02000 	movls	r2, #0
    a680:	83a02001 	movhi	r2, #1
    a684:	e3510000 	cmp	r1, #0
      m->seg.base = tbase;
    a688:	e59f1270 	ldr	r1, [pc, #624]	; a900 <malloc+0x109c>
      if (m->least_addr == 0 || tbase < m->least_addr)
    a68c:	03a02001 	moveq	r2, #1
    a690:	e3520000 	cmp	r2, #0
        m->least_addr = tbase;
    a694:	15835010 	strne	r5, [r3, #16]
      m->magic = mparams.magic;
    a698:	e59f3264 	ldr	r3, [pc, #612]	; a904 <malloc+0x10a0>
      m->seg.base = tbase;
    a69c:	e08f1001 	add	r1, pc, r1
      m->seg.sflags = mmap_flag;
    a6a0:	e3a02000 	mov	r2, #0
      m->magic = mparams.magic;
    a6a4:	e08f3003 	add	r3, pc, r3
      m->seg.sflags = mmap_flag;
    a6a8:	e58121cc 	str	r2, [r1, #460]	; 0x1cc
    a6ac:	e2812f4a 	add	r2, r1, #296	; 0x128
      m->seg.base = tbase;
    a6b0:	e58151c0 	str	r5, [r1, #448]	; 0x1c0
      m->magic = mparams.magic;
    a6b4:	e5933000 	ldr	r3, [r3]
    a6b8:	e5813024 	str	r3, [r1, #36]	; 0x24
    a6bc:	e2813028 	add	r3, r1, #40	; 0x28
      m->seg.size = tsize;
    a6c0:	e58161c4 	str	r6, [r1, #452]	; 0x1c4
      m->release_checks = MAX_RELEASE_CHECK_RATE;
    a6c4:	e5810020 	str	r0, [r1, #32]
    bin->fd = bin->bk = bin;
    a6c8:	e583300c 	str	r3, [r3, #12]
    a6cc:	e5833008 	str	r3, [r3, #8]
    a6d0:	e2833008 	add	r3, r3, #8
  for (i = 0; i < NSMALLBINS; ++i) {
    a6d4:	e1520003 	cmp	r2, r3
    a6d8:	1afffffa 	bne	a6c8 <malloc+0xe64>
  size_t offset = align_offset(chunk2mem(p));
    a6dc:	e2853008 	add	r3, r5, #8
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a6e0:	e59f0220 	ldr	r0, [pc, #544]	; a908 <malloc+0x10a4>
  size_t offset = align_offset(chunk2mem(p));
    a6e4:	e3130007 	tst	r3, #7
  m->top = p;
    a6e8:	e59f221c 	ldr	r2, [pc, #540]	; a90c <malloc+0x10a8>
  size_t offset = align_offset(chunk2mem(p));
    a6ec:	12633000 	rsbne	r3, r3, #0
        init_top(m, (mchunkptr)tbase, tsize - TOP_FOOT_SIZE);
    a6f0:	e2466028 	sub	r6, r6, #40	; 0x28
  size_t offset = align_offset(chunk2mem(p));
    a6f4:	12033007 	andne	r3, r3, #7
    a6f8:	01a03006 	moveq	r3, r6
    a6fc:	1085c003 	addne	ip, r5, r3
    a700:	01a0c005 	moveq	ip, r5
    a704:	10463003 	subne	r3, r6, r3
  m->trim_check = mparams.trim_threshold; /* reset on each update */
    a708:	e08f0000 	add	r0, pc, r0
  chunk_plus_offset(p, psize)->head = TOP_FOOT_SIZE;
    a70c:	e0856006 	add	r6, r5, r6
  m->top = p;
    a710:	e08f2002 	add	r2, pc, r2
    a714:	eaffff11 	b	a360 <malloc+0xafc>
  compute_tree_index(nb, idx);
    a718:	e2470c01 	sub	r0, r7, #256	; 0x100
    a71c:	e1a00820 	lsr	r0, r0, #16
    a720:	e2000008 	and	r0, r0, #8
    a724:	e1a07017 	lsl	r7, r7, r0
    a728:	e247ca01 	sub	ip, r7, #4096	; 0x1000
    a72c:	e1a0c82c 	lsr	ip, ip, #16
    a730:	e20cc004 	and	ip, ip, #4
    a734:	e180000c 	orr	r0, r0, ip
    a738:	e1a07c17 	lsl	r7, r7, ip
    a73c:	e247c901 	sub	ip, r7, #16384	; 0x4000
    a740:	e1a0c82c 	lsr	ip, ip, #16
    a744:	e20cc002 	and	ip, ip, #2
    a748:	e080000c 	add	r0, r0, ip
    a74c:	e1a07c17 	lsl	r7, r7, ip
    a750:	e06077a7 	rsb	r7, r0, r7, lsr #15
    a754:	e2870015 	add	r0, r7, #21
    a758:	e287700e 	add	r7, r7, #14
    a75c:	e1a00034 	lsr	r0, r4, r0
    a760:	e2000001 	and	r0, r0, #1
    a764:	e0807087 	add	r7, r0, r7, lsl #1
  if ((t = *treebin_at(m, idx)) != 0) {
    a768:	e287004c 	add	r0, r7, #76	; 0x4c
    a76c:	e793c100 	ldr	ip, [r3, r0, lsl #2]
    a770:	e35c0000 	cmp	ip, #0
    a774:	0affff6b 	beq	a528 <malloc+0xcc4>
    size_t sizebits = nb << leftshift_for_tree_index(idx);
    a778:	e357001f 	cmp	r7, #31
    a77c:	01a0e004 	moveq	lr, r4
    a780:	0afffd78 	beq	9d68 <malloc+0x504>
    a784:	e1a0e0a7 	lsr	lr, r7, #1
    a788:	e26ee019 	rsb	lr, lr, #25
    a78c:	eafffd74 	b	9d64 <malloc+0x500>
        if ((rsize = trem) == 0)
    a790:	e1a0000c 	mov	r0, ip
    a794:	eafffd92 	b	9de4 <malloc+0x580>
          insert_chunk(m, r, rsize);
    a798:	e1a031a8 	lsr	r3, r8, #3
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    a79c:	e3842003 	orr	r2, r4, #3
          insert_chunk(m, r, rsize);
    a7a0:	e353001f 	cmp	r3, #31
          set_size_and_pinuse_of_inuse_chunk(m, v, nb);
    a7a4:	e5802004 	str	r2, [r0, #4]
          set_size_and_pinuse_of_free_chunk(r, rsize);
    a7a8:	e3882001 	orr	r2, r8, #1
    a7ac:	e5872004 	str	r2, [r7, #4]
    a7b0:	e7878008 	str	r8, [r7, r8]
          insert_chunk(m, r, rsize);
    a7b4:	8a0000fa 	bhi	aba4 <malloc+0x1340>
    a7b8:	e59f1150 	ldr	r1, [pc, #336]	; a910 <malloc+0x10ac>
    a7bc:	e3a02001 	mov	r2, #1
    a7c0:	e08f1001 	add	r1, pc, r1
    a7c4:	e1a02312 	lsl	r2, r2, r3
    a7c8:	e0813183 	add	r3, r1, r3, lsl #3
    a7cc:	e2833028 	add	r3, r3, #40	; 0x28
    a7d0:	e591c000 	ldr	ip, [r1]
    a7d4:	e11c0002 	tst	ip, r2
    a7d8:	1a00014e 	bne	ad18 <malloc+0x14b4>
    a7dc:	e18cc002 	orr	ip, ip, r2
    a7e0:	e1a02003 	mov	r2, r3
    a7e4:	e581c000 	str	ip, [r1]
    a7e8:	e5837008 	str	r7, [r3, #8]
    a7ec:	e582700c 	str	r7, [r2, #12]
    a7f0:	e1c720f8 	strd	r2, [r7, #8]
    a7f4:	eafffdd2 	b	9f44 <malloc+0x6e0>
        unlink_large_chunk(m, v);
    a7f8:	e590e014 	ldr	lr, [r0, #20]
    a7fc:	e35e0000 	cmp	lr, #0
    a800:	12803014 	addne	r3, r0, #20
    a804:	0a000125 	beq	aca0 <malloc+0x143c>
  while (t != 0) { /* find smallest of tree or subtree */
    a808:	e1a0200e 	mov	r2, lr
    a80c:	e1a0c003 	mov	ip, r3
        unlink_large_chunk(m, v);
    a810:	e1a03002 	mov	r3, r2
    a814:	e5b31014 	ldr	r1, [r3, #20]!
    a818:	e3510000 	cmp	r1, #0
    a81c:	0a000005 	beq	a838 <malloc+0xfd4>
    a820:	e1a02001 	mov	r2, r1
    a824:	e1a0c003 	mov	ip, r3
    a828:	e1a03002 	mov	r3, r2
    a82c:	e5b31014 	ldr	r1, [r3, #20]!
    a830:	e3510000 	cmp	r1, #0
    a834:	1afffff9 	bne	a820 <malloc+0xfbc>
    a838:	e1a03002 	mov	r3, r2
    a83c:	e5b3e010 	ldr	lr, [r3, #16]!
    a840:	e35e0000 	cmp	lr, #0
    a844:	1affffef 	bne	a808 <malloc+0xfa4>
    a848:	e156000c 	cmp	r6, ip
    a84c:	8afffe08 	bhi	a074 <malloc+0x810>
    a850:	e58ce000 	str	lr, [ip]
    a854:	eafffd8f 	b	9e98 <malloc+0x634>
    a858:	00006a10 	.word	0x00006a10
    a85c:	00006960 	.word	0x00006960
    a860:	0000693c 	.word	0x0000693c
    a864:	000068f4 	.word	0x000068f4
    a868:	000067a4 	.word	0x000067a4
    a86c:	00006758 	.word	0x00006758
    a870:	0000673c 	.word	0x0000673c
    a874:	000068dc 	.word	0x000068dc
    a878:	000068c0 	.word	0x000068c0
    a87c:	000066c4 	.word	0x000066c4
    a880:	0000668c 	.word	0x0000668c
    a884:	00006620 	.word	0x00006620
    a888:	00006600 	.word	0x00006600
    a88c:	000065c4 	.word	0x000065c4
    a890:	000065b0 	.word	0x000065b0
    a894:	0000658c 	.word	0x0000658c
    a898:	00006468 	.word	0x00006468
    a89c:	000063e8 	.word	0x000063e8
    a8a0:	00006344 	.word	0x00006344
    a8a4:	000064b0 	.word	0x000064b0
    a8a8:	00006290 	.word	0x00006290
    a8ac:	00006268 	.word	0x00006268
    a8b0:	00006254 	.word	0x00006254
    a8b4:	0000623c 	.word	0x0000623c
    a8b8:	00006164 	.word	0x00006164
    a8bc:	000060e4 	.word	0x000060e4
    a8c0:	0000603c 	.word	0x0000603c
    a8c4:	00005ffc 	.word	0x00005ffc
    a8c8:	00005fe4 	.word	0x00005fe4
    a8cc:	00005fa8 	.word	0x00005fa8
    a8d0:	00005f70 	.word	0x00005f70
    a8d4:	00006118 	.word	0x00006118
    a8d8:	00005f38 	.word	0x00005f38
    a8dc:	00005efc 	.word	0x00005efc
    a8e0:	00005eac 	.word	0x00005eac
    a8e4:	00006058 	.word	0x00006058
    a8e8:	00005dbc 	.word	0x00005dbc
    a8ec:	00005d84 	.word	0x00005d84
    a8f0:	00005d48 	.word	0x00005d48
    a8f4:	00005ce0 	.word	0x00005ce0
    a8f8:	00005e4c 	.word	0x00005e4c
    a8fc:	00005c30 	.word	0x00005c30
    a900:	00005bf8 	.word	0x00005bf8
    a904:	00005dc8 	.word	0x00005dc8
    a908:	00005d64 	.word	0x00005d64
    a90c:	00005b84 	.word	0x00005b84
    a910:	00005ad4 	.word	0x00005ad4
    a914:	000058ac 	.word	0x000058ac
    a918:	00005844 	.word	0x00005844
    a91c:	00005788 	.word	0x00005788
    a920:	0000573c 	.word	0x0000573c
    a924:	000056fc 	.word	0x000056fc
    a928:	00005678 	.word	0x00005678
    a92c:	000054dc 	.word	0x000054dc
    a930:	000054b0 	.word	0x000054b0
    a934:	00005418 	.word	0x00005418
    a938:	000053b4 	.word	0x000053b4
    a93c:	000052c8 	.word	0x000052c8
    a940:	00005224 	.word	0x00005224
    a944:	00005198 	.word	0x00005198
    a948:	00005180 	.word	0x00005180
    a94c:	00005154 	.word	0x00005154
    a950:	000050fc 	.word	0x000050fc
    a954:	000050b0 	.word	0x000050b0
    a958:	00005058 	.word	0x00005058
    a95c:	00005038 	.word	0x00005038
    a960:	00005020 	.word	0x00005020
    a964:	00004fdc 	.word	0x00004fdc
    a968:	00005184 	.word	0x00005184
    a96c:	00004f94 	.word	0x00004f94
    insert_chunk(m, q, psize);
    a970:	e1a03421 	lsr	r3, r1, #8
    a974:	e3530801 	cmp	r3, #65536	; 0x10000
    a978:	2a0000b5 	bcs	ac54 <malloc+0x13f0>
    a97c:	e2432c01 	sub	r2, r3, #256	; 0x100
    a980:	e3a00001 	mov	r0, #1
    a984:	e1a02822 	lsr	r2, r2, #16
    a988:	e2022008 	and	r2, r2, #8
    a98c:	e1a03213 	lsl	r3, r3, r2
    a990:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    a994:	e1a0c82c 	lsr	ip, ip, #16
    a998:	e20cc004 	and	ip, ip, #4
    a99c:	e182200c 	orr	r2, r2, ip
    a9a0:	e1a03c13 	lsl	r3, r3, ip
    a9a4:	e243c901 	sub	ip, r3, #16384	; 0x4000
    a9a8:	e1a0c82c 	lsr	ip, ip, #16
    a9ac:	e20cc002 	and	ip, ip, #2
    a9b0:	e082200c 	add	r2, r2, ip
    a9b4:	e1a03c13 	lsl	r3, r3, ip
    a9b8:	e06227a3 	rsb	r2, r2, r3, lsr #15
    a9bc:	e2823015 	add	r3, r2, #21
    a9c0:	e282200e 	add	r2, r2, #14
    a9c4:	e1a03331 	lsr	r3, r1, r3
    a9c8:	e0033000 	and	r3, r3, r0
    a9cc:	e0833012 	add	r3, r3, r2, lsl r0
    a9d0:	e283604c 	add	r6, r3, #76	; 0x4c
    a9d4:	e1a00310 	lsl	r0, r0, r3
    a9d8:	e1a05106 	lsl	r5, r6, #2
    a9dc:	e51f20d0 	ldr	r2, [pc, #-208]	; a914 <malloc+0x10b0>
    a9e0:	e3a0c000 	mov	ip, #0
    a9e4:	e58ec014 	str	ip, [lr, #20]
    a9e8:	e08f2002 	add	r2, pc, r2
    a9ec:	e58ec010 	str	ip, [lr, #16]
    a9f0:	e58e301c 	str	r3, [lr, #28]
    a9f4:	e592c004 	ldr	ip, [r2, #4]
    a9f8:	e110000c 	tst	r0, ip
    a9fc:	0a00009e 	beq	ac7c <malloc+0x1418>
    aa00:	e353001f 	cmp	r3, #31
    aa04:	e7920106 	ldr	r0, [r2, r6, lsl #2]
    aa08:	11a020a3 	lsrne	r2, r3, #1
    aa0c:	01a02001 	moveq	r2, r1
    aa10:	12622019 	rsbne	r2, r2, #25
    aa14:	11a02211 	lslne	r2, r1, r2
    aa18:	ea000006 	b	aa38 <malloc+0x11d4>
    aa1c:	e1a03fa2 	lsr	r3, r2, #31
    aa20:	e1a02082 	lsl	r2, r2, #1
    aa24:	e2833004 	add	r3, r3, #4
    aa28:	e790c103 	ldr	ip, [r0, r3, lsl #2]
    aa2c:	e35c0000 	cmp	ip, #0
    aa30:	0a0000de 	beq	adb0 <malloc+0x154c>
    aa34:	e1a0000c 	mov	r0, ip
    aa38:	e5903004 	ldr	r3, [r0, #4]
    aa3c:	e3c33007 	bic	r3, r3, #7
    aa40:	e1510003 	cmp	r1, r3
    aa44:	1afffff4 	bne	aa1c <malloc+0x11b8>
    aa48:	e51f1138 	ldr	r1, [pc, #-312]	; a918 <malloc+0x10b4>
    aa4c:	e5902008 	ldr	r2, [r0, #8]
    aa50:	e08f1001 	add	r1, pc, r1
    aa54:	e5913010 	ldr	r3, [r1, #16]
    aa58:	e1520003 	cmp	r2, r3
    aa5c:	21500003 	cmpcs	r0, r3
    aa60:	3afffd83 	bcc	a074 <malloc+0x810>
    aa64:	e582e00c 	str	lr, [r2, #12]
    aa68:	e3a0c000 	mov	ip, #0
    aa6c:	e580e008 	str	lr, [r0, #8]
    aa70:	e591300c 	ldr	r3, [r1, #12]
    aa74:	e58ec018 	str	ip, [lr, #24]
    aa78:	e58e2008 	str	r2, [lr, #8]
    aa7c:	e58e000c 	str	r0, [lr, #12]
    aa80:	eafffe3e 	b	a380 <malloc+0xb1c>
            replace_dv(gm, r, rsize);
    aa84:	e5911010 	ldr	r1, [r1, #16]
    aa88:	e5935008 	ldr	r5, [r3, #8]
    aa8c:	e1550001 	cmp	r5, r1
    aa90:	2afffc23 	bcs	9b24 <malloc+0x2c0>
    aa94:	eafffd76 	b	a074 <malloc+0x810>
          sp->size += tsize;
    aa98:	e5930004 	ldr	r0, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    aa9c:	e2851008 	add	r1, r5, #8
    aaa0:	e3110007 	tst	r1, #7
          sp->base = tbase;
    aaa4:	e5835000 	str	r5, [r3]
          sp->size += tsize;
    aaa8:	e0806006 	add	r6, r0, r6
    aaac:	e5836004 	str	r6, [r3, #4]
  mchunkptr p = align_as_chunk(newbase);
    aab0:	12613000 	rsbne	r3, r1, #0
    aab4:	12033007 	andne	r3, r3, #7
    aab8:	10855003 	addne	r5, r5, r3
  mchunkptr oldfirst = align_as_chunk(oldbase);
    aabc:	e2823008 	add	r3, r2, #8
    aac0:	e3130007 	tst	r3, #7
  mchunkptr q = chunk_plus_offset(p, nb);
    aac4:	e085c004 	add	ip, r5, r4
  mchunkptr oldfirst = align_as_chunk(oldbase);
    aac8:	12633000 	rsbne	r3, r3, #0
    aacc:	12033007 	andne	r3, r3, #7
    aad0:	10822003 	addne	r2, r2, r3
  size_t psize = (char*)oldfirst - (char*)p;
    aad4:	e0423005 	sub	r3, r2, r5
  assert((char*)oldfirst > (char*)q);
    aad8:	e15c0002 	cmp	ip, r2
  size_t qsize = psize - nb;
    aadc:	e0433004 	sub	r3, r3, r4
  set_size_and_pinuse_of_inuse_chunk(m, p, nb);
    aae0:	e3844003 	orr	r4, r4, #3
    aae4:	e5854004 	str	r4, [r5, #4]
  assert((char*)oldfirst > (char*)q);
    aae8:	2afffd61 	bcs	a074 <malloc+0x810>
  assert(pinuse(oldfirst));
    aaec:	e5920004 	ldr	r0, [r2, #4]
    aaf0:	e3100001 	tst	r0, #1
    aaf4:	0afffd5e 	beq	a074 <malloc+0x810>
  assert(qsize >= MIN_CHUNK_SIZE);
    aaf8:	e353000f 	cmp	r3, #15
    aafc:	9afffd5c 	bls	a074 <malloc+0x810>
  if (oldfirst == m->top) {
    ab00:	e15e0002 	cmp	lr, r2
    ab04:	0a0000b5 	beq	ade0 <malloc+0x157c>
  else if (oldfirst == m->dv) {
    ab08:	e51f11f4 	ldr	r1, [pc, #-500]	; a91c <malloc+0x10b8>
    ab0c:	e08f1001 	add	r1, pc, r1
    ab10:	e591e014 	ldr	lr, [r1, #20]
    ab14:	e15e0002 	cmp	lr, r2
    ab18:	0a000102 	beq	af28 <malloc+0x16c4>
    if (!is_inuse(oldfirst)) {
    ab1c:	e200e003 	and	lr, r0, #3
    ab20:	e35e0001 	cmp	lr, #1
    ab24:	0a000107 	beq	af48 <malloc+0x16e4>
    insert_chunk(m, q, qsize);
    ab28:	e1a0e1a3 	lsr	lr, r3, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    ab2c:	e3c00001 	bic	r0, r0, #1
    insert_chunk(m, q, qsize);
    ab30:	e35e001f 	cmp	lr, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    ab34:	e5820004 	str	r0, [r2, #4]
    ab38:	e3830001 	orr	r0, r3, #1
    ab3c:	e58c0004 	str	r0, [ip, #4]
    ab40:	e5823000 	str	r3, [r2]
    insert_chunk(m, q, qsize);
    ab44:	8a0000ae 	bhi	ae04 <malloc+0x15a0>
    ab48:	e081318e 	add	r3, r1, lr, lsl #3
    ab4c:	e2833028 	add	r3, r3, #40	; 0x28
    ab50:	e51f1238 	ldr	r1, [pc, #-568]	; a920 <malloc+0x10bc>
    ab54:	e3a02001 	mov	r2, #1
    ab58:	e08f1001 	add	r1, pc, r1
    ab5c:	e1a0ee12 	lsl	lr, r2, lr
    ab60:	e5912000 	ldr	r2, [r1]
    ab64:	e112000e 	tst	r2, lr
    ab68:	1a000129 	bne	b014 <malloc+0x17b0>
    ab6c:	e182e00e 	orr	lr, r2, lr
    ab70:	e1a02003 	mov	r2, r3
    ab74:	e581e000 	str	lr, [r1]
    ab78:	e583c008 	str	ip, [r3, #8]
    ab7c:	e582c00c 	str	ip, [r2, #12]
    ab80:	e1cc20f8 	strd	r2, [ip, #8]
  return chunk2mem(p);
    ab84:	e2850008 	add	r0, r5, #8
    ab88:	eafffb65 	b	9924 <malloc+0xc0>
    ab8c:	e3822003 	orr	r2, r2, #3
    ab90:	eafffb6e 	b	9950 <malloc+0xec>
    ab94:	e51f3278 	ldr	r3, [pc, #-632]	; a924 <malloc+0x10c0>
    ab98:	e08f3003 	add	r3, pc, r3
    ab9c:	e593300c 	ldr	r3, [r3, #12]
    aba0:	eafffdf6 	b	a380 <malloc+0xb1c>
          insert_chunk(m, r, rsize);
    aba4:	e1a03428 	lsr	r3, r8, #8
    aba8:	e3530801 	cmp	r3, #65536	; 0x10000
    abac:	2a00007a 	bcs	ad9c <malloc+0x1538>
    abb0:	e2431c01 	sub	r1, r3, #256	; 0x100
    abb4:	e3a02001 	mov	r2, #1
    abb8:	e1a01821 	lsr	r1, r1, #16
    abbc:	e2011008 	and	r1, r1, #8
    abc0:	e1a03113 	lsl	r3, r3, r1
    abc4:	e243ca01 	sub	ip, r3, #4096	; 0x1000
    abc8:	e1a0c82c 	lsr	ip, ip, #16
    abcc:	e20cc004 	and	ip, ip, #4
    abd0:	e181100c 	orr	r1, r1, ip
    abd4:	e1a03c13 	lsl	r3, r3, ip
    abd8:	e243c901 	sub	ip, r3, #16384	; 0x4000
    abdc:	e1a0c82c 	lsr	ip, ip, #16
    abe0:	e20cc002 	and	ip, ip, #2
    abe4:	e081100c 	add	r1, r1, ip
    abe8:	e1a03c13 	lsl	r3, r3, ip
    abec:	e06117a3 	rsb	r1, r1, r3, lsr #15
    abf0:	e2813015 	add	r3, r1, #21
    abf4:	e281100e 	add	r1, r1, #14
    abf8:	e1a03338 	lsr	r3, r8, r3
    abfc:	e0033002 	and	r3, r3, r2
    ac00:	e0833211 	add	r3, r3, r1, lsl r2
    ac04:	e283e04c 	add	lr, r3, #76	; 0x4c
    ac08:	e1a0c312 	lsl	ip, r2, r3
    ac0c:	e1a0510e 	lsl	r5, lr, #2
    ac10:	e51f22f0 	ldr	r2, [pc, #-752]	; a928 <malloc+0x10c4>
    ac14:	e3a01000 	mov	r1, #0
    ac18:	e5871014 	str	r1, [r7, #20]
    ac1c:	e08f2002 	add	r2, pc, r2
    ac20:	e5871010 	str	r1, [r7, #16]
    ac24:	e587301c 	str	r3, [r7, #28]
    ac28:	e5921004 	ldr	r1, [r2, #4]
    ac2c:	e111000c 	tst	r1, ip
    ac30:	1a00003c 	bne	ad28 <malloc+0x14c4>
    ac34:	e782710e 	str	r7, [r2, lr, lsl #2]
    ac38:	e181100c 	orr	r1, r1, ip
    ac3c:	e587700c 	str	r7, [r7, #12]
    ac40:	e5821004 	str	r1, [r2, #4]
    ac44:	e0822005 	add	r2, r2, r5
    ac48:	e5877008 	str	r7, [r7, #8]
    ac4c:	e5872018 	str	r2, [r7, #24]
    ac50:	eafffcbb 	b	9f44 <malloc+0x6e0>
    insert_chunk(m, q, psize);
    ac54:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
    ac58:	e3a05f6b 	mov	r5, #428	; 0x1ac
    ac5c:	e3a0301f 	mov	r3, #31
    ac60:	e3a0606b 	mov	r6, #107	; 0x6b
    ac64:	eaffff5c 	b	a9dc <malloc+0x1178>
    ac68:	e5903010 	ldr	r3, [r0, #16]
    ac6c:	e5921008 	ldr	r1, [r2, #8]
    ac70:	e1510003 	cmp	r1, r3
    ac74:	2afffe23 	bcs	a508 <malloc+0xca4>
    ac78:	eafffcfd 	b	a074 <malloc+0x810>
    ac7c:	e782e106 	str	lr, [r2, r6, lsl #2]
    ac80:	e180000c 	orr	r0, r0, ip
    ac84:	e0825005 	add	r5, r2, r5
    ac88:	e5820004 	str	r0, [r2, #4]
    ac8c:	e58ee00c 	str	lr, [lr, #12]
    ac90:	e58e5018 	str	r5, [lr, #24]
    ac94:	e58ee008 	str	lr, [lr, #8]
    ac98:	e592300c 	ldr	r3, [r2, #12]
    ac9c:	eafffdb7 	b	a380 <malloc+0xb1c>
        unlink_large_chunk(m, v);
    aca0:	e590e010 	ldr	lr, [r0, #16]
    aca4:	e35e0000 	cmp	lr, #0
    aca8:	0a0000e6 	beq	b048 <malloc+0x17e4>
    acac:	e2803010 	add	r3, r0, #16
    acb0:	eafffed4 	b	a808 <malloc+0xfa4>
        set_inuse_and_pinuse(m, v, (rsize + nb));
    acb4:	e0802007 	add	r2, r0, r7
    acb8:	e3877003 	orr	r7, r7, #3
    acbc:	e5807004 	str	r7, [r0, #4]
    acc0:	e5923004 	ldr	r3, [r2, #4]
    acc4:	e3833001 	orr	r3, r3, #1
    acc8:	e5823004 	str	r3, [r2, #4]
    accc:	eafffd74 	b	a2a4 <malloc+0xa40>
      unlink_large_chunk(m, v);
    acd0:	e5901014 	ldr	r1, [r0, #20]
    acd4:	e3510000 	cmp	r1, #0
    acd8:	12803014 	addne	r3, r0, #20
    acdc:	0a0000ed 	beq	b098 <malloc+0x1834>
    ace0:	e1a05003 	mov	r5, r3
    ace4:	e1a03001 	mov	r3, r1
    ace8:	e1a06001 	mov	r6, r1
    acec:	e5b31014 	ldr	r1, [r3, #20]!
    acf0:	e3510000 	cmp	r1, #0
    acf4:	1afffff9 	bne	ace0 <malloc+0x147c>
    acf8:	e1a03006 	mov	r3, r6
    acfc:	e5b31010 	ldr	r1, [r3, #16]!
    ad00:	e3510000 	cmp	r1, #0
    ad04:	1afffff5 	bne	ace0 <malloc+0x147c>
    ad08:	e1590005 	cmp	r9, r5
    ad0c:	8afffcd8 	bhi	a074 <malloc+0x810>
    ad10:	e5851000 	str	r1, [r5]
    ad14:	eafffd20 	b	a19c <malloc+0x938>
          insert_chunk(m, r, rsize);
    ad18:	e5932008 	ldr	r2, [r3, #8]
    ad1c:	e1560002 	cmp	r6, r2
    ad20:	9afffeb0 	bls	a7e8 <malloc+0xf84>
    ad24:	eafffcd2 	b	a074 <malloc+0x810>
    ad28:	e353001f 	cmp	r3, #31
    ad2c:	e792110e 	ldr	r1, [r2, lr, lsl #2]
    ad30:	11a020a3 	lsrne	r2, r3, #1
    ad34:	01a02008 	moveq	r2, r8
    ad38:	12622019 	rsbne	r2, r2, #25
    ad3c:	11a02218 	lslne	r2, r8, r2
    ad40:	ea000006 	b	ad60 <malloc+0x14fc>
    ad44:	e1a03fa2 	lsr	r3, r2, #31
    ad48:	e1a02082 	lsl	r2, r2, #1
    ad4c:	e2833004 	add	r3, r3, #4
    ad50:	e791c103 	ldr	ip, [r1, r3, lsl #2]
    ad54:	e35c0000 	cmp	ip, #0
    ad58:	0a0000a0 	beq	afe0 <malloc+0x177c>
    ad5c:	e1a0100c 	mov	r1, ip
    ad60:	e5913004 	ldr	r3, [r1, #4]
    ad64:	e3c33007 	bic	r3, r3, #7
    ad68:	e1530008 	cmp	r3, r8
    ad6c:	1afffff4 	bne	ad44 <malloc+0x14e0>
    ad70:	e5913008 	ldr	r3, [r1, #8]
    ad74:	e1560001 	cmp	r6, r1
    ad78:	91560003 	cmpls	r6, r3
    ad7c:	8afffcbc 	bhi	a074 <malloc+0x810>
    ad80:	e583700c 	str	r7, [r3, #12]
    ad84:	e3a02000 	mov	r2, #0
    ad88:	e5817008 	str	r7, [r1, #8]
    ad8c:	e5873008 	str	r3, [r7, #8]
    ad90:	e587100c 	str	r1, [r7, #12]
    ad94:	e5872018 	str	r2, [r7, #24]
    ad98:	eafffc69 	b	9f44 <malloc+0x6e0>
    ad9c:	e3a05f6b 	mov	r5, #428	; 0x1ac
    ada0:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    ada4:	e3a0301f 	mov	r3, #31
    ada8:	e3a0e06b 	mov	lr, #107	; 0x6b
    adac:	eaffff97 	b	ac10 <malloc+0x13ac>
    insert_chunk(m, q, psize);
    adb0:	e51f148c 	ldr	r1, [pc, #-1164]	; a92c <malloc+0x10c8>
    adb4:	e0802103 	add	r2, r0, r3, lsl #2
    adb8:	e08f1001 	add	r1, pc, r1
    adbc:	e591c010 	ldr	ip, [r1, #16]
    adc0:	e15c0002 	cmp	ip, r2
    adc4:	8afffcaa 	bhi	a074 <malloc+0x810>
    adc8:	e780e103 	str	lr, [r0, r3, lsl #2]
    adcc:	e591300c 	ldr	r3, [r1, #12]
    add0:	e58e0018 	str	r0, [lr, #24]
    add4:	e58ee00c 	str	lr, [lr, #12]
    add8:	e58ee008 	str	lr, [lr, #8]
    addc:	eafffd67 	b	a380 <malloc+0xb1c>
    size_t tsize = m->topsize += qsize;
    ade0:	e51f14b8 	ldr	r1, [pc, #-1208]	; a930 <malloc+0x10cc>
    ade4:	e08f1001 	add	r1, pc, r1
    ade8:	e591200c 	ldr	r2, [r1, #12]
    m->top = q;
    adec:	e581c018 	str	ip, [r1, #24]
    size_t tsize = m->topsize += qsize;
    adf0:	e0833002 	add	r3, r3, r2
    adf4:	e581300c 	str	r3, [r1, #12]
    q->head = tsize | PINUSE_BIT;
    adf8:	e3833001 	orr	r3, r3, #1
    adfc:	e58c3004 	str	r3, [ip, #4]
    ae00:	eaffff5f 	b	ab84 <malloc+0x1320>
    insert_chunk(m, q, qsize);
    ae04:	e1a01423 	lsr	r1, r3, #8
    ae08:	e3510801 	cmp	r1, #65536	; 0x10000
    ae0c:	2a00007b 	bcs	b000 <malloc+0x179c>
    ae10:	e2412c01 	sub	r2, r1, #256	; 0x100
    ae14:	e3a00001 	mov	r0, #1
    ae18:	e1a02822 	lsr	r2, r2, #16
    ae1c:	e2022008 	and	r2, r2, #8
    ae20:	e1a01211 	lsl	r1, r1, r2
    ae24:	e241ea01 	sub	lr, r1, #4096	; 0x1000
    ae28:	e1a0e82e 	lsr	lr, lr, #16
    ae2c:	e20ee004 	and	lr, lr, #4
    ae30:	e182200e 	orr	r2, r2, lr
    ae34:	e1a01e11 	lsl	r1, r1, lr
    ae38:	e241e901 	sub	lr, r1, #16384	; 0x4000
    ae3c:	e1a0e82e 	lsr	lr, lr, #16
    ae40:	e20ee002 	and	lr, lr, #2
    ae44:	e082200e 	add	r2, r2, lr
    ae48:	e1a01e11 	lsl	r1, r1, lr
    ae4c:	e06227a1 	rsb	r2, r2, r1, lsr #15
    ae50:	e2821015 	add	r1, r2, #21
    ae54:	e282200e 	add	r2, r2, #14
    ae58:	e1a01133 	lsr	r1, r3, r1
    ae5c:	e0011000 	and	r1, r1, r0
    ae60:	e0811012 	add	r1, r1, r2, lsl r0
    ae64:	e281604c 	add	r6, r1, #76	; 0x4c
    ae68:	e1a00110 	lsl	r0, r0, r1
    ae6c:	e1a07106 	lsl	r7, r6, #2
    ae70:	e51fe544 	ldr	lr, [pc, #-1348]	; a934 <malloc+0x10d0>
    ae74:	e3a02000 	mov	r2, #0
    ae78:	e58c101c 	str	r1, [ip, #28]
    ae7c:	e08fe00e 	add	lr, pc, lr
    ae80:	e58c2014 	str	r2, [ip, #20]
    ae84:	e58c2010 	str	r2, [ip, #16]
    ae88:	e59e4004 	ldr	r4, [lr, #4]
    ae8c:	e1100004 	tst	r0, r4
    ae90:	0a000064 	beq	b028 <malloc+0x17c4>
    ae94:	e351001f 	cmp	r1, #31
    ae98:	e79ee106 	ldr	lr, [lr, r6, lsl #2]
    ae9c:	11a020a1 	lsrne	r2, r1, #1
    aea0:	12622019 	rsbne	r2, r2, #25
    aea4:	e1a01213 	lsl	r1, r3, r2
    aea8:	ea000006 	b	aec8 <malloc+0x1664>
    aeac:	e1a02fa1 	lsr	r2, r1, #31
    aeb0:	e1a01081 	lsl	r1, r1, #1
    aeb4:	e2822004 	add	r2, r2, #4
    aeb8:	e79e0102 	ldr	r0, [lr, r2, lsl #2]
    aebc:	e3500000 	cmp	r0, #0
    aec0:	0a0000b2 	beq	b190 <malloc+0x192c>
    aec4:	e1a0e000 	mov	lr, r0
    aec8:	e59e2004 	ldr	r2, [lr, #4]
    aecc:	e3c22007 	bic	r2, r2, #7
    aed0:	e1530002 	cmp	r3, r2
    aed4:	1afffff4 	bne	aeac <malloc+0x1648>
    aed8:	e51f25a8 	ldr	r2, [pc, #-1448]	; a938 <malloc+0x10d4>
    aedc:	e59e3008 	ldr	r3, [lr, #8]
    aee0:	e08f2002 	add	r2, pc, r2
    aee4:	e5922010 	ldr	r2, [r2, #16]
    aee8:	e1530002 	cmp	r3, r2
    aeec:	215e0002 	cmpcs	lr, r2
    aef0:	3afffc5f 	bcc	a074 <malloc+0x810>
    aef4:	e583c00c 	str	ip, [r3, #12]
    aef8:	e3a02000 	mov	r2, #0
    aefc:	e58ec008 	str	ip, [lr, #8]
    af00:	e58c3008 	str	r3, [ip, #8]
    af04:	e58ce00c 	str	lr, [ip, #12]
    af08:	e58c2018 	str	r2, [ip, #24]
    af0c:	eaffff1c 	b	ab84 <malloc+0x1320>
             (fp > m->footprint && fp <= m->footprint_limit)) &&
    af10:	e1a00006 	mov	r0, r6
    af14:	ebfff994 	bl	956c <sbrk>
    af18:	e1a05000 	mov	r5, r0
    af1c:	e1570000 	cmp	r7, r0
    af20:	1afffdb7 	bne	a604 <malloc+0xda0>
    af24:	eafffb51 	b	9c70 <malloc+0x40c>
    size_t dsize = m->dvsize += qsize;
    af28:	e5912008 	ldr	r2, [r1, #8]
    m->dv = q;
    af2c:	e581c014 	str	ip, [r1, #20]
    size_t dsize = m->dvsize += qsize;
    af30:	e0833002 	add	r3, r3, r2
    af34:	e5813008 	str	r3, [r1, #8]
    set_size_and_pinuse_of_free_chunk(q, dsize);
    af38:	e3832001 	orr	r2, r3, #1
    af3c:	e58c2004 	str	r2, [ip, #4]
    af40:	e78c3003 	str	r3, [ip, r3]
    af44:	eaffff0e 	b	ab84 <malloc+0x1320>
      size_t nsize = chunksize(oldfirst);
    af48:	e3c00007 	bic	r0, r0, #7
    af4c:	e592e00c 	ldr	lr, [r2, #12]
      unlink_chunk(m, oldfirst, nsize);
    af50:	e1a061a0 	lsr	r6, r0, #3
    af54:	e356001f 	cmp	r6, #31
    af58:	8a000053 	bhi	b0ac <malloc+0x1848>
    af5c:	e15e0002 	cmp	lr, r2
    af60:	e5924008 	ldr	r4, [r2, #8]
    af64:	0afffc42 	beq	a074 <malloc+0x810>
    af68:	e1540002 	cmp	r4, r2
    af6c:	0afffc40 	beq	a074 <malloc+0x810>
    af70:	e0811186 	add	r1, r1, r6, lsl #3
    af74:	e2811028 	add	r1, r1, #40	; 0x28
    af78:	e1540001 	cmp	r4, r1
    af7c:	1afffc34 	bne	a054 <malloc+0x7f0>
    af80:	e154000e 	cmp	r4, lr
    af84:	0a0000b2 	beq	b254 <malloc+0x19f0>
    af88:	e151000e 	cmp	r1, lr
    af8c:	1a0000b7 	bne	b270 <malloc+0x1a0c>
    af90:	e584e00c 	str	lr, [r4, #12]
    af94:	e58e4008 	str	r4, [lr, #8]
      oldfirst = chunk_plus_offset(oldfirst, nsize);
    af98:	e0822000 	add	r2, r2, r0
      qsize += nsize;
    af9c:	e0833000 	add	r3, r3, r0
    set_free_with_pinuse(q, qsize, oldfirst);
    afa0:	e3830001 	orr	r0, r3, #1
    insert_chunk(m, q, qsize);
    afa4:	e1a0e1a3 	lsr	lr, r3, #3
    set_free_with_pinuse(q, qsize, oldfirst);
    afa8:	e5921004 	ldr	r1, [r2, #4]
    insert_chunk(m, q, qsize);
    afac:	e35e001f 	cmp	lr, #31
    set_free_with_pinuse(q, qsize, oldfirst);
    afb0:	e3c11001 	bic	r1, r1, #1
    afb4:	e5821004 	str	r1, [r2, #4]
    afb8:	e58c0004 	str	r0, [ip, #4]
    afbc:	e78c3003 	str	r3, [ip, r3]
    insert_chunk(m, q, qsize);
    afc0:	8affff8f 	bhi	ae04 <malloc+0x15a0>
    afc4:	e51f2690 	ldr	r2, [pc, #-1680]	; a93c <malloc+0x10d8>
    afc8:	e353000f 	cmp	r3, #15
    afcc:	e08f2002 	add	r2, pc, r2
    afd0:	e082318e 	add	r3, r2, lr, lsl #3
    afd4:	e2833028 	add	r3, r3, #40	; 0x28
    afd8:	8afffedc 	bhi	ab50 <malloc+0x12ec>
    afdc:	eafffc24 	b	a074 <malloc+0x810>
          insert_chunk(m, r, rsize);
    afe0:	e0812103 	add	r2, r1, r3, lsl #2
    afe4:	e1560002 	cmp	r6, r2
    afe8:	8afffc21 	bhi	a074 <malloc+0x810>
    afec:	e7817103 	str	r7, [r1, r3, lsl #2]
    aff0:	e5871018 	str	r1, [r7, #24]
    aff4:	e587700c 	str	r7, [r7, #12]
    aff8:	e5877008 	str	r7, [r7, #8]
    affc:	eafffbd0 	b	9f44 <malloc+0x6e0>
    insert_chunk(m, q, qsize);
    b000:	e3a07f6b 	mov	r7, #428	; 0x1ac
    b004:	e3a00102 	mov	r0, #-2147483648	; 0x80000000
    b008:	e3a0101f 	mov	r1, #31
    b00c:	e3a0606b 	mov	r6, #107	; 0x6b
    b010:	eaffff96 	b	ae70 <malloc+0x160c>
    b014:	e5911010 	ldr	r1, [r1, #16]
    b018:	e5932008 	ldr	r2, [r3, #8]
    b01c:	e1520001 	cmp	r2, r1
    b020:	2afffed4 	bcs	ab78 <malloc+0x1314>
    b024:	eafffc12 	b	a074 <malloc+0x810>
    b028:	e78ec106 	str	ip, [lr, r6, lsl #2]
    b02c:	e1800004 	orr	r0, r0, r4
    b030:	e58cc00c 	str	ip, [ip, #12]
    b034:	e58e0004 	str	r0, [lr, #4]
    b038:	e08ee007 	add	lr, lr, r7
    b03c:	e58cc008 	str	ip, [ip, #8]
    b040:	e58ce018 	str	lr, [ip, #24]
    b044:	eafffece 	b	ab84 <malloc+0x1320>
        unlink_large_chunk(m, v);
    b048:	e3590000 	cmp	r9, #0
    b04c:	0afffbb4 	beq	9f24 <malloc+0x6c0>
    b050:	e590e01c 	ldr	lr, [r0, #28]
    b054:	e28e204c 	add	r2, lr, #76	; 0x4c
    b058:	e79c3102 	ldr	r3, [ip, r2, lsl #2]
    b05c:	e1530000 	cmp	r3, r0
    b060:	13a02000 	movne	r2, #0
    b064:	1afffb95 	bne	9ec0 <malloc+0x65c>
    b068:	e51f3730 	ldr	r3, [pc, #-1840]	; a940 <malloc+0x10dc>
    b06c:	e3a0c001 	mov	ip, #1
    b070:	e08f3003 	add	r3, pc, r3
    b074:	e1c11e1c 	bic	r1, r1, ip, lsl lr
    b078:	e3a0c000 	mov	ip, #0
    b07c:	e5831004 	str	r1, [r3, #4]
    b080:	e783c102 	str	ip, [r3, r2, lsl #2]
    b084:	eafffba6 	b	9f24 <malloc+0x6c0>
        replace_dv(m, r, rsize);
    b088:	e5932008 	ldr	r2, [r3, #8]
    b08c:	e1590002 	cmp	r9, r2
    b090:	9afffc7c 	bls	a288 <malloc+0xa24>
    b094:	eafffbf6 	b	a074 <malloc+0x810>
      unlink_large_chunk(m, v);
    b098:	e5901010 	ldr	r1, [r0, #16]
    b09c:	e3510000 	cmp	r1, #0
    b0a0:	0a000045 	beq	b1bc <malloc+0x1958>
    b0a4:	e2803010 	add	r3, r0, #16
    b0a8:	eaffff0c 	b	ace0 <malloc+0x147c>
      unlink_chunk(m, oldfirst, nsize);
    b0ac:	e15e0002 	cmp	lr, r2
    b0b0:	e5927018 	ldr	r7, [r2, #24]
    b0b4:	0a000050 	beq	b1fc <malloc+0x1998>
    b0b8:	e5914010 	ldr	r4, [r1, #16]
    b0bc:	e5921008 	ldr	r1, [r2, #8]
    b0c0:	e1510004 	cmp	r1, r4
    b0c4:	3afffbea 	bcc	a074 <malloc+0x810>
    b0c8:	e591400c 	ldr	r4, [r1, #12]
    b0cc:	e1540002 	cmp	r4, r2
    b0d0:	1afffbe7 	bne	a074 <malloc+0x810>
    b0d4:	e59e6008 	ldr	r6, [lr, #8]
    b0d8:	e1540006 	cmp	r4, r6
    b0dc:	1afffbe4 	bne	a074 <malloc+0x810>
    b0e0:	e581e00c 	str	lr, [r1, #12]
    b0e4:	e58e1008 	str	r1, [lr, #8]
    b0e8:	e3570000 	cmp	r7, #0
    b0ec:	0affffa9 	beq	af98 <malloc+0x1734>
    b0f0:	e592101c 	ldr	r1, [r2, #28]
    b0f4:	e51f47b8 	ldr	r4, [pc, #-1976]	; a944 <malloc+0x10e0>
    b0f8:	e281104c 	add	r1, r1, #76	; 0x4c
    b0fc:	e08f4004 	add	r4, pc, r4
    b100:	e7946101 	ldr	r6, [r4, r1, lsl #2]
    b104:	e1560002 	cmp	r6, r2
    b108:	0784e101 	streq	lr, [r4, r1, lsl #2]
    b10c:	0a00000a 	beq	b13c <malloc+0x18d8>
    b110:	e51f17d0 	ldr	r1, [pc, #-2000]	; a948 <malloc+0x10e4>
    b114:	e08f1001 	add	r1, pc, r1
    b118:	e5911010 	ldr	r1, [r1, #16]
    b11c:	e1570001 	cmp	r7, r1
    b120:	3afffbd3 	bcc	a074 <malloc+0x810>
    b124:	e5971010 	ldr	r1, [r7, #16]
    b128:	e1510002 	cmp	r1, r2
    b12c:	0587e010 	streq	lr, [r7, #16]
    b130:	1587e014 	strne	lr, [r7, #20]
    b134:	e35e0000 	cmp	lr, #0
    b138:	0affff96 	beq	af98 <malloc+0x1734>
    b13c:	e51f17f8 	ldr	r1, [pc, #-2040]	; a94c <malloc+0x10e8>
    b140:	e08f1001 	add	r1, pc, r1
    b144:	e5914010 	ldr	r4, [r1, #16]
    b148:	e15e0004 	cmp	lr, r4
    b14c:	3afffbc8 	bcc	a074 <malloc+0x810>
    b150:	e5921010 	ldr	r1, [r2, #16]
    b154:	e58e7018 	str	r7, [lr, #24]
    b158:	e3510000 	cmp	r1, #0
    b15c:	0a000003 	beq	b170 <malloc+0x190c>
    b160:	e1540001 	cmp	r4, r1
    b164:	8afffbc2 	bhi	a074 <malloc+0x810>
    b168:	e58e1010 	str	r1, [lr, #16]
    b16c:	e581e018 	str	lr, [r1, #24]
    b170:	e5921014 	ldr	r1, [r2, #20]
    b174:	e3510000 	cmp	r1, #0
    b178:	0affff86 	beq	af98 <malloc+0x1734>
    b17c:	e1540001 	cmp	r4, r1
    b180:	8afffbbb 	bhi	a074 <malloc+0x810>
    b184:	e58e1014 	str	r1, [lr, #20]
    b188:	e581e018 	str	lr, [r1, #24]
    b18c:	eaffff81 	b	af98 <malloc+0x1734>
    insert_chunk(m, q, qsize);
    b190:	e51f1848 	ldr	r1, [pc, #-2120]	; a950 <malloc+0x10ec>
    b194:	e08e3102 	add	r3, lr, r2, lsl #2
    b198:	e08f1001 	add	r1, pc, r1
    b19c:	e5911010 	ldr	r1, [r1, #16]
    b1a0:	e1510003 	cmp	r1, r3
    b1a4:	8afffbb2 	bhi	a074 <malloc+0x810>
    b1a8:	e78ec102 	str	ip, [lr, r2, lsl #2]
    b1ac:	e58ce018 	str	lr, [ip, #24]
    b1b0:	e58cc00c 	str	ip, [ip, #12]
    b1b4:	e58cc008 	str	ip, [ip, #8]
    b1b8:	eafffe71 	b	ab84 <malloc+0x1320>
      unlink_large_chunk(m, v);
    b1bc:	e35a0000 	cmp	sl, #0
    b1c0:	0afffc18 	beq	a228 <malloc+0x9c4>
    b1c4:	e590601c 	ldr	r6, [r0, #28]
    b1c8:	e286104c 	add	r1, r6, #76	; 0x4c
    b1cc:	e79b3101 	ldr	r3, [fp, r1, lsl #2]
    b1d0:	e1500003 	cmp	r0, r3
    b1d4:	13a06000 	movne	r6, #0
    b1d8:	1afffbf9 	bne	a1c4 <malloc+0x960>
    b1dc:	e51f3890 	ldr	r3, [pc, #-2192]	; a954 <malloc+0x10f0>
    b1e0:	e3a0a001 	mov	sl, #1
    b1e4:	e08f3003 	add	r3, pc, r3
    b1e8:	e1c5561a 	bic	r5, r5, sl, lsl r6
    b1ec:	e3a06000 	mov	r6, #0
    b1f0:	e5835004 	str	r5, [r3, #4]
    b1f4:	e7836101 	str	r6, [r3, r1, lsl #2]
    b1f8:	eafffc0a 	b	a228 <malloc+0x9c4>
      unlink_chunk(m, oldfirst, nsize);
    b1fc:	e592e014 	ldr	lr, [r2, #20]
    b200:	e2821014 	add	r1, r2, #20
    b204:	e35e0000 	cmp	lr, #0
    b208:	0a000021 	beq	b294 <malloc+0x1a30>
  size_t offset = align_offset(chunk2mem(p));
    b20c:	e1a0400e 	mov	r4, lr
      unlink_chunk(m, oldfirst, nsize);
    b210:	e1a06001 	mov	r6, r1
    b214:	e1a01004 	mov	r1, r4
    b218:	e1a0e004 	mov	lr, r4
    b21c:	e5b14014 	ldr	r4, [r1, #20]!
    b220:	e3540000 	cmp	r4, #0
    b224:	1afffff9 	bne	b210 <malloc+0x19ac>
    b228:	e1a0100e 	mov	r1, lr
    b22c:	e5b14010 	ldr	r4, [r1, #16]!
    b230:	e3540000 	cmp	r4, #0
    b234:	1afffff5 	bne	b210 <malloc+0x19ac>
    b238:	e51f18e8 	ldr	r1, [pc, #-2280]	; a958 <malloc+0x10f4>
    b23c:	e08f1001 	add	r1, pc, r1
    b240:	e5911010 	ldr	r1, [r1, #16]
    b244:	e1510006 	cmp	r1, r6
    b248:	8afffb89 	bhi	a074 <malloc+0x810>
    b24c:	e5864000 	str	r4, [r6]
    b250:	eaffffa4 	b	b0e8 <malloc+0x1884>
    b254:	e51fe900 	ldr	lr, [pc, #-2304]	; a95c <malloc+0x10f8>
    b258:	e3a04001 	mov	r4, #1
    b25c:	e08fe00e 	add	lr, pc, lr
    b260:	e59e1000 	ldr	r1, [lr]
    b264:	e1c16614 	bic	r6, r1, r4, lsl r6
    b268:	e58e6000 	str	r6, [lr]
    b26c:	eaffff49 	b	af98 <malloc+0x1734>
    b270:	e51f1918 	ldr	r1, [pc, #-2328]	; a960 <malloc+0x10fc>
    b274:	e08f1001 	add	r1, pc, r1
    b278:	e5911010 	ldr	r1, [r1, #16]
    b27c:	e151000e 	cmp	r1, lr
    b280:	8afffb7b 	bhi	a074 <malloc+0x810>
    b284:	e59e1008 	ldr	r1, [lr, #8]
    b288:	e1510002 	cmp	r1, r2
    b28c:	0affff3f 	beq	af90 <malloc+0x172c>
    b290:	eafffb77 	b	a074 <malloc+0x810>
    b294:	e592e010 	ldr	lr, [r2, #16]
    b298:	e2821010 	add	r1, r2, #16
    b29c:	e35e0000 	cmp	lr, #0
    b2a0:	1affffd9 	bne	b20c <malloc+0x19a8>
    b2a4:	e3570000 	cmp	r7, #0
    b2a8:	0affff3a 	beq	af98 <malloc+0x1734>
    b2ac:	e592401c 	ldr	r4, [r2, #28]
    b2b0:	e51f1954 	ldr	r1, [pc, #-2388]	; a964 <malloc+0x1100>
    b2b4:	e284604c 	add	r6, r4, #76	; 0x4c
    b2b8:	e08f1001 	add	r1, pc, r1
    b2bc:	e7918106 	ldr	r8, [r1, r6, lsl #2]
    b2c0:	e1580002 	cmp	r8, r2
    b2c4:	1affff91 	bne	b110 <malloc+0x18ac>
    b2c8:	e591e004 	ldr	lr, [r1, #4]
    b2cc:	e3a07001 	mov	r7, #1
    b2d0:	e3a08000 	mov	r8, #0
    b2d4:	e7818106 	str	r8, [r1, r6, lsl #2]
    b2d8:	e1cee417 	bic	lr, lr, r7, lsl r4
    b2dc:	e581e004 	str	lr, [r1, #4]
    b2e0:	eaffff2c 	b	af98 <malloc+0x1734>
  ensure_initialization();
    b2e4:	e51f3984 	ldr	r3, [pc, #-2436]	; a968 <malloc+0x1104>
    b2e8:	e08f3003 	add	r3, pc, r3
    b2ec:	e5933000 	ldr	r3, [r3]
    b2f0:	e3530000 	cmp	r3, #0
    b2f4:	1afffa2b 	bne	9ba8 <malloc+0x344>
    b2f8:	eafffa29 	b	9ba4 <malloc+0x340>
    b2fc:	e51f3998 	ldr	r3, [pc, #-2456]	; a96c <malloc+0x1108>
    b300:	e08f3003 	add	r3, pc, r3
    b304:	e593e1bc 	ldr	lr, [r3, #444]	; 0x1bc
    b308:	eafffb49 	b	a034 <malloc+0x7d0>

0000b30c <free>:
     Consolidate freed chunks with preceeding or succeeding bordering
     free chunks, if they exist, and then place in a bin.  Intermixed
     with special cases for top, dv, mmapped chunks, and usage errors.
  */

  if (mem != 0) {
    b30c:	e3500000 	cmp	r0, #0
    b310:	012fff1e 	bxeq	lr
void dlfree(void* mem) {
    b314:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    mchunkptr p  = mem2chunk(mem);
    b318:	e2403008 	sub	r3, r0, #8
#else /* FOOTERS */
#define fm gm
#endif /* FOOTERS */
    if (!PREACTION(fm)) {
      check_inuse_chunk(fm, p);
      if (RTCHECK(ok_address(fm, p) && ok_inuse(p))) {
    b31c:	e59f47bc 	ldr	r4, [pc, #1980]	; bae0 <free+0x7d4>
    b320:	e08f4004 	add	r4, pc, r4
    b324:	e594e010 	ldr	lr, [r4, #16]
    b328:	e15e0003 	cmp	lr, r3
    b32c:	8a00004e 	bhi	b46c <free+0x160>
    b330:	e5101004 	ldr	r1, [r0, #-4]
    b334:	e2015003 	and	r5, r1, #3
    b338:	e3550001 	cmp	r5, #1
    b33c:	0a00004a 	beq	b46c <free+0x160>
        size_t psize = chunksize(p);
    b340:	e3c12007 	bic	r2, r1, #7
        mchunkptr next = chunk_plus_offset(p, psize);
        if (!pinuse(p)) {
    b344:	e3110001 	tst	r1, #1
        mchunkptr next = chunk_plus_offset(p, psize);
    b348:	e083c002 	add	ip, r3, r2
        if (!pinuse(p)) {
    b34c:	0a000021 	beq	b3d8 <free+0xcc>
            else
              goto erroraction;
          }
        }

        if (RTCHECK(ok_next(p, next) && ok_pinuse(next))) {
    b350:	e153000c 	cmp	r3, ip
    b354:	2a000044 	bcs	b46c <free+0x160>
    b358:	e59c1004 	ldr	r1, [ip, #4]
    b35c:	e3110001 	tst	r1, #1
    b360:	0a000041 	beq	b46c <free+0x160>
          if (!cinuse(next)) {  /* consolidate forward */
    b364:	e2110002 	ands	r0, r1, #2
    b368:	0a000041 	beq	b474 <free+0x168>
                goto postaction;
              }
            }
          }
          else
            set_free_with_pinuse(p, psize, next);
    b36c:	e3c11001 	bic	r1, r1, #1
    b370:	e3820001 	orr	r0, r2, #1
    b374:	e58c1004 	str	r1, [ip, #4]
    b378:	e5830004 	str	r0, [r3, #4]
    b37c:	e7832002 	str	r2, [r3, r2]

          if (is_small(psize)) {
    b380:	e1a011a2 	lsr	r1, r2, #3
    b384:	e351001f 	cmp	r1, #31
    b388:	8a00008a 	bhi	b5b8 <free+0x2ac>
            insert_small_chunk(fm, p, psize);
    b38c:	e59fc750 	ldr	ip, [pc, #1872]	; bae4 <free+0x7d8>
    b390:	e352000f 	cmp	r2, #15
    b394:	e08fc00c 	add	ip, pc, ip
    b398:	e08c2181 	add	r2, ip, r1, lsl #3
    b39c:	e2822028 	add	r2, r2, #40	; 0x28
    b3a0:	9a000082 	bls	b5b0 <free+0x2a4>
    b3a4:	e3a00001 	mov	r0, #1
    b3a8:	e59ce000 	ldr	lr, [ip]
    b3ac:	e1a01110 	lsl	r1, r0, r1
    b3b0:	e11e0001 	tst	lr, r1
    b3b4:	1a000079 	bne	b5a0 <free+0x294>
    b3b8:	e1a00002 	mov	r0, r2
    b3bc:	e18e1001 	orr	r1, lr, r1
    b3c0:	e58c1000 	str	r1, [ip]
    b3c4:	e5823008 	str	r3, [r2, #8]
    b3c8:	e580300c 	str	r3, [r0, #12]
    b3cc:	e5830008 	str	r0, [r3, #8]
    b3d0:	e583200c 	str	r2, [r3, #12]
    b3d4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
          if (is_mmapped(p)) {
    b3d8:	e3550000 	cmp	r5, #0
    b3dc:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
          size_t prevsize = p->prev_foot;
    b3e0:	e5100008 	ldr	r0, [r0, #-8]
            mchunkptr prev = chunk_minus_offset(p, prevsize);
    b3e4:	e0433000 	sub	r3, r3, r0
            psize += prevsize;
    b3e8:	e0822000 	add	r2, r2, r0
            if (RTCHECK(ok_address(fm, prev))) { /* consolidate backward */
    b3ec:	e15e0003 	cmp	lr, r3
    b3f0:	8a00001d 	bhi	b46c <free+0x160>
              if (p != fm->dv) {
    b3f4:	e5941014 	ldr	r1, [r4, #20]
    b3f8:	e1510003 	cmp	r1, r3
    b3fc:	0a00012f 	beq	b8c0 <free+0x5b4>
                unlink_chunk(fm, p, prevsize);
    b400:	e1a051a0 	lsr	r5, r0, #3
    b404:	e593100c 	ldr	r1, [r3, #12]
    b408:	e355001f 	cmp	r5, #31
    b40c:	8a000087 	bhi	b630 <free+0x324>
    b410:	e1510003 	cmp	r1, r3
    b414:	e5934008 	ldr	r4, [r3, #8]
    b418:	0a000064 	beq	b5b0 <free+0x2a4>
    b41c:	e1530004 	cmp	r3, r4
    b420:	0a000062 	beq	b5b0 <free+0x2a4>
    b424:	e5936004 	ldr	r6, [r3, #4]
    b428:	e3c00007 	bic	r0, r0, #7
    b42c:	e3c66007 	bic	r6, r6, #7
    b430:	e1560000 	cmp	r6, r0
    b434:	1a00005d 	bne	b5b0 <free+0x2a4>
    b438:	e59f06a8 	ldr	r0, [pc, #1704]	; bae8 <free+0x7dc>
    b43c:	e08f0000 	add	r0, pc, r0
    b440:	e0800185 	add	r0, r0, r5, lsl #3
    b444:	e2800028 	add	r0, r0, #40	; 0x28
    b448:	e1500004 	cmp	r0, r4
    b44c:	1a0000e4 	bne	b7e4 <free+0x4d8>
    b450:	e1510004 	cmp	r1, r4
    b454:	0a000137 	beq	b938 <free+0x62c>
    b458:	e1500001 	cmp	r0, r1
    b45c:	1a000171 	bne	ba28 <free+0x71c>
    b460:	e584100c 	str	r1, [r4, #12]
    b464:	e5814008 	str	r4, [r1, #8]
    b468:	eaffffb8 	b	b350 <free+0x44>
          }
          goto postaction;
        }
      }
    erroraction:
      USAGE_ERROR_ACTION(fm, p);
    b46c:	e3e00000 	mvn	r0, #0
    b470:	ebfff2e2 	bl	8000 <exit>
    b474:	e59f4670 	ldr	r4, [pc, #1648]	; baec <free+0x7e0>
    b478:	e08f4004 	add	r4, pc, r4
            if (next == fm->top) {
    b47c:	e5946018 	ldr	r6, [r4, #24]
    b480:	e5945014 	ldr	r5, [r4, #20]
    b484:	e156000c 	cmp	r6, ip
    b488:	0a0000fb 	beq	b87c <free+0x570>
            else if (next == fm->dv) {
    b48c:	e155000c 	cmp	r5, ip
    b490:	0a000115 	beq	b8ec <free+0x5e0>
              size_t nsize = chunksize(next);
    b494:	e3c11007 	bic	r1, r1, #7
    b498:	e59c000c 	ldr	r0, [ip, #12]
              psize += nsize;
    b49c:	e0822001 	add	r2, r2, r1
              unlink_chunk(fm, next, nsize);
    b4a0:	e1a011a1 	lsr	r1, r1, #3
    b4a4:	e351001f 	cmp	r1, #31
    b4a8:	9a000092 	bls	b6f8 <free+0x3ec>
    b4ac:	e150000c 	cmp	r0, ip
    b4b0:	e59c6018 	ldr	r6, [ip, #24]
    b4b4:	0a000126 	beq	b954 <free+0x648>
    b4b8:	e59c1008 	ldr	r1, [ip, #8]
    b4bc:	e15e0001 	cmp	lr, r1
    b4c0:	8a00003a 	bhi	b5b0 <free+0x2a4>
    b4c4:	e591400c 	ldr	r4, [r1, #12]
    b4c8:	e154000c 	cmp	r4, ip
    b4cc:	1a000037 	bne	b5b0 <free+0x2a4>
    b4d0:	e5904008 	ldr	r4, [r0, #8]
    b4d4:	e154000c 	cmp	r4, ip
    b4d8:	1a000034 	bne	b5b0 <free+0x2a4>
    b4dc:	e581000c 	str	r0, [r1, #12]
    b4e0:	e5801008 	str	r1, [r0, #8]
    b4e4:	e3560000 	cmp	r6, #0
    b4e8:	0a000132 	beq	b9b8 <free+0x6ac>
    b4ec:	e59c101c 	ldr	r1, [ip, #28]
    b4f0:	e59f45f8 	ldr	r4, [pc, #1528]	; baf0 <free+0x7e4>
    b4f4:	e281104c 	add	r1, r1, #76	; 0x4c
    b4f8:	e08f4004 	add	r4, pc, r4
    b4fc:	e7945101 	ldr	r5, [r4, r1, lsl #2]
    b500:	e155000c 	cmp	r5, ip
    b504:	07840101 	streq	r0, [r4, r1, lsl #2]
    b508:	0a000007 	beq	b52c <free+0x220>
    b50c:	e15e0006 	cmp	lr, r6
    b510:	8a000026 	bhi	b5b0 <free+0x2a4>
    b514:	e5961010 	ldr	r1, [r6, #16]
    b518:	e151000c 	cmp	r1, ip
    b51c:	05860010 	streq	r0, [r6, #16]
    b520:	15860014 	strne	r0, [r6, #20]
    b524:	e3500000 	cmp	r0, #0
    b528:	0a00012b 	beq	b9dc <free+0x6d0>
    b52c:	e15e0000 	cmp	lr, r0
    b530:	8a00001e 	bhi	b5b0 <free+0x2a4>
    b534:	e59c1010 	ldr	r1, [ip, #16]
    b538:	e5806018 	str	r6, [r0, #24]
    b53c:	e3510000 	cmp	r1, #0
    b540:	0a000003 	beq	b554 <free+0x248>
    b544:	e15e0001 	cmp	lr, r1
    b548:	8a000018 	bhi	b5b0 <free+0x2a4>
    b54c:	e5801010 	str	r1, [r0, #16]
    b550:	e5810018 	str	r0, [r1, #24]
    b554:	e59c1014 	ldr	r1, [ip, #20]
    b558:	e3510000 	cmp	r1, #0
    b55c:	0a00012d 	beq	ba18 <free+0x70c>
    b560:	e15e0001 	cmp	lr, r1
    b564:	8a000011 	bhi	b5b0 <free+0x2a4>
    b568:	e59fc584 	ldr	ip, [pc, #1412]	; baf4 <free+0x7e8>
    b56c:	e5801014 	str	r1, [r0, #20]
    b570:	e08fc00c 	add	ip, pc, ip
    b574:	e5810018 	str	r0, [r1, #24]
    b578:	e59c5014 	ldr	r5, [ip, #20]
              set_size_and_pinuse_of_free_chunk(p, psize);
    b57c:	e3821001 	orr	r1, r2, #1
              if (p == fm->dv) {
    b580:	e1530005 	cmp	r3, r5
              set_size_and_pinuse_of_free_chunk(p, psize);
    b584:	e5831004 	str	r1, [r3, #4]
    b588:	e7832002 	str	r2, [r3, r2]
              if (p == fm->dv) {
    b58c:	1affff7b 	bne	b380 <free+0x74>
                fm->dvsize = psize;
    b590:	e59f3560 	ldr	r3, [pc, #1376]	; baf8 <free+0x7ec>
    b594:	e08f3003 	add	r3, pc, r3
    b598:	e5832008 	str	r2, [r3, #8]
                goto postaction;
    b59c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_small_chunk(fm, p, psize);
    b5a0:	e59c1010 	ldr	r1, [ip, #16]
    b5a4:	e5920008 	ldr	r0, [r2, #8]
    b5a8:	e1500001 	cmp	r0, r1
    b5ac:	2affff84 	bcs	b3c4 <free+0xb8>
                unlink_chunk(fm, p, prevsize);
    b5b0:	e3e00000 	mvn	r0, #0
    b5b4:	ebfff291 	bl	8000 <exit>
            insert_large_chunk(fm, tp, psize);
    b5b8:	e1a00422 	lsr	r0, r2, #8
    b5bc:	e3500801 	cmp	r0, #65536	; 0x10000
    b5c0:	3a00005c 	bcc	b738 <free+0x42c>
    b5c4:	e3a0c102 	mov	ip, #-2147483648	; 0x80000000
    b5c8:	e3a05f6b 	mov	r5, #428	; 0x1ac
    b5cc:	e3a0101f 	mov	r1, #31
    b5d0:	e3a0406b 	mov	r4, #107	; 0x6b
    b5d4:	e59f0520 	ldr	r0, [pc, #1312]	; bafc <free+0x7f0>
    b5d8:	e3a0e000 	mov	lr, #0
    b5dc:	e583e014 	str	lr, [r3, #20]
    b5e0:	e08f0000 	add	r0, pc, r0
    b5e4:	e583e010 	str	lr, [r3, #16]
    b5e8:	e583101c 	str	r1, [r3, #28]
    b5ec:	e590e004 	ldr	lr, [r0, #4]
    b5f0:	e11c000e 	tst	ip, lr
    b5f4:	1a000080 	bne	b7fc <free+0x4f0>
    b5f8:	e7803104 	str	r3, [r0, r4, lsl #2]
    b5fc:	e18cc00e 	orr	ip, ip, lr
    b600:	e583300c 	str	r3, [r3, #12]
    b604:	e580c004 	str	ip, [r0, #4]
    b608:	e0800005 	add	r0, r0, r5
    b60c:	e5833008 	str	r3, [r3, #8]
    b610:	e5830018 	str	r0, [r3, #24]
            if (--fm->release_checks == 0)
    b614:	e59f24e4 	ldr	r2, [pc, #1252]	; bb00 <free+0x7f4>
    b618:	e08f2002 	add	r2, pc, r2
    b61c:	e5923020 	ldr	r3, [r2, #32]
    b620:	e2533001 	subs	r3, r3, #1
  m->release_checks = (((size_t) nsegs > (size_t) MAX_RELEASE_CHECK_RATE)?
    b624:	03e03000 	mvneq	r3, #0
    b628:	e5823020 	str	r3, [r2, #32]
    }
  }
#if !FOOTERS
#undef fm
#endif /* FOOTERS */
}
    b62c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
                unlink_chunk(fm, p, prevsize);
    b630:	e1510003 	cmp	r1, r3
    b634:	e5936018 	ldr	r6, [r3, #24]
    b638:	0a000057 	beq	b79c <free+0x490>
    b63c:	e5930008 	ldr	r0, [r3, #8]
    b640:	e15e0000 	cmp	lr, r0
    b644:	8affffd9 	bhi	b5b0 <free+0x2a4>
    b648:	e590400c 	ldr	r4, [r0, #12]
    b64c:	e1540003 	cmp	r4, r3
    b650:	1affffd6 	bne	b5b0 <free+0x2a4>
    b654:	e5914008 	ldr	r4, [r1, #8]
    b658:	e1540003 	cmp	r4, r3
    b65c:	1affffd3 	bne	b5b0 <free+0x2a4>
    b660:	e580100c 	str	r1, [r0, #12]
    b664:	e5810008 	str	r0, [r1, #8]
    b668:	e3560000 	cmp	r6, #0
    b66c:	0affff37 	beq	b350 <free+0x44>
    b670:	e593001c 	ldr	r0, [r3, #28]
    b674:	e59f4488 	ldr	r4, [pc, #1160]	; bb04 <free+0x7f8>
    b678:	e280004c 	add	r0, r0, #76	; 0x4c
    b67c:	e08f4004 	add	r4, pc, r4
    b680:	e7945100 	ldr	r5, [r4, r0, lsl #2]
    b684:	e1550003 	cmp	r5, r3
    b688:	07841100 	streq	r1, [r4, r0, lsl #2]
    b68c:	0a000007 	beq	b6b0 <free+0x3a4>
    b690:	e15e0006 	cmp	lr, r6
    b694:	8affffc5 	bhi	b5b0 <free+0x2a4>
    b698:	e5960010 	ldr	r0, [r6, #16]
    b69c:	e1500003 	cmp	r0, r3
    b6a0:	05861010 	streq	r1, [r6, #16]
    b6a4:	15861014 	strne	r1, [r6, #20]
    b6a8:	e3510000 	cmp	r1, #0
    b6ac:	0affff27 	beq	b350 <free+0x44>
    b6b0:	e15e0001 	cmp	lr, r1
    b6b4:	8affffbd 	bhi	b5b0 <free+0x2a4>
    b6b8:	e5930010 	ldr	r0, [r3, #16]
    b6bc:	e5816018 	str	r6, [r1, #24]
    b6c0:	e3500000 	cmp	r0, #0
    b6c4:	0a000003 	beq	b6d8 <free+0x3cc>
    b6c8:	e15e0000 	cmp	lr, r0
    b6cc:	8affffb7 	bhi	b5b0 <free+0x2a4>
    b6d0:	e5810010 	str	r0, [r1, #16]
    b6d4:	e5801018 	str	r1, [r0, #24]
    b6d8:	e5930014 	ldr	r0, [r3, #20]
    b6dc:	e3500000 	cmp	r0, #0
    b6e0:	0affff1a 	beq	b350 <free+0x44>
    b6e4:	e15e0000 	cmp	lr, r0
    b6e8:	8affffb0 	bhi	b5b0 <free+0x2a4>
    b6ec:	e5810014 	str	r0, [r1, #20]
    b6f0:	e5801018 	str	r1, [r0, #24]
    b6f4:	eaffff15 	b	b350 <free+0x44>
              unlink_chunk(fm, next, nsize);
    b6f8:	e150000c 	cmp	r0, ip
    b6fc:	e59c6008 	ldr	r6, [ip, #8]
    b700:	0affffaa 	beq	b5b0 <free+0x2a4>
    b704:	e15c0006 	cmp	ip, r6
    b708:	0affffa8 	beq	b5b0 <free+0x2a4>
    b70c:	e0844181 	add	r4, r4, r1, lsl #3
    b710:	e2844028 	add	r4, r4, #40	; 0x28
    b714:	e1540006 	cmp	r4, r6
    b718:	1a0000b3 	bne	b9ec <free+0x6e0>
    b71c:	e1500006 	cmp	r0, r6
    b720:	0a00009d 	beq	b99c <free+0x690>
    b724:	e1500004 	cmp	r0, r4
    b728:	1a0000c4 	bne	ba40 <free+0x734>
    b72c:	e586000c 	str	r0, [r6, #12]
    b730:	e5806008 	str	r6, [r0, #8]
    b734:	eaffff90 	b	b57c <free+0x270>
            insert_large_chunk(fm, tp, psize);
    b738:	e2401c01 	sub	r1, r0, #256	; 0x100
    b73c:	e3a0c001 	mov	ip, #1
    b740:	e1a01821 	lsr	r1, r1, #16
    b744:	e2011008 	and	r1, r1, #8
    b748:	e1a0e110 	lsl	lr, r0, r1
    b74c:	e24e4a01 	sub	r4, lr, #4096	; 0x1000
    b750:	e1a04824 	lsr	r4, r4, #16
    b754:	e2044004 	and	r4, r4, #4
    b758:	e1810004 	orr	r0, r1, r4
    b75c:	e1a0141e 	lsl	r1, lr, r4
    b760:	e241e901 	sub	lr, r1, #16384	; 0x4000
    b764:	e1a0e82e 	lsr	lr, lr, #16
    b768:	e20ee002 	and	lr, lr, #2
    b76c:	e080000e 	add	r0, r0, lr
    b770:	e1a01e11 	lsl	r1, r1, lr
    b774:	e06007a1 	rsb	r0, r0, r1, lsr #15
    b778:	e2801015 	add	r1, r0, #21
    b77c:	e280000e 	add	r0, r0, #14
    b780:	e1a01132 	lsr	r1, r2, r1
    b784:	e001100c 	and	r1, r1, ip
    b788:	e0811c10 	add	r1, r1, r0, lsl ip
    b78c:	e281404c 	add	r4, r1, #76	; 0x4c
    b790:	e1a0c11c 	lsl	ip, ip, r1
    b794:	e1a05104 	lsl	r5, r4, #2
    b798:	eaffff8d 	b	b5d4 <free+0x2c8>
                unlink_chunk(fm, p, prevsize);
    b79c:	e5934014 	ldr	r4, [r3, #20]
    b7a0:	e3540000 	cmp	r4, #0
    b7a4:	12830014 	addne	r0, r3, #20
    b7a8:	0a000086 	beq	b9c8 <free+0x6bc>
    b7ac:	e1a05000 	mov	r5, r0
    b7b0:	e1a00004 	mov	r0, r4
    b7b4:	e1a01004 	mov	r1, r4
    b7b8:	e5b04014 	ldr	r4, [r0, #20]!
    b7bc:	e3540000 	cmp	r4, #0
    b7c0:	1afffff9 	bne	b7ac <free+0x4a0>
    b7c4:	e1a00001 	mov	r0, r1
    b7c8:	e5b04010 	ldr	r4, [r0, #16]!
    b7cc:	e3540000 	cmp	r4, #0
    b7d0:	1afffff5 	bne	b7ac <free+0x4a0>
    b7d4:	e15e0005 	cmp	lr, r5
    b7d8:	8affff74 	bhi	b5b0 <free+0x2a4>
    b7dc:	e5854000 	str	r4, [r5]
    b7e0:	eaffffa0 	b	b668 <free+0x35c>
    b7e4:	e15e0004 	cmp	lr, r4
    b7e8:	8affff70 	bhi	b5b0 <free+0x2a4>
    b7ec:	e594600c 	ldr	r6, [r4, #12]
    b7f0:	e1560003 	cmp	r6, r3
    b7f4:	0affff15 	beq	b450 <free+0x144>
    b7f8:	eaffff6c 	b	b5b0 <free+0x2a4>
            insert_large_chunk(fm, tp, psize);
    b7fc:	e351001f 	cmp	r1, #31
    b800:	e790c104 	ldr	ip, [r0, r4, lsl #2]
    b804:	11a000a1 	lsrne	r0, r1, #1
    b808:	01a00002 	moveq	r0, r2
    b80c:	12600019 	rsbne	r0, r0, #25
    b810:	11a00012 	lslne	r0, r2, r0
    b814:	ea000006 	b	b834 <free+0x528>
    b818:	e1a01fa0 	lsr	r1, r0, #31
    b81c:	e1a00080 	lsl	r0, r0, #1
    b820:	e2811004 	add	r1, r1, #4
    b824:	e79ce101 	ldr	lr, [ip, r1, lsl #2]
    b828:	e35e0000 	cmp	lr, #0
    b82c:	0a000036 	beq	b90c <free+0x600>
    b830:	e1a0c00e 	mov	ip, lr
    b834:	e59c1004 	ldr	r1, [ip, #4]
    b838:	e3c11007 	bic	r1, r1, #7
    b83c:	e1510002 	cmp	r1, r2
    b840:	1afffff4 	bne	b818 <free+0x50c>
    b844:	e59f22bc 	ldr	r2, [pc, #700]	; bb08 <free+0x7fc>
    b848:	e59c1008 	ldr	r1, [ip, #8]
    b84c:	e08f2002 	add	r2, pc, r2
    b850:	e5922010 	ldr	r2, [r2, #16]
    b854:	e1520001 	cmp	r2, r1
    b858:	9152000c 	cmpls	r2, ip
    b85c:	8affff53 	bhi	b5b0 <free+0x2a4>
    b860:	e581300c 	str	r3, [r1, #12]
    b864:	e3a02000 	mov	r2, #0
    b868:	e58c3008 	str	r3, [ip, #8]
    b86c:	e5831008 	str	r1, [r3, #8]
    b870:	e583c00c 	str	ip, [r3, #12]
    b874:	e5832018 	str	r2, [r3, #24]
    b878:	eaffff65 	b	b614 <free+0x308>
              size_t tsize = fm->topsize += psize;
    b87c:	e594100c 	ldr	r1, [r4, #12]
              if (p == fm->dv) {
    b880:	e1530005 	cmp	r3, r5
              fm->top = p;
    b884:	e5843018 	str	r3, [r4, #24]
              size_t tsize = fm->topsize += psize;
    b888:	e0822001 	add	r2, r2, r1
    b88c:	e584200c 	str	r2, [r4, #12]
              p->head = tsize | PINUSE_BIT;
    b890:	e3821001 	orr	r1, r2, #1
    b894:	e5831004 	str	r1, [r3, #4]
              if (should_trim(fm, tsize))
    b898:	e59f326c 	ldr	r3, [pc, #620]	; bb0c <free+0x800>
                fm->dv = 0;
    b89c:	05840014 	streq	r0, [r4, #20]
              if (should_trim(fm, tsize))
    b8a0:	e08f3003 	add	r3, pc, r3
                fm->dvsize = 0;
    b8a4:	05840008 	streq	r0, [r4, #8]
              if (should_trim(fm, tsize))
    b8a8:	e593301c 	ldr	r3, [r3, #28]
    b8ac:	e1520003 	cmp	r2, r3
    b8b0:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
                sys_trim(fm, 0);
    b8b4:	e3a00000 	mov	r0, #0
}
    b8b8:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
                sys_trim(fm, 0);
    b8bc:	eafff76b 	b	9670 <sys_trim.constprop.7>
              else if ((next->head & INUSE_BITS) == INUSE_BITS) {
    b8c0:	e59c0004 	ldr	r0, [ip, #4]
    b8c4:	e2005003 	and	r5, r0, #3
    b8c8:	e3550003 	cmp	r5, #3
    b8cc:	1afffe9f 	bne	b350 <free+0x44>
                fm->dvsize = psize;
    b8d0:	e5842008 	str	r2, [r4, #8]
                set_free_with_pinuse(p, psize, next);
    b8d4:	e3c00001 	bic	r0, r0, #1
    b8d8:	e3823001 	orr	r3, r2, #1
    b8dc:	e58c0004 	str	r0, [ip, #4]
    b8e0:	e5813004 	str	r3, [r1, #4]
    b8e4:	e58c2000 	str	r2, [ip]
                goto postaction;
    b8e8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
              size_t dsize = fm->dvsize += psize;
    b8ec:	e5941008 	ldr	r1, [r4, #8]
              fm->dv = p;
    b8f0:	e5843014 	str	r3, [r4, #20]
              size_t dsize = fm->dvsize += psize;
    b8f4:	e0822001 	add	r2, r2, r1
    b8f8:	e5842008 	str	r2, [r4, #8]
              set_size_and_pinuse_of_free_chunk(p, dsize);
    b8fc:	e3821001 	orr	r1, r2, #1
    b900:	e5831004 	str	r1, [r3, #4]
    b904:	e7832002 	str	r2, [r3, r2]
              goto postaction;
    b908:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
            insert_large_chunk(fm, tp, psize);
    b90c:	e59f01fc 	ldr	r0, [pc, #508]	; bb10 <free+0x804>
    b910:	e08c2101 	add	r2, ip, r1, lsl #2
    b914:	e08f0000 	add	r0, pc, r0
    b918:	e5900010 	ldr	r0, [r0, #16]
    b91c:	e1500002 	cmp	r0, r2
    b920:	8affff22 	bhi	b5b0 <free+0x2a4>
    b924:	e78c3101 	str	r3, [ip, r1, lsl #2]
    b928:	e583c018 	str	ip, [r3, #24]
    b92c:	e583300c 	str	r3, [r3, #12]
    b930:	e5833008 	str	r3, [r3, #8]
    b934:	eaffff36 	b	b614 <free+0x308>
                unlink_chunk(fm, p, prevsize);
    b938:	e59f01d4 	ldr	r0, [pc, #468]	; bb14 <free+0x808>
    b93c:	e3a04001 	mov	r4, #1
    b940:	e08f0000 	add	r0, pc, r0
    b944:	e5901000 	ldr	r1, [r0]
    b948:	e1c15514 	bic	r5, r1, r4, lsl r5
    b94c:	e5805000 	str	r5, [r0]
    b950:	eafffe7e 	b	b350 <free+0x44>
              unlink_chunk(fm, next, nsize);
    b954:	e59c4014 	ldr	r4, [ip, #20]
    b958:	e3540000 	cmp	r4, #0
    b95c:	128c1014 	addne	r1, ip, #20
    b960:	0a000027 	beq	ba04 <free+0x6f8>
    b964:	e1a05001 	mov	r5, r1
    b968:	e1a01004 	mov	r1, r4
    b96c:	e1a00004 	mov	r0, r4
    b970:	e5b14014 	ldr	r4, [r1, #20]!
    b974:	e3540000 	cmp	r4, #0
    b978:	1afffff9 	bne	b964 <free+0x658>
    b97c:	e1a01000 	mov	r1, r0
    b980:	e5b14010 	ldr	r4, [r1, #16]!
    b984:	e3540000 	cmp	r4, #0
    b988:	1afffff5 	bne	b964 <free+0x658>
    b98c:	e15e0005 	cmp	lr, r5
    b990:	8affff06 	bhi	b5b0 <free+0x2a4>
    b994:	e5854000 	str	r4, [r5]
    b998:	eafffed1 	b	b4e4 <free+0x1d8>
    b99c:	e59fc174 	ldr	ip, [pc, #372]	; bb18 <free+0x80c>
    b9a0:	e3a0e001 	mov	lr, #1
    b9a4:	e08fc00c 	add	ip, pc, ip
    b9a8:	e59c0000 	ldr	r0, [ip]
    b9ac:	e1c0111e 	bic	r1, r0, lr, lsl r1
    b9b0:	e58c1000 	str	r1, [ip]
    b9b4:	eafffef0 	b	b57c <free+0x270>
    b9b8:	e59f115c 	ldr	r1, [pc, #348]	; bb1c <free+0x810>
    b9bc:	e08f1001 	add	r1, pc, r1
    b9c0:	e5915014 	ldr	r5, [r1, #20]
    b9c4:	eafffeec 	b	b57c <free+0x270>
                unlink_chunk(fm, p, prevsize);
    b9c8:	e5934010 	ldr	r4, [r3, #16]
    b9cc:	e3540000 	cmp	r4, #0
    b9d0:	0a000020 	beq	ba58 <free+0x74c>
    b9d4:	e2830010 	add	r0, r3, #16
    b9d8:	eaffff73 	b	b7ac <free+0x4a0>
    b9dc:	e59f113c 	ldr	r1, [pc, #316]	; bb20 <free+0x814>
    b9e0:	e08f1001 	add	r1, pc, r1
    b9e4:	e5915014 	ldr	r5, [r1, #20]
    b9e8:	eafffee3 	b	b57c <free+0x270>
              unlink_chunk(fm, next, nsize);
    b9ec:	e15e0006 	cmp	lr, r6
    b9f0:	8afffeee 	bhi	b5b0 <free+0x2a4>
    b9f4:	e596700c 	ldr	r7, [r6, #12]
    b9f8:	e157000c 	cmp	r7, ip
    b9fc:	0affff46 	beq	b71c <free+0x410>
    ba00:	eafffeea 	b	b5b0 <free+0x2a4>
    ba04:	e59c4010 	ldr	r4, [ip, #16]
    ba08:	e3540000 	cmp	r4, #0
    ba0c:	0a000021 	beq	ba98 <free+0x78c>
    ba10:	e28c1010 	add	r1, ip, #16
    ba14:	eaffffd2 	b	b964 <free+0x658>
    ba18:	e59f1104 	ldr	r1, [pc, #260]	; bb24 <free+0x818>
    ba1c:	e08f1001 	add	r1, pc, r1
    ba20:	e5915014 	ldr	r5, [r1, #20]
    ba24:	eafffed4 	b	b57c <free+0x270>
                unlink_chunk(fm, p, prevsize);
    ba28:	e15e0001 	cmp	lr, r1
    ba2c:	8afffedf 	bhi	b5b0 <free+0x2a4>
    ba30:	e5910008 	ldr	r0, [r1, #8]
    ba34:	e1500003 	cmp	r0, r3
    ba38:	0afffe88 	beq	b460 <free+0x154>
    ba3c:	eafffedb 	b	b5b0 <free+0x2a4>
              unlink_chunk(fm, next, nsize);
    ba40:	e15e0000 	cmp	lr, r0
    ba44:	8afffed9 	bhi	b5b0 <free+0x2a4>
    ba48:	e5901008 	ldr	r1, [r0, #8]
    ba4c:	e151000c 	cmp	r1, ip
    ba50:	0affff35 	beq	b72c <free+0x420>
    ba54:	eafffed5 	b	b5b0 <free+0x2a4>
                unlink_chunk(fm, p, prevsize);
    ba58:	e3560000 	cmp	r6, #0
    ba5c:	0afffe3b 	beq	b350 <free+0x44>
    ba60:	e593501c 	ldr	r5, [r3, #28]
    ba64:	e59f10bc 	ldr	r1, [pc, #188]	; bb28 <free+0x81c>
    ba68:	e285704c 	add	r7, r5, #76	; 0x4c
    ba6c:	e08f1001 	add	r1, pc, r1
    ba70:	e7910107 	ldr	r0, [r1, r7, lsl #2]
    ba74:	e1500003 	cmp	r0, r3
    ba78:	11a01004 	movne	r1, r4
    ba7c:	1affff03 	bne	b690 <free+0x384>
    ba80:	e5910004 	ldr	r0, [r1, #4]
    ba84:	e3a06001 	mov	r6, #1
    ba88:	e7814107 	str	r4, [r1, r7, lsl #2]
    ba8c:	e1c00516 	bic	r0, r0, r6, lsl r5
    ba90:	e5810004 	str	r0, [r1, #4]
    ba94:	eafffe2d 	b	b350 <free+0x44>
              unlink_chunk(fm, next, nsize);
    ba98:	e3560000 	cmp	r6, #0
    ba9c:	0afffeb6 	beq	b57c <free+0x270>
    baa0:	e59c401c 	ldr	r4, [ip, #28]
    baa4:	e59f1080 	ldr	r1, [pc, #128]	; bb2c <free+0x820>
    baa8:	e284504c 	add	r5, r4, #76	; 0x4c
    baac:	e08f1001 	add	r1, pc, r1
    bab0:	e7910105 	ldr	r0, [r1, r5, lsl #2]
    bab4:	e150000c 	cmp	r0, ip
    bab8:	13a00000 	movne	r0, #0
    babc:	1afffe92 	bne	b50c <free+0x200>
    bac0:	e5910004 	ldr	r0, [r1, #4]
    bac4:	e3a0c001 	mov	ip, #1
    bac8:	e3a0e000 	mov	lr, #0
    bacc:	e781e105 	str	lr, [r1, r5, lsl #2]
    bad0:	e5915014 	ldr	r5, [r1, #20]
    bad4:	e1c0041c 	bic	r0, r0, ip, lsl r4
    bad8:	e5810004 	str	r0, [r1, #4]
    badc:	eafffea6 	b	b57c <free+0x270>
    bae0:	00004f74 	.word	0x00004f74
    bae4:	00004f00 	.word	0x00004f00
    bae8:	00004e58 	.word	0x00004e58
    baec:	00004e1c 	.word	0x00004e1c
    baf0:	00004d9c 	.word	0x00004d9c
    baf4:	00004d24 	.word	0x00004d24
    baf8:	00004d00 	.word	0x00004d00
    bafc:	00004cb4 	.word	0x00004cb4
    bb00:	00004c7c 	.word	0x00004c7c
    bb04:	00004c18 	.word	0x00004c18
    bb08:	00004a48 	.word	0x00004a48
    bb0c:	000049f4 	.word	0x000049f4
    bb10:	00004980 	.word	0x00004980
    bb14:	00004954 	.word	0x00004954
    bb18:	000048f0 	.word	0x000048f0
    bb1c:	000048d8 	.word	0x000048d8
    bb20:	000048b4 	.word	0x000048b4
    bb24:	00004878 	.word	0x00004878
    bb28:	00004828 	.word	0x00004828
    bb2c:	000047e8 	.word	0x000047e8

0000bb30 <calloc>:

void* dlcalloc(size_t n_elements, size_t elem_size) {
    bb30:	e92d4070 	push	{r4, r5, r6, lr}
  void* mem;
  size_t req = 0;
  if (n_elements != 0) {
    bb34:	e2504000 	subs	r4, r0, #0
    bb38:	0a000006 	beq	bb58 <calloc+0x28>
    req = n_elements * elem_size;
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    bb3c:	e1843001 	orr	r3, r4, r1
    req = n_elements * elem_size;
    bb40:	e0020491 	mul	r2, r1, r4
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    bb44:	e1a03823 	lsr	r3, r3, #16
    bb48:	e1a03803 	lsl	r3, r3, #16
    bb4c:	e3530000 	cmp	r3, #0
    req = n_elements * elem_size;
    bb50:	01a04002 	moveq	r4, r2
    if (((n_elements | elem_size) & ~(size_t)0xffff) &&
    bb54:	1a00000d 	bne	bb90 <calloc+0x60>
        (req / n_elements != elem_size))
      req = MAX_SIZE_T; /* force downstream failure on overflow */
  }
  mem = dlmalloc(req);
    bb58:	e1a00004 	mov	r0, r4
    bb5c:	ebfff740 	bl	9864 <malloc>
  if (mem != 0 && calloc_must_clear(mem2chunk(mem)))
    bb60:	e2505000 	subs	r5, r0, #0
    bb64:	0a000002 	beq	bb74 <calloc+0x44>
    bb68:	e5153004 	ldr	r3, [r5, #-4]
    bb6c:	e3130003 	tst	r3, #3
    bb70:	1a000001 	bne	bb7c <calloc+0x4c>
    memset(mem, 0, req);
  return mem;
}
    bb74:	e1a00005 	mov	r0, r5
    bb78:	e8bd8070 	pop	{r4, r5, r6, pc}
    memset(mem, 0, req);
    bb7c:	e1a02004 	mov	r2, r4
    bb80:	e3a01000 	mov	r1, #0
    bb84:	eb000643 	bl	d498 <memset>
}
    bb88:	e1a00005 	mov	r0, r5
    bb8c:	e8bd8070 	pop	{r4, r5, r6, pc}
        (req / n_elements != elem_size))
    bb90:	e734f412 	udiv	r4, r2, r4
      req = MAX_SIZE_T; /* force downstream failure on overflow */
    bb94:	e1540001 	cmp	r4, r1
    bb98:	01a04002 	moveq	r4, r2
    bb9c:	13e04000 	mvnne	r4, #0
    bba0:	eaffffec 	b	bb58 <calloc+0x28>

0000bba4 <_stdio_fgetc>:
}

static int _stdio_fgetc(void *ctx)
{
	return (unsigned char)0xff;
}
    bba4:	e3a000ff 	mov	r0, #255	; 0xff
    bba8:	e12fff1e 	bx	lr

0000bbac <_stdio_vfprintf>:
	return buffered_write(ctx, str, strnlen(str, len));
}

static int _stdio_vfprintf(void *ctx, const char *fmt, va_list ap)
{
	return _printf_engine(_output_func, ctx, fmt, ap);
    bbac:	e1a03002 	mov	r3, r2
    bbb0:	e1a02001 	mov	r2, r1
    bbb4:	e1a01000 	mov	r1, r0
    bbb8:	e59f0004 	ldr	r0, [pc, #4]	; bbc4 <_stdio_vfprintf+0x18>
    bbbc:	e08f0000 	add	r0, pc, r0
    bbc0:	ea000388 	b	c9e8 <_printf_engine>
    bbc4:	000000c0 	.word	0x000000c0

0000bbc8 <_stdio_fputc>:
{
    bbc8:	e92d4010 	push	{r4, lr}
	buffered_put(fctx->buffer, fctx->fd, (char)c);
    bbcc:	e6ef1071 	uxtb	r1, r1
    bbd0:	e8900011 	ldm	r0, {r0, r4}
	buffer->data[buffer->pos++] = c;
    bbd4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    bbd8:	e2832001 	add	r2, r3, #1
    bbdc:	e5842080 	str	r2, [r4, #128]	; 0x80
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    bbe0:	e351000a 	cmp	r1, #10
    bbe4:	13520080 	cmpne	r2, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    bbe8:	e7c41003 	strb	r1, [r4, r3]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    bbec:	1a000003 	bne	bc00 <_stdio_fputc+0x38>
		result = write(fd, buffer->data, buffer->pos);
    bbf0:	e1a01004 	mov	r1, r4
    bbf4:	eb000092 	bl	be44 <write>
		buffer->pos = 0;
    bbf8:	e3a03000 	mov	r3, #0
    bbfc:	e5843080 	str	r3, [r4, #128]	; 0x80
}
    bc00:	e3e00102 	mvn	r0, #-2147483648	; 0x80000000
    bc04:	e8bd8010 	pop	{r4, pc}

0000bc08 <buffered_write.part.0>:
static int buffered_write(struct file_context *ctx, const char *str, size_t sz)
    bc08:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < sz; i++) {
    bc0c:	e2528000 	subs	r8, r2, #0
    bc10:	0a000019 	beq	bc7c <buffered_write.part.0+0x74>
    bc14:	e2489001 	sub	r9, r8, #1
    bc18:	e1a06000 	mov	r6, r0
    bc1c:	e2415001 	sub	r5, r1, #1
    bc20:	e0819009 	add	r9, r1, r9
		buffer->pos = 0;
    bc24:	e3a07000 	mov	r7, #0
    bc28:	ea000001 	b	bc34 <buffered_write.part.0+0x2c>
	for (i = 0; i < sz; i++) {
    bc2c:	e1550009 	cmp	r5, r9
    bc30:	0a000011 	beq	bc7c <buffered_write.part.0+0x74>
		int result = buffered_put(ctx->buffer, ctx->fd, str[i]);
    bc34:	e5964004 	ldr	r4, [r6, #4]
    bc38:	e5f5e001 	ldrb	lr, [r5, #1]!
    bc3c:	e5960000 	ldr	r0, [r6]
		result = write(fd, buffer->data, buffer->pos);
    bc40:	e1a01004 	mov	r1, r4
	buffer->data[buffer->pos++] = c;
    bc44:	e594c080 	ldr	ip, [r4, #128]	; 0x80
    bc48:	e28c3001 	add	r3, ip, #1
    bc4c:	e5843080 	str	r3, [r4, #128]	; 0x80
		result = write(fd, buffer->data, buffer->pos);
    bc50:	e1a02003 	mov	r2, r3
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    bc54:	e35e000a 	cmp	lr, #10
    bc58:	13530080 	cmpne	r3, #128	; 0x80
	buffer->data[buffer->pos++] = c;
    bc5c:	e7c4e00c 	strb	lr, [r4, ip]
	if (buffer->pos == sizeof(buffer->data) || c == '\n') {
    bc60:	1afffff1 	bne	bc2c <buffered_write.part.0+0x24>
		result = write(fd, buffer->data, buffer->pos);
    bc64:	eb000076 	bl	be44 <write>
		if (result < 0) {
    bc68:	e3500000 	cmp	r0, #0
		buffer->pos = 0;
    bc6c:	e5847080 	str	r7, [r4, #128]	; 0x80
		if (result < 0) {
    bc70:	b8bd87f0 	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
	for (i = 0; i < sz; i++) {
    bc74:	e1550009 	cmp	r5, r9
    bc78:	1affffed 	bne	bc34 <buffered_write.part.0+0x2c>
	return sz;
    bc7c:	e1a00008 	mov	r0, r8
}
    bc80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0000bc84 <_output_func>:
{
    bc84:	e92d4070 	push	{r4, r5, r6, lr}
    bc88:	e1a04002 	mov	r4, r2
    bc8c:	e1a05000 	mov	r5, r0
	return buffered_write(ctx, str, strnlen(str, len));
    bc90:	eb000635 	bl	d56c <strnlen>
	if (!ctx->buffer) {
    bc94:	e5943004 	ldr	r3, [r4, #4]
    bc98:	e3530000 	cmp	r3, #0
    bc9c:	0a000004 	beq	bcb4 <_output_func+0x30>
    bca0:	e1a02000 	mov	r2, r0
    bca4:	e1a01005 	mov	r1, r5
    bca8:	e1a00004 	mov	r0, r4
}
    bcac:	e8bd4070 	pop	{r4, r5, r6, lr}
    bcb0:	eaffffd4 	b	bc08 <buffered_write.part.0>
    bcb4:	e3e00007 	mvn	r0, #7
    bcb8:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bcbc <_stdio_fputs>:
{
    bcbc:	e92d4070 	push	{r4, r5, r6, lr}
    bcc0:	e1a04000 	mov	r4, r0
	return buffered_write(fctx, s, strlen(s));
    bcc4:	e1a00001 	mov	r0, r1
{
    bcc8:	e1a05001 	mov	r5, r1
	return buffered_write(fctx, s, strlen(s));
    bccc:	eb00061a 	bl	d53c <strlen>
	if (!ctx->buffer) {
    bcd0:	e5943004 	ldr	r3, [r4, #4]
    bcd4:	e3530000 	cmp	r3, #0
    bcd8:	0a000004 	beq	bcf0 <_stdio_fputs+0x34>
    bcdc:	e1a02000 	mov	r2, r0
    bce0:	e1a01005 	mov	r1, r5
    bce4:	e1a00004 	mov	r0, r4
}
    bce8:	e8bd4070 	pop	{r4, r5, r6, lr}
    bcec:	eaffffc5 	b	bc08 <buffered_write.part.0>
    bcf0:	e3e00007 	mvn	r0, #7
    bcf4:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bcf8 <__libc_fini>:
 * of the executable, if any.
 *
 * 'fini_array' points to a list of function addresses. The first
 * entry in the list has value -1, the last one has value 0.
 */
void __libc_fini(void* array) {
    bcf8:	e92d4070 	push	{r4, r5, r6, lr}
  void** fini_array = (void **)array;
  const size_t minus1 = ~(size_t)0; /* ensure proper sign extension */

  /* Sanity check - first entry must be -1 */
  if (array == NULL || (size_t)fini_array[0] != minus1) {
    bcfc:	e2505000 	subs	r5, r0, #0
    bd00:	08bd8070 	popeq	{r4, r5, r6, pc}
    bd04:	e5953000 	ldr	r3, [r5]
    bd08:	e3730001 	cmn	r3, #1
    bd0c:	18bd8070 	popne	{r4, r5, r6, pc}
  /* skip over it */
  fini_array += 1;

  /* Count the number of destructors. */
  int count = 0;
  while (fini_array[count] != NULL) {
    bd10:	e5952004 	ldr	r2, [r5, #4]
  fini_array += 1;
    bd14:	e2853004 	add	r3, r5, #4
  while (fini_array[count] != NULL) {
    bd18:	e3520000 	cmp	r2, #0
    bd1c:	08bd8070 	popeq	{r4, r5, r6, pc}
  int count = 0;
    bd20:	e3a04000 	mov	r4, #0
  while (fini_array[count] != NULL) {
    bd24:	e5b32004 	ldr	r2, [r3, #4]!
    ++count;
    bd28:	e2844001 	add	r4, r4, #1
  while (fini_array[count] != NULL) {
    bd2c:	e3520000 	cmp	r2, #0
    bd30:	1afffffb 	bne	bd24 <__libc_fini+0x2c>
    bd34:	e0854104 	add	r4, r5, r4, lsl #2
  }

  /* Now call each destructor in reverse order. */
  while (count > 0) {
    void (*func)(void) = (void (*)(void)) fini_array[--count];
    bd38:	e4143004 	ldr	r3, [r4], #-4

    /* Sanity check, any -1 in the list is ignored */
    if ((size_t)func == minus1) {
    bd3c:	e3730001 	cmn	r3, #1
    bd40:	0a000000 	beq	bd48 <__libc_fini+0x50>
      continue;
    }

    func();
    bd44:	e12fff33 	blx	r3
  while (count > 0) {
    bd48:	e1550004 	cmp	r5, r4
    bd4c:	1afffff9 	bne	bd38 <__libc_fini+0x40>
    bd50:	e8bd8070 	pop	{r4, r5, r6, pc}

0000bd54 <__libc_init>:
	call_array(structors->preinit_array);
    bd54:	e5923000 	ldr	r3, [r2]
{
    bd58:	e1a05002 	mov	r5, r2
    bd5c:	e92d4010 	push	{r4, lr}
    bd60:	e1a06001 	mov	r6, r1
  while (*++list) {
    bd64:	e2834004 	add	r4, r3, #4
    bd68:	e5933004 	ldr	r3, [r3, #4]
    bd6c:	e3530000 	cmp	r3, #0
    bd70:	0a000003 	beq	bd84 <__libc_init+0x30>
    (*list)();
    bd74:	e12fff33 	blx	r3
  while (*++list) {
    bd78:	e5b43004 	ldr	r3, [r4, #4]!
    bd7c:	e3530000 	cmp	r3, #0
    bd80:	1afffffb 	bne	bd74 <__libc_init+0x20>
	call_array(structors->init_array);
    bd84:	e5953004 	ldr	r3, [r5, #4]
  while (*++list) {
    bd88:	e2834004 	add	r4, r3, #4
    bd8c:	e5933004 	ldr	r3, [r3, #4]
    bd90:	e3530000 	cmp	r3, #0
    bd94:	0a000003 	beq	bda8 <__libc_init+0x54>
    (*list)();
    bd98:	e12fff33 	blx	r3
  while (*++list) {
    bd9c:	e5b43004 	ldr	r3, [r4, #4]!
    bda0:	e3530000 	cmp	r3, #0
    bda4:	1afffffb 	bne	bd98 <__libc_init+0x44>
	if (structors->fini_array != NULL) {
    bda8:	e5951008 	ldr	r1, [r5, #8]
    bdac:	e3510000 	cmp	r1, #0
    bdb0:	1a000004 	bne	bdc8 <__libc_init+0x74>
	exit(slingshot(0, NULL, NULL));
    bdb4:	e3a02000 	mov	r2, #0
    bdb8:	e1a01002 	mov	r1, r2
    bdbc:	e1a00002 	mov	r0, r2
    bdc0:	e12fff36 	blx	r6
    bdc4:	ebfff08d 	bl	8000 <exit>
		ret = __cxa_atexit(__libc_fini, structors->fini_array);
    bdc8:	e59f0018 	ldr	r0, [pc, #24]	; bde8 <__libc_init+0x94>
    bdcc:	e08f0000 	add	r0, pc, r0
    bdd0:	ebfff575 	bl	93ac <__cxa_atexit>
		if (ret)
    bdd4:	e3500000 	cmp	r0, #0
    bdd8:	0afffff5 	beq	bdb4 <__libc_init+0x60>
			__libc_fatal("__cxa_atexit failed\n");
    bddc:	e59f0008 	ldr	r0, [pc, #8]	; bdec <__libc_init+0x98>
    bde0:	e08f0000 	add	r0, pc, r0
    bde4:	eb000001 	bl	bdf0 <__libc_fatal>
    bde8:	ffffff24 	.word	0xffffff24
    bdec:	00002274 	.word	0x00002274

0000bdf0 <__libc_fatal>:
    __libc_log_fatal(format, args);
    va_end(args);
}

void __libc_fatal(const char* format, ...)
{
    bdf0:	e92d000f 	push	{r0, r1, r2, r3}
    bdf4:	e59f303c 	ldr	r3, [pc, #60]	; be38 <__libc_fatal+0x48>
    bdf8:	e59fc03c 	ldr	ip, [pc, #60]	; be3c <__libc_fatal+0x4c>
    bdfc:	e08f3003 	add	r3, pc, r3
    be00:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    vfprintf(stderr, format, args);
    be04:	e59f0034 	ldr	r0, [pc, #52]	; be40 <__libc_fatal+0x50>
{
    be08:	e24dd00c 	sub	sp, sp, #12
    be0c:	e793c00c 	ldr	ip, [r3, ip]
    va_list args;
    va_start(args, format);
    be10:	e28de014 	add	lr, sp, #20
    vfprintf(stderr, format, args);
    be14:	e1a0200e 	mov	r2, lr
    va_start(args, format);
    be18:	e58de000 	str	lr, [sp]
{
    be1c:	e59cc000 	ldr	ip, [ip]
    be20:	e58dc004 	str	ip, [sp, #4]
    be24:	e59d1010 	ldr	r1, [sp, #16]
    vfprintf(stderr, format, args);
    be28:	e7930000 	ldr	r0, [r3, r0]
    be2c:	e2800028 	add	r0, r0, #40	; 0x28
    be30:	eb000569 	bl	d3dc <vfprintf>
    __libc_log_fatal(format, args);
    va_end(args);
    abort();
    be34:	ebfff559 	bl	93a0 <abort>
    be38:	00003338 	.word	0x00003338
    be3c:	0000000c 	.word	0x0000000c
    be40:	00000010 	.word	0x00000010

0000be44 <write>:
#include <asm.h>
#include <trusty_syscalls.h>

.section .text.write
FUNCTION(write)
    ldr     r12, =__NR_write
    be44:	e3a0c001 	mov	ip, #1
    swi     #0
    be48:	ef000000 	svc	0x00000000
    bx      lr
    be4c:	e12fff1e 	bx	lr

0000be50 <brk>:

.section .text.brk
FUNCTION(brk)
    ldr     r12, =__NR_brk
    be50:	e3a0c002 	mov	ip, #2
    swi     #0
    be54:	ef000000 	svc	0x00000000
    bx      lr
    be58:	e12fff1e 	bx	lr

0000be5c <exit_group>:

.section .text.exit_group
FUNCTION(exit_group)
    ldr     r12, =__NR_exit_group
    be5c:	e3a0c003 	mov	ip, #3
    swi     #0
    be60:	ef000000 	svc	0x00000000
    bx      lr
    be64:	e12fff1e 	bx	lr

0000be68 <nanosleep>:
    swi     #0
    bx      lr

.section .text.nanosleep
FUNCTION(nanosleep)
    ldr     r12, =__NR_nanosleep
    be68:	e3a0c006 	mov	ip, #6
    swi     #0
    be6c:	ef000000 	svc	0x00000000
    bx      lr
    be70:	e12fff1e 	bx	lr

0000be74 <port_create>:
    swi     #0
    bx      lr

.section .text.port_create
FUNCTION(port_create)
    ldr     r12, =__NR_port_create
    be74:	e3a0c010 	mov	ip, #16
    swi     #0
    be78:	ef000000 	svc	0x00000000
    bx      lr
    be7c:	e12fff1e 	bx	lr

0000be80 <connect>:

.section .text.connect
FUNCTION(connect)
    ldr     r12, =__NR_connect
    be80:	e3a0c011 	mov	ip, #17
    swi     #0
    be84:	ef000000 	svc	0x00000000
    bx      lr
    be88:	e12fff1e 	bx	lr

0000be8c <accept>:

.section .text.accept
FUNCTION(accept)
    ldr     r12, =__NR_accept
    be8c:	e3a0c012 	mov	ip, #18
    swi     #0
    be90:	ef000000 	svc	0x00000000
    bx      lr
    be94:	e12fff1e 	bx	lr

0000be98 <close>:

.section .text.close
FUNCTION(close)
    ldr     r12, =__NR_close
    be98:	e3a0c013 	mov	ip, #19
    swi     #0
    be9c:	ef000000 	svc	0x00000000
    bx      lr
    bea0:	e12fff1e 	bx	lr

0000bea4 <set_cookie>:

.section .text.set_cookie
FUNCTION(set_cookie)
    ldr     r12, =__NR_set_cookie
    bea4:	e3a0c014 	mov	ip, #20
    swi     #0
    bea8:	ef000000 	svc	0x00000000
    bx      lr
    beac:	e12fff1e 	bx	lr

0000beb0 <wait>:

.section .text.wait
FUNCTION(wait)
    ldr     r12, =__NR_wait
    beb0:	e3a0c018 	mov	ip, #24
    swi     #0
    beb4:	ef000000 	svc	0x00000000
    bx      lr
    beb8:	e12fff1e 	bx	lr

0000bebc <wait_any>:

.section .text.wait_any
FUNCTION(wait_any)
    ldr     r12, =__NR_wait_any
    bebc:	e3a0c019 	mov	ip, #25
    swi     #0
    bec0:	ef000000 	svc	0x00000000
    bx      lr
    bec4:	e12fff1e 	bx	lr

0000bec8 <get_msg>:

.section .text.get_msg
FUNCTION(get_msg)
    ldr     r12, =__NR_get_msg
    bec8:	e3a0c020 	mov	ip, #32
    swi     #0
    becc:	ef000000 	svc	0x00000000
    bx      lr
    bed0:	e12fff1e 	bx	lr

0000bed4 <read_msg>:

.section .text.read_msg
FUNCTION(read_msg)
    ldr     r12, =__NR_read_msg
    bed4:	e3a0c021 	mov	ip, #33	; 0x21
    swi     #0
    bed8:	ef000000 	svc	0x00000000
    bx      lr
    bedc:	e12fff1e 	bx	lr

0000bee0 <put_msg>:

.section .text.put_msg
FUNCTION(put_msg)
    ldr     r12, =__NR_put_msg
    bee0:	e3a0c022 	mov	ip, #34	; 0x22
    swi     #0
    bee4:	ef000000 	svc	0x00000000
    bx      lr
    bee8:	e12fff1e 	bx	lr

0000beec <send_msg>:

.section .text.send_msg
FUNCTION(send_msg)
    ldr     r12, =__NR_send_msg
    beec:	e3a0c023 	mov	ip, #35	; 0x23
    swi     #0
    bef0:	ef000000 	svc	0x00000000
    bx      lr
    bef4:	e12fff1e 	bx	lr

0000bef8 <longlong_to_string>:
#define LEFTFORMATFLAG 0x00000800
#define LEADZEROFLAG   0x00001000
#define BLANKPOSFLAG   0x00002000

__NO_INLINE static char *longlong_to_string(char *buf, unsigned long long n, size_t len, uint flag, char *signchar)
{
    bef8:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    befc:	e1a08000 	mov	r8, r0
    bf00:	e59d902c 	ldr	r9, [sp, #44]	; 0x2c
    bf04:	e1a04002 	mov	r4, r2
    bf08:	e1a05003 	mov	r5, r3
	size_t pos = len;
	int negative = 0;

	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    bf0c:	e219ab01 	ands	sl, r9, #1024	; 0x400
{
    bf10:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    bf14:	0a000003 	beq	bf28 <longlong_to_string+0x30>
    bf18:	e3520000 	cmp	r2, #0
    bf1c:	e2d53000 	sbcs	r3, r5, #0
	int negative = 0;
    bf20:	a3a0a000 	movge	sl, #0
	if ((flag & SIGNEDFLAG) && (long long)n < 0) {
    bf24:	ba000030 	blt	bfec <longlong_to_string+0xf4>
		negative = 1;
		n = -n;
	}

	buf[--pos] = 0;
    bf28:	e2477001 	sub	r7, r7, #1

	/* only do the math if the number is >= 10 */
	while (n >= 10) {
    bf2c:	e3550000 	cmp	r5, #0
	buf[--pos] = 0;
    bf30:	e3a03000 	mov	r3, #0
	while (n >= 10) {
    bf34:	03540009 	cmpeq	r4, #9
	buf[--pos] = 0;
    bf38:	e088b007 	add	fp, r8, r7
    bf3c:	e7c83007 	strb	r3, [r8, r7]
	while (n >= 10) {
    bf40:	9a000012 	bls	bf90 <longlong_to_string+0x98>
		int digit = n % 10;
    bf44:	e1a00004 	mov	r0, r4
    bf48:	e1a01005 	mov	r1, r5
    bf4c:	e3a0200a 	mov	r2, #10
    bf50:	e3a03000 	mov	r3, #0
    bf54:	fa000679 	blx	d940 <__aeabi_uldivmod>

		n /= 10;
    bf58:	e1a00004 	mov	r0, r4
		int digit = n % 10;
    bf5c:	e1a06002 	mov	r6, r2
		n /= 10;
    bf60:	e1a01005 	mov	r1, r5
    bf64:	e3a0200a 	mov	r2, #10
    bf68:	e3a03000 	mov	r3, #0
    bf6c:	fa000673 	blx	d940 <__aeabi_uldivmod>
	while (n >= 10) {
    bf70:	e3510000 	cmp	r1, #0

		buf[--pos] = digit + '0';
    bf74:	e2866030 	add	r6, r6, #48	; 0x30
		n /= 10;
    bf78:	e1a04000 	mov	r4, r0
    bf7c:	e1a05001 	mov	r5, r1
		buf[--pos] = digit + '0';
    bf80:	e2477001 	sub	r7, r7, #1
	while (n >= 10) {
    bf84:	03500009 	cmpeq	r0, #9
		buf[--pos] = digit + '0';
    bf88:	e56b6001 	strb	r6, [fp, #-1]!
	while (n >= 10) {
    bf8c:	8affffec 	bhi	bf44 <longlong_to_string+0x4c>
	}
	buf[--pos] = n + '0';
    bf90:	e2477001 	sub	r7, r7, #1
    bf94:	e2844030 	add	r4, r4, #48	; 0x30
    bf98:	e0880007 	add	r0, r8, r7

	if (negative)
    bf9c:	e35a0000 	cmp	sl, #0
	buf[--pos] = n + '0';
    bfa0:	e7c84007 	strb	r4, [r8, r7]
	if (negative)
    bfa4:	1a00000c 	bne	bfdc <longlong_to_string+0xe4>
		*signchar = '-';
	else if ((flag & SHOWSIGNFLAG))
    bfa8:	e3190c02 	tst	r9, #512	; 0x200
    bfac:	1a000006 	bne	bfcc <longlong_to_string+0xd4>
		*signchar = '+';
	else if ((flag & BLANKPOSFLAG))
    bfb0:	e3190a02 	tst	r9, #8192	; 0x2000
		*signchar = ' ';
    bfb4:	13a03020 	movne	r3, #32
    bfb8:	159d2030 	ldrne	r2, [sp, #48]	; 0x30
	else
		*signchar = '\0';
    bfbc:	059d3030 	ldreq	r3, [sp, #48]	; 0x30
		*signchar = ' ';
    bfc0:	15c23000 	strbne	r3, [r2]
		*signchar = '\0';
    bfc4:	05c3a000 	strbeq	sl, [r3]

	return &buf[pos];
}
    bfc8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '+';
    bfcc:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    bfd0:	e3a0302b 	mov	r3, #43	; 0x2b
    bfd4:	e5c23000 	strb	r3, [r2]
    bfd8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*signchar = '-';
    bfdc:	e59d2030 	ldr	r2, [sp, #48]	; 0x30
    bfe0:	e3a0302d 	mov	r3, #45	; 0x2d
    bfe4:	e5c23000 	strb	r3, [r2]
    bfe8:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		n = -n;
    bfec:	e2724000 	rsbs	r4, r2, #0
		negative = 1;
    bff0:	e3a0a001 	mov	sl, #1
		n = -n;
    bff4:	e2e55000 	rsc	r5, r5, #0
    bff8:	eaffffca 	b	bf28 <longlong_to_string+0x30>

0000bffc <exponent_to_string>:
__NO_INLINE static size_t exponent_to_string(char *buf, int32_t exponent)
{
	size_t pos = 0;

	/* handle sign */
	if (exponent < 0) {
    bffc:	e3510000 	cmp	r1, #0
{
    c000:	e92d40f0 	push	{r4, r5, r6, r7, lr}
		OUT('-');
		exponent = -exponent;
    c004:	b2611000 	rsblt	r1, r1, #0
		OUT('-');
    c008:	b3a0302d 	movlt	r3, #45	; 0x2d
	} else {
		OUT('+');
    c00c:	a3a0302b 	movge	r3, #43	; 0x2b
	}

	/* see how far we need to bump into the string to print from the right */
	if (exponent >= 1000) pos += 4;
    c010:	e3510ffa 	cmp	r1, #1000	; 0x3e8
{
    c014:	e1a0e000 	mov	lr, r0
		OUT('+');
    c018:	e5c03000 	strb	r3, [r0]
	if (exponent >= 1000) pos += 4;
    c01c:	a3a00005 	movge	r0, #5
    c020:	aa000002 	bge	c030 <exponent_to_string+0x34>
	else if (exponent >= 100) pos += 3;
    c024:	e3510063 	cmp	r1, #99	; 0x63
    c028:	c3a00004 	movgt	r0, #4
    c02c:	da00000f 	ble	c070 <exponent_to_string+0x74>
	else pos++;

	/* print decimal string, from the right */
	uint i = pos;
	do {
		uint digit = (uint32_t)exponent % 10;
    c030:	e30c5ccd 	movw	r5, #52429	; 0xcccd
    c034:	e34c5ccc 	movt	r5, #52428	; 0xcccc

		buf[--i] = digit + '0';

		exponent /= 10;
    c038:	e3064667 	movw	r4, #26215	; 0x6667
    c03c:	e3464666 	movt	r4, #26214	; 0x6666
    c040:	e08ee000 	add	lr, lr, r0
		uint digit = (uint32_t)exponent % 10;
    c044:	e3a0600a 	mov	r6, #10
    c048:	e0832195 	umull	r2, r3, r5, r1
		exponent /= 10;
    c04c:	e1a02fc1 	asr	r2, r1, #31
    c050:	e0cc7194 	smull	r7, ip, r4, r1
		uint digit = (uint32_t)exponent % 10;
    c054:	e1a031a3 	lsr	r3, r3, #3
    c058:	e0631396 	mls	r3, r6, r3, r1
	} while (exponent != 0);
    c05c:	e072114c 	rsbs	r1, r2, ip, asr #2
		buf[--i] = digit + '0';
    c060:	e2833030 	add	r3, r3, #48	; 0x30
    c064:	e56e3001 	strb	r3, [lr, #-1]!
	} while (exponent != 0);
    c068:	1afffff6 	bne	c048 <exponent_to_string+0x4c>
    c06c:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
	else pos++;
    c070:	e3510009 	cmp	r1, #9
    c074:	c3a00003 	movgt	r0, #3
    c078:	d3a00002 	movle	r0, #2
    c07c:	eaffffeb 	b	c030 <exponent_to_string+0x34>

0000c080 <_vsnprintf_output>:
	size_t len;
	size_t pos;
};

static int _vsnprintf_output(const char *str, size_t len, void *state)
{
    c080:	e92d4010 	push	{r4, lr}
	struct _output_args *args = state;

	size_t count = 0;
	while (count < len && *str) {
    c084:	e251e000 	subs	lr, r1, #0
    c088:	0a000016 	beq	c0e8 <_vsnprintf_output+0x68>
    c08c:	e5d01000 	ldrb	r1, [r0]
    c090:	e3510000 	cmp	r1, #0
    c094:	0a000011 	beq	c0e0 <_vsnprintf_output+0x60>
    c098:	e24ee001 	sub	lr, lr, #1
	size_t count = 0;
    c09c:	e3a01000 	mov	r1, #0
    c0a0:	e080e00e 	add	lr, r0, lr
    c0a4:	ea000002 	b	c0b4 <_vsnprintf_output+0x34>
	while (count < len && *str) {
    c0a8:	e5f03001 	ldrb	r3, [r0, #1]!
    c0ac:	e3530000 	cmp	r3, #0
    c0b0:	0a00000a 	beq	c0e0 <_vsnprintf_output+0x60>
		if (args->pos < args->len) {
    c0b4:	e5923008 	ldr	r3, [r2, #8]
			args->outstr[args->pos++] = *str;
		}

		str++;
		count++;
    c0b8:	e2811001 	add	r1, r1, #1
		if (args->pos < args->len) {
    c0bc:	e592c004 	ldr	ip, [r2, #4]
			args->outstr[args->pos++] = *str;
    c0c0:	e2834001 	add	r4, r3, #1
		if (args->pos < args->len) {
    c0c4:	e153000c 	cmp	r3, ip
			args->outstr[args->pos++] = *str;
    c0c8:	35824008 	strcc	r4, [r2, #8]
    c0cc:	3592c000 	ldrcc	ip, [r2]
    c0d0:	35d04000 	ldrbcc	r4, [r0]
    c0d4:	37cc4003 	strbcc	r4, [ip, r3]
	while (count < len && *str) {
    c0d8:	e150000e 	cmp	r0, lr
    c0dc:	1afffff1 	bne	c0a8 <_vsnprintf_output+0x28>
    c0e0:	e1a00001 	mov	r0, r1
	}

	return count;
}
    c0e4:	e8bd8010 	pop	{r4, pc}
	while (count < len && *str) {
    c0e8:	e1a0000e 	mov	r0, lr
    c0ec:	e8bd8010 	pop	{r4, pc}

0000c0f0 <double_to_hexstring.isra.0>:
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    c0f0:	ec532b10 	vmov	r2, r3, d0
    c0f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0f8:	e201bc01 	and	fp, r1, #256	; 0x100
    c0fc:	e24dd014 	sub	sp, sp, #20
	if (exponent == 0x7ff) {
    c100:	e30017ff 	movw	r1, #2047	; 0x7ff
__NO_INLINE static char *double_to_hexstring(char *buf, size_t len, double d, uint flag)
    c104:	e1a05000 	mov	r5, r0
	union double_int u = { d };
    c108:	e1a09003 	mov	r9, r3
	if (neg) {
    c10c:	e2526000 	subs	r6, r2, #0
    c110:	e2d33000 	sbcs	r3, r3, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    c114:	e7ea2a59 	ubfx	r2, r9, #20, #11
		OUT('-');
    c118:	b3a0302d 	movlt	r3, #45	; 0x2d
	size_t pos = 0;
    c11c:	a3a03000 	movge	r3, #0
		OUT('-');
    c120:	b5c03000 	strblt	r3, [r0]
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    c124:	e7f37059 	ubfx	r7, r9, #0, #20
		OUT('-');
    c128:	b3a03001 	movlt	r3, #1
	if (exponent == 0x7ff) {
    c12c:	e1520001 	cmp	r2, r1
    c130:	0a000073 	beq	c304 <double_to_hexstring.isra.0+0x214>
	} else if (exponent == 0) {
    c134:	e3520000 	cmp	r2, #0
    c138:	1a000019 	bne	c1a4 <double_to_hexstring.isra.0+0xb4>
		if (fraction == 0) {
    c13c:	e1962007 	orrs	r2, r6, r7
    c140:	0a0000ab 	beq	c3f4 <double_to_hexstring.isra.0+0x304>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    c144:	e35b0000 	cmp	fp, #0
    c148:	1a0000e1 	bne	c4d4 <double_to_hexstring.isra.0+0x3e4>
    c14c:	e0800003 	add	r0, r0, r3
    c150:	e59f13f8 	ldr	r1, [pc, #1016]	; c550 <double_to_hexstring.isra.0+0x460>
    c154:	e3a02065 	mov	r2, #101	; 0x65
    c158:	e3a0c064 	mov	ip, #100	; 0x64
    c15c:	e08f1001 	add	r1, pc, r1
    c160:	e2833001 	add	r3, r3, #1
    c164:	e2811001 	add	r1, r1, #1
    c168:	e4c0c001 	strb	ip, [r0], #1
    c16c:	e3520000 	cmp	r2, #0
    c170:	0a000005 	beq	c18c <double_to_hexstring.isra.0+0x9c>
    c174:	e1a0c002 	mov	ip, r2
    c178:	e5f12001 	ldrb	r2, [r1, #1]!
    c17c:	e2833001 	add	r3, r3, #1
    c180:	e4c0c001 	strb	ip, [r0], #1
    c184:	e3520000 	cmp	r2, #0
    c188:	1afffff9 	bne	c174 <double_to_hexstring.isra.0+0x84>
    c18c:	e0853003 	add	r3, r5, r3
}
    c190:	e1a00005 	mov	r0, r5
	buf[pos] = 0;
    c194:	e3a02000 	mov	r2, #0
    c198:	e5c32000 	strb	r2, [r3]
}
    c19c:	e28dd014 	add	sp, sp, #20
    c1a0:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int exponent_signed = exponent - 1023;
    c1a4:	e2422fff 	sub	r2, r2, #1020	; 0x3fc
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    c1a8:	e35b0000 	cmp	fp, #0
		int exponent_signed = exponent - 1023;
    c1ac:	e2422003 	sub	r2, r2, #3
    c1b0:	e58d2008 	str	r2, [sp, #8]
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    c1b4:	0a00007a 	beq	c3a4 <double_to_hexstring.isra.0+0x2b4>
    c1b8:	e0800003 	add	r0, r0, r3
    c1bc:	e59f2390 	ldr	r2, [pc, #912]	; c554 <double_to_hexstring.isra.0+0x464>
    c1c0:	e3a01058 	mov	r1, #88	; 0x58
    c1c4:	e3a0c030 	mov	ip, #48	; 0x30
    c1c8:	e08f2002 	add	r2, pc, r2
    c1cc:	e2833001 	add	r3, r3, #1
    c1d0:	e2822001 	add	r2, r2, #1
    c1d4:	e4c0c001 	strb	ip, [r0], #1
    c1d8:	e3510000 	cmp	r1, #0
    c1dc:	0a000005 	beq	c1f8 <double_to_hexstring.isra.0+0x108>
    c1e0:	e1a0c001 	mov	ip, r1
    c1e4:	e5f21001 	ldrb	r1, [r2, #1]!
    c1e8:	e2833001 	add	r3, r3, #1
    c1ec:	e4c0c001 	strb	ip, [r0], #1
    c1f0:	e3510000 	cmp	r1, #0
    c1f4:	1afffff9 	bne	c1e0 <double_to_hexstring.isra.0+0xf0>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    c1f8:	e59f2358 	ldr	r2, [pc, #856]	; c558 <double_to_hexstring.isra.0+0x468>
    c1fc:	e08f2002 	add	r2, pc, r2
    c200:	e58d2004 	str	r2, [sp, #4]
		bool output_dot = false;
    c204:	e3a0a000 	mov	sl, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
    c208:	e3a01030 	mov	r1, #48	; 0x30
		int zero_count = 0;
    c20c:	e1a0c00a 	mov	ip, sl
					OUT('0');
    c210:	e1a0e001 	mov	lr, r1
					OUT('.');
    c214:	e58db00c 	str	fp, [sp, #12]
    c218:	ea000002 	b	c228 <double_to_hexstring.isra.0+0x138>
		for (int i = 52 - 4; i >= 0; i -= 4) {
    c21c:	e2411004 	sub	r1, r1, #4
    c220:	e3710004 	cmn	r1, #4
    c224:	0a00002d 	beq	c2e0 <double_to_hexstring.isra.0+0x1f0>
			uint digit = (fraction >> i) & 0xf;
    c228:	e2610020 	rsb	r0, r1, #32
    c22c:	e2418020 	sub	r8, r1, #32
    c230:	e1a02136 	lsr	r2, r6, r1
    c234:	e2834001 	add	r4, r3, #1
    c238:	e1822017 	orr	r2, r2, r7, lsl r0
    c23c:	e0850004 	add	r0, r5, r4
    c240:	e1822837 	orr	r2, r2, r7, lsr r8
    c244:	e0858003 	add	r8, r5, r3
			if (digit == 0) {
    c248:	e212200f 	ands	r2, r2, #15
				zero_count++;
    c24c:	028cc001 	addeq	ip, ip, #1
			if (digit == 0) {
    c250:	0afffff1 	beq	c21c <double_to_hexstring.isra.0+0x12c>
    c254:	e2839002 	add	r9, r3, #2
				if (!output_dot) {
    c258:	e35a0000 	cmp	sl, #0
    c25c:	e085a009 	add	sl, r5, r9
    c260:	1a000008 	bne	c288 <double_to_hexstring.isra.0+0x198>
    c264:	e283b003 	add	fp, r3, #3
					OUT('.');
    c268:	e3a0302e 	mov	r3, #46	; 0x2e
    c26c:	e5c83000 	strb	r3, [r8]
    c270:	e1a03004 	mov	r3, r4
    c274:	e1a08000 	mov	r8, r0
    c278:	e1a04009 	mov	r4, r9
    c27c:	e1a0000a 	mov	r0, sl
    c280:	e1a0900b 	mov	r9, fp
    c284:	e085a00b 	add	sl, r5, fp
				while (zero_count > 0) {
    c288:	e35c0000 	cmp	ip, #0
    c28c:	0a000068 	beq	c434 <double_to_hexstring.isra.0+0x344>
    c290:	e085400c 	add	r4, r5, ip
    c294:	e0850003 	add	r0, r5, r3
    c298:	e0844003 	add	r4, r4, r3
					OUT('0');
    c29c:	e4c0e001 	strb	lr, [r0], #1
				while (zero_count > 0) {
    c2a0:	e1540000 	cmp	r4, r0
    c2a4:	1afffffc 	bne	c29c <double_to_hexstring.isra.0+0x1ac>
    c2a8:	e08cc003 	add	ip, ip, r3
    c2ac:	e28c3001 	add	r3, ip, #1
    c2b0:	e28c4002 	add	r4, ip, #2
    c2b4:	e0858003 	add	r8, r5, r3
    c2b8:	e085c00c 	add	ip, r5, ip
    c2bc:	e0850004 	add	r0, r5, r4
				buf[pos++] = table[digit];
    c2c0:	e59d9004 	ldr	r9, [sp, #4]
		for (int i = 52 - 4; i >= 0; i -= 4) {
    c2c4:	e2411004 	sub	r1, r1, #4
				buf[pos++] = table[digit];
    c2c8:	e3a0a001 	mov	sl, #1
		for (int i = 52 - 4; i >= 0; i -= 4) {
    c2cc:	e3710004 	cmn	r1, #4
				buf[pos++] = table[digit];
    c2d0:	e7d92002 	ldrb	r2, [r9, r2]
    c2d4:	e5cc2000 	strb	r2, [ip]
    c2d8:	e3a0c000 	mov	ip, #0
		for (int i = 52 - 4; i >= 0; i -= 4) {
    c2dc:	1affffd1 	bne	c228 <double_to_hexstring.isra.0+0x138>
    c2e0:	e59db00c 	ldr	fp, [sp, #12]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    c2e4:	e59d1008 	ldr	r1, [sp, #8]
		buf[pos++] = (flag & CAPSFLAG) ? 'P' : 'p';
    c2e8:	e35b0000 	cmp	fp, #0
    c2ec:	03a03070 	moveq	r3, #112	; 0x70
    c2f0:	13a03050 	movne	r3, #80	; 0x50
    c2f4:	e5c83000 	strb	r3, [r8]
		pos += exponent_to_string(&buf[pos], exponent_signed);
    c2f8:	ebffff3f 	bl	bffc <exponent_to_string>
    c2fc:	e0803004 	add	r3, r0, r4
    c300:	eaffffa1 	b	c18c <double_to_hexstring.isra.0+0x9c>
		if (fraction == 0) {
    c304:	e1962007 	orrs	r2, r6, r7
    c308:	1a000012 	bne	c358 <double_to_hexstring.isra.0+0x268>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    c30c:	e35b0000 	cmp	fp, #0
    c310:	1a00004d 	bne	c44c <double_to_hexstring.isra.0+0x35c>
    c314:	e0800003 	add	r0, r0, r3
    c318:	e59f123c 	ldr	r1, [pc, #572]	; c55c <double_to_hexstring.isra.0+0x46c>
    c31c:	e3a0206e 	mov	r2, #110	; 0x6e
    c320:	e3a0c069 	mov	ip, #105	; 0x69
    c324:	e08f1001 	add	r1, pc, r1
    c328:	e2833001 	add	r3, r3, #1
    c32c:	e2811001 	add	r1, r1, #1
    c330:	e4c0c001 	strb	ip, [r0], #1
    c334:	e3520000 	cmp	r2, #0
    c338:	0affff93 	beq	c18c <double_to_hexstring.isra.0+0x9c>
    c33c:	e1a0c002 	mov	ip, r2
    c340:	e5f12001 	ldrb	r2, [r1, #1]!
    c344:	e2833001 	add	r3, r3, #1
    c348:	e4c0c001 	strb	ip, [r0], #1
    c34c:	e3520000 	cmp	r2, #0
    c350:	1afffff9 	bne	c33c <double_to_hexstring.isra.0+0x24c>
    c354:	eaffff8c 	b	c18c <double_to_hexstring.isra.0+0x9c>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    c358:	e35b0000 	cmp	fp, #0
    c35c:	1a00004b 	bne	c490 <double_to_hexstring.isra.0+0x3a0>
    c360:	e0800003 	add	r0, r0, r3
    c364:	e59f11f4 	ldr	r1, [pc, #500]	; c560 <double_to_hexstring.isra.0+0x470>
    c368:	e3a02061 	mov	r2, #97	; 0x61
    c36c:	e3a0c06e 	mov	ip, #110	; 0x6e
    c370:	e08f1001 	add	r1, pc, r1
    c374:	e2833001 	add	r3, r3, #1
    c378:	e2811001 	add	r1, r1, #1
    c37c:	e4c0c001 	strb	ip, [r0], #1
    c380:	e3520000 	cmp	r2, #0
    c384:	0affff80 	beq	c18c <double_to_hexstring.isra.0+0x9c>
    c388:	e1a0c002 	mov	ip, r2
    c38c:	e5f12001 	ldrb	r2, [r1, #1]!
    c390:	e2833001 	add	r3, r3, #1
    c394:	e4c0c001 	strb	ip, [r0], #1
    c398:	e3520000 	cmp	r2, #0
    c39c:	1afffff9 	bne	c388 <double_to_hexstring.isra.0+0x298>
    c3a0:	eaffff79 	b	c18c <double_to_hexstring.isra.0+0x9c>
    c3a4:	e0800003 	add	r0, r0, r3
    c3a8:	e59f21b4 	ldr	r2, [pc, #436]	; c564 <double_to_hexstring.isra.0+0x474>
		if (flag & CAPSFLAG) OUTSTR("0X1"); else OUTSTR("0x1");
    c3ac:	e3a01078 	mov	r1, #120	; 0x78
    c3b0:	e3a0c030 	mov	ip, #48	; 0x30
    c3b4:	e08f2002 	add	r2, pc, r2
    c3b8:	e2833001 	add	r3, r3, #1
    c3bc:	e2822001 	add	r2, r2, #1
    c3c0:	e4c0c001 	strb	ip, [r0], #1
    c3c4:	e3510000 	cmp	r1, #0
    c3c8:	0a000005 	beq	c3e4 <double_to_hexstring.isra.0+0x2f4>
    c3cc:	e1a0c001 	mov	ip, r1
    c3d0:	e5f21001 	ldrb	r1, [r2, #1]!
    c3d4:	e2833001 	add	r3, r3, #1
    c3d8:	e4c0c001 	strb	ip, [r0], #1
    c3dc:	e3510000 	cmp	r1, #0
    c3e0:	1afffff9 	bne	c3cc <double_to_hexstring.isra.0+0x2dc>
		const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    c3e4:	e59f217c 	ldr	r2, [pc, #380]	; c568 <double_to_hexstring.isra.0+0x478>
    c3e8:	e08f2002 	add	r2, pc, r2
    c3ec:	e58d2004 	str	r2, [sp, #4]
    c3f0:	eaffff83 	b	c204 <double_to_hexstring.isra.0+0x114>
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    c3f4:	e35b0000 	cmp	fp, #0
    c3f8:	1a000046 	bne	c518 <double_to_hexstring.isra.0+0x428>
    c3fc:	e59f1168 	ldr	r1, [pc, #360]	; c56c <double_to_hexstring.isra.0+0x47c>
    c400:	e0800003 	add	r0, r0, r3
    c404:	e3a02078 	mov	r2, #120	; 0x78
    c408:	e3a0c030 	mov	ip, #48	; 0x30
    c40c:	e08f1001 	add	r1, pc, r1
    c410:	e2811001 	add	r1, r1, #1
    c414:	ea000001 	b	c420 <double_to_hexstring.isra.0+0x330>
    c418:	e1a0c002 	mov	ip, r2
    c41c:	e5f12001 	ldrb	r2, [r1, #1]!
    c420:	e2833001 	add	r3, r3, #1
    c424:	e4c0c001 	strb	ip, [r0], #1
    c428:	e3520000 	cmp	r2, #0
    c42c:	1afffff9 	bne	c418 <double_to_hexstring.isra.0+0x328>
    c430:	eaffff55 	b	c18c <double_to_hexstring.isra.0+0x9c>
				while (zero_count > 0) {
    c434:	e1a0c008 	mov	ip, r8
    c438:	e1a03004 	mov	r3, r4
    c43c:	e1a08000 	mov	r8, r0
    c440:	e1a04009 	mov	r4, r9
    c444:	e1a0000a 	mov	r0, sl
    c448:	eaffff9c 	b	c2c0 <double_to_hexstring.isra.0+0x1d0>
    c44c:	e0800003 	add	r0, r0, r3
    c450:	e59f1118 	ldr	r1, [pc, #280]	; c570 <double_to_hexstring.isra.0+0x480>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    c454:	e3a0204e 	mov	r2, #78	; 0x4e
    c458:	e3a0c049 	mov	ip, #73	; 0x49
    c45c:	e08f1001 	add	r1, pc, r1
    c460:	e2833001 	add	r3, r3, #1
    c464:	e2811001 	add	r1, r1, #1
    c468:	e4c0c001 	strb	ip, [r0], #1
    c46c:	e3520000 	cmp	r2, #0
    c470:	0affff45 	beq	c18c <double_to_hexstring.isra.0+0x9c>
    c474:	e1a0c002 	mov	ip, r2
    c478:	e5f12001 	ldrb	r2, [r1, #1]!
    c47c:	e2833001 	add	r3, r3, #1
    c480:	e4c0c001 	strb	ip, [r0], #1
    c484:	e3520000 	cmp	r2, #0
    c488:	1afffff9 	bne	c474 <double_to_hexstring.isra.0+0x384>
    c48c:	eaffff3e 	b	c18c <double_to_hexstring.isra.0+0x9c>
    c490:	e0800003 	add	r0, r0, r3
    c494:	e59f10d8 	ldr	r1, [pc, #216]	; c574 <double_to_hexstring.isra.0+0x484>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    c498:	e3a02041 	mov	r2, #65	; 0x41
    c49c:	e3a0c04e 	mov	ip, #78	; 0x4e
    c4a0:	e08f1001 	add	r1, pc, r1
    c4a4:	e2833001 	add	r3, r3, #1
    c4a8:	e2811001 	add	r1, r1, #1
    c4ac:	e4c0c001 	strb	ip, [r0], #1
    c4b0:	e3520000 	cmp	r2, #0
    c4b4:	0affff34 	beq	c18c <double_to_hexstring.isra.0+0x9c>
    c4b8:	e1a0c002 	mov	ip, r2
    c4bc:	e5f12001 	ldrb	r2, [r1, #1]!
    c4c0:	e2833001 	add	r3, r3, #1
    c4c4:	e4c0c001 	strb	ip, [r0], #1
    c4c8:	e3520000 	cmp	r2, #0
    c4cc:	1afffff9 	bne	c4b8 <double_to_hexstring.isra.0+0x3c8>
    c4d0:	eaffff2d 	b	c18c <double_to_hexstring.isra.0+0x9c>
    c4d4:	e0800003 	add	r0, r0, r3
    c4d8:	e59f1098 	ldr	r1, [pc, #152]	; c578 <double_to_hexstring.isra.0+0x488>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    c4dc:	e3a02045 	mov	r2, #69	; 0x45
    c4e0:	e3a0c044 	mov	ip, #68	; 0x44
    c4e4:	e08f1001 	add	r1, pc, r1
    c4e8:	e2833001 	add	r3, r3, #1
    c4ec:	e2811001 	add	r1, r1, #1
    c4f0:	e4c0c001 	strb	ip, [r0], #1
    c4f4:	e3520000 	cmp	r2, #0
    c4f8:	0affff23 	beq	c18c <double_to_hexstring.isra.0+0x9c>
    c4fc:	e1a0c002 	mov	ip, r2
    c500:	e5f12001 	ldrb	r2, [r1, #1]!
    c504:	e2833001 	add	r3, r3, #1
    c508:	e4c0c001 	strb	ip, [r0], #1
    c50c:	e3520000 	cmp	r2, #0
    c510:	1afffff9 	bne	c4fc <double_to_hexstring.isra.0+0x40c>
    c514:	eaffff1c 	b	c18c <double_to_hexstring.isra.0+0x9c>
    c518:	e59f105c 	ldr	r1, [pc, #92]	; c57c <double_to_hexstring.isra.0+0x48c>
    c51c:	e0800003 	add	r0, r0, r3
			if (flag & CAPSFLAG) OUTSTR("0X0P+0"); else OUTSTR("0x0p+0");
    c520:	e3a02058 	mov	r2, #88	; 0x58
    c524:	e3a0c030 	mov	ip, #48	; 0x30
    c528:	e08f1001 	add	r1, pc, r1
    c52c:	e2811001 	add	r1, r1, #1
    c530:	ea000001 	b	c53c <double_to_hexstring.isra.0+0x44c>
    c534:	e1a0c002 	mov	ip, r2
    c538:	e5f12001 	ldrb	r2, [r1, #1]!
    c53c:	e2833001 	add	r3, r3, #1
    c540:	e4c0c001 	strb	ip, [r0], #1
    c544:	e3520000 	cmp	r2, #0
    c548:	1afffff9 	bne	c534 <double_to_hexstring.isra.0+0x444>
    c54c:	eaffff0e 	b	c18c <double_to_hexstring.isra.0+0x9c>
    c550:	00001f38 	.word	0x00001f38
    c554:	00001ed8 	.word	0x00001ed8
    c558:	00001ecc 	.word	0x00001ecc
    c55c:	00001d50 	.word	0x00001d50
    c560:	00001d0c 	.word	0x00001d0c
    c564:	00001ce8 	.word	0x00001ce8
    c568:	00001cd0 	.word	0x00001cd0
    c56c:	00001c78 	.word	0x00001c78
    c570:	00001c1c 	.word	0x00001c1c
    c574:	00001be0 	.word	0x00001be0
    c578:	00001bb4 	.word	0x00001bb4
    c57c:	00001b64 	.word	0x00001b64

0000c580 <longlong_to_hexstring.constprop.1>:
__NO_INLINE static char *longlong_to_hexstring(char *buf, unsigned long long u, size_t len, uint flag)
    c580:	e92d4030 	push	{r4, r5, lr}
    c584:	e59d100c 	ldr	r1, [sp, #12]
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    c588:	e3110c01 	tst	r1, #256	; 0x100
    c58c:	1a000010 	bne	c5d4 <longlong_to_hexstring.constprop.1+0x54>
    c590:	e59f5048 	ldr	r5, [pc, #72]	; c5e0 <longlong_to_hexstring.constprop.1+0x60>
    c594:	e08f5005 	add	r5, pc, r5
    c598:	e280c01e 	add	ip, r0, #30
	buf[--pos] = 0;
    c59c:	e3a01000 	mov	r1, #0
    c5a0:	e5c0101f 	strb	r1, [r0, #31]
		unsigned int digit = u % 16;
    c5a4:	e202400f 	and	r4, r2, #15
		u /= 16;
    c5a8:	e1a01222 	lsr	r1, r2, #4
    c5ac:	e1811e03 	orr	r1, r1, r3, lsl #28
    c5b0:	e1a0e223 	lsr	lr, r3, #4
    c5b4:	e1a02001 	mov	r2, r1
    c5b8:	e1a0300e 	mov	r3, lr
		buf[--pos] = table[digit];
    c5bc:	e7d51004 	ldrb	r1, [r5, r4]
    c5c0:	e1a0000c 	mov	r0, ip
	} while (u != 0);
    c5c4:	e192e003 	orrs	lr, r2, r3
		buf[--pos] = table[digit];
    c5c8:	e44c1001 	strb	r1, [ip], #-1
	} while (u != 0);
    c5cc:	1afffff4 	bne	c5a4 <longlong_to_hexstring.constprop.1+0x24>
    c5d0:	e8bd8030 	pop	{r4, r5, pc}
	const char *table = (flag & CAPSFLAG) ? hextable_caps : hextable;
    c5d4:	e59f5008 	ldr	r5, [pc, #8]	; c5e4 <longlong_to_hexstring.constprop.1+0x64>
    c5d8:	e08f5005 	add	r5, pc, r5
    c5dc:	eaffffed 	b	c598 <longlong_to_hexstring.constprop.1+0x18>
    c5e0:	00001b24 	.word	0x00001b24
    c5e4:	00001af0 	.word	0x00001af0

0000c5e8 <double_to_string.constprop.2>:
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c5e8:	e59fc3d0 	ldr	ip, [pc, #976]	; c9c0 <double_to_string.constprop.2+0x3d8>
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    c5ec:	ee102a10 	vmov	r2, s0
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c5f0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c5f4:	ec598b10 	vmov	r8, r9, d0
    c5f8:	e59fe3c4 	ldr	lr, [pc, #964]	; c9c4 <double_to_string.constprop.2+0x3dc>
    c5fc:	e08fc00c 	add	ip, pc, ip
    c600:	e1a04000 	mov	r4, r0
    c604:	e24dd01c 	sub	sp, sp, #28
    c608:	e1a0000c 	mov	r0, ip
	if (neg) {
    c60c:	e3580000 	cmp	r8, #0
	uint32_t exponent = (u.i >> 52) & 0x7ff;
    c610:	e7ea0a59 	ubfx	r0, r9, #20, #11
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c614:	e79c500e 	ldr	r5, [ip, lr]
	if (neg) {
    c618:	e2d9e000 	sbcs	lr, r9, #0
	bool neg = !!(u.i & (1ULL << 63));
    c61c:	e1a07009 	mov	r7, r9
	uint64_t fraction = (u.i & ((1ULL << 52) - 1));
    c620:	e7f33059 	ubfx	r3, r9, #0, #20
	if (exponent == 0x7ff) {
    c624:	e300e7ff 	movw	lr, #2047	; 0x7ff
		d = -d;
    c628:	b2299102 	eorlt	r9, r9, #-2147483648	; 0x80000000
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c62c:	e595c000 	ldr	ip, [r5]
	bool neg = !!(u.i & (1ULL << 63));
    c630:	ee106a10 	vmov	r6, s0
__NO_INLINE static char *double_to_string(char *buf, size_t len, double d, uint flag)
    c634:	e58dc014 	str	ip, [sp, #20]
		OUT('-');
    c638:	b3a0c02d 	movlt	ip, #45	; 0x2d
	size_t pos = 0;
    c63c:	a3a0c000 	movge	ip, #0
		OUT('-');
    c640:	b5c4c000 	strblt	ip, [r4]
    c644:	b3a0c001 	movlt	ip, #1
	if (exponent == 0x7ff) {
    c648:	e150000e 	cmp	r0, lr
    c64c:	0a000030 	beq	c714 <double_to_string.constprop.2+0x12c>
	} else if (exponent == 0) {
    c650:	e3500000 	cmp	r0, #0
    c654:	1a00001c 	bne	c6cc <double_to_string.constprop.2+0xe4>
		if (fraction == 0) {
    c658:	e1923003 	orrs	r3, r2, r3
    c65c:	0a00004f 	beq	c7a0 <double_to_string.constprop.2+0x1b8>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    c660:	e3110c01 	tst	r1, #256	; 0x100
    c664:	1a0000a5 	bne	c900 <double_to_string.constprop.2+0x318>
    c668:	e084100c 	add	r1, r4, ip
    c66c:	e59f3354 	ldr	r3, [pc, #852]	; c9c8 <double_to_string.constprop.2+0x3e0>
    c670:	e3a02065 	mov	r2, #101	; 0x65
    c674:	e3a00064 	mov	r0, #100	; 0x64
    c678:	e08f3003 	add	r3, pc, r3
    c67c:	e28cc001 	add	ip, ip, #1
    c680:	e2833001 	add	r3, r3, #1
    c684:	e4c10001 	strb	r0, [r1], #1
    c688:	e3520000 	cmp	r2, #0
    c68c:	0a000005 	beq	c6a8 <double_to_string.constprop.2+0xc0>
    c690:	e1a00002 	mov	r0, r2
    c694:	e5f32001 	ldrb	r2, [r3, #1]!
    c698:	e28cc001 	add	ip, ip, #1
    c69c:	e4c10001 	strb	r0, [r1], #1
    c6a0:	e3520000 	cmp	r2, #0
    c6a4:	1afffff9 	bne	c690 <double_to_string.constprop.2+0xa8>
	buf[pos] = 0;
    c6a8:	e1a00004 	mov	r0, r4
    c6ac:	e3a03000 	mov	r3, #0
    c6b0:	e7c4300c 	strb	r3, [r4, ip]
}
    c6b4:	e59d2014 	ldr	r2, [sp, #20]
    c6b8:	e5953000 	ldr	r3, [r5]
    c6bc:	e1520003 	cmp	r2, r3
    c6c0:	1a0000bb 	bne	c9b4 <double_to_string.constprop.2+0x3cc>
    c6c4:	e28dd01c 	add	sp, sp, #28
    c6c8:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (exponent_signed < -52 || exponent_signed > 52) {
    c6cc:	e240eff2 	sub	lr, r0, #968	; 0x3c8
    c6d0:	e24ee003 	sub	lr, lr, #3
    c6d4:	e35e0068 	cmp	lr, #104	; 0x68
    c6d8:	9a00003e 	bls	c7d8 <double_to_string.constprop.2+0x1f0>
    c6dc:	e59f22e8 	ldr	r2, [pc, #744]	; c9cc <double_to_string.constprop.2+0x3e4>
    c6e0:	e084100c 	add	r1, r4, ip
    c6e4:	e3a03072 	mov	r3, #114	; 0x72
			OUTSTR("<range>");
    c6e8:	e3a0003c 	mov	r0, #60	; 0x3c
    c6ec:	e08f2002 	add	r2, pc, r2
    c6f0:	e2822001 	add	r2, r2, #1
    c6f4:	ea000001 	b	c700 <double_to_string.constprop.2+0x118>
    c6f8:	e1a00003 	mov	r0, r3
    c6fc:	e5f23001 	ldrb	r3, [r2, #1]!
    c700:	e28cc001 	add	ip, ip, #1
    c704:	e4c10001 	strb	r0, [r1], #1
    c708:	e3530000 	cmp	r3, #0
    c70c:	1afffff9 	bne	c6f8 <double_to_string.constprop.2+0x110>
    c710:	eaffffe4 	b	c6a8 <double_to_string.constprop.2+0xc0>
    c714:	e2011c01 	and	r1, r1, #256	; 0x100
		if (fraction == 0) {
    c718:	e1923003 	orrs	r3, r2, r3
    c71c:	1a00000f 	bne	c760 <double_to_string.constprop.2+0x178>
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    c720:	e3510000 	cmp	r1, #0
    c724:	1a000067 	bne	c8c8 <double_to_string.constprop.2+0x2e0>
    c728:	e59f22a0 	ldr	r2, [pc, #672]	; c9d0 <double_to_string.constprop.2+0x3e8>
    c72c:	e084100c 	add	r1, r4, ip
    c730:	e3a0306e 	mov	r3, #110	; 0x6e
    c734:	e3a00069 	mov	r0, #105	; 0x69
    c738:	e08f2002 	add	r2, pc, r2
    c73c:	e2822001 	add	r2, r2, #1
    c740:	ea000001 	b	c74c <double_to_string.constprop.2+0x164>
    c744:	e1a00003 	mov	r0, r3
    c748:	e5f23001 	ldrb	r3, [r2, #1]!
    c74c:	e28cc001 	add	ip, ip, #1
    c750:	e4c10001 	strb	r0, [r1], #1
    c754:	e3530000 	cmp	r3, #0
    c758:	1afffff9 	bne	c744 <double_to_string.constprop.2+0x15c>
    c75c:	eaffffd1 	b	c6a8 <double_to_string.constprop.2+0xc0>
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    c760:	e3510000 	cmp	r1, #0
    c764:	1a000049 	bne	c890 <double_to_string.constprop.2+0x2a8>
    c768:	e59f2264 	ldr	r2, [pc, #612]	; c9d4 <double_to_string.constprop.2+0x3ec>
    c76c:	e084100c 	add	r1, r4, ip
    c770:	e3a03061 	mov	r3, #97	; 0x61
    c774:	e3a0006e 	mov	r0, #110	; 0x6e
    c778:	e08f2002 	add	r2, pc, r2
    c77c:	e2822001 	add	r2, r2, #1
    c780:	ea000001 	b	c78c <double_to_string.constprop.2+0x1a4>
    c784:	e1a00003 	mov	r0, r3
    c788:	e5f23001 	ldrb	r3, [r2, #1]!
    c78c:	e28cc001 	add	ip, ip, #1
    c790:	e4c10001 	strb	r0, [r1], #1
    c794:	e3530000 	cmp	r3, #0
    c798:	1afffff9 	bne	c784 <double_to_string.constprop.2+0x19c>
    c79c:	eaffffc1 	b	c6a8 <double_to_string.constprop.2+0xc0>
    c7a0:	e59f2230 	ldr	r2, [pc, #560]	; c9d8 <double_to_string.constprop.2+0x3f0>
    c7a4:	e084100c 	add	r1, r4, ip
		if (fraction == 0) {
    c7a8:	e3a0302e 	mov	r3, #46	; 0x2e
			OUTSTR("0.000000");
    c7ac:	e3a00030 	mov	r0, #48	; 0x30
    c7b0:	e08f2002 	add	r2, pc, r2
    c7b4:	e2822001 	add	r2, r2, #1
    c7b8:	ea000001 	b	c7c4 <double_to_string.constprop.2+0x1dc>
    c7bc:	e1a00003 	mov	r0, r3
    c7c0:	e5f23001 	ldrb	r3, [r2, #1]!
    c7c4:	e28cc001 	add	ip, ip, #1
    c7c8:	e4c10001 	strb	r0, [r1], #1
    c7cc:	e3530000 	cmp	r3, #0
    c7d0:	1afffff9 	bne	c7bc <double_to_string.constprop.2+0x1d4>
    c7d4:	eaffffb3 	b	c6a8 <double_to_string.constprop.2+0xc0>
			OUTREV(0);
    c7d8:	e1a0c004 	mov	ip, r4
    c7dc:	e284a018 	add	sl, r4, #24
				OUTREV('0');
    c7e0:	e3a0e030 	mov	lr, #48	; 0x30
			OUTREV(0);
    c7e4:	e3a0b000 	mov	fp, #0
    c7e8:	e5ecb01f 	strb	fp, [ip, #31]!
				OUTREV('0');
    c7ec:	e56ce001 	strb	lr, [ip, #-1]!
			for (int i = 0; i <= 6; i++)
    c7f0:	e15c000a 	cmp	ip, sl
    c7f4:	1afffffc 	bne	c7ec <double_to_string.constprop.2+0x204>
		int exponent_signed = exponent - 1023;
    c7f8:	e2400fff 	sub	r0, r0, #1020	; 0x3fc
    c7fc:	e2400003 	sub	r0, r0, #3
			if (exponent_signed >= 0) {
    c800:	e3500000 	cmp	r0, #0
				OUTREV('0');
    c804:	b5c4e017 	strblt	lr, [r4, #23]
    c808:	b3a0b017 	movlt	fp, #23
			if (exponent_signed >= 0) {
    c80c:	aa00004c 	bge	c944 <double_to_string.constprop.2+0x35c>
				uint32_t frac = ((d - u) * 1000000) + .5;
    c810:	ed9f6b68 	vldr	d6, [pc, #416]	; c9b8 <double_to_string.constprop.2+0x3d0>
    c814:	ec498b15 	vmov	d5, r8, r9
    c818:	eeb67b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
			buf[decimal_spot] = '.';
    c81c:	e3a0302e 	mov	r3, #46	; 0x2e
    c820:	e5c43020 	strb	r3, [r4, #32]
				uint32_t frac = ((d - u) * 1000000) + .5;
    c824:	ee057b06 	vmla.f64	d7, d5, d6
    c828:	eefc7bc7 	vcvt.u32.f64	s15, d7
    c82c:	ee172a90 	vmov	r2, s15
				while (frac != 0) {
    c830:	e3520000 	cmp	r2, #0
    c834:	0a00000a 	beq	c864 <double_to_string.constprop.2+0x27c>
					uint digit = frac % 10;
    c838:	e30ccccd 	movw	ip, #52429	; 0xcccd
    c83c:	e34ccccc 	movt	ip, #52428	; 0xcccc
    c840:	e2840027 	add	r0, r4, #39	; 0x27
    c844:	e3a0e00a 	mov	lr, #10
    c848:	e083129c 	umull	r1, r3, ip, r2
    c84c:	e1a031a3 	lsr	r3, r3, #3
    c850:	e061239e 	mls	r1, lr, r3, r2
				while (frac != 0) {
    c854:	e2532000 	subs	r2, r3, #0
					buf[--i] = digit + '0';
    c858:	e2813030 	add	r3, r1, #48	; 0x30
    c85c:	e5603001 	strb	r3, [r0, #-1]!
				while (frac != 0) {
    c860:	1afffff8 	bne	c848 <double_to_string.constprop.2+0x260>
			if (neg)
    c864:	e3560000 	cmp	r6, #0
    c868:	e2d73000 	sbcs	r3, r7, #0
    c86c:	a084000b 	addge	r0, r4, fp
    c870:	aaffff8f 	bge	c6b4 <double_to_string.constprop.2+0xcc>
				OUTREV('-');
    c874:	e35b0000 	cmp	fp, #0
    c878:	124bb001 	subne	fp, fp, #1
    c87c:	13a0302d 	movne	r3, #45	; 0x2d
    c880:	1084000b 	addne	r0, r4, fp
    c884:	01a00004 	moveq	r0, r4
    c888:	17c4300b 	strbne	r3, [r4, fp]
    c88c:	eaffff88 	b	c6b4 <double_to_string.constprop.2+0xcc>
    c890:	e59f2144 	ldr	r2, [pc, #324]	; c9dc <double_to_string.constprop.2+0x3f4>
    c894:	e084100c 	add	r1, r4, ip
			if (flag & CAPSFLAG) OUTSTR("NAN"); else OUTSTR("nan");
    c898:	e3a03041 	mov	r3, #65	; 0x41
    c89c:	e3a0004e 	mov	r0, #78	; 0x4e
    c8a0:	e08f2002 	add	r2, pc, r2
    c8a4:	e2822001 	add	r2, r2, #1
    c8a8:	ea000001 	b	c8b4 <double_to_string.constprop.2+0x2cc>
    c8ac:	e1a00003 	mov	r0, r3
    c8b0:	e5f23001 	ldrb	r3, [r2, #1]!
    c8b4:	e28cc001 	add	ip, ip, #1
    c8b8:	e4c10001 	strb	r0, [r1], #1
    c8bc:	e3530000 	cmp	r3, #0
    c8c0:	1afffff9 	bne	c8ac <double_to_string.constprop.2+0x2c4>
    c8c4:	eaffff77 	b	c6a8 <double_to_string.constprop.2+0xc0>
    c8c8:	e59f2110 	ldr	r2, [pc, #272]	; c9e0 <double_to_string.constprop.2+0x3f8>
    c8cc:	e084100c 	add	r1, r4, ip
			if (flag & CAPSFLAG) OUTSTR("INF"); else OUTSTR("inf");
    c8d0:	e3a0304e 	mov	r3, #78	; 0x4e
    c8d4:	e3a00049 	mov	r0, #73	; 0x49
    c8d8:	e08f2002 	add	r2, pc, r2
    c8dc:	e2822001 	add	r2, r2, #1
    c8e0:	ea000001 	b	c8ec <double_to_string.constprop.2+0x304>
    c8e4:	e1a00003 	mov	r0, r3
    c8e8:	e5f23001 	ldrb	r3, [r2, #1]!
    c8ec:	e28cc001 	add	ip, ip, #1
    c8f0:	e4c10001 	strb	r0, [r1], #1
    c8f4:	e3530000 	cmp	r3, #0
    c8f8:	1afffff9 	bne	c8e4 <double_to_string.constprop.2+0x2fc>
    c8fc:	eaffff69 	b	c6a8 <double_to_string.constprop.2+0xc0>
    c900:	e084100c 	add	r1, r4, ip
    c904:	e59f30d8 	ldr	r3, [pc, #216]	; c9e4 <double_to_string.constprop.2+0x3fc>
			if (flag & CAPSFLAG) OUTSTR("DEN"); else OUTSTR("den");
    c908:	e3a02045 	mov	r2, #69	; 0x45
    c90c:	e3a00044 	mov	r0, #68	; 0x44
    c910:	e08f3003 	add	r3, pc, r3
    c914:	e28cc001 	add	ip, ip, #1
    c918:	e2833001 	add	r3, r3, #1
    c91c:	e4c10001 	strb	r0, [r1], #1
    c920:	e3520000 	cmp	r2, #0
    c924:	0affff5f 	beq	c6a8 <double_to_string.constprop.2+0xc0>
    c928:	e1a00002 	mov	r0, r2
    c92c:	e5f32001 	ldrb	r2, [r3, #1]!
    c930:	e28cc001 	add	ip, ip, #1
    c934:	e4c10001 	strb	r0, [r1], #1
    c938:	e3520000 	cmp	r2, #0
    c93c:	1afffff9 	bne	c928 <double_to_string.constprop.2+0x340>
    c940:	eaffff58 	b	c6a8 <double_to_string.constprop.2+0xc0>
				u >>= (52 - exponent_signed);
    c944:	e2600034 	rsb	r0, r0, #52	; 0x34
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    c948:	e28dc018 	add	ip, sp, #24
				u >>= (52 - exponent_signed);
    c94c:	e260e020 	rsb	lr, r0, #32
				u |= (1ULL<<52);
    c950:	e383b601 	orr	fp, r3, #1048576	; 0x100000
				u >>= (52 - exponent_signed);
    c954:	e1a0a032 	lsr	sl, r2, r0
    c958:	e2403020 	sub	r3, r0, #32
    c95c:	e18aae1b 	orr	sl, sl, fp, lsl lr
				u |= (1ULL<<52);
    c960:	e3a02000 	mov	r2, #0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    c964:	e56c2005 	strb	r2, [ip, #-5]!
				u >>= (52 - exponent_signed);
    c968:	e18aa33b 	orr	sl, sl, fp, lsr r3
    c96c:	e1a0b03b 	lsr	fp, fp, r0
				char *s = longlong_to_string(buf, u, pos + 1, flag, &(char){0});
    c970:	e58d1004 	str	r1, [sp, #4]
    c974:	e1a0300b 	mov	r3, fp
    c978:	e3a01019 	mov	r1, #25
    c97c:	e1a0200a 	mov	r2, sl
    c980:	e58dc008 	str	ip, [sp, #8]
    c984:	e58d1000 	str	r1, [sp]
    c988:	e1a00004 	mov	r0, r4
    c98c:	ebfffd59 	bl	bef8 <longlong_to_string>
    c990:	e1a0100b 	mov	r1, fp
				pos = s - buf;
    c994:	e040b004 	sub	fp, r0, r4
    c998:	e1a0000a 	mov	r0, sl
    c99c:	fa0003cc 	blx	d8d4 <__aeabi_ul2d>
    c9a0:	ec498b17 	vmov	d7, r8, r9
    c9a4:	ec410b16 	vmov	d6, r0, r1
    c9a8:	ee377b46 	vsub.f64	d7, d7, d6
    c9ac:	ec598b17 	vmov	r8, r9, d7
    c9b0:	eaffff96 	b	c810 <double_to_string.constprop.2+0x228>
}
    c9b4:	eb0002a7 	bl	d458 <__stack_chk_fail>
    c9b8:	00000000 	.word	0x00000000
    c9bc:	412e8480 	.word	0x412e8480
    c9c0:	00002b38 	.word	0x00002b38
    c9c4:	0000000c 	.word	0x0000000c
    c9c8:	00001a1c 	.word	0x00001a1c
    c9cc:	000019c4 	.word	0x000019c4
    c9d0:	0000193c 	.word	0x0000193c
    c9d4:	00001904 	.word	0x00001904
    c9d8:	000018f4 	.word	0x000018f4
    c9dc:	000017e0 	.word	0x000017e0
    c9e0:	000017a0 	.word	0x000017a0
    c9e4:	00001788 	.word	0x00001788

0000c9e8 <_printf_engine>:
		str[wlen] = '\0';
	return wlen;
}

int _printf_engine(_printf_engine_output_func out, void *state, const char *fmt, va_list ap)
{
    c9e8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c9ec:	e1a0b000 	mov	fp, r0
    c9f0:	e59fc8c0 	ldr	ip, [pc, #2240]	; d2b8 <_printf_engine+0x8d0>
    c9f4:	e24dd05c 	sub	sp, sp, #92	; 0x5c
    c9f8:	e59fe8bc 	ldr	lr, [pc, #2236]	; d2bc <_printf_engine+0x8d4>
    c9fc:	e1a00002 	mov	r0, r2
				OUTPUT_CHAR(uc);
				break;
			case 's':
				s = va_arg(ap, const char *);
				if (s == 0)
					s = "<null>";
    ca00:	e59f28b8 	ldr	r2, [pc, #2232]	; d2c0 <_printf_engine+0x8d8>
{
    ca04:	e08fc00c 	add	ip, pc, ip
    ca08:	e1a0a001 	mov	sl, r1
    ca0c:	e58d3014 	str	r3, [sp, #20]
					s = "<null>";
    ca10:	e08f2002 	add	r2, pc, r2
    ca14:	e58d201c 	str	r2, [sp, #28]
{
    ca18:	e1a0300c 	mov	r3, ip
	size_t chars_written = 0;
    ca1c:	e3a06000 	mov	r6, #0
{
    ca20:	e79c300e 	ldr	r3, [ip, lr]
    ca24:	e58d3018 	str	r3, [sp, #24]
    ca28:	e5933000 	ldr	r3, [r3]
    ca2c:	e58d3054 	str	r3, [sp, #84]	; 0x54
		while ((c = *fmt++) != 0) {
    ca30:	e5d03000 	ldrb	r3, [r0]
		signchar = '\0';
    ca34:	e3a01000 	mov	r1, #0
		while ((c = *fmt++) != 0) {
    ca38:	e2804001 	add	r4, r0, #1
		signchar = '\0';
    ca3c:	e5cd102f 	strb	r1, [sp, #47]	; 0x2f
		while ((c = *fmt++) != 0) {
    ca40:	e1530001 	cmp	r3, r1
    ca44:	1a000004 	bne	ca5c <_printf_engine+0x74>
    ca48:	ea00006e 	b	cc08 <_printf_engine+0x220>
    ca4c:	e0441000 	sub	r1, r4, r0
    ca50:	e4d43001 	ldrb	r3, [r4], #1
    ca54:	e3530000 	cmp	r3, #0
    ca58:	0a00006b 	beq	cc0c <_printf_engine+0x224>
			if (c == '%')
    ca5c:	e3530025 	cmp	r3, #37	; 0x25
    ca60:	1afffff9 	bne	ca4c <_printf_engine+0x64>
		OUTPUT_STRING(s, string_len);
    ca64:	e1a0200a 	mov	r2, sl
    ca68:	e12fff3b 	blx	fp
    ca6c:	e2503000 	subs	r3, r0, #0
    ca70:	ba00006b 	blt	cc24 <_printf_engine+0x23c>
		format_num = 0;
    ca74:	e3a05000 	mov	r5, #0
		OUTPUT_STRING(s, string_len);
    ca78:	e0866003 	add	r6, r6, r3
		flags = 0;
    ca7c:	e1a09005 	mov	r9, r5
		c = *fmt++;
    ca80:	e4d48001 	ldrb	r8, [r4], #1
		if (c == 0)
    ca84:	e3580000 	cmp	r8, #0
    ca88:	0a000064 	beq	cc20 <_printf_engine+0x238>
		switch (c) {
    ca8c:	e2483020 	sub	r3, r8, #32
    ca90:	e353005a 	cmp	r3, #90	; 0x5a
    ca94:	908ff103 	addls	pc, pc, r3, lsl #2
    ca98:	ea000168 	b	d040 <_printf_engine+0x658>
    ca9c:	ea000119 	b	cf08 <_printf_engine+0x520>
    caa0:	ea000166 	b	d040 <_printf_engine+0x658>
    caa4:	ea000165 	b	d040 <_printf_engine+0x658>
    caa8:	ea000108 	b	ced0 <_printf_engine+0x4e8>
    caac:	ea000163 	b	d040 <_printf_engine+0x658>
    cab0:	ea000108 	b	ced8 <_printf_engine+0x4f0>
    cab4:	ea000161 	b	d040 <_printf_engine+0x658>
    cab8:	ea000160 	b	d040 <_printf_engine+0x658>
    cabc:	ea00015f 	b	d040 <_printf_engine+0x658>
    cac0:	ea00015e 	b	d040 <_printf_engine+0x658>
    cac4:	ea00015d 	b	d040 <_printf_engine+0x658>
    cac8:	ea000110 	b	cf10 <_printf_engine+0x528>
    cacc:	ea00015b 	b	d040 <_printf_engine+0x658>
    cad0:	ea000110 	b	cf18 <_printf_engine+0x530>
    cad4:	eaffffe9 	b	ca80 <_printf_engine+0x98>
    cad8:	ea000158 	b	d040 <_printf_engine+0x658>
    cadc:	ea00010f 	b	cf20 <_printf_engine+0x538>
    cae0:	ea00010e 	b	cf20 <_printf_engine+0x538>
    cae4:	ea00010d 	b	cf20 <_printf_engine+0x538>
    cae8:	ea00010c 	b	cf20 <_printf_engine+0x538>
    caec:	ea00010b 	b	cf20 <_printf_engine+0x538>
    caf0:	ea00010a 	b	cf20 <_printf_engine+0x538>
    caf4:	ea000109 	b	cf20 <_printf_engine+0x538>
    caf8:	ea000108 	b	cf20 <_printf_engine+0x538>
    cafc:	ea000107 	b	cf20 <_printf_engine+0x538>
    cb00:	ea000106 	b	cf20 <_printf_engine+0x538>
    cb04:	ea00014d 	b	d040 <_printf_engine+0x658>
    cb08:	ea00014c 	b	d040 <_printf_engine+0x658>
    cb0c:	ea00014b 	b	d040 <_printf_engine+0x658>
    cb10:	ea00014a 	b	d040 <_printf_engine+0x658>
    cb14:	ea000149 	b	d040 <_printf_engine+0x658>
    cb18:	ea000148 	b	d040 <_printf_engine+0x658>
    cb1c:	ea000147 	b	d040 <_printf_engine+0x658>
    cb20:	ea0000c1 	b	ce2c <_printf_engine+0x444>
    cb24:	ea000145 	b	d040 <_printf_engine+0x658>
    cb28:	ea000144 	b	d040 <_printf_engine+0x658>
    cb2c:	ea000143 	b	d040 <_printf_engine+0x658>
    cb30:	ea000142 	b	d040 <_printf_engine+0x658>
    cb34:	ea000096 	b	cd94 <_printf_engine+0x3ac>
    cb38:	ea000140 	b	d040 <_printf_engine+0x658>
    cb3c:	ea00013f 	b	d040 <_printf_engine+0x658>
    cb40:	ea00013e 	b	d040 <_printf_engine+0x658>
    cb44:	ea00013d 	b	d040 <_printf_engine+0x658>
    cb48:	ea00013c 	b	d040 <_printf_engine+0x658>
    cb4c:	ea00013b 	b	d040 <_printf_engine+0x658>
    cb50:	ea00013a 	b	d040 <_printf_engine+0x658>
    cb54:	ea000139 	b	d040 <_printf_engine+0x658>
    cb58:	ea000138 	b	d040 <_printf_engine+0x658>
    cb5c:	ea000137 	b	d040 <_printf_engine+0x658>
    cb60:	ea000136 	b	d040 <_printf_engine+0x658>
    cb64:	ea000135 	b	d040 <_printf_engine+0x658>
    cb68:	ea000134 	b	d040 <_printf_engine+0x658>
    cb6c:	ea000133 	b	d040 <_printf_engine+0x658>
    cb70:	ea000132 	b	d040 <_printf_engine+0x658>
    cb74:	ea000131 	b	d040 <_printf_engine+0x658>
    cb78:	ea000130 	b	d040 <_printf_engine+0x658>
    cb7c:	ea0000ee 	b	cf3c <_printf_engine+0x554>
    cb80:	ea00012e 	b	d040 <_printf_engine+0x658>
    cb84:	ea00012d 	b	d040 <_printf_engine+0x658>
    cb88:	ea00012c 	b	d040 <_printf_engine+0x658>
    cb8c:	ea00012b 	b	d040 <_printf_engine+0x658>
    cb90:	ea00012a 	b	d040 <_printf_engine+0x658>
    cb94:	ea000129 	b	d040 <_printf_engine+0x658>
    cb98:	ea000128 	b	d040 <_printf_engine+0x658>
    cb9c:	ea000127 	b	d040 <_printf_engine+0x658>
    cba0:	ea0000a2 	b	ce30 <_printf_engine+0x448>
    cba4:	ea000125 	b	d040 <_printf_engine+0x658>
    cba8:	ea0000e8 	b	cf50 <_printf_engine+0x568>
    cbac:	ea00010a 	b	cfdc <_printf_engine+0x5f4>
    cbb0:	ea000122 	b	d040 <_printf_engine+0x658>
    cbb4:	ea000077 	b	cd98 <_printf_engine+0x3b0>
    cbb8:	ea000120 	b	d040 <_printf_engine+0x658>
    cbbc:	ea00011b 	b	d030 <_printf_engine+0x648>
    cbc0:	ea000105 	b	cfdc <_printf_engine+0x5f4>
    cbc4:	ea0000f3 	b	cf98 <_printf_engine+0x5b0>
    cbc8:	ea00011c 	b	d040 <_printf_engine+0x658>
    cbcc:	ea0000ed 	b	cf88 <_printf_engine+0x5a0>
    cbd0:	ea00011a 	b	d040 <_printf_engine+0x658>
    cbd4:	ea0000a0 	b	ce5c <_printf_engine+0x474>
    cbd8:	ea000118 	b	d040 <_printf_engine+0x658>
    cbdc:	ea000018 	b	cc44 <_printf_engine+0x25c>
    cbe0:	ea000116 	b	d040 <_printf_engine+0x658>
    cbe4:	ea000115 	b	d040 <_printf_engine+0x658>
    cbe8:	ea000107 	b	d00c <_printf_engine+0x624>
    cbec:	ea0000eb 	b	cfa0 <_printf_engine+0x5b8>
    cbf0:	ea0000ec 	b	cfa8 <_printf_engine+0x5c0>
    cbf4:	ea000111 	b	d040 <_printf_engine+0x658>
    cbf8:	ea000110 	b	d040 <_printf_engine+0x658>
    cbfc:	ea000011 	b	cc48 <_printf_engine+0x260>
    cc00:	ea00010e 	b	d040 <_printf_engine+0x658>
    cc04:	ea0000af 	b	cec8 <_printf_engine+0x4e0>
    cc08:	e1a01003 	mov	r1, r3
		OUTPUT_STRING(s, string_len);
    cc0c:	e1a0200a 	mov	r2, sl
    cc10:	e12fff3b 	blx	fp
    cc14:	e2503000 	subs	r3, r0, #0
    cc18:	ba000001 	blt	cc24 <_printf_engine+0x23c>
    cc1c:	e0866003 	add	r6, r6, r3

#undef OUTPUT_STRING
#undef OUTPUT_CHAR

exit:
	return (err < 0) ? err : (int)chars_written;
    cc20:	e1a03006 	mov	r3, r6
}
    cc24:	e1a00003 	mov	r0, r3
    cc28:	e59d3018 	ldr	r3, [sp, #24]
    cc2c:	e59d2054 	ldr	r2, [sp, #84]	; 0x54
    cc30:	e5933000 	ldr	r3, [r3]
    cc34:	e1520003 	cmp	r2, r3
    cc38:	1a00019d 	bne	d2b4 <_printf_engine+0x8cc>
    cc3c:	e28dd05c 	add	sp, sp, #92	; 0x5c
    cc40:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
				flags |= LONGFLAG | ALTFLAG;
    cc44:	e3899081 	orr	r9, r9, #129	; 0x81
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    cc48:	e3190002 	tst	r9, #2
    cc4c:	159d3014 	ldrne	r3, [sp, #20]
    cc50:	0a00008c 	beq	ce88 <_printf_engine+0x4a0>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    cc54:	e2833007 	add	r3, r3, #7
    cc58:	e3c33007 	bic	r3, r3, #7
    cc5c:	e2832008 	add	r2, r3, #8
    cc60:	e58d2014 	str	r2, [sp, #20]
    cc64:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    cc68:	e58d9000 	str	r9, [sp]
    cc6c:	e28d0034 	add	r0, sp, #52	; 0x34
    cc70:	ebfffe42 	bl	c580 <longlong_to_hexstring.constprop.1>
				if (flags & ALTFLAG) {
    cc74:	e3190080 	tst	r9, #128	; 0x80
				s = longlong_to_hexstring(num_buffer, n, sizeof(num_buffer), flags);
    cc78:	e1a08000 	mov	r8, r0
				if (flags & ALTFLAG) {
    cc7c:	0a00004f 	beq	cdc0 <_printf_engine+0x3d8>
					OUTPUT_CHAR('0');
    cc80:	e28d7058 	add	r7, sp, #88	; 0x58
    cc84:	e3a03030 	mov	r3, #48	; 0x30
    cc88:	e1a0200a 	mov	r2, sl
    cc8c:	e3a01001 	mov	r1, #1
    cc90:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
    cc94:	e1a00007 	mov	r0, r7
    cc98:	e12fff3b 	blx	fp
    cc9c:	e2503000 	subs	r3, r0, #0
    cca0:	baffffdf 	blt	cc24 <_printf_engine+0x23c>
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    cca4:	e3190c01 	tst	r9, #256	; 0x100
					OUTPUT_CHAR('0');
    cca8:	e0836006 	add	r6, r3, r6
					OUTPUT_CHAR((flags & CAPSFLAG) ? 'X': 'x');
    ccac:	e1a00007 	mov	r0, r7
    ccb0:	03a03078 	moveq	r3, #120	; 0x78
    ccb4:	13a03058 	movne	r3, #88	; 0x58
    ccb8:	e1a0200a 	mov	r2, sl
    ccbc:	e5cd3030 	strb	r3, [sp, #48]	; 0x30
    ccc0:	e3a01001 	mov	r1, #1
    ccc4:	e12fff3b 	blx	fp
    ccc8:	e2503000 	subs	r3, r0, #0
    cccc:	baffffd4 	blt	cc24 <_printf_engine+0x23c>
    ccd0:	e0836006 	add	r6, r3, r6
			OUTPUT_STRING(s, SIZE_MAX);
    ccd4:	e1a00008 	mov	r0, r8
		if (flags & LEFTFORMATFLAG) {
    ccd8:	e3190b02 	tst	r9, #2048	; 0x800
    ccdc:	1a00003a 	bne	cdcc <_printf_engine+0x3e4>
    cce0:	e2097a01 	and	r7, r9, #4096	; 0x1000
    cce4:	e58d7020 	str	r7, [sp, #32]
			string_len = strlen(s);
    cce8:	eb000213 	bl	d53c <strlen>
			if (signchar != '\0' && format_num > 0)
    ccec:	e5dd302f 	ldrb	r3, [sp, #47]	; 0x2f
			string_len = strlen(s);
    ccf0:	e1a09000 	mov	r9, r0
			if (signchar != '\0' && format_num > 0)
    ccf4:	e3530000 	cmp	r3, #0
    ccf8:	0a00006e 	beq	ceb8 <_printf_engine+0x4d0>
    ccfc:	e3550000 	cmp	r5, #0
    cd00:	0a0000fd 	beq	d0fc <_printf_engine+0x714>
				format_num--;
    cd04:	e2455001 	sub	r5, r5, #1
			if (flags & LEADZEROFLAG && signchar != '\0')
    cd08:	e3570000 	cmp	r7, #0
    cd0c:	0a000165 	beq	d2a8 <_printf_engine+0x8c0>
				OUTPUT_CHAR(signchar);
    cd10:	e28d7058 	add	r7, sp, #88	; 0x58
    cd14:	e1a0200a 	mov	r2, sl
    cd18:	e3a01001 	mov	r1, #1
    cd1c:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
    cd20:	e1a00007 	mov	r0, r7
    cd24:	e12fff3b 	blx	fp
    cd28:	e2503000 	subs	r3, r0, #0
    cd2c:	baffffbc 	blt	cc24 <_printf_engine+0x23c>
    cd30:	e0866003 	add	r6, r6, r3
			for (; format_num > string_len; format_num--)
    cd34:	e1590005 	cmp	r9, r5
    cd38:	2a0000e2 	bcs	d0c8 <_printf_engine+0x6e0>
    cd3c:	e59d3020 	ldr	r3, [sp, #32]
    cd40:	e58d4024 	str	r4, [sp, #36]	; 0x24
    cd44:	e1a04009 	mov	r4, r9
    cd48:	e3530000 	cmp	r3, #0
    cd4c:	e1a09007 	mov	r9, r7
    cd50:	13a03030 	movne	r3, #48	; 0x30
    cd54:	03a03020 	moveq	r3, #32
    cd58:	e1a07003 	mov	r7, r3
    cd5c:	ea000003 	b	cd70 <_printf_engine+0x388>
    cd60:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    cd64:	e0866000 	add	r6, r6, r0
			for (; format_num > string_len; format_num--)
    cd68:	e1540005 	cmp	r4, r5
    cd6c:	0a0000c5 	beq	d088 <_printf_engine+0x6a0>
				OUTPUT_CHAR(flags & LEADZEROFLAG ? '0' : ' ');
    cd70:	e1a0200a 	mov	r2, sl
    cd74:	e3a01001 	mov	r1, #1
    cd78:	e1a00009 	mov	r0, r9
    cd7c:	e5cd7030 	strb	r7, [sp, #48]	; 0x30
    cd80:	e12fff3b 	blx	fp
    cd84:	e3500000 	cmp	r0, #0
    cd88:	aafffff4 	bge	cd60 <_printf_engine+0x378>
    cd8c:	e1a03000 	mov	r3, r0
    cd90:	eaffffa3 	b	cc24 <_printf_engine+0x23c>
				flags |= CAPSFLAG;
    cd94:	e3899c01 	orr	r9, r9, #256	; 0x100
				double d = va_arg(ap, double);
    cd98:	e59d3014 	ldr	r3, [sp, #20]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    cd9c:	e1a01009 	mov	r1, r9
    cda0:	e28d0034 	add	r0, sp, #52	; 0x34
				double d = va_arg(ap, double);
    cda4:	e2833007 	add	r3, r3, #7
    cda8:	e3c33007 	bic	r3, r3, #7
    cdac:	e2832008 	add	r2, r3, #8
    cdb0:	e58d2014 	str	r2, [sp, #20]
				s = double_to_string(num_buffer, sizeof(num_buffer), d, flags);
    cdb4:	ed930b00 	vldr	d0, [r3]
    cdb8:	ebfffe0a 	bl	c5e8 <double_to_string.constprop.2>
    cdbc:	e1a08000 	mov	r8, r0
			OUTPUT_STRING(s, SIZE_MAX);
    cdc0:	e1a00008 	mov	r0, r8
		if (flags & LEFTFORMATFLAG) {
    cdc4:	e3190b02 	tst	r9, #2048	; 0x800
    cdc8:	0affffc4 	beq	cce0 <_printf_engine+0x2f8>
			OUTPUT_STRING(s, SIZE_MAX);
    cdcc:	e1a0200a 	mov	r2, sl
    cdd0:	e3e01000 	mvn	r1, #0
    cdd4:	e12fff3b 	blx	fp
    cdd8:	e2503000 	subs	r3, r0, #0
    cddc:	baffff90 	blt	cc24 <_printf_engine+0x23c>
    cde0:	e1a08003 	mov	r8, r3
    cde4:	e0866003 	add	r6, r6, r3
			for (; format_num > written; format_num--)
    cde8:	e1530005 	cmp	r3, r5
    cdec:	2a000023 	bcs	ce80 <_printf_engine+0x498>
    cdf0:	e28d7030 	add	r7, sp, #48	; 0x30
				OUTPUT_CHAR(' ');
    cdf4:	e3a09020 	mov	r9, #32
    cdf8:	ea000003 	b	ce0c <_printf_engine+0x424>
			for (; format_num > written; format_num--)
    cdfc:	e2455001 	sub	r5, r5, #1
				OUTPUT_CHAR(' ');
    ce00:	e0866000 	add	r6, r6, r0
			for (; format_num > written; format_num--)
    ce04:	e1580005 	cmp	r8, r5
    ce08:	0a00001c 	beq	ce80 <_printf_engine+0x498>
				OUTPUT_CHAR(' ');
    ce0c:	e1a0200a 	mov	r2, sl
    ce10:	e3a01001 	mov	r1, #1
    ce14:	e1a00007 	mov	r0, r7
    ce18:	e5cd9030 	strb	r9, [sp, #48]	; 0x30
    ce1c:	e12fff3b 	blx	fp
    ce20:	e3500000 	cmp	r0, #0
    ce24:	aafffff4 	bge	cdfc <_printf_engine+0x414>
    ce28:	eaffffd7 	b	cd8c <_printf_engine+0x3a4>
				flags |= CAPSFLAG;
    ce2c:	e3899c01 	orr	r9, r9, #256	; 0x100
				double d = va_arg(ap, double);
    ce30:	e59d3014 	ldr	r3, [sp, #20]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    ce34:	e1a01009 	mov	r1, r9
    ce38:	e28d0034 	add	r0, sp, #52	; 0x34
				double d = va_arg(ap, double);
    ce3c:	e2833007 	add	r3, r3, #7
    ce40:	e3c33007 	bic	r3, r3, #7
    ce44:	e2832008 	add	r2, r3, #8
    ce48:	e58d2014 	str	r2, [sp, #20]
				s = double_to_hexstring(num_buffer, sizeof(num_buffer), d, flags);
    ce4c:	ed930b00 	vldr	d0, [r3]
    ce50:	ebfffca6 	bl	c0f0 <double_to_hexstring.isra.0>
    ce54:	e1a08000 	mov	r8, r0
				goto _output_string;
    ce58:	eaffffd8 	b	cdc0 <_printf_engine+0x3d8>
				ptr = va_arg(ap, void *);
    ce5c:	e59d3014 	ldr	r3, [sp, #20]
				if (flags & LONGLONGFLAG)
    ce60:	e3190002 	tst	r9, #2
				ptr = va_arg(ap, void *);
    ce64:	e2832004 	add	r2, r3, #4
    ce68:	e5933000 	ldr	r3, [r3]
				if (flags & LONGLONGFLAG)
    ce6c:	0a0000bc 	beq	d164 <_printf_engine+0x77c>
				ptr = va_arg(ap, void *);
    ce70:	e58d2014 	str	r2, [sp, #20]
					*(long long *)ptr = chars_written;
    ce74:	e3a02000 	mov	r2, #0
    ce78:	e5836000 	str	r6, [r3]
    ce7c:	e5832004 	str	r2, [r3, #4]
				ptr = va_arg(ap, void *);
    ce80:	e1a00004 	mov	r0, r4
    ce84:	eafffee9 	b	ca30 <_printf_engine+0x48>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    ce88:	e3190001 	tst	r9, #1
    ce8c:	1a000094 	bne	d0e4 <_printf_engine+0x6fc>
    ce90:	e3190008 	tst	r9, #8
    ce94:	1a0000bf 	bne	d198 <_printf_engine+0x7b0>
    ce98:	e3190004 	tst	r9, #4
    ce9c:	0a0000d0 	beq	d1e4 <_printf_engine+0x7fc>
    cea0:	e59d1014 	ldr	r1, [sp, #20]
    cea4:	e3a03000 	mov	r3, #0
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    cea8:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    ceac:	e15120b4 	ldrh	r2, [r1, #-4]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    ceb0:	e58d1014 	str	r1, [sp, #20]
    ceb4:	eaffff6b 	b	cc68 <_printf_engine+0x280>
			for (; format_num > string_len; format_num--)
    ceb8:	e1550000 	cmp	r5, r0
    cebc:	9a000072 	bls	d08c <_printf_engine+0x6a4>
    cec0:	e28d7030 	add	r7, sp, #48	; 0x30
    cec4:	eaffff9c 	b	cd3c <_printf_engine+0x354>
				flags |= SIZETFLAG;
    cec8:	e3899010 	orr	r9, r9, #16
				goto next_format;
    cecc:	eafffeeb 	b	ca80 <_printf_engine+0x98>
				flags |= ALTFLAG;
    ced0:	e3899080 	orr	r9, r9, #128	; 0x80
				goto next_format;
    ced4:	eafffee9 	b	ca80 <_printf_engine+0x98>
				OUTPUT_CHAR('%');
    ced8:	e28d7058 	add	r7, sp, #88	; 0x58
    cedc:	e3a03025 	mov	r3, #37	; 0x25
    cee0:	e1a0200a 	mov	r2, sl
    cee4:	e3a01001 	mov	r1, #1
    cee8:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
    ceec:	e1a00007 	mov	r0, r7
    cef0:	e12fff3b 	blx	fp
    cef4:	e2503000 	subs	r3, r0, #0
    cef8:	baffff49 	blt	cc24 <_printf_engine+0x23c>
				OUTPUT_CHAR(c);
    cefc:	e0836006 	add	r6, r3, r6
				ptr = va_arg(ap, void *);
    cf00:	e1a00004 	mov	r0, r4
    cf04:	eafffec9 	b	ca30 <_printf_engine+0x48>
				flags |= BLANKPOSFLAG;
    cf08:	e3899a02 	orr	r9, r9, #8192	; 0x2000
				goto next_format;
    cf0c:	eafffedb 	b	ca80 <_printf_engine+0x98>
				flags |= SHOWSIGNFLAG;
    cf10:	e3899c02 	orr	r9, r9, #512	; 0x200
				goto next_format;
    cf14:	eafffed9 	b	ca80 <_printf_engine+0x98>
				flags |= LEFTFORMATFLAG;
    cf18:	e3899b02 	orr	r9, r9, #2048	; 0x800
				goto next_format;
    cf1c:	eafffed7 	b	ca80 <_printf_engine+0x98>
				if (c == '0' && format_num == 0)
    cf20:	e3580030 	cmp	r8, #48	; 0x30
    cf24:	03550000 	cmpeq	r5, #0
				format_num += c - '0';
    cf28:	e3a0300a 	mov	r3, #10
    cf2c:	e2488030 	sub	r8, r8, #48	; 0x30
					flags |= LEADZEROFLAG;
    cf30:	03899a01 	orreq	r9, r9, #4096	; 0x1000
				format_num += c - '0';
    cf34:	e0258593 	mla	r5, r3, r5, r8
				goto next_format;
    cf38:	eafffed0 	b	ca80 <_printf_engine+0x98>
				flags |= CAPSFLAG;
    cf3c:	e3899c01 	orr	r9, r9, #256	; 0x100
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    cf40:	e3190002 	tst	r9, #2
    cf44:	159d3014 	ldrne	r3, [sp, #20]
    cf48:	1affff41 	bne	cc54 <_printf_engine+0x26c>
    cf4c:	eaffffcd 	b	ce88 <_printf_engine+0x4a0>
				uc = va_arg(ap, unsigned int);
    cf50:	e59d5014 	ldr	r5, [sp, #20]
    cf54:	e28d7058 	add	r7, sp, #88	; 0x58
				OUTPUT_CHAR(uc);
    cf58:	e1a0200a 	mov	r2, sl
    cf5c:	e3a01001 	mov	r1, #1
				uc = va_arg(ap, unsigned int);
    cf60:	e5953000 	ldr	r3, [r5]
    cf64:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
				OUTPUT_CHAR(uc);
    cf68:	e1a00007 	mov	r0, r7
    cf6c:	e12fff3b 	blx	fp
    cf70:	e2503000 	subs	r3, r0, #0
    cf74:	baffff2a 	blt	cc24 <_printf_engine+0x23c>
				uc = va_arg(ap, unsigned int);
    cf78:	e2852004 	add	r2, r5, #4
				OUTPUT_CHAR(uc);
    cf7c:	e0866003 	add	r6, r6, r3
				uc = va_arg(ap, unsigned int);
    cf80:	e58d2014 	str	r2, [sp, #20]
				break;
    cf84:	eaffffbd 	b	ce80 <_printf_engine+0x498>
				if (flags & LONGFLAG)
    cf88:	e3190001 	tst	r9, #1
					flags |= LONGLONGFLAG;
    cf8c:	13899002 	orrne	r9, r9, #2
				flags |= LONGFLAG;
    cf90:	e3899001 	orr	r9, r9, #1
				goto next_format;
    cf94:	eafffeb9 	b	ca80 <_printf_engine+0x98>
				flags |= INTMAXFLAG;
    cf98:	e3899020 	orr	r9, r9, #32
				goto next_format;
    cf9c:	eafffeb7 	b	ca80 <_printf_engine+0x98>
				flags |= PTRDIFFFLAG;
    cfa0:	e3899040 	orr	r9, r9, #64	; 0x40
				goto next_format;
    cfa4:	eafffeb5 	b	ca80 <_printf_engine+0x98>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, unsigned long long) :
    cfa8:	e3190002 	tst	r9, #2
    cfac:	159d3014 	ldrne	r3, [sp, #20]
    cfb0:	1a000055 	bne	d10c <_printf_engine+0x724>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    cfb4:	e3190001 	tst	r9, #1
    cfb8:	1a000082 	bne	d1c8 <_printf_engine+0x7e0>
    cfbc:	e3190008 	tst	r9, #8
    cfc0:	0a000098 	beq	d228 <_printf_engine+0x840>
    cfc4:	e59d1014 	ldr	r1, [sp, #20]
    cfc8:	e3a03000 	mov	r3, #0
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    cfcc:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    cfd0:	e5512004 	ldrb	r2, [r1, #-4]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    cfd4:	e58d1014 	str	r1, [sp, #20]
    cfd8:	ea000050 	b	d120 <_printf_engine+0x738>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    cfdc:	e3190002 	tst	r9, #2
    cfe0:	1a000057 	bne	d144 <_printf_engine+0x75c>
    cfe4:	e3190001 	tst	r9, #1
    cfe8:	1a000070 	bne	d1b0 <_printf_engine+0x7c8>
    cfec:	e3190008 	tst	r9, #8
    cff0:	0a000084 	beq	d208 <_printf_engine+0x820>
    cff4:	e59d1014 	ldr	r1, [sp, #20]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    cff8:	e2811004 	add	r1, r1, #4
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    cffc:	e15120d4 	ldrsb	r2, [r1, #-4]
				    (flags & HALFHALFFLAG) ? (signed char)va_arg(ap, int) :
    d000:	e58d1014 	str	r1, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d004:	e1a03fc2 	asr	r3, r2, #31
    d008:	ea000053 	b	d15c <_printf_engine+0x774>
				s = va_arg(ap, const char *);
    d00c:	e59d3014 	ldr	r3, [sp, #20]
				flags &= ~LEADZEROFLAG; /* doesn't make sense for strings */
    d010:	e3c99a01 	bic	r9, r9, #4096	; 0x1000
				s = va_arg(ap, const char *);
    d014:	e2833004 	add	r3, r3, #4
    d018:	e5138004 	ldr	r8, [r3, #-4]
    d01c:	e58d3014 	str	r3, [sp, #20]
					s = "<null>";
    d020:	e59d301c 	ldr	r3, [sp, #28]
				if (s == 0)
    d024:	e3580000 	cmp	r8, #0
					s = "<null>";
    d028:	01a08003 	moveq	r8, r3
				goto _output_string;
    d02c:	eaffff63 	b	cdc0 <_printf_engine+0x3d8>
				if (flags & HALFFLAG)
    d030:	e3190004 	tst	r9, #4
					flags |= HALFHALFFLAG;
    d034:	13899008 	orrne	r9, r9, #8
				flags |= HALFFLAG;
    d038:	e3899004 	orr	r9, r9, #4
				goto next_format;
    d03c:	eafffe8f 	b	ca80 <_printf_engine+0x98>
				OUTPUT_CHAR('%');
    d040:	e28d7058 	add	r7, sp, #88	; 0x58
    d044:	e3a03025 	mov	r3, #37	; 0x25
    d048:	e1a0200a 	mov	r2, sl
    d04c:	e3a01001 	mov	r1, #1
    d050:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
    d054:	e1a00007 	mov	r0, r7
    d058:	e12fff3b 	blx	fp
    d05c:	e2505000 	subs	r5, r0, #0
    d060:	ba00008e 	blt	d2a0 <_printf_engine+0x8b8>
				OUTPUT_CHAR(c);
    d064:	e1a00007 	mov	r0, r7
    d068:	e1a0200a 	mov	r2, sl
    d06c:	e3a01001 	mov	r1, #1
    d070:	e5cd8030 	strb	r8, [sp, #48]	; 0x30
    d074:	e12fff3b 	blx	fp
    d078:	e2503000 	subs	r3, r0, #0
    d07c:	bafffee8 	blt	cc24 <_printf_engine+0x23c>
				OUTPUT_CHAR('%');
    d080:	e0856006 	add	r6, r5, r6
    d084:	eaffff9c 	b	cefc <_printf_engine+0x514>
    d088:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
			if (!(flags & LEADZEROFLAG) && signchar != '\0')
    d08c:	e59d3020 	ldr	r3, [sp, #32]
    d090:	e3530000 	cmp	r3, #0
    d094:	1a00000b 	bne	d0c8 <_printf_engine+0x6e0>
    d098:	e5dd302f 	ldrb	r3, [sp, #47]	; 0x2f
    d09c:	e3530000 	cmp	r3, #0
    d0a0:	0a000008 	beq	d0c8 <_printf_engine+0x6e0>
				OUTPUT_CHAR(signchar);
    d0a4:	e28d7058 	add	r7, sp, #88	; 0x58
    d0a8:	e1a0200a 	mov	r2, sl
    d0ac:	e3a01001 	mov	r1, #1
    d0b0:	e5673028 	strb	r3, [r7, #-40]!	; 0xffffffd8
    d0b4:	e1a00007 	mov	r0, r7
    d0b8:	e12fff3b 	blx	fp
    d0bc:	e2503000 	subs	r3, r0, #0
    d0c0:	bafffed7 	blt	cc24 <_printf_engine+0x23c>
    d0c4:	e0866003 	add	r6, r6, r3
			OUTPUT_STRING(s, SIZE_MAX);
    d0c8:	e1a00008 	mov	r0, r8
    d0cc:	e1a0200a 	mov	r2, sl
    d0d0:	e3e01000 	mvn	r1, #0
    d0d4:	e12fff3b 	blx	fp
    d0d8:	e2503000 	subs	r3, r0, #0
    d0dc:	bafffed0 	blt	cc24 <_printf_engine+0x23c>
    d0e0:	eaffff85 	b	cefc <_printf_engine+0x514>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d0e4:	e59d3014 	ldr	r3, [sp, #20]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    d0e8:	e2833004 	add	r3, r3, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d0ec:	e5132004 	ldr	r2, [r3, #-4]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    d0f0:	e58d3014 	str	r3, [sp, #20]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d0f4:	e3a03000 	mov	r3, #0
    d0f8:	eafffeda 	b	cc68 <_printf_engine+0x280>
			if (flags & LEADZEROFLAG && signchar != '\0')
    d0fc:	e59d2020 	ldr	r2, [sp, #32]
    d100:	e3520000 	cmp	r2, #0
    d104:	1affff01 	bne	cd10 <_printf_engine+0x328>
    d108:	eaffffe5 	b	d0a4 <_printf_engine+0x6bc>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d10c:	e2833007 	add	r3, r3, #7
    d110:	e3c33007 	bic	r3, r3, #7
    d114:	e2832008 	add	r2, r3, #8
    d118:	e58d2014 	str	r2, [sp, #20]
    d11c:	e1c320d0 	ldrd	r2, [r3]
				s = longlong_to_string(num_buffer, n, sizeof(num_buffer), flags, &signchar);
    d120:	e28d102f 	add	r1, sp, #47	; 0x2f
    d124:	e58d9004 	str	r9, [sp, #4]
    d128:	e28d0034 	add	r0, sp, #52	; 0x34
    d12c:	e58d1008 	str	r1, [sp, #8]
    d130:	e3a01020 	mov	r1, #32
    d134:	e58d1000 	str	r1, [sp]
    d138:	ebfffb6e 	bl	bef8 <longlong_to_string>
    d13c:	e1a08000 	mov	r8, r0
				goto _output_string;
    d140:	eaffff1e 	b	cdc0 <_printf_engine+0x3d8>
				    (flags & INTMAXFLAG) ? va_arg(ap, intmax_t) :
    d144:	e59d3014 	ldr	r3, [sp, #20]
    d148:	e2833007 	add	r3, r3, #7
    d14c:	e3c33007 	bic	r3, r3, #7
    d150:	e2832008 	add	r2, r3, #8
    d154:	e58d2014 	str	r2, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d158:	e1c320d0 	ldrd	r2, [r3]
				flags |= SIGNEDFLAG;
    d15c:	e3899b01 	orr	r9, r9, #1024	; 0x400
    d160:	eaffffee 	b	d120 <_printf_engine+0x738>
				else if (flags & LONGFLAG)
    d164:	e3190001 	tst	r9, #1
    d168:	1a000007 	bne	d18c <_printf_engine+0x7a4>
				else if (flags & HALFHALFFLAG)
    d16c:	e3190008 	tst	r9, #8
					*(signed char *)ptr = chars_written;
    d170:	15c36000 	strbne	r6, [r3]
				ptr = va_arg(ap, void *);
    d174:	158d2014 	strne	r2, [sp, #20]
				else if (flags & HALFHALFFLAG)
    d178:	1affff40 	bne	ce80 <_printf_engine+0x498>
				else if (flags & HALFFLAG)
    d17c:	e3190004 	tst	r9, #4
					*(short *)ptr = chars_written;
    d180:	11c360b0 	strhne	r6, [r3]
				ptr = va_arg(ap, void *);
    d184:	158d2014 	strne	r2, [sp, #20]
				else if (flags & HALFFLAG)
    d188:	1affff3c 	bne	ce80 <_printf_engine+0x498>
					*(int *)ptr = chars_written;
    d18c:	e5836000 	str	r6, [r3]
				ptr = va_arg(ap, void *);
    d190:	e58d2014 	str	r2, [sp, #20]
    d194:	eaffff39 	b	ce80 <_printf_engine+0x498>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d198:	e59d1014 	ldr	r1, [sp, #20]
    d19c:	e3a03000 	mov	r3, #0
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    d1a0:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d1a4:	e5512004 	ldrb	r2, [r1, #-4]
				    (flags & HALFHALFFLAG) ? (unsigned char)va_arg(ap, unsigned int) :
    d1a8:	e58d1014 	str	r1, [sp, #20]
    d1ac:	eafffead 	b	cc68 <_printf_engine+0x280>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d1b0:	e59d3014 	ldr	r3, [sp, #20]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
    d1b4:	e2833004 	add	r3, r3, #4
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d1b8:	e5132004 	ldr	r2, [r3, #-4]
				    (flags & SIZETFLAG) ? va_arg(ap, ssize_t) :
    d1bc:	e58d3014 	str	r3, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d1c0:	e1a03fc2 	asr	r3, r2, #31
    d1c4:	eaffffe4 	b	d15c <_printf_engine+0x774>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d1c8:	e59d3014 	ldr	r3, [sp, #20]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    d1cc:	e2833004 	add	r3, r3, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d1d0:	e5130004 	ldr	r0, [r3, #-4]
				    (flags & SIZETFLAG) ? va_arg(ap, size_t) :
    d1d4:	e58d3014 	str	r3, [sp, #20]
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d1d8:	e3a03000 	mov	r3, #0
    d1dc:	e1a02000 	mov	r2, r0
    d1e0:	eaffffce 	b	d120 <_printf_engine+0x738>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d1e4:	e3190010 	tst	r9, #16
    d1e8:	1affffbd 	bne	d0e4 <_printf_engine+0x6fc>
    d1ec:	e59d3014 	ldr	r3, [sp, #20]
    d1f0:	e3190020 	tst	r9, #32
    d1f4:	1afffe96 	bne	cc54 <_printf_engine+0x26c>
    d1f8:	e4932004 	ldr	r2, [r3], #4
    d1fc:	e58d3014 	str	r3, [sp, #20]
    d200:	e3a03000 	mov	r3, #0
    d204:	eafffe97 	b	cc68 <_printf_engine+0x280>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d208:	e3190004 	tst	r9, #4
    d20c:	0a00000d 	beq	d248 <_printf_engine+0x860>
    d210:	e59d1014 	ldr	r1, [sp, #20]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    d214:	e2811004 	add	r1, r1, #4
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d218:	e15120f4 	ldrsh	r2, [r1, #-4]
				    (flags & HALFFLAG) ? (short)va_arg(ap, int) :
    d21c:	e58d1014 	str	r1, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d220:	e1a03fc2 	asr	r3, r2, #31
    d224:	eaffffcc 	b	d15c <_printf_engine+0x774>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d228:	e3190004 	tst	r9, #4
    d22c:	0a000011 	beq	d278 <_printf_engine+0x890>
    d230:	e59d1014 	ldr	r1, [sp, #20]
    d234:	e3a03000 	mov	r3, #0
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    d238:	e2811004 	add	r1, r1, #4
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d23c:	e15120b4 	ldrh	r2, [r1, #-4]
				    (flags & HALFFLAG) ? (unsigned short)va_arg(ap, unsigned int) :
    d240:	e58d1014 	str	r1, [sp, #20]
    d244:	eaffffb5 	b	d120 <_printf_engine+0x738>
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d248:	e3190010 	tst	r9, #16
    d24c:	1affffd7 	bne	d1b0 <_printf_engine+0x7c8>
    d250:	e3190020 	tst	r9, #32
    d254:	1affffba 	bne	d144 <_printf_engine+0x75c>
    d258:	e3190040 	tst	r9, #64	; 0x40
    d25c:	e59d2014 	ldr	r2, [sp, #20]
    d260:	e2823004 	add	r3, r2, #4
    d264:	059d2014 	ldreq	r2, [sp, #20]
    d268:	e5922000 	ldr	r2, [r2]
				    va_arg(ap, int);
    d26c:	e58d3014 	str	r3, [sp, #20]
				n = (flags & LONGLONGFLAG) ? va_arg(ap, long long) :
    d270:	e1a03fc2 	asr	r3, r2, #31
    d274:	eaffffb8 	b	d15c <_printf_engine+0x774>
				    (flags & LONGFLAG) ? va_arg(ap, unsigned long) :
    d278:	e3190010 	tst	r9, #16
    d27c:	1affffd1 	bne	d1c8 <_printf_engine+0x7e0>
    d280:	e59d3014 	ldr	r3, [sp, #20]
    d284:	e3190020 	tst	r9, #32
    d288:	1affff9f 	bne	d10c <_printf_engine+0x724>
    d28c:	e4930004 	ldr	r0, [r3], #4
    d290:	e58d3014 	str	r3, [sp, #20]
    d294:	e3a03000 	mov	r3, #0
    d298:	e1a02000 	mov	r2, r0
    d29c:	eaffff9f 	b	d120 <_printf_engine+0x738>
				OUTPUT_CHAR('%');
    d2a0:	e1a03005 	mov	r3, r5
    d2a4:	eafffe5e 	b	cc24 <_printf_engine+0x23c>
			for (; format_num > string_len; format_num--)
    d2a8:	e1500005 	cmp	r0, r5
    d2ac:	3affff03 	bcc	cec0 <_printf_engine+0x4d8>
    d2b0:	eaffff79 	b	d09c <_printf_engine+0x6b4>
}
    d2b4:	eb000067 	bl	d458 <__stack_chk_fail>
    d2b8:	00002730 	.word	0x00002730
    d2bc:	0000000c 	.word	0x0000000c
    d2c0:	0000165c 	.word	0x0000165c

0000d2c4 <vsnprintf>:
{
    d2c4:	e59fc070 	ldr	ip, [pc, #112]	; d33c <vsnprintf+0x78>
    d2c8:	e92d40f0 	push	{r4, r5, r6, r7, lr}
    d2cc:	e1a06000 	mov	r6, r0
    d2d0:	e59fe068 	ldr	lr, [pc, #104]	; d340 <vsnprintf+0x7c>
    d2d4:	e08fc00c 	add	ip, pc, ip
    d2d8:	e24dd014 	sub	sp, sp, #20
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    d2dc:	e59f0060 	ldr	r0, [pc, #96]	; d344 <vsnprintf+0x80>
{
    d2e0:	e1a04001 	mov	r4, r1
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    d2e4:	e1a0100d 	mov	r1, sp
	args.pos = 0;
    d2e8:	e3a07000 	mov	r7, #0
{
    d2ec:	e79c500e 	ldr	r5, [ip, lr]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    d2f0:	e08f0000 	add	r0, pc, r0
	args.len = len;
    d2f4:	e58d4004 	str	r4, [sp, #4]
	args.outstr = str;
    d2f8:	e58d6000 	str	r6, [sp]
{
    d2fc:	e595c000 	ldr	ip, [r5]
    d300:	e58dc00c 	str	ip, [sp, #12]
	args.pos = 0;
    d304:	e58d7008 	str	r7, [sp, #8]
	wlen = _printf_engine(&_vsnprintf_output, (void *)&args, fmt, ap);
    d308:	ebfffdb6 	bl	c9e8 <_printf_engine>
	if (args.pos >= len)
    d30c:	e59d3008 	ldr	r3, [sp, #8]
}
    d310:	e59d200c 	ldr	r2, [sp, #12]
	if (args.pos >= len)
    d314:	e1530004 	cmp	r3, r4
		str[wlen] = '\0';
    d318:	37c67000 	strbcc	r7, [r6, r0]
		str[len-1] = '\0';
    d31c:	20864004 	addcs	r4, r6, r4
    d320:	25447001 	strbcs	r7, [r4, #-1]
}
    d324:	e5953000 	ldr	r3, [r5]
    d328:	e1520003 	cmp	r2, r3
    d32c:	1a000001 	bne	d338 <vsnprintf+0x74>
    d330:	e28dd014 	add	sp, sp, #20
    d334:	e8bd80f0 	pop	{r4, r5, r6, r7, pc}
    d338:	eb000046 	bl	d458 <__stack_chk_fail>
    d33c:	00001e60 	.word	0x00001e60
    d340:	0000000c 	.word	0x0000000c
    d344:	ffffed88 	.word	0xffffed88

0000d348 <sprintf>:
{
    d348:	e92d000e 	push	{r1, r2, r3}
	return vsnprintf(str, INT_MAX, fmt, ap);
    d34c:	e3e01102 	mvn	r1, #-2147483648	; 0x80000000
{
    d350:	e59fc050 	ldr	ip, [pc, #80]	; d3a8 <sprintf+0x60>
    d354:	e92d4030 	push	{r4, r5, lr}
    d358:	e59fe04c 	ldr	lr, [pc, #76]	; d3ac <sprintf+0x64>
    d35c:	e08fc00c 	add	ip, pc, ip
    d360:	e24dd008 	sub	sp, sp, #8
	va_start(ap, fmt);
    d364:	e28d5018 	add	r5, sp, #24
	return vsnprintf(str, INT_MAX, fmt, ap);
    d368:	e1a03005 	mov	r3, r5
{
    d36c:	e79c400e 	ldr	r4, [ip, lr]
    d370:	e59d2014 	ldr	r2, [sp, #20]
	va_start(ap, fmt);
    d374:	e58d5000 	str	r5, [sp]
{
    d378:	e594c000 	ldr	ip, [r4]
    d37c:	e58dc004 	str	ip, [sp, #4]
	return vsnprintf(str, INT_MAX, fmt, ap);
    d380:	ebffffcf 	bl	d2c4 <vsnprintf>
}
    d384:	e59d2004 	ldr	r2, [sp, #4]
    d388:	e5943000 	ldr	r3, [r4]
    d38c:	e1520003 	cmp	r2, r3
    d390:	1a000003 	bne	d3a4 <sprintf+0x5c>
    d394:	e28dd008 	add	sp, sp, #8
    d398:	e8bd4030 	pop	{r4, r5, lr}
    d39c:	e28dd00c 	add	sp, sp, #12
    d3a0:	e12fff1e 	bx	lr
    d3a4:	eb00002b 	bl	d458 <__stack_chk_fail>
    d3a8:	00001dd8 	.word	0x00001dd8
    d3ac:	0000000c 	.word	0x0000000c

0000d3b0 <rand>:
	randseed ^= enp;
}

int rand(void)
{
	return (randseed = randseed * 1664525 + 1013904223);
    d3b0:	e59f3020 	ldr	r3, [pc, #32]	; d3d8 <rand+0x28>
    d3b4:	e306160d 	movw	r1, #26125	; 0x660d
    d3b8:	e3401019 	movt	r1, #25
    d3bc:	e08f3003 	add	r3, pc, r3
    d3c0:	e30f235f 	movw	r2, #62303	; 0xf35f
    d3c4:	e3432c6e 	movt	r2, #15470	; 0x3c6e
    d3c8:	e5930000 	ldr	r0, [r3]
    d3cc:	e0202091 	mla	r0, r1, r0, r2
    d3d0:	e5830000 	str	r0, [r3]
}
    d3d4:	e12fff1e 	bx	lr
    d3d8:	00001ea8 	.word	0x00001ea8

0000d3dc <vfprintf>:
	return getc(stdin);
}

int vfprintf(FILE *fp, const char *fmt, va_list ap)
{
	return fp->vfprintf(fp->ctx, fmt, ap);
    d3dc:	e5903010 	ldr	r3, [r0, #16]
    d3e0:	e5900000 	ldr	r0, [r0]
    d3e4:	e12fff13 	bx	r3

0000d3e8 <fprintf>:
}

int fprintf(FILE *fp, const char *fmt, ...)
{
    d3e8:	e92d000e 	push	{r1, r2, r3}
    d3ec:	e59f3058 	ldr	r3, [pc, #88]	; d44c <fprintf+0x64>
    d3f0:	e59fc058 	ldr	ip, [pc, #88]	; d450 <fprintf+0x68>
    d3f4:	e08f3003 	add	r3, pc, r3
    d3f8:	e92d4010 	push	{r4, lr}
    d3fc:	e24dd00c 	sub	sp, sp, #12
    d400:	e793400c 	ldr	r4, [r3, ip]
	va_list ap;
	int err;

	va_start(ap, fmt);
    d404:	e28de018 	add	lr, sp, #24
	return fp->vfprintf(fp->ctx, fmt, ap);
    d408:	e5903010 	ldr	r3, [r0, #16]
    d40c:	e1a0200e 	mov	r2, lr
{
    d410:	e59d1014 	ldr	r1, [sp, #20]
    d414:	e594c000 	ldr	ip, [r4]
	return fp->vfprintf(fp->ctx, fmt, ap);
    d418:	e5900000 	ldr	r0, [r0]
	va_start(ap, fmt);
    d41c:	e58de000 	str	lr, [sp]
{
    d420:	e58dc004 	str	ip, [sp, #4]
	return fp->vfprintf(fp->ctx, fmt, ap);
    d424:	e12fff33 	blx	r3
	err = vfprintf(fp, fmt, ap);
	va_end(ap);
	return err;
}
    d428:	e59d2004 	ldr	r2, [sp, #4]
    d42c:	e5943000 	ldr	r3, [r4]
    d430:	e1520003 	cmp	r2, r3
    d434:	1a000003 	bne	d448 <fprintf+0x60>
    d438:	e28dd00c 	add	sp, sp, #12
    d43c:	e8bd4010 	pop	{r4, lr}
    d440:	e28dd00c 	add	sp, sp, #12
    d444:	e12fff1e 	bx	lr
    d448:	eb000002 	bl	d458 <__stack_chk_fail>
    d44c:	00001d40 	.word	0x00001d40
    d450:	0000000c 	.word	0x0000000c

0000d454 <raise>:
#endif

/* needed by some piece of EABI */
void raise(void)
{
}
    d454:	e12fff1e 	bx	lr

0000d458 <__stack_chk_fail>:
		while (*_px == *_px) { }				\
	} while (1);

void __attribute__((noreturn)) __stack_chk_fail(void);
void __attribute__((noreturn)) __stack_chk_fail(void)
{
    d458:	e59f3030 	ldr	r3, [pc, #48]	; d490 <__stack_chk_fail+0x38>
    d45c:	e24dd008 	sub	sp, sp, #8
    d460:	e59f202c 	ldr	r2, [pc, #44]	; d494 <__stack_chk_fail+0x3c>
	TRUSTY_LIBC_BREAK()
    d464:	e3a01030 	mov	r1, #48	; 0x30
{
    d468:	e08f3003 	add	r3, pc, r3
    d46c:	e7933002 	ldr	r3, [r3, r2]
    d470:	e5933000 	ldr	r3, [r3]
    d474:	e58d3004 	str	r3, [sp, #4]
	TRUSTY_LIBC_BREAK()
    d478:	e58d1000 	str	r1, [sp]
    d47c:	e59d2000 	ldr	r2, [sp]
    d480:	e59d3000 	ldr	r3, [sp]
    d484:	e1520003 	cmp	r2, r3
    d488:	0afffffb 	beq	d47c <__stack_chk_fail+0x24>
    d48c:	eafffff9 	b	d478 <__stack_chk_fail+0x20>
    d490:	00001ccc 	.word	0x00001ccc
    d494:	0000000c 	.word	0x0000000c

0000d498 <memset>:

void *
memset(void *s, int c, size_t count)
{
	char *xs = (char *) s;
	size_t len = (-(size_t)s) & (sizeof(size_t)-1);
    d498:	e2603000 	rsb	r3, r0, #0
    d49c:	e2033003 	and	r3, r3, #3
	size_t cc = c & 0xff;

	if ( count > len ) {
    d4a0:	e1530002 	cmp	r3, r2
    d4a4:	2a00001b 	bcs	d518 <memset+0x80>
{
    d4a8:	e92d4010 	push	{r4, lr}
	size_t cc = c & 0xff;
    d4ac:	e6ef4071 	uxtb	r4, r1
		cc |= cc << 16;
		if (sizeof(size_t) == 8)
			cc |= (uint64_t)cc << 32; // should be optimized out on 32 bit machines

		// write to non-aligned memory byte-wise
		for ( ; len > 0; len-- )
    d4b0:	e3530000 	cmp	r3, #0
		cc |= cc << 8;
    d4b4:	e184e404 	orr	lr, r4, r4, lsl #8
		count -= len;
    d4b8:	e0422003 	sub	r2, r2, r3
	char *xs = (char *) s;
    d4bc:	01a03000 	moveq	r3, r0
		cc |= cc << 16;
    d4c0:	e18ee80e 	orr	lr, lr, lr, lsl #16
		for ( ; len > 0; len-- )
    d4c4:	0a000004 	beq	d4dc <memset+0x44>
    d4c8:	e080c003 	add	ip, r0, r3
	char *xs = (char *) s;
    d4cc:	e1a03000 	mov	r3, r0
			*xs++ = c;
    d4d0:	e4c34001 	strb	r4, [r3], #1
		for ( ; len > 0; len-- )
    d4d4:	e15c0003 	cmp	ip, r3
    d4d8:	1afffffc 	bne	d4d0 <memset+0x38>

		// write to aligned memory dword-wise
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    d4dc:	e1b0c122 	lsrs	ip, r2, #2
    d4e0:	0a000003 	beq	d4f4 <memset+0x5c>
    d4e4:	e083c10c 	add	ip, r3, ip, lsl #2
			*((size_t *)xs) = (size_t)cc;
    d4e8:	e483e004 	str	lr, [r3], #4
		for ( len = count/sizeof(size_t); len > 0; len-- ) {
    d4ec:	e15c0003 	cmp	ip, r3
    d4f0:	1afffffc 	bne	d4e8 <memset+0x50>
			xs += sizeof(size_t);
		}

		count &= sizeof(size_t)-1;
    d4f4:	e2022003 	and	r2, r2, #3
	}

	// write remaining bytes
	for ( ; count > 0; count-- )
    d4f8:	e3520000 	cmp	r2, #0
    d4fc:	08bd8010 	popeq	{r4, pc}
    d500:	e6ef1071 	uxtb	r1, r1
    d504:	e0832002 	add	r2, r3, r2
		*xs++ = c;
    d508:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    d50c:	e1520003 	cmp	r2, r3
    d510:	1afffffc 	bne	d508 <memset+0x70>
    d514:	e8bd8010 	pop	{r4, pc}
    d518:	e3520000 	cmp	r2, #0
	char *xs = (char *) s;
    d51c:	e1a03000 	mov	r3, r0
	for ( ; count > 0; count-- )
    d520:	012fff1e 	bxeq	lr
    d524:	e6ef1071 	uxtb	r1, r1
    d528:	e0802002 	add	r2, r0, r2
		*xs++ = c;
    d52c:	e4c31001 	strb	r1, [r3], #1
	for ( ; count > 0; count-- )
    d530:	e1520003 	cmp	r2, r3
    d534:	1afffffc 	bne	d52c <memset+0x94>
    d538:	e12fff1e 	bx	lr

0000d53c <strlen>:
strlen(char const *s)
{
	size_t i;

	i= 0;
	while (s[i]) {
    d53c:	e5d03000 	ldrb	r3, [r0]
    d540:	e3530000 	cmp	r3, #0
    d544:	0a000006 	beq	d564 <strlen+0x28>
    d548:	e1a03000 	mov	r3, r0
	i= 0;
    d54c:	e3a00000 	mov	r0, #0
	while (s[i]) {
    d550:	e5f32001 	ldrb	r2, [r3, #1]!
		i+= 1;
    d554:	e2800001 	add	r0, r0, #1
	while (s[i]) {
    d558:	e3520000 	cmp	r2, #0
    d55c:	1afffffb 	bne	d550 <strlen+0x14>
    d560:	e12fff1e 	bx	lr
	i= 0;
    d564:	e1a00003 	mov	r0, r3
	}

	return i;
}
    d568:	e12fff1e 	bx	lr

0000d56c <strnlen>:
size_t
strnlen(char const *s, size_t count)
{
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
    d56c:	e3510000 	cmp	r1, #0
    d570:	0a000010 	beq	d5b8 <strnlen+0x4c>
    d574:	e5d03000 	ldrb	r3, [r0]
    d578:	e3530000 	cmp	r3, #0
    d57c:	0a00000f 	beq	d5c0 <strnlen+0x54>
    d580:	e0801001 	add	r1, r0, r1
    d584:	e2803001 	add	r3, r0, #1
    d588:	ea000004 	b	d5a0 <strnlen+0x34>
    d58c:	e5d32000 	ldrb	r2, [r3]
    d590:	e283c001 	add	ip, r3, #1
    d594:	e3520000 	cmp	r2, #0
    d598:	0a000004 	beq	d5b0 <strnlen+0x44>
    d59c:	e1a0300c 	mov	r3, ip
    d5a0:	e1510003 	cmp	r1, r3
    d5a4:	1afffff8 	bne	d58c <strnlen+0x20>
    d5a8:	e0410000 	sub	r0, r1, r0
    d5ac:	e12fff1e 	bx	lr
    d5b0:	e0430000 	sub	r0, r3, r0
    d5b4:	e12fff1e 	bx	lr
    d5b8:	e1a00001 	mov	r0, r1
    d5bc:	e12fff1e 	bx	lr
    d5c0:	e1a00003 	mov	r0, r3
		;
	return sc - s;
}
    d5c4:	e12fff1e 	bx	lr

0000d5c8 <__aeabi_drsub>:
    d5c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    d5cc:	e002      	b.n	d5d4 <__adddf3>
    d5ce:	bf00      	nop

0000d5d0 <__aeabi_dsub>:
    d5d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000d5d4 <__adddf3>:
    d5d4:	b530      	push	{r4, r5, lr}
    d5d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
    d5da:	ea4f 0543 	mov.w	r5, r3, lsl #1
    d5de:	ea94 0f05 	teq	r4, r5
    d5e2:	bf08      	it	eq
    d5e4:	ea90 0f02 	teqeq	r0, r2
    d5e8:	bf1f      	itttt	ne
    d5ea:	ea54 0c00 	orrsne.w	ip, r4, r0
    d5ee:	ea55 0c02 	orrsne.w	ip, r5, r2
    d5f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    d5f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d5fa:	f000 80e2 	beq.w	d7c2 <__adddf3+0x1ee>
    d5fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
    d602:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    d606:	bfb8      	it	lt
    d608:	426d      	neglt	r5, r5
    d60a:	dd0c      	ble.n	d626 <__adddf3+0x52>
    d60c:	442c      	add	r4, r5
    d60e:	ea80 0202 	eor.w	r2, r0, r2
    d612:	ea81 0303 	eor.w	r3, r1, r3
    d616:	ea82 0000 	eor.w	r0, r2, r0
    d61a:	ea83 0101 	eor.w	r1, r3, r1
    d61e:	ea80 0202 	eor.w	r2, r0, r2
    d622:	ea81 0303 	eor.w	r3, r1, r3
    d626:	2d36      	cmp	r5, #54	; 0x36
    d628:	bf88      	it	hi
    d62a:	bd30      	pophi	{r4, r5, pc}
    d62c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    d630:	ea4f 3101 	mov.w	r1, r1, lsl #12
    d634:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    d638:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    d63c:	d002      	beq.n	d644 <__adddf3+0x70>
    d63e:	4240      	negs	r0, r0
    d640:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d644:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    d648:	ea4f 3303 	mov.w	r3, r3, lsl #12
    d64c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    d650:	d002      	beq.n	d658 <__adddf3+0x84>
    d652:	4252      	negs	r2, r2
    d654:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    d658:	ea94 0f05 	teq	r4, r5
    d65c:	f000 80a7 	beq.w	d7ae <__adddf3+0x1da>
    d660:	f1a4 0401 	sub.w	r4, r4, #1
    d664:	f1d5 0e20 	rsbs	lr, r5, #32
    d668:	db0d      	blt.n	d686 <__adddf3+0xb2>
    d66a:	fa02 fc0e 	lsl.w	ip, r2, lr
    d66e:	fa22 f205 	lsr.w	r2, r2, r5
    d672:	1880      	adds	r0, r0, r2
    d674:	f141 0100 	adc.w	r1, r1, #0
    d678:	fa03 f20e 	lsl.w	r2, r3, lr
    d67c:	1880      	adds	r0, r0, r2
    d67e:	fa43 f305 	asr.w	r3, r3, r5
    d682:	4159      	adcs	r1, r3
    d684:	e00e      	b.n	d6a4 <__adddf3+0xd0>
    d686:	f1a5 0520 	sub.w	r5, r5, #32
    d68a:	f10e 0e20 	add.w	lr, lr, #32
    d68e:	2a01      	cmp	r2, #1
    d690:	fa03 fc0e 	lsl.w	ip, r3, lr
    d694:	bf28      	it	cs
    d696:	f04c 0c02 	orrcs.w	ip, ip, #2
    d69a:	fa43 f305 	asr.w	r3, r3, r5
    d69e:	18c0      	adds	r0, r0, r3
    d6a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    d6a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d6a8:	d507      	bpl.n	d6ba <__adddf3+0xe6>
    d6aa:	f04f 0e00 	mov.w	lr, #0
    d6ae:	f1dc 0c00 	rsbs	ip, ip, #0
    d6b2:	eb7e 0000 	sbcs.w	r0, lr, r0
    d6b6:	eb6e 0101 	sbc.w	r1, lr, r1
    d6ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    d6be:	d31b      	bcc.n	d6f8 <__adddf3+0x124>
    d6c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    d6c4:	d30c      	bcc.n	d6e0 <__adddf3+0x10c>
    d6c6:	0849      	lsrs	r1, r1, #1
    d6c8:	ea5f 0030 	movs.w	r0, r0, rrx
    d6cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
    d6d0:	f104 0401 	add.w	r4, r4, #1
    d6d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
    d6d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    d6dc:	f080 809a 	bcs.w	d814 <__adddf3+0x240>
    d6e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    d6e4:	bf08      	it	eq
    d6e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    d6ea:	f150 0000 	adcs.w	r0, r0, #0
    d6ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    d6f2:	ea41 0105 	orr.w	r1, r1, r5
    d6f6:	bd30      	pop	{r4, r5, pc}
    d6f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    d6fc:	4140      	adcs	r0, r0
    d6fe:	eb41 0101 	adc.w	r1, r1, r1
    d702:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d706:	f1a4 0401 	sub.w	r4, r4, #1
    d70a:	d1e9      	bne.n	d6e0 <__adddf3+0x10c>
    d70c:	f091 0f00 	teq	r1, #0
    d710:	bf04      	itt	eq
    d712:	4601      	moveq	r1, r0
    d714:	2000      	moveq	r0, #0
    d716:	fab1 f381 	clz	r3, r1
    d71a:	bf08      	it	eq
    d71c:	3320      	addeq	r3, #32
    d71e:	f1a3 030b 	sub.w	r3, r3, #11
    d722:	f1b3 0220 	subs.w	r2, r3, #32
    d726:	da0c      	bge.n	d742 <__adddf3+0x16e>
    d728:	320c      	adds	r2, #12
    d72a:	dd08      	ble.n	d73e <__adddf3+0x16a>
    d72c:	f102 0c14 	add.w	ip, r2, #20
    d730:	f1c2 020c 	rsb	r2, r2, #12
    d734:	fa01 f00c 	lsl.w	r0, r1, ip
    d738:	fa21 f102 	lsr.w	r1, r1, r2
    d73c:	e00c      	b.n	d758 <__adddf3+0x184>
    d73e:	f102 0214 	add.w	r2, r2, #20
    d742:	bfd8      	it	le
    d744:	f1c2 0c20 	rsble	ip, r2, #32
    d748:	fa01 f102 	lsl.w	r1, r1, r2
    d74c:	fa20 fc0c 	lsr.w	ip, r0, ip
    d750:	bfdc      	itt	le
    d752:	ea41 010c 	orrle.w	r1, r1, ip
    d756:	4090      	lslle	r0, r2
    d758:	1ae4      	subs	r4, r4, r3
    d75a:	bfa2      	ittt	ge
    d75c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    d760:	4329      	orrge	r1, r5
    d762:	bd30      	popge	{r4, r5, pc}
    d764:	ea6f 0404 	mvn.w	r4, r4
    d768:	3c1f      	subs	r4, #31
    d76a:	da1c      	bge.n	d7a6 <__adddf3+0x1d2>
    d76c:	340c      	adds	r4, #12
    d76e:	dc0e      	bgt.n	d78e <__adddf3+0x1ba>
    d770:	f104 0414 	add.w	r4, r4, #20
    d774:	f1c4 0220 	rsb	r2, r4, #32
    d778:	fa20 f004 	lsr.w	r0, r0, r4
    d77c:	fa01 f302 	lsl.w	r3, r1, r2
    d780:	ea40 0003 	orr.w	r0, r0, r3
    d784:	fa21 f304 	lsr.w	r3, r1, r4
    d788:	ea45 0103 	orr.w	r1, r5, r3
    d78c:	bd30      	pop	{r4, r5, pc}
    d78e:	f1c4 040c 	rsb	r4, r4, #12
    d792:	f1c4 0220 	rsb	r2, r4, #32
    d796:	fa20 f002 	lsr.w	r0, r0, r2
    d79a:	fa01 f304 	lsl.w	r3, r1, r4
    d79e:	ea40 0003 	orr.w	r0, r0, r3
    d7a2:	4629      	mov	r1, r5
    d7a4:	bd30      	pop	{r4, r5, pc}
    d7a6:	fa21 f004 	lsr.w	r0, r1, r4
    d7aa:	4629      	mov	r1, r5
    d7ac:	bd30      	pop	{r4, r5, pc}
    d7ae:	f094 0f00 	teq	r4, #0
    d7b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    d7b6:	bf06      	itte	eq
    d7b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    d7bc:	3401      	addeq	r4, #1
    d7be:	3d01      	subne	r5, #1
    d7c0:	e74e      	b.n	d660 <__adddf3+0x8c>
    d7c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d7c6:	bf18      	it	ne
    d7c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    d7cc:	d029      	beq.n	d822 <__adddf3+0x24e>
    d7ce:	ea94 0f05 	teq	r4, r5
    d7d2:	bf08      	it	eq
    d7d4:	ea90 0f02 	teqeq	r0, r2
    d7d8:	d005      	beq.n	d7e6 <__adddf3+0x212>
    d7da:	ea54 0c00 	orrs.w	ip, r4, r0
    d7de:	bf04      	itt	eq
    d7e0:	4619      	moveq	r1, r3
    d7e2:	4610      	moveq	r0, r2
    d7e4:	bd30      	pop	{r4, r5, pc}
    d7e6:	ea91 0f03 	teq	r1, r3
    d7ea:	bf1e      	ittt	ne
    d7ec:	2100      	movne	r1, #0
    d7ee:	2000      	movne	r0, #0
    d7f0:	bd30      	popne	{r4, r5, pc}
    d7f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    d7f6:	d105      	bne.n	d804 <__adddf3+0x230>
    d7f8:	0040      	lsls	r0, r0, #1
    d7fa:	4149      	adcs	r1, r1
    d7fc:	bf28      	it	cs
    d7fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    d802:	bd30      	pop	{r4, r5, pc}
    d804:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    d808:	bf3c      	itt	cc
    d80a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    d80e:	bd30      	popcc	{r4, r5, pc}
    d810:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d814:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    d818:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    d81c:	f04f 0000 	mov.w	r0, #0
    d820:	bd30      	pop	{r4, r5, pc}
    d822:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    d826:	bf1a      	itte	ne
    d828:	4619      	movne	r1, r3
    d82a:	4610      	movne	r0, r2
    d82c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    d830:	bf1c      	itt	ne
    d832:	460b      	movne	r3, r1
    d834:	4602      	movne	r2, r0
    d836:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    d83a:	bf06      	itte	eq
    d83c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    d840:	ea91 0f03 	teqeq	r1, r3
    d844:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    d848:	bd30      	pop	{r4, r5, pc}
    d84a:	bf00      	nop

0000d84c <__aeabi_ui2d>:
    d84c:	f090 0f00 	teq	r0, #0
    d850:	bf04      	itt	eq
    d852:	2100      	moveq	r1, #0
    d854:	4770      	bxeq	lr
    d856:	b530      	push	{r4, r5, lr}
    d858:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d85c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d860:	f04f 0500 	mov.w	r5, #0
    d864:	f04f 0100 	mov.w	r1, #0
    d868:	e750      	b.n	d70c <__adddf3+0x138>
    d86a:	bf00      	nop

0000d86c <__aeabi_i2d>:
    d86c:	f090 0f00 	teq	r0, #0
    d870:	bf04      	itt	eq
    d872:	2100      	moveq	r1, #0
    d874:	4770      	bxeq	lr
    d876:	b530      	push	{r4, r5, lr}
    d878:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d87c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d880:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    d884:	bf48      	it	mi
    d886:	4240      	negmi	r0, r0
    d888:	f04f 0100 	mov.w	r1, #0
    d88c:	e73e      	b.n	d70c <__adddf3+0x138>
    d88e:	bf00      	nop

0000d890 <__aeabi_f2d>:
    d890:	0042      	lsls	r2, r0, #1
    d892:	ea4f 01e2 	mov.w	r1, r2, asr #3
    d896:	ea4f 0131 	mov.w	r1, r1, rrx
    d89a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    d89e:	bf1f      	itttt	ne
    d8a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    d8a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    d8a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    d8ac:	4770      	bxne	lr
    d8ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    d8b2:	bf08      	it	eq
    d8b4:	4770      	bxeq	lr
    d8b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    d8ba:	bf04      	itt	eq
    d8bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    d8c0:	4770      	bxeq	lr
    d8c2:	b530      	push	{r4, r5, lr}
    d8c4:	f44f 7460 	mov.w	r4, #896	; 0x380
    d8c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    d8cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    d8d0:	e71c      	b.n	d70c <__adddf3+0x138>
    d8d2:	bf00      	nop

0000d8d4 <__aeabi_ul2d>:
    d8d4:	ea50 0201 	orrs.w	r2, r0, r1
    d8d8:	bf08      	it	eq
    d8da:	4770      	bxeq	lr
    d8dc:	b530      	push	{r4, r5, lr}
    d8de:	f04f 0500 	mov.w	r5, #0
    d8e2:	e00a      	b.n	d8fa <__aeabi_l2d+0x16>

0000d8e4 <__aeabi_l2d>:
    d8e4:	ea50 0201 	orrs.w	r2, r0, r1
    d8e8:	bf08      	it	eq
    d8ea:	4770      	bxeq	lr
    d8ec:	b530      	push	{r4, r5, lr}
    d8ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    d8f2:	d502      	bpl.n	d8fa <__aeabi_l2d+0x16>
    d8f4:	4240      	negs	r0, r0
    d8f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    d8fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    d8fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
    d902:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    d906:	f43f aed8 	beq.w	d6ba <__adddf3+0xe6>
    d90a:	f04f 0203 	mov.w	r2, #3
    d90e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d912:	bf18      	it	ne
    d914:	3203      	addne	r2, #3
    d916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    d91a:	bf18      	it	ne
    d91c:	3203      	addne	r2, #3
    d91e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    d922:	f1c2 0320 	rsb	r3, r2, #32
    d926:	fa00 fc03 	lsl.w	ip, r0, r3
    d92a:	fa20 f002 	lsr.w	r0, r0, r2
    d92e:	fa01 fe03 	lsl.w	lr, r1, r3
    d932:	ea40 000e 	orr.w	r0, r0, lr
    d936:	fa21 f102 	lsr.w	r1, r1, r2
    d93a:	4414      	add	r4, r2
    d93c:	e6bd      	b.n	d6ba <__adddf3+0xe6>
    d93e:	bf00      	nop

0000d940 <__aeabi_uldivmod>:
    d940:	b953      	cbnz	r3, d958 <__aeabi_uldivmod+0x18>
    d942:	b94a      	cbnz	r2, d958 <__aeabi_uldivmod+0x18>
    d944:	2900      	cmp	r1, #0
    d946:	bf08      	it	eq
    d948:	2800      	cmpeq	r0, #0
    d94a:	bf1c      	itt	ne
    d94c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    d950:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    d954:	f000 b80c 	b.w	d970 <__aeabi_idiv0>
    d958:	f1ad 0c08 	sub.w	ip, sp, #8
    d95c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    d960:	f000 f80c 	bl	d97c <__udivmoddi4>
    d964:	f8dd e004 	ldr.w	lr, [sp, #4]
    d968:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d96c:	b004      	add	sp, #16
    d96e:	4770      	bx	lr

0000d970 <__aeabi_idiv0>:
    d970:	b502      	push	{r1, lr}
    d972:	f04f 0008 	mov.w	r0, #8
    d976:	f7ff ed6e 	blx	d454 <raise>
    d97a:	bd02      	pop	{r1, pc}

0000d97c <__udivmoddi4>:
    d97c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d980:	460d      	mov	r5, r1
    d982:	429d      	cmp	r5, r3
    d984:	4604      	mov	r4, r0
    d986:	bf08      	it	eq
    d988:	4290      	cmpeq	r0, r2
    d98a:	4611      	mov	r1, r2
    d98c:	f8dd e020 	ldr.w	lr, [sp, #32]
    d990:	bf3c      	itt	cc
    d992:	2000      	movcc	r0, #0
    d994:	4601      	movcc	r1, r0
    d996:	d368      	bcc.n	da6a <__udivmoddi4+0xee>
    d998:	461a      	mov	r2, r3
    d99a:	fab3 fc83 	clz	ip, r3
    d99e:	2b00      	cmp	r3, #0
    d9a0:	d06e      	beq.n	da80 <__udivmoddi4+0x104>
    d9a2:	fab5 f085 	clz	r0, r5
    d9a6:	2d00      	cmp	r5, #0
    d9a8:	d066      	beq.n	da78 <__udivmoddi4+0xfc>
    d9aa:	ebac 0c00 	sub.w	ip, ip, r0
    d9ae:	f1ac 0820 	sub.w	r8, ip, #32
    d9b2:	fa02 f70c 	lsl.w	r7, r2, ip
    d9b6:	fa01 f308 	lsl.w	r3, r1, r8
    d9ba:	f1cc 0920 	rsb	r9, ip, #32
    d9be:	431f      	orrs	r7, r3
    d9c0:	fa21 f309 	lsr.w	r3, r1, r9
    d9c4:	431f      	orrs	r7, r3
    d9c6:	fa01 f60c 	lsl.w	r6, r1, ip
    d9ca:	42bd      	cmp	r5, r7
    d9cc:	bf08      	it	eq
    d9ce:	42b4      	cmpeq	r4, r6
    d9d0:	bf3c      	itt	cc
    d9d2:	2000      	movcc	r0, #0
    d9d4:	4601      	movcc	r1, r0
    d9d6:	d30a      	bcc.n	d9ee <__udivmoddi4+0x72>
    d9d8:	2001      	movs	r0, #1
    d9da:	1ba4      	subs	r4, r4, r6
    d9dc:	fa00 f108 	lsl.w	r1, r0, r8
    d9e0:	fa20 f309 	lsr.w	r3, r0, r9
    d9e4:	eb65 0507 	sbc.w	r5, r5, r7
    d9e8:	4319      	orrs	r1, r3
    d9ea:	fa00 f00c 	lsl.w	r0, r0, ip
    d9ee:	f1bc 0f00 	cmp.w	ip, #0
    d9f2:	d03a      	beq.n	da6a <__udivmoddi4+0xee>
    d9f4:	087f      	lsrs	r7, r7, #1
    d9f6:	ea4f 0636 	mov.w	r6, r6, rrx
    d9fa:	4662      	mov	r2, ip
    d9fc:	e00a      	b.n	da14 <__udivmoddi4+0x98>
    d9fe:	1ba3      	subs	r3, r4, r6
    da00:	eb65 0a07 	sbc.w	sl, r5, r7
    da04:	18db      	adds	r3, r3, r3
    da06:	eb4a 0a0a 	adc.w	sl, sl, sl
    da0a:	1c5c      	adds	r4, r3, #1
    da0c:	f14a 0500 	adc.w	r5, sl, #0
    da10:	3a01      	subs	r2, #1
    da12:	d007      	beq.n	da24 <__udivmoddi4+0xa8>
    da14:	42bd      	cmp	r5, r7
    da16:	bf08      	it	eq
    da18:	42b4      	cmpeq	r4, r6
    da1a:	d2f0      	bcs.n	d9fe <__udivmoddi4+0x82>
    da1c:	1924      	adds	r4, r4, r4
    da1e:	416d      	adcs	r5, r5
    da20:	3a01      	subs	r2, #1
    da22:	d1f7      	bne.n	da14 <__udivmoddi4+0x98>
    da24:	fa24 f30c 	lsr.w	r3, r4, ip
    da28:	fa05 f909 	lsl.w	r9, r5, r9
    da2c:	fa25 f808 	lsr.w	r8, r5, r8
    da30:	ea43 0309 	orr.w	r3, r3, r9
    da34:	1900      	adds	r0, r0, r4
    da36:	fa25 f70c 	lsr.w	r7, r5, ip
    da3a:	ea43 0408 	orr.w	r4, r3, r8
    da3e:	f1ac 0620 	sub.w	r6, ip, #32
    da42:	f1cc 0220 	rsb	r2, ip, #32
    da46:	fa07 f30c 	lsl.w	r3, r7, ip
    da4a:	fa04 f606 	lsl.w	r6, r4, r6
    da4e:	fa04 fc0c 	lsl.w	ip, r4, ip
    da52:	ea43 0306 	orr.w	r3, r3, r6
    da56:	fa24 f202 	lsr.w	r2, r4, r2
    da5a:	eb45 0101 	adc.w	r1, r5, r1
    da5e:	4313      	orrs	r3, r2
    da60:	ebb0 000c 	subs.w	r0, r0, ip
    da64:	463d      	mov	r5, r7
    da66:	eb61 0103 	sbc.w	r1, r1, r3
    da6a:	f1be 0f00 	cmp.w	lr, #0
    da6e:	d001      	beq.n	da74 <__udivmoddi4+0xf8>
    da70:	e9ce 4500 	strd	r4, r5, [lr]
    da74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    da78:	fab4 f084 	clz	r0, r4
    da7c:	3020      	adds	r0, #32
    da7e:	e794      	b.n	d9aa <__udivmoddi4+0x2e>
    da80:	fab1 fc81 	clz	ip, r1
    da84:	fab5 f085 	clz	r0, r5
    da88:	f10c 0c20 	add.w	ip, ip, #32
    da8c:	2d00      	cmp	r5, #0
    da8e:	d18c      	bne.n	d9aa <__udivmoddi4+0x2e>
    da90:	e7f2      	b.n	da78 <__udivmoddi4+0xfc>
    da92:	bf00      	nop
